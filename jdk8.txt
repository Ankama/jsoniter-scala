[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 1, 2018 6:16:25 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:941:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.22.2-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.22.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 47 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.2-SNAPSHOT.jar ...
[info] Compiling 41 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 339 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 490 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -jvm /usr/lib/jvm/java-8-oracle/bin/java -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 417535.969 ops/s
[info] # Warmup Iteration   2: 788036.657 ops/s
[info] # Warmup Iteration   3: 800982.268 ops/s
[info] Iteration   1: 786467.433 ops/s
[info]                  ·gc.alloc.rate:                   2070.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3999.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 787917.612 ops/s
[info]                  ·gc.alloc.rate:                   2074.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4019.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 786291.473 ops/s
[info]                  ·gc.alloc.rate:                   2070.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2360.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4725.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 802417.747 ops/s
[info]                  ·gc.alloc.rate:                   2112.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3985.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 800299.835 ops/s
[info]                  ·gc.alloc.rate:                   2107.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4004.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   792678.820 ±(99.9%) 30743.431 ops/s [Average]
[info]   (min, avg, max) = (786291.473, 792678.820, 802417.747), stdev = 7983.971
[info]   CI (99.9%): [761935.389, 823422.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2087.187 ±(99.9%) 81.312 MB/sec [Average]
[info]   (min, avg, max) = (2070.271, 2087.187, 2112.803), stdev = 21.116
[info]   CI (99.9%): [2005.876, 2168.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2088.057 ±(99.9%) 589.905 MB/sec [Average]
[info]   (min, avg, max) = (1998.492, 2088.057, 2360.724), stdev = 153.197
[info]   CI (99.9%): [1498.151, 2677.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4146.952 ±(99.9%) 1246.061 B/op [Average]
[info]   (min, avg, max) = (3985.158, 4146.952, 4725.393), stdev = 323.598
[info]   CI (99.9%): [2900.892, 5393.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.198 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (0.164, 0.198, 0.249), stdev = 0.035
[info]   CI (99.9%): [0.063, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.30% complete, ETA 01:09:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 455096.455 ops/s
[info] # Warmup Iteration   2: 1539342.261 ops/s
[info] # Warmup Iteration   3: 1575387.304 ops/s
[info] Iteration   1: 1591052.058 ops/s
[info]                  ·gc.alloc.rate:                   1277.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1290.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1561471.553 ops/s
[info]                  ·gc.alloc.rate:                   1254.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1322.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1591121.084 ops/s
[info]                  ·gc.alloc.rate:                   1278.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1557501.766 ops/s
[info]                  ·gc.alloc.rate:                   1250.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1341.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1592095.454 ops/s
[info]                  ·gc.alloc.rate:                   1278.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1320.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1578648.383 ±(99.9%) 67591.308 ops/s [Average]
[info]   (min, avg, max) = (1557501.766, 1578648.383, 1592095.454), stdev = 17553.248
[info]   CI (99.9%): [1511057.075, 1646239.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1267.889 ±(99.9%) 54.476 MB/sec [Average]
[info]   (min, avg, max) = (1250.864, 1267.889, 1278.672), stdev = 14.147
[info]   CI (99.9%): [1213.414, 1322.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1254.211 ±(99.9%) 569.773 MB/sec [Average]
[info]   (min, avg, max) = (990.469, 1254.211, 1336.059), stdev = 147.968
[info]   CI (99.9%): [684.438, 1823.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1251.026 ±(99.9%) 588.844 B/op [Average]
[info]   (min, avg, max) = (979.481, 1251.026, 1341.908), stdev = 152.921
[info]   CI (99.9%): [662.182, 1839.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.147), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.61% complete, ETA 01:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2684651.361 ops/s
[info] # Warmup Iteration   2: 3603464.928 ops/s
[info] # Warmup Iteration   3: 3717436.221 ops/s
[info] Iteration   1: 3668929.813 ops/s
[info]                  ·gc.alloc.rate:               242.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 109.727 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3668753.180 ops/s
[info]                  ·gc.alloc.rate:               242.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 109.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 3724744.977 ops/s
[info]                  ·gc.alloc.rate:               246.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108.092 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 3715231.308 ops/s
[info]                  ·gc.alloc.rate:                   245.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3714540.380 ops/s
[info]                  ·gc.alloc.rate:                   245.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3698439.932 ±(99.9%) 105195.204 ops/s [Average]
[info]   (min, avg, max) = (3668753.180, 3698439.932, 3724744.977), stdev = 27318.860
[info]   CI (99.9%): [3593244.727, 3803635.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   244.436 ±(99.9%) 6.756 MB/sec [Average]
[info]   (min, avg, max) = (242.533, 244.436, 246.134), stdev = 1.754
[info]   CI (99.9%): [237.680, 251.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   271.708 ±(99.9%) 136.464 MB/sec [Average]
[info]   (min, avg, max) = (255.814, 271.708, 335.104), stdev = 35.439
[info]   CI (99.9%): [135.244, 408.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   115.580 ±(99.9%) 56.894 B/op [Average]
[info]   (min, avg, max) = (108.092, 115.580, 141.976), stdev = 14.775
[info]   CI (99.9%): [58.685, 172.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.300 ±(99.9%) 2.484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.454), stdev = 0.645
[info]   CI (99.9%): [≈ 0, 2.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.127 ±(99.9%) 1.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.616), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.91% complete, ETA 01:08:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32471.419 ops/s
[info] # Warmup Iteration   2: 165548.665 ops/s
[info] # Warmup Iteration   3: 166093.127 ops/s
[info] Iteration   1: 166146.627 ops/s
[info]                  ·gc.alloc.rate:                   1391.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1630.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15444.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.592 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 167091.933 ops/s
[info]                  ·gc.alloc.rate:                   1400.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12366.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.784 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 167325.126 ops/s
[info]                  ·gc.alloc.rate:                   1402.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12444.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 168827.322 ops/s
[info]                  ·gc.alloc.rate:                   1414.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12414.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 168941.461 ops/s
[info]                  ·gc.alloc.rate:                   1415.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15598.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.970 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   167666.494 ±(99.9%) 4608.609 ops/s [Average]
[info]   (min, avg, max) = (166146.627, 167666.494, 168941.461), stdev = 1196.841
[info]   CI (99.9%): [163057.885, 172275.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1404.861 ±(99.9%) 39.084 MB/sec [Average]
[info]   (min, avg, max) = (1391.816, 1404.861, 1415.764), stdev = 10.150
[info]   CI (99.9%): [1365.777, 1443.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13184.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.003, 13184.003, 13184.003), stdev = 0.001
[info]   CI (99.9%): [13184.002, 13184.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1454.841 ±(99.9%) 698.855 MB/sec [Average]
[info]   (min, avg, max) = (1313.286, 1454.841, 1675.072), stdev = 181.490
[info]   CI (99.9%): [755.986, 2153.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13653.708 ±(99.9%) 6570.442 B/op [Average]
[info]   (min, avg, max) = (12366.970, 13653.708, 15598.749), stdev = 1706.323
[info]   CI (99.9%): [7083.266, 20224.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.625 ±(99.9%) 1.108 B/op [Average]
[info]   (min, avg, max) = (0.196, 0.625, 0.970), stdev = 0.288
[info]   CI (99.9%): [≈ 0, 1.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.21% complete, ETA 01:08:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271934.149 ops/s
[info] # Warmup Iteration   2: 585114.690 ops/s
[info] # Warmup Iteration   3: 588828.321 ops/s
[info] Iteration   1: 600594.983 ops/s
[info]                  ·gc.alloc.rate:                   1987.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5233.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 596848.906 ops/s
[info]                  ·gc.alloc.rate:                   1975.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4416.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 584818.495 ops/s
[info]                  ·gc.alloc.rate:                   1935.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5437.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 593188.002 ops/s
[info]                  ·gc.alloc.rate:                   1963.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5384.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 593703.489 ops/s
[info]                  ·gc.alloc.rate:                   1964.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5393.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   593830.775 ±(99.9%) 22495.324 ops/s [Average]
[info]   (min, avg, max) = (584818.495, 593830.775, 600594.983), stdev = 5841.964
[info]   CI (99.9%): [571335.451, 616326.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1965.031 ±(99.9%) 74.421 MB/sec [Average]
[info]   (min, avg, max) = (1935.157, 1965.031, 1987.333), stdev = 19.327
[info]   CI (99.9%): [1890.610, 2039.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5208.001, 5208.001, 5208.001), stdev = 0.001
[info]   CI (99.9%): [5208.001, 5208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1951.220 ±(99.9%) 597.750 MB/sec [Average]
[info]   (min, avg, max) = (1674.727, 1951.220, 2034.445), stdev = 155.234
[info]   CI (99.9%): [1353.471, 2548.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5172.888 ±(99.9%) 1655.790 B/op [Average]
[info]   (min, avg, max) = (4416.107, 5172.888, 5437.328), stdev = 430.003
[info]   CI (99.9%): [3517.099, 6828.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.243 ±(99.9%) 0.187 B/op [Average]
[info]   (min, avg, max) = (0.168, 0.243, 0.276), stdev = 0.048
[info]   CI (99.9%): [0.056, 0.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.52% complete, ETA 01:08:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 730734.850 ops/s
[info] # Warmup Iteration   2: 2106749.111 ops/s
[info] # Warmup Iteration   3: 2085384.359 ops/s
[info] Iteration   1: 2067056.842 ops/s
[info]                  ·gc.alloc.rate:                   861.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     743.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2103050.327 ops/s
[info]                  ·gc.alloc.rate:                   876.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2086748.661 ops/s
[info]                  ·gc.alloc.rate:               869.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 493.393 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2087058.516 ops/s
[info]                  ·gc.alloc.rate:               869.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      984.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 742.733 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2083955.454 ops/s
[info]                  ·gc.alloc.rate:                   868.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2085573.960 ±(99.9%) 49256.285 ops/s [Average]
[info]   (min, avg, max) = (2067056.842, 2085573.960, 2103050.327), stdev = 12791.701
[info]   CI (99.9%): [2036317.675, 2134830.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   869.403 ±(99.9%) 21.108 MB/sec [Average]
[info]   (min, avg, max) = (861.524, 869.403, 876.981), stdev = 5.482
[info]   CI (99.9%): [848.296, 890.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   917.034 ±(99.9%) 566.178 MB/sec [Average]
[info]   (min, avg, max) = (654.185, 917.034, 990.491), stdev = 147.035
[info]   CI (99.9%): [350.855, 1483.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   691.982 ±(99.9%) 428.065 B/op [Average]
[info]   (min, avg, max) = (493.393, 691.982, 747.847), stdev = 111.167
[info]   CI (99.9%): [263.917, 1120.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.146), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.111), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.82% complete, ETA 01:07:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7833281.631 ops/s
[info] # Warmup Iteration   2: 9747278.164 ops/s
[info] # Warmup Iteration   3: 9989248.262 ops/s
[info] Iteration   1: 10381986.740 ops/s
[info]                  ·gc.alloc.rate:                   527.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9905660.821 ops/s
[info]                  ·gc.alloc.rate:                   503.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 10047937.921 ops/s
[info]                  ·gc.alloc.rate:                   510.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10070086.632 ops/s
[info]                  ·gc.alloc.rate:                   511.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 10059964.822 ops/s
[info]                  ·gc.alloc.rate:                   511.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   10093127.387 ±(99.9%) 673191.679 ops/s [Average]
[info]   (min, avg, max) = (9905660.821, 10093127.387, 10381986.740), stdev = 174825.741
[info]   CI (99.9%): [9419935.708, 10766319.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   513.075 ±(99.9%) 34.120 MB/sec [Average]
[info]   (min, avg, max) = (503.503, 513.075, 527.686), stdev = 8.861
[info]   CI (99.9%): [478.954, 547.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.659 ±(99.9%) 657.507 MB/sec [Average]
[info]   (min, avg, max) = (331.728, 515.659, 663.665), stdev = 170.753
[info]   CI (99.9%): [≈ 0, 1173.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   80.272 ±(99.9%) 101.118 B/op [Average]
[info]   (min, avg, max) = (51.848, 80.272, 103.930), stdev = 26.260
[info]   CI (99.9%): [≈ 0, 181.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.980 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.388, 1.772), stdev = 0.774
[info]   CI (99.9%): [≈ 0, 3.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.451 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.059, 0.269), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.12% complete, ETA 01:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68436.472 ops/s
[info] # Warmup Iteration   2: 313889.093 ops/s
[info] # Warmup Iteration   3: 318998.728 ops/s
[info] Iteration   1: 312826.800 ops/s
[info]                  ·gc.alloc.rate:                   968.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4908.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 321854.703 ops/s
[info]                  ·gc.alloc.rate:                   996.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4780.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 323277.300 ops/s
[info]                  ·gc.alloc.rate:                   1000.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4786.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 323046.436 ops/s
[info]                  ·gc.alloc.rate:                   999.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4809.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 323321.759 ops/s
[info]                  ·gc.alloc.rate:                   1001.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4836.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   320865.400 ±(99.9%) 17456.384 ops/s [Average]
[info]   (min, avg, max) = (312826.800, 320865.400, 323321.759), stdev = 4533.368
[info]   CI (99.9%): [303409.015, 338321.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   993.333 ±(99.9%) 54.271 MB/sec [Average]
[info]   (min, avg, max) = (968.363, 993.333, 1001.314), stdev = 14.094
[info]   CI (99.9%): [939.062, 1047.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   983.495 ±(99.9%) 28.719 MB/sec [Average]
[info]   (min, avg, max) = (975.561, 983.495, 993.997), stdev = 7.458
[info]   CI (99.9%): [954.776, 1012.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4824.250 ±(99.9%) 199.685 B/op [Average]
[info]   (min, avg, max) = (4780.202, 4824.250, 4908.220), stdev = 51.858
[info]   CI (99.9%): [4624.565, 5023.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.224 ±(99.9%) 0.427 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.224, 0.407), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.42% complete, ETA 01:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 923505.183 ops/s
[info] # Warmup Iteration   2: 1696953.146 ops/s
[info] # Warmup Iteration   3: 1702550.618 ops/s
[info] Iteration   1: 1696690.137 ops/s
[info]                  ·gc.alloc.rate:                   2621.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2489.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1700678.992 ops/s
[info]                  ·gc.alloc.rate:                   2627.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2499.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1709359.991 ops/s
[info]                  ·gc.alloc.rate:                   2642.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2496.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1711348.674 ops/s
[info]                  ·gc.alloc.rate:                   2645.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2187.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1686282.997 ops/s
[info]                  ·gc.alloc.rate:                   2606.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2540.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1700872.158 ±(99.9%) 39087.873 ops/s [Average]
[info]   (min, avg, max) = (1686282.997, 1700872.158, 1711348.674), stdev = 10150.996
[info]   CI (99.9%): [1661784.285, 1739960.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2628.843 ±(99.9%) 60.533 MB/sec [Average]
[info]   (min, avg, max) = (2606.802, 2628.843, 2645.209), stdev = 15.720
[info]   CI (99.9%): [2568.311, 2689.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2639.785 ±(99.9%) 564.650 MB/sec [Average]
[info]   (min, avg, max) = (2378.808, 2639.785, 2722.968), stdev = 146.638
[info]   CI (99.9%): [2075.135, 3204.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2442.577 ±(99.9%) 555.340 B/op [Average]
[info]   (min, avg, max) = (2187.072, 2442.577, 2540.376), stdev = 144.220
[info]   CI (99.9%): [1887.237, 2997.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.100 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.100, 0.135), stdev = 0.025
[info]   CI (99.9%): [0.004, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 11.000), stdev = 2.168
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.73% complete, ETA 01:07:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 983045.759 ops/s
[info] # Warmup Iteration   2: 2568771.580 ops/s
[info] # Warmup Iteration   3: 2599499.870 ops/s
[info] Iteration   1: 2591336.519 ops/s
[info]                  ·gc.alloc.rate:                   1817.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1197.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2570937.052 ops/s
[info]                  ·gc.alloc.rate:                   1803.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1016.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2561959.025 ops/s
[info]                  ·gc.alloc.rate:                   1797.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1233.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2578834.276 ops/s
[info]                  ·gc.alloc.rate:                   1809.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1026.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2607139.568 ops/s
[info]                  ·gc.alloc.rate:                   1828.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1019.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2582041.288 ±(99.9%) 68157.792 ops/s [Average]
[info]   (min, avg, max) = (2561959.025, 2582041.288, 2607139.568), stdev = 17700.362
[info]   CI (99.9%): [2513883.496, 2650199.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1811.182 ±(99.9%) 47.786 MB/sec [Average]
[info]   (min, avg, max) = (1797.067, 1811.182, 1828.780), stdev = 12.410
[info]   CI (99.9%): [1763.395, 1858.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1802.319 ±(99.9%) 662.456 MB/sec [Average]
[info]   (min, avg, max) = (1659.702, 1802.319, 2007.393), stdev = 172.038
[info]   CI (99.9%): [1139.864, 2464.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1098.802 ±(99.9%) 413.642 B/op [Average]
[info]   (min, avg, max) = (1016.029, 1098.802, 1233.211), stdev = 107.421
[info]   CI (99.9%): [685.160, 1512.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.056, 0.076), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.03% complete, ETA 01:07:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9057382.338 ops/s
[info] # Warmup Iteration   2: 10101213.327 ops/s
[info] # Warmup Iteration   3: 10366288.743 ops/s
[info] Iteration   1: 10189986.303 ops/s
[info]                  ·gc.alloc.rate:                   1294.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10393382.393 ops/s
[info]                  ·gc.alloc.rate:                   1321.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10334415.952 ops/s
[info]                  ·gc.alloc.rate:                   1313.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10531250.499 ops/s
[info]                  ·gc.alloc.rate:                   1338.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10521487.336 ops/s
[info]                  ·gc.alloc.rate:                   1337.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10394104.496 ±(99.9%) 545457.320 ops/s [Average]
[info]   (min, avg, max) = (10189986.303, 10394104.496, 10531250.499), stdev = 141653.534
[info]   CI (99.9%): [9848647.177, 10939561.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1320.988 ±(99.9%) 69.672 MB/sec [Average]
[info]   (min, avg, max) = (1294.792, 1320.988, 1338.387), stdev = 18.094
[info]   CI (99.9%): [1251.316, 1390.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.191 ±(99.9%) 22.745 MB/sec [Average]
[info]   (min, avg, max) = (1336.863, 1344.191, 1351.776), stdev = 5.907
[info]   CI (99.9%): [1321.446, 1366.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   203.535 ±(99.9%) 7.951 B/op [Average]
[info]   (min, avg, max) = (201.396, 203.535, 206.498), stdev = 2.065
[info]   CI (99.9%): [195.584, 211.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.011, 0.013), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.33% complete, ETA 01:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149750.919 ops/s
[info] # Warmup Iteration   2: 617733.431 ops/s
[info] # Warmup Iteration   3: 623346.745 ops/s
[info] Iteration   1: 631580.869 ops/s
[info]                  ·gc.alloc.rate:                   1669.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4077.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 630473.546 ops/s
[info]                  ·gc.alloc.rate:                   1666.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4118.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 632419.383 ops/s
[info]                  ·gc.alloc.rate:                   1671.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4141.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 616021.699 ops/s
[info]                  ·gc.alloc.rate:                   1628.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4279.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 620695.903 ops/s
[info]                  ·gc.alloc.rate:                   1640.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4271.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   626238.280 ±(99.9%) 28543.068 ops/s [Average]
[info]   (min, avg, max) = (616021.699, 626238.280, 632419.383), stdev = 7412.544
[info]   CI (99.9%): [597695.212, 654781.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1655.237 ±(99.9%) 75.540 MB/sec [Average]
[info]   (min, avg, max) = (1628.180, 1655.237, 1671.599), stdev = 19.617
[info]   CI (99.9%): [1579.697, 1730.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1661.960 ±(99.9%) 74.074 MB/sec [Average]
[info]   (min, avg, max) = (1636.410, 1661.960, 1684.376), stdev = 19.237
[info]   CI (99.9%): [1587.887, 1736.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4177.718 ±(99.9%) 354.266 B/op [Average]
[info]   (min, avg, max) = (4077.805, 4177.718, 4279.517), stdev = 92.002
[info]   CI (99.9%): [3823.452, 4531.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.230 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (0.160, 0.230, 0.364), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 11.000), stdev = 2.550
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.64% complete, ETA 01:06:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1221231.504 ops/s
[info] # Warmup Iteration   2: 2014754.133 ops/s
[info] # Warmup Iteration   3: 2117626.466 ops/s
[info] Iteration   1: 2110297.323 ops/s
[info]                  ·gc.alloc.rate:                   2048.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1491.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2131294.591 ops/s
[info]                  ·gc.alloc.rate:                   2069.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1486.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2128259.707 ops/s
[info]                  ·gc.alloc.rate:                   2067.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1496.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2094330.512 ops/s
[info]                  ·gc.alloc.rate:                   2033.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1526.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2089250.493 ops/s
[info]                  ·gc.alloc.rate:                   2028.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1534.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2110686.525 ±(99.9%) 73583.659 ops/s [Average]
[info]   (min, avg, max) = (2089250.493, 2110686.525, 2131294.591), stdev = 19109.443
[info]   CI (99.9%): [2037102.866, 2184270.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2049.417 ±(99.9%) 72.251 MB/sec [Average]
[info]   (min, avg, max) = (2028.259, 2049.417, 2069.346), stdev = 18.763
[info]   CI (99.9%): [1977.166, 2121.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1528.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1528.000, 1528.000, 1528.000), stdev = 0.001
[info]   CI (99.9%): [1528.000, 1528.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2020.987 ±(99.9%) 57.537 MB/sec [Average]
[info]   (min, avg, max) = (1999.559, 2020.987, 2036.338), stdev = 14.942
[info]   CI (99.9%): [1963.449, 2078.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1506.947 ±(99.9%) 84.084 B/op [Average]
[info]   (min, avg, max) = (1486.084, 1506.947, 1534.087), stdev = 21.836
[info]   CI (99.9%): [1422.864, 1591.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.130 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.065, 0.094), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.94% complete, ETA 01:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1975608.711 ops/s
[info] # Warmup Iteration   2: 5800553.399 ops/s
[info] # Warmup Iteration   3: 6059907.811 ops/s
[info] Iteration   1: 6014561.498 ops/s
[info]                  ·gc.alloc.rate:                   1651.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     427.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6057500.896 ops/s
[info]                  ·gc.alloc.rate:                   1662.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6086488.696 ops/s
[info]                  ·gc.alloc.rate:                   1670.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     430.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6097028.662 ops/s
[info]                  ·gc.alloc.rate:                   1673.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     432.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6102994.360 ops/s
[info]                  ·gc.alloc.rate:                   1675.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6071714.823 ±(99.9%) 140244.943 ops/s [Average]
[info]   (min, avg, max) = (6014561.498, 6071714.823, 6102994.360), stdev = 36421.166
[info]   CI (99.9%): [5931469.879, 6211959.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1666.694 ±(99.9%) 37.464 MB/sec [Average]
[info]   (min, avg, max) = (1651.551, 1666.694, 1675.145), stdev = 9.729
[info]   CI (99.9%): [1629.229, 1704.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1662.583 ±(99.9%) 74.219 MB/sec [Average]
[info]   (min, avg, max) = (1636.116, 1662.583, 1684.404), stdev = 19.274
[info]   CI (99.9%): [1588.364, 1736.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   430.924 ±(99.9%) 10.084 B/op [Average]
[info]   (min, avg, max) = (427.963, 430.924, 434.388), stdev = 2.619
[info]   CI (99.9%): [420.840, 441.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.024, 0.027), stdev = 0.005
[info]   CI (99.9%): [0.005, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.24% complete, ETA 01:06:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17314816.174 ops/s
[info] # Warmup Iteration   2: 22353768.065 ops/s
[info] # Warmup Iteration   3: 24079462.079 ops/s
[info] Iteration   1: 23951844.723 ops/s
[info]                  ·gc.alloc.rate:                   730.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23521647.147 ops/s
[info]                  ·gc.alloc.rate:                   717.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 24023988.240 ops/s
[info]                  ·gc.alloc.rate:                   732.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23195233.677 ops/s
[info]                  ·gc.alloc.rate:                   707.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23403792.997 ops/s
[info]                  ·gc.alloc.rate:                   713.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   23619301.357 ±(99.9%) 1375184.255 ops/s [Average]
[info]   (min, avg, max) = (23195233.677, 23619301.357, 24023988.240), stdev = 357130.984
[info]   CI (99.9%): [22244117.102, 24994485.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   720.429 ±(99.9%) 41.810 MB/sec [Average]
[info]   (min, avg, max) = (707.404, 720.429, 732.708), stdev = 10.858
[info]   CI (99.9%): [678.619, 762.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.645 ±(99.9%) 572.430 MB/sec [Average]
[info]   (min, avg, max) = (663.486, 730.645, 996.569), stdev = 148.658
[info]   CI (99.9%): [158.215, 1303.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   48.771 ±(99.9%) 40.629 B/op [Average]
[info]   (min, avg, max) = (43.465, 48.771, 67.621), stdev = 10.551
[info]   CI (99.9%): [8.142, 89.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.55% complete, ETA 01:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20424361.429 ops/s
[info] # Warmup Iteration   2: 28780224.464 ops/s
[info] # Warmup Iteration   3: 28667897.524 ops/s
[info] Iteration   1: 28657618.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 28695705.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28601054.174 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 28564392.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28685455.407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   28640845.076 ±(99.9%) 217053.550 ops/s [Average]
[info]   (min, avg, max) = (28564392.121, 28640845.076, 28695705.551), stdev = 56368.118
[info]   CI (99.9%): [28423791.526, 28857898.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.85% complete, ETA 01:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375654.661 ops/s
[info] # Warmup Iteration   2: 1291756.356 ops/s
[info] # Warmup Iteration   3: 1319248.750 ops/s
[info] Iteration   1: 1307070.542 ops/s
[info]                  ·gc.alloc.rate:                   1933.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1979.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1311080.090 ops/s
[info]                  ·gc.alloc.rate:                   1939.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2390.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1336403.405 ops/s
[info]                  ·gc.alloc.rate:                   1976.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2366.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1342756.010 ops/s
[info]                  ·gc.alloc.rate:                   1986.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2369.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1344335.210 ops/s
[info]                  ·gc.alloc.rate:                   1988.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2376.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1328329.051 ±(99.9%) 68854.971 ops/s [Average]
[info]   (min, avg, max) = (1307070.542, 1328329.051, 1344335.210), stdev = 17881.417
[info]   CI (99.9%): [1259474.080, 1397184.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1964.798 ±(99.9%) 101.926 MB/sec [Average]
[info]   (min, avg, max) = (1933.287, 1964.798, 1988.413), stdev = 26.470
[info]   CI (99.9%): [1862.872, 2066.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.360 ±(99.9%) 637.568 MB/sec [Average]
[info]   (min, avg, max) = (1644.289, 1939.360, 2029.725), stdev = 165.574
[info]   CI (99.9%): [1301.792, 2576.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2296.653 ±(99.9%) 682.599 B/op [Average]
[info]   (min, avg, max) = (1979.998, 2296.653, 2390.947), stdev = 177.269
[info]   CI (99.9%): [1614.054, 2979.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.099 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (0.073, 0.099, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.002, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.15% complete, ETA 01:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15494.438 ops/s
[info] # Warmup Iteration   2: 19321.046 ops/s
[info] # Warmup Iteration   3: 19134.515 ops/s
[info] Iteration   1: 19133.766 ops/s
[info]                  ·gc.alloc.rate:                   1354.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              111441.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109290.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.849 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 19441.533 ops/s
[info]                  ·gc.alloc.rate:                   1376.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107963.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.426 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 19327.946 ops/s
[info]                  ·gc.alloc.rate:                   1368.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              111447.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109028.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19415.233 ops/s
[info]                  ·gc.alloc.rate:                   1374.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108966.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19510.552 ops/s
[info]                  ·gc.alloc.rate:                   1381.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108785.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.717 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19365.806 ±(99.9%) 559.354 ops/s [Average]
[info]   (min, avg, max) = (19133.766, 19365.806, 19510.552), stdev = 145.263
[info]   CI (99.9%): [18806.452, 19925.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1371.322 ±(99.9%) 39.618 MB/sec [Average]
[info]   (min, avg, max) = (1354.879, 1371.322, 1381.521), stdev = 10.289
[info]   CI (99.9%): [1331.704, 1410.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   111446.615 ±(99.9%) 10.486 B/op [Average]
[info]   (min, avg, max) = (111441.783, 111446.615, 111448.024), stdev = 2.723
[info]   CI (99.9%): [111436.129, 111457.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1338.821 ±(99.9%) 30.574 MB/sec [Average]
[info]   (min, avg, max) = (1328.726, 1338.821, 1348.517), stdev = 7.940
[info]   CI (99.9%): [1308.247, 1369.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   108807.151 ±(99.9%) 1944.479 B/op [Average]
[info]   (min, avg, max) = (107963.853, 108807.151, 109290.595), stdev = 504.975
[info]   CI (99.9%): [106862.672, 110751.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.089 ±(99.9%) 7.400 B/op [Average]
[info]   (min, avg, max) = (3.390, 6.089, 8.426), stdev = 1.922
[info]   CI (99.9%): [≈ 0, 13.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.45% complete, ETA 01:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20707.104 ops/s
[info] # Warmup Iteration   2: 31258.392 ops/s
[info] # Warmup Iteration   3: 31030.850 ops/s
[info] Iteration   1: 31433.324 ops/s
[info]                  ·gc.alloc.rate:                   844.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              42275.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32754.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 31430.973 ops/s
[info]                  ·gc.alloc.rate:                   843.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49168.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.339 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 31176.889 ops/s
[info]                  ·gc.alloc.rate:                   837.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49735.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30805.007 ops/s
[info]                  ·gc.alloc.rate:                   826.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33659.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31531.166 ops/s
[info]                  ·gc.alloc.rate:                   846.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49559.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31275.472 ±(99.9%) 1131.743 ops/s [Average]
[info]   (min, avg, max) = (30805.007, 31275.472, 31531.166), stdev = 293.910
[info]   CI (99.9%): [30143.729, 32407.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   839.737 ±(99.9%) 30.833 MB/sec [Average]
[info]   (min, avg, max) = (826.914, 839.737, 846.675), stdev = 8.007
[info]   CI (99.9%): [808.904, 870.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42253.423 ±(99.9%) 46.574 B/op [Average]
[info]   (min, avg, max) = (42248.014, 42253.423, 42275.060), stdev = 12.095
[info]   CI (99.9%): [42206.849, 42299.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   854.701 ±(99.9%) 696.958 MB/sec [Average]
[info]   (min, avg, max) = (654.164, 854.701, 993.198), stdev = 180.998
[info]   CI (99.9%): [157.742, 1551.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42975.281 ±(99.9%) 34368.579 B/op [Average]
[info]   (min, avg, max) = (32754.450, 42975.281, 49735.229), stdev = 8925.411
[info]   CI (99.9%): [8606.702, 77343.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.452 ±(99.9%) 9.247 B/op [Average]
[info]   (min, avg, max) = (3.127, 5.452, 8.339), stdev = 2.401
[info]   CI (99.9%): [≈ 0, 14.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.76% complete, ETA 01:05:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26923.290 ops/s
[info] # Warmup Iteration   2: 29044.619 ops/s
[info] # Warmup Iteration   3: 28341.657 ops/s
[info] Iteration   1: 28463.692 ops/s
[info]                  ·gc.alloc.rate:               382.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          21144.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28287.132 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 28313.978 ops/s
[info]                  ·gc.alloc.rate:                   380.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18477.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.960 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28399.926 ops/s
[info]                  ·gc.alloc.rate:                   381.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18420.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.154 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29340.089 ops/s
[info]                  ·gc.alloc.rate:                   394.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17831.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.350 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28492.475 ops/s
[info]                  ·gc.alloc.rate:               382.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18361.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   28602.032 ±(99.9%) 1610.484 ops/s [Average]
[info]   (min, avg, max) = (28313.978, 28602.032, 29340.089), stdev = 418.238
[info]   CI (99.9%): [26991.548, 30212.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   384.320 ±(99.9%) 21.507 MB/sec [Average]
[info]   (min, avg, max) = (380.543, 384.320, 394.188), stdev = 5.585
[info]   CI (99.9%): [362.813, 405.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.016 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (21144.015, 21144.016, 21144.022), stdev = 0.003
[info]   CI (99.9%): [21144.005, 21144.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   368.311 ±(99.9%) 308.730 MB/sec [Average]
[info]   (min, avg, max) = (332.407, 368.311, 511.734), stdev = 80.176
[info]   CI (99.9%): [59.580, 677.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20275.633 ±(99.9%) 17273.985 B/op [Average]
[info]   (min, avg, max) = (17831.224, 20275.633, 28287.132), stdev = 4485.999
[info]   CI (99.9%): [3001.648, 37549.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.344 ±(99.9%) 2.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 1.637), stdev = 0.723
[info]   CI (99.9%): [≈ 0, 3.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.093 ±(99.9%) 154.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.093, 90.960), stdev = 40.198
[info]   CI (99.9%): [≈ 0, 173.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.06% complete, ETA 01:05:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14467.279 ops/s
[info] # Warmup Iteration   2: 25356.346 ops/s
[info] # Warmup Iteration   3: 25413.588 ops/s
[info] Iteration   1: 25102.180 ops/s
[info]                  ·gc.alloc.rate:                   1299.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82299.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25364.132 ops/s
[info]                  ·gc.alloc.rate:                   1312.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81883.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25932.564 ops/s
[info]                  ·gc.alloc.rate:                   1342.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80572.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.790 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25456.175 ops/s
[info]                  ·gc.alloc.rate:                   1317.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82531.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.861 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25525.091 ops/s
[info]                  ·gc.alloc.rate:                   1321.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82722.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.851 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25476.028 ±(99.9%) 1160.810 ops/s [Average]
[info]   (min, avg, max) = (25102.180, 25476.028, 25932.564), stdev = 301.459
[info]   CI (99.9%): [24315.218, 26636.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1318.635 ±(99.9%) 60.529 MB/sec [Average]
[info]   (min, avg, max) = (1299.187, 1318.635, 1342.506), stdev = 15.719
[info]   CI (99.9%): [1258.105, 1379.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81456.018 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (81456.017, 81456.018, 81456.025), stdev = 0.003
[info]   CI (99.9%): [81456.005, 81456.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1327.383 ±(99.9%) 44.548 MB/sec [Average]
[info]   (min, avg, max) = (1312.645, 1327.383, 1341.598), stdev = 11.569
[info]   CI (99.9%): [1282.835, 1371.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82002.218 ±(99.9%) 3304.774 B/op [Average]
[info]   (min, avg, max) = (80572.617, 82002.218, 82722.867), stdev = 858.239
[info]   CI (99.9%): [78697.444, 85306.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.111 ±(99.9%) 8.896 B/op [Average]
[info]   (min, avg, max) = (1.305, 4.111, 7.750), stdev = 2.310
[info]   CI (99.9%): [≈ 0, 13.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.36% complete, ETA 01:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17998.092 ops/s
[info] # Warmup Iteration   2: 27495.759 ops/s
[info] # Warmup Iteration   3: 27549.436 ops/s
[info] Iteration   1: 27647.127 ops/s
[info]                  ·gc.alloc.rate:                   1893.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              107792.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113651.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.740 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27143.261 ops/s
[info]                  ·gc.alloc.rate:                   1858.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              107765.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97101.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.242 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27890.323 ops/s
[info]                  ·gc.alloc.rate:                   1909.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113991.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.873 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 27270.400 ops/s
[info]                  ·gc.alloc.rate:                   1867.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117044.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.604 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27659.964 ops/s
[info]                  ·gc.alloc.rate:                   1893.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96427.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.553 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27522.215 ±(99.9%) 1182.308 ops/s [Average]
[info]   (min, avg, max) = (27143.261, 27522.215, 27890.323), stdev = 307.042
[info]   CI (99.9%): [26339.907, 28704.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1884.510 ±(99.9%) 80.920 MB/sec [Average]
[info]   (min, avg, max) = (1858.601, 1884.510, 1909.400), stdev = 21.015
[info]   CI (99.9%): [1803.591, 1965.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   107762.628 ±(99.9%) 66.905 B/op [Average]
[info]   (min, avg, max) = (107752.015, 107762.628, 107792.017), stdev = 17.375
[info]   CI (99.9%): [107695.723, 107829.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1882.833 ±(99.9%) 698.457 MB/sec [Average]
[info]   (min, avg, max) = (1674.694, 1882.833, 2028.064), stdev = 181.387
[info]   CI (99.9%): [1184.375, 2581.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   107643.553 ±(99.9%) 38588.228 B/op [Average]
[info]   (min, avg, max) = (96427.752, 107643.553, 117044.533), stdev = 10021.240
[info]   CI (99.9%): [69055.325, 146231.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.003 ±(99.9%) 6.057 B/op [Average]
[info]   (min, avg, max) = (3.553, 5.003, 7.242), stdev = 1.573
[info]   CI (99.9%): [≈ 0, 11.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.67% complete, ETA 01:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11663.296 ops/s
[info] # Warmup Iteration   2: 26916.587 ops/s
[info] # Warmup Iteration   3: 26992.471 ops/s
[info] Iteration   1: 26604.152 ops/s
[info]                  ·gc.alloc.rate:                   1560.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96845.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.158 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27037.908 ops/s
[info]                  ·gc.alloc.rate:                   1585.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76853.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.847 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27299.979 ops/s
[info]                  ·gc.alloc.rate:                   1601.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95909.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.600 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27319.459 ops/s
[info]                  ·gc.alloc.rate:                   1603.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96457.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.195 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 27314.861 ops/s
[info]                  ·gc.alloc.rate:                   1602.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96973.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.798 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   27115.272 ±(99.9%) 1191.327 ops/s [Average]
[info]   (min, avg, max) = (26604.152, 27115.272, 27319.459), stdev = 309.384
[info]   CI (99.9%): [25923.945, 28306.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1590.553 ±(99.9%) 70.414 MB/sec [Average]
[info]   (min, avg, max) = (1560.378, 1590.553, 1603.142), stdev = 18.286
[info]   CI (99.9%): [1520.140, 1660.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   92312.017 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (92312.016, 92312.017, 92312.023), stdev = 0.003
[info]   CI (99.9%): [92312.005, 92312.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1595.826 ±(99.9%) 596.753 MB/sec [Average]
[info]   (min, avg, max) = (1320.349, 1595.826, 1682.959), stdev = 154.975
[info]   CI (99.9%): [999.073, 2192.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92608.083 ±(99.9%) 33949.952 B/op [Average]
[info]   (min, avg, max) = (76853.695, 92608.083, 96973.801), stdev = 8816.695
[info]   CI (99.9%): [58658.131, 126558.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.320 ±(99.9%) 5.333 B/op [Average]
[info]   (min, avg, max) = (3.600, 5.320, 7.195), stdev = 1.385
[info]   CI (99.9%): [≈ 0, 10.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 6.97% complete, ETA 01:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23148.587 ops/s
[info] # Warmup Iteration   2: 30695.081 ops/s
[info] # Warmup Iteration   3: 30303.048 ops/s
[info] Iteration   1: 30739.579 ops/s
[info]                  ·gc.alloc.rate:                   1705.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85215.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.263 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 31026.657 ops/s
[info]                  ·gc.alloc.rate:                   1721.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84914.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 30740.206 ops/s
[info]                  ·gc.alloc.rate:                   1705.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86082.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.066 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 30104.492 ops/s
[info]                  ·gc.alloc.rate:                   1670.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88231.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.442 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30891.351 ops/s
[info]                  ·gc.alloc.rate:                   1714.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86221.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30700.457 ±(99.9%) 1362.948 ops/s [Average]
[info]   (min, avg, max) = (30104.492, 30700.457, 31026.657), stdev = 353.953
[info]   CI (99.9%): [29337.509, 32063.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1703.627 ±(99.9%) 76.164 MB/sec [Average]
[info]   (min, avg, max) = (1670.382, 1703.627, 1721.767), stdev = 19.779
[info]   CI (99.9%): [1627.463, 1779.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   87328.016 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (87328.014, 87328.016, 87328.020), stdev = 0.003
[info]   CI (99.9%): [87328.005, 87328.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1680.106 ±(99.9%) 43.310 MB/sec [Average]
[info]   (min, avg, max) = (1664.395, 1680.106, 1692.970), stdev = 11.247
[info]   CI (99.9%): [1636.796, 1723.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   86133.223 ±(99.9%) 4998.763 B/op [Average]
[info]   (min, avg, max) = (84914.652, 86133.223, 88231.668), stdev = 1298.163
[info]   CI (99.9%): [81134.460, 91131.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.693 ±(99.9%) 8.939 B/op [Average]
[info]   (min, avg, max) = (1.066, 4.693, 7.392), stdev = 2.321
[info]   CI (99.9%): [≈ 0, 13.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.27% complete, ETA 01:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23036.362 ops/s
[info] # Warmup Iteration   2: 30976.078 ops/s
[info] # Warmup Iteration   3: 30541.352 ops/s
[info] Iteration   1: 30887.808 ops/s
[info]                  ·gc.alloc.rate:                   1653.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84821.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30911.163 ops/s
[info]                  ·gc.alloc.rate:                   1654.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85236.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.300 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 30543.984 ops/s
[info]                  ·gc.alloc.rate:                   1634.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69286.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.218 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30619.040 ops/s
[info]                  ·gc.alloc.rate:                   1638.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86682.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30618.887 ops/s
[info]                  ·gc.alloc.rate:                   1639.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86953.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30716.176 ±(99.9%) 655.821 ops/s [Average]
[info]   (min, avg, max) = (30543.984, 30716.176, 30911.163), stdev = 170.315
[info]   CI (99.9%): [30060.355, 31371.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1644.253 ±(99.9%) 35.351 MB/sec [Average]
[info]   (min, avg, max) = (1634.990, 1644.253, 1654.843), stdev = 9.181
[info]   CI (99.9%): [1608.902, 1679.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   84248.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (84248.014, 84248.015, 84248.019), stdev = 0.002
[info]   CI (99.9%): [84248.006, 84248.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1612.310 ±(99.9%) 577.630 MB/sec [Average]
[info]   (min, avg, max) = (1344.625, 1612.310, 1691.647), stdev = 150.009
[info]   CI (99.9%): [1034.680, 2189.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   82595.835 ±(99.9%) 28864.470 B/op [Average]
[info]   (min, avg, max) = (69286.063, 82595.835, 86953.329), stdev = 7496.011
[info]   CI (99.9%): [53731.365, 111460.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4.048 ±(99.9%) 5.282 B/op [Average]
[info]   (min, avg, max) = (2.140, 4.048, 5.303), stdev = 1.372
[info]   CI (99.9%): [≈ 0, 9.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.58% complete, ETA 01:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4922.966 ops/s
[info] # Warmup Iteration   2: 8045.118 ops/s
[info] # Warmup Iteration   3: 8320.685 ops/s
[info] Iteration   1: 8298.141 ops/s
[info]                  ·gc.alloc.rate:                   1173.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249384.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.844 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8102.994 ops/s
[info]                  ·gc.alloc.rate:                   1145.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192314.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8383.348 ops/s
[info]                  ·gc.alloc.rate:                   1185.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248982.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.816 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8423.523 ops/s
[info]                  ·gc.alloc.rate:                   1191.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186752.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8250.762 ops/s
[info]                  ·gc.alloc.rate:                   1166.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255409.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.942 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8291.754 ±(99.9%) 483.651 ops/s [Average]
[info]   (min, avg, max) = (8102.994, 8291.754, 8423.523), stdev = 125.603
[info]   CI (99.9%): [7808.102, 8775.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1172.611 ±(99.9%) 68.905 MB/sec [Average]
[info]   (min, avg, max) = (1145.838, 1172.611, 1191.668), stdev = 17.894
[info]   CI (99.9%): [1103.705, 1241.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   222544.054 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (222544.052, 222544.054, 222544.057), stdev = 0.002
[info]   CI (99.9%): [222544.044, 222544.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1194.079 ±(99.9%) 700.331 MB/sec [Average]
[info]   (min, avg, max) = (990.191, 1194.079, 1338.989), stdev = 181.874
[info]   CI (99.9%): [493.749, 1894.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   226568.471 ±(99.9%) 130771.616 B/op [Average]
[info]   (min, avg, max) = (186752.319, 226568.471, 255409.326), stdev = 33960.973
[info]   CI (99.9%): [95796.855, 357340.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.693 ±(99.9%) 6.798 B/op [Average]
[info]   (min, avg, max) = (7.779, 8.693, 11.844), stdev = 1.765
[info]   CI (99.9%): [1.895, 15.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.88% complete, ETA 01:04:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13317.117 ops/s
[info] # Warmup Iteration   2: 17872.449 ops/s
[info] # Warmup Iteration   3: 17778.234 ops/s
[info] Iteration   1: 17797.879 ops/s
[info]                  ·gc.alloc.rate:                   1535.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117568.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.522 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17766.575 ops/s
[info]                  ·gc.alloc.rate:                   1532.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147933.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.688 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17898.899 ops/s
[info]                  ·gc.alloc.rate:                   1543.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147604.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.982 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17599.777 ops/s
[info]                  ·gc.alloc.rate:                   1517.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120506.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.446 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17914.047 ops/s
[info]                  ·gc.alloc.rate:                   1545.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148467.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.486 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17795.435 ±(99.9%) 486.670 ops/s [Average]
[info]   (min, avg, max) = (17599.777, 17795.435, 17914.047), stdev = 126.387
[info]   CI (99.9%): [17308.765, 18282.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1534.810 ±(99.9%) 42.012 MB/sec [Average]
[info]   (min, avg, max) = (1517.933, 1534.810, 1545.053), stdev = 10.910
[info]   CI (99.9%): [1492.798, 1576.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   135736.026 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (135736.024, 135736.026, 135736.033), stdev = 0.004
[info]   CI (99.9%): [135736.012, 135736.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1543.173 ±(99.9%) 720.011 MB/sec [Average]
[info]   (min, avg, max) = (1329.599, 1543.173, 1689.970), stdev = 186.985
[info]   CI (99.9%): [823.162, 2263.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   136415.996 ±(99.9%) 61230.446 B/op [Average]
[info]   (min, avg, max) = (117568.683, 136415.996, 148467.313), stdev = 15901.352
[info]   CI (99.9%): [75185.549, 197646.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.625 ±(99.9%) 10.685 B/op [Average]
[info]   (min, avg, max) = (3.688, 6.625, 10.982), stdev = 2.775
[info]   CI (99.9%): [≈ 0, 17.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.18% complete, ETA 01:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27373.139 ops/s
[info] # Warmup Iteration   2: 40537.705 ops/s
[info] # Warmup Iteration   3: 41566.959 ops/s
[info] Iteration   1: 41148.470 ops/s
[info]                  ·gc.alloc.rate:                   1135.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              43449.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50089.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.777 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41075.124 ops/s
[info]                  ·gc.alloc.rate:                   1133.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37814.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41416.592 ops/s
[info]                  ·gc.alloc.rate:                   1143.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50261.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41836.878 ops/s
[info]                  ·gc.alloc.rate:                   1155.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37514.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41806.869 ops/s
[info]                  ·gc.alloc.rate:                   1154.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50280.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.351 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   41456.787 ±(99.9%) 1374.103 ops/s [Average]
[info]   (min, avg, max) = (41075.124, 41456.787, 41836.878), stdev = 356.850
[info]   CI (99.9%): [40082.684, 42830.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1144.604 ±(99.9%) 38.698 MB/sec [Average]
[info]   (min, avg, max) = (1133.862, 1144.604, 1155.395), stdev = 10.050
[info]   CI (99.9%): [1105.906, 1183.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43448.288 ±(99.9%) 2.385 B/op [Average]
[info]   (min, avg, max) = (43448.010, 43448.288, 43449.396), stdev = 0.619
[info]   CI (99.9%): [43445.902, 43450.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.539 ±(99.9%) 698.170 MB/sec [Average]
[info]   (min, avg, max) = (986.849, 1190.539, 1335.963), stdev = 181.312
[info]   CI (99.9%): [492.369, 1888.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45192.371 ±(99.9%) 26465.935 B/op [Average]
[info]   (min, avg, max) = (37514.477, 45192.371, 50280.891), stdev = 6873.119
[info]   CI (99.9%): [18726.435, 71658.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.164 ±(99.9%) 3.782 B/op [Average]
[info]   (min, avg, max) = (2.351, 3.164, 4.777), stdev = 0.982
[info]   CI (99.9%): [≈ 0, 6.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.48% complete, ETA 01:03:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56395.023 ops/s
[info] # Warmup Iteration   2: 61212.241 ops/s
[info] # Warmup Iteration   3: 61887.304 ops/s
[info] Iteration   1: 61885.112 ops/s
[info]                  ·gc.alloc.rate:                   799.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16907.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 59334.530 ops/s
[info]                  ·gc.alloc.rate:                   766.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26452.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.761 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 59535.514 ops/s
[info]                  ·gc.alloc.rate:                   769.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17593.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 60846.617 ops/s
[info]                  ·gc.alloc.rate:                   786.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17238.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60766.332 ops/s
[info]                  ·gc.alloc.rate:                   785.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25940.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.617 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   60473.621 ±(99.9%) 4036.150 ops/s [Average]
[info]   (min, avg, max) = (59334.530, 60473.621, 61885.112), stdev = 1048.175
[info]   CI (99.9%): [56437.471, 64509.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   781.457 ±(99.9%) 52.309 MB/sec [Average]
[info]   (min, avg, max) = (766.649, 781.457, 799.680), stdev = 13.585
[info]   CI (99.9%): [729.148, 833.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.007, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.199 ±(99.9%) 704.394 MB/sec [Average]
[info]   (min, avg, max) = (664.875, 799.199, 1001.938), stdev = 182.929
[info]   CI (99.9%): [94.805, 1503.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20826.317 ±(99.9%) 18911.329 B/op [Average]
[info]   (min, avg, max) = (16907.871, 20826.317, 26452.062), stdev = 4911.212
[info]   CI (99.9%): [1914.988, 39737.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.629 ±(99.9%) 2.631 B/op [Average]
[info]   (min, avg, max) = (1.077, 1.629, 2.761), stdev = 0.683
[info]   CI (99.9%): [≈ 0, 4.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 8.79% complete, ETA 01:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13913.739 ops/s
[info] # Warmup Iteration   2: 31151.705 ops/s
[info] # Warmup Iteration   3: 31433.189 ops/s
[info] Iteration   1: 31887.149 ops/s
[info]                  ·gc.alloc.rate:                   2163.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2312.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114125.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.164 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 31656.346 ops/s
[info]                  ·gc.alloc.rate:                   2147.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99588.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.140 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 32006.489 ops/s
[info]                  ·gc.alloc.rate:                   2171.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99151.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.094 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 31610.594 ops/s
[info]                  ·gc.alloc.rate:                   2145.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2366.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117772.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.073 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 31480.117 ops/s
[info]                  ·gc.alloc.rate:                   2135.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101696.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.245 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   31728.139 ±(99.9%) 824.184 ops/s [Average]
[info]   (min, avg, max) = (31480.117, 31728.139, 32006.489), stdev = 214.038
[info]   CI (99.9%): [30903.955, 32552.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2152.441 ±(99.9%) 55.471 MB/sec [Average]
[info]   (min, avg, max) = (2135.434, 2152.441, 2171.113), stdev = 14.406
[info]   CI (99.9%): [2096.970, 2207.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   106760.015 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (106760.013, 106760.015, 106760.020), stdev = 0.003
[info]   CI (99.9%): [106760.005, 106760.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2146.495 ±(99.9%) 683.619 MB/sec [Average]
[info]   (min, avg, max) = (2003.015, 2146.495, 2366.569), stdev = 177.534
[info]   CI (99.9%): [1462.876, 2830.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106466.870 ±(99.9%) 33901.117 B/op [Average]
[info]   (min, avg, max) = (99151.554, 106466.870, 117772.437), stdev = 8804.012
[info]   CI (99.9%): [72565.753, 140367.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.543 ±(99.9%) 6.666 B/op [Average]
[info]   (min, avg, max) = (2.073, 4.543, 6.245), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 11.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.09% complete, ETA 01:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16310.179 ops/s
[info] # Warmup Iteration   2: 27904.727 ops/s
[info] # Warmup Iteration   3: 28346.284 ops/s
[info] Iteration   1: 28628.329 ops/s
[info]                  ·gc.alloc.rate:                   1668.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90326.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.722 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28252.718 ops/s
[info]                  ·gc.alloc.rate:                   1646.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92304.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.638 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 28695.946 ops/s
[info]                  ·gc.alloc.rate:                   1672.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91591.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.567 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28368.624 ops/s
[info]                  ·gc.alloc.rate:                   1654.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93164.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.774 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28661.523 ops/s
[info]                  ·gc.alloc.rate:                   1671.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92673.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.859 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   28521.428 ±(99.9%) 763.033 ops/s [Average]
[info]   (min, avg, max) = (28252.718, 28521.428, 28695.946), stdev = 198.157
[info]   CI (99.9%): [27758.395, 29284.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1662.697 ±(99.9%) 44.539 MB/sec [Average]
[info]   (min, avg, max) = (1646.697, 1662.697, 1672.618), stdev = 11.567
[info]   CI (99.9%): [1618.157, 1707.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   91736.017 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (91736.015, 91736.017, 91736.021), stdev = 0.003
[info]   CI (99.9%): [91736.007, 91736.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1667.650 ±(99.9%) 69.663 MB/sec [Average]
[info]   (min, avg, max) = (1643.012, 1667.650, 1688.350), stdev = 18.091
[info]   CI (99.9%): [1597.988, 1737.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92012.086 ±(99.9%) 4248.660 B/op [Average]
[info]   (min, avg, max) = (90326.291, 92012.086, 93164.873), stdev = 1103.364
[info]   CI (99.9%): [87763.426, 96260.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.512 ±(99.9%) 3.644 B/op [Average]
[info]   (min, avg, max) = (4.567, 5.512, 6.859), stdev = 0.946
[info]   CI (99.9%): [1.868, 9.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.39% complete, ETA 01:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31856.269 ops/s
[info] # Warmup Iteration   2: 36143.720 ops/s
[info] # Warmup Iteration   3: 36156.335 ops/s
[info] Iteration   1: 36755.093 ops/s
[info]                  ·gc.alloc.rate:                   1693.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71351.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.457 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 36795.712 ops/s
[info]                  ·gc.alloc.rate:                   1695.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71672.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.342 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 36858.032 ops/s
[info]                  ·gc.alloc.rate:                   1698.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71850.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.889 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36760.360 ops/s
[info]                  ·gc.alloc.rate:                   1694.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72298.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.783 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 36557.713 ops/s
[info]                  ·gc.alloc.rate:                   1684.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              72528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72929.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.585 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   36745.382 ±(99.9%) 433.781 ops/s [Average]
[info]   (min, avg, max) = (36557.713, 36745.382, 36858.032), stdev = 112.652
[info]   CI (99.9%): [36311.601, 37179.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1693.339 ±(99.9%) 20.055 MB/sec [Average]
[info]   (min, avg, max) = (1684.652, 1693.339, 1698.522), stdev = 5.208
[info]   CI (99.9%): [1673.284, 1713.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   72528.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72528.012, 72528.012, 72528.013), stdev = 0.001
[info]   CI (99.9%): [72528.010, 72528.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1681.466 ±(99.9%) 41.889 MB/sec [Average]
[info]   (min, avg, max) = (1666.318, 1681.466, 1693.982), stdev = 10.878
[info]   CI (99.9%): [1639.577, 1723.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   72020.596 ±(99.9%) 2359.614 B/op [Average]
[info]   (min, avg, max) = (71351.201, 72020.596, 72929.704), stdev = 612.784
[info]   CI (99.9%): [69660.982, 74380.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.211 ±(99.9%) 7.118 B/op [Average]
[info]   (min, avg, max) = (0.889, 3.211, 5.342), stdev = 1.848
[info]   CI (99.9%): [≈ 0, 10.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.70% complete, ETA 01:03:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31859.410 ops/s
[info] # Warmup Iteration   2: 36773.679 ops/s
[info] # Warmup Iteration   3: 36170.488 ops/s
[info] Iteration   1: 36745.159 ops/s
[info]                  ·gc.alloc.rate:                   1629.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71311.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 36470.544 ops/s
[info]                  ·gc.alloc.rate:                   1617.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72269.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.492 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 36686.365 ops/s
[info]                  ·gc.alloc.rate:                   1626.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72156.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.572 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36598.548 ops/s
[info]                  ·gc.alloc.rate:                   1622.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58037.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.686 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37176.969 ops/s
[info]                  ·gc.alloc.rate:                   1648.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71616.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.525 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   36735.517 ±(99.9%) 1030.290 ops/s [Average]
[info]   (min, avg, max) = (36470.544, 36735.517, 37176.969), stdev = 267.563
[info]   CI (99.9%): [35705.227, 37765.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1628.826 ±(99.9%) 45.782 MB/sec [Average]
[info]   (min, avg, max) = (1617.027, 1628.826, 1648.398), stdev = 11.889
[info]   CI (99.9%): [1583.044, 1674.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   69784.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69784.012, 69784.012, 69784.012), stdev = 0.001
[info]   CI (99.9%): [69784.011, 69784.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1612.576 ±(99.9%) 567.479 MB/sec [Average]
[info]   (min, avg, max) = (1349.527, 1612.576, 1691.693), stdev = 147.373
[info]   CI (99.9%): [1045.097, 2180.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   69078.639 ±(99.9%) 23814.136 B/op [Average]
[info]   (min, avg, max) = (58037.782, 69078.639, 72269.987), stdev = 6184.455
[info]   CI (99.9%): [45264.503, 92892.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   3.568 ±(99.9%) 2.461 B/op [Average]
[info]   (min, avg, max) = (2.686, 3.568, 4.492), stdev = 0.639
[info]   CI (99.9%): [1.107, 6.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.00% complete, ETA 01:02:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269636.480 ops/s
[info] # Warmup Iteration   2: 321854.681 ops/s
[info] # Warmup Iteration   3: 325748.704 ops/s
[info] Iteration   1: 328295.625 ops/s
[info]                  ·gc.alloc.rate:                   1803.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9592.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 326269.986 ops/s
[info]                  ·gc.alloc.rate:                   1793.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8094.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 327621.029 ops/s
[info]                  ·gc.alloc.rate:                   1800.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8093.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 325546.994 ops/s
[info]                  ·gc.alloc.rate:                   1788.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9809.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 326004.248 ops/s
[info]                  ·gc.alloc.rate:                   1791.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8184.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   326747.577 ±(99.9%) 4466.333 ops/s [Average]
[info]   (min, avg, max) = (325546.994, 326747.577, 328295.625), stdev = 1159.892
[info]   CI (99.9%): [322281.244, 331213.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1795.543 ±(99.9%) 24.312 MB/sec [Average]
[info]   (min, avg, max) = (1788.767, 1795.543, 1803.880), stdev = 6.314
[info]   CI (99.9%): [1771.231, 1819.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8648.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8648.001, 8648.001, 8648.001), stdev = 0.001
[info]   CI (99.9%): [8648.001, 8648.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1817.759 ±(99.9%) 694.777 MB/sec [Average]
[info]   (min, avg, max) = (1678.721, 1817.759, 2029.031), stdev = 180.431
[info]   CI (99.9%): [1122.982, 2512.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8754.948 ±(99.9%) 3342.504 B/op [Average]
[info]   (min, avg, max) = (8093.220, 8754.948, 9809.588), stdev = 868.038
[info]   CI (99.9%): [5412.444, 12097.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.461 ±(99.9%) 0.520 B/op [Average]
[info]   (min, avg, max) = (0.302, 0.461, 0.603), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.30% complete, ETA 01:02:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 483404.577 ops/s
[info] # Warmup Iteration   2: 690993.830 ops/s
[info] # Warmup Iteration   3: 689408.828 ops/s
[info] Iteration   1: 698866.884 ops/s
[info]                  ·gc.alloc.rate:                   579.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1471.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 699238.018 ops/s
[info]                  ·gc.alloc.rate:               579.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 734.693 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 695143.947 ops/s
[info]                  ·gc.alloc.rate:                   575.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1479.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 674688.714 ops/s
[info]                  ·gc.alloc.rate:                   559.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1526.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 690481.052 ops/s
[info]                  ·gc.alloc.rate:                   572.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   691683.723 ±(99.9%) 39028.278 ops/s [Average]
[info]   (min, avg, max) = (674688.714, 691683.723, 699238.018), stdev = 10135.520
[info]   CI (99.9%): [652655.445, 730712.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   573.188 ±(99.9%) 32.246 MB/sec [Average]
[info]   (min, avg, max) = (559.139, 573.188, 579.342), stdev = 8.374
[info]   CI (99.9%): [540.942, 605.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   588.854 ±(99.9%) 564.944 MB/sec [Average]
[info]   (min, avg, max) = (326.410, 588.854, 655.993), stdev = 146.714
[info]   CI (99.9%): [23.910, 1153.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1341.493 ±(99.9%) 1308.708 B/op [Average]
[info]   (min, avg, max) = (734.693, 1341.493, 1526.776), stdev = 339.867
[info]   CI (99.9%): [32.786, 2650.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.471 ±(99.9%) 3.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.231), stdev = 0.984
[info]   CI (99.9%): [≈ 0, 4.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.061 ±(99.9%) 8.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.061, 5.021), stdev = 2.214
[info]   CI (99.9%): [≈ 0, 9.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.61% complete, ETA 01:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1638332.032 ops/s
[info] # Warmup Iteration   2: 1738279.434 ops/s
[info] # Warmup Iteration   3: 1696613.825 ops/s
[info] Iteration   1: 1736871.143 ops/s
[info]                  ·gc.alloc.rate:                   335.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1695372.079 ops/s
[info]                  ·gc.alloc.rate:               327.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 237.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1701455.312 ops/s
[info]                  ·gc.alloc.rate:                   328.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1743767.770 ops/s
[info]                  ·gc.alloc.rate:                   336.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1728874.134 ops/s
[info]                  ·gc.alloc.rate:                   333.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1721268.088 ±(99.9%) 83273.064 ops/s [Average]
[info]   (min, avg, max) = (1695372.079, 1721268.088, 1743767.770), stdev = 21625.750
[info]   CI (99.9%): [1637995.024, 1804541.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   332.539 ±(99.9%) 15.857 MB/sec [Average]
[info]   (min, avg, max) = (327.610, 332.539, 336.829), stdev = 4.118
[info]   CI (99.9%): [316.682, 348.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   353.133 ±(99.9%) 364.557 MB/sec [Average]
[info]   (min, avg, max) = (255.918, 353.133, 511.711), stdev = 94.674
[info]   CI (99.9%): [≈ 0, 717.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   322.359 ±(99.9%) 323.557 B/op [Average]
[info]   (min, avg, max) = (237.475, 322.359, 463.599), stdev = 84.027
[info]   CI (99.9%): [≈ 0, 645.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.349 ±(99.9%) 2.707 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.349, 1.606), stdev = 0.703
[info]   CI (99.9%): [≈ 0, 3.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.322 ±(99.9%) 2.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.322, 1.485), stdev = 0.650
[info]   CI (99.9%): [≈ 0, 2.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.91% complete, ETA 01:02:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67757.393 ops/s
[info] # Warmup Iteration   2: 105209.580 ops/s
[info] # Warmup Iteration   3: 106667.998 ops/s
[info] Iteration   1: 106895.325 ops/s
[info]                  ·gc.alloc.rate:                   3884.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3718.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54727.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.226 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 106606.087 ops/s
[info]                  ·gc.alloc.rate:                   3873.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60147.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.073 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 105201.718 ops/s
[info]                  ·gc.alloc.rate:                   3821.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3743.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56008.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.869 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 106482.883 ops/s
[info]                  ·gc.alloc.rate:                   3868.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55343.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.538 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 104731.860 ops/s
[info]                  ·gc.alloc.rate:                   3806.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3746.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56270.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.190 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   105983.574 ±(99.9%) 3676.412 ops/s [Average]
[info]   (min, avg, max) = (104731.860, 105983.574, 106895.325), stdev = 954.752
[info]   CI (99.9%): [102307.163, 109659.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3850.936 ±(99.9%) 133.263 MB/sec [Average]
[info]   (min, avg, max) = (3806.392, 3850.936, 3884.525), stdev = 34.608
[info]   CI (99.9%): [3717.674, 3984.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3805.483 ±(99.9%) 582.161 MB/sec [Average]
[info]   (min, avg, max) = (3718.192, 3805.483, 4075.146), stdev = 151.185
[info]   CI (99.9%): [3223.321, 4387.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56499.667 ±(99.9%) 8186.450 B/op [Average]
[info]   (min, avg, max) = (54727.758, 56499.667, 60147.913), stdev = 2125.995
[info]   CI (99.9%): [48313.216, 64686.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.208), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.979 ±(99.9%) 2.733 B/op [Average]
[info]   (min, avg, max) = (1.226, 1.979, 3.073), stdev = 0.710
[info]   CI (99.9%): [≈ 0, 4.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.21% complete, ETA 01:02:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276835.145 ops/s
[info] # Warmup Iteration   2: 369428.500 ops/s
[info] # Warmup Iteration   3: 375629.737 ops/s
[info] Iteration   1: 370144.569 ops/s
[info]                  ·gc.alloc.rate:                   1262.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4217.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 375089.780 ops/s
[info]                  ·gc.alloc.rate:                   1279.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5572.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.437 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 370400.936 ops/s
[info]                  ·gc.alloc.rate:                   1263.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5663.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 373031.115 ops/s
[info]                  ·gc.alloc.rate:                   1272.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5654.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 373812.168 ops/s
[info]                  ·gc.alloc.rate:                   1274.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5665.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   372495.714 ±(99.9%) 8317.940 ops/s [Average]
[info]   (min, avg, max) = (370144.569, 372495.714, 375089.780), stdev = 2160.143
[info]   CI (99.9%): [364177.774, 380813.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1270.520 ±(99.9%) 28.381 MB/sec [Average]
[info]   (min, avg, max) = (1262.414, 1270.520, 1279.419), stdev = 7.371
[info]   CI (99.9%): [1242.139, 1298.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1267.733 ±(99.9%) 594.469 MB/sec [Average]
[info]   (min, avg, max) = (991.826, 1267.733, 1345.558), stdev = 154.382
[info]   CI (99.9%): [673.264, 1862.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5354.511 ±(99.9%) 2452.229 B/op [Average]
[info]   (min, avg, max) = (4217.416, 5354.511, 5665.068), stdev = 636.836
[info]   CI (99.9%): [2902.282, 7806.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.263 ±(99.9%) 0.673 B/op [Average]
[info]   (min, avg, max) = (0.088, 0.263, 0.439), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.52% complete, ETA 01:01:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 665552.493 ops/s
[info] # Warmup Iteration   2: 865458.329 ops/s
[info] # Warmup Iteration   3: 869630.372 ops/s
[info] Iteration   1: 870633.659 ops/s
[info]                  ·gc.alloc.rate:                   615.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1181.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 879072.070 ops/s
[info]                  ·gc.alloc.rate:                   621.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1171.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 876612.296 ops/s
[info]                  ·gc.alloc.rate:                   619.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1174.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 894838.117 ops/s
[info]                  ·gc.alloc.rate:                   632.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1152.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 870113.239 ops/s
[info]                  ·gc.alloc.rate:                   614.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1189.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   878253.876 ±(99.9%) 38638.048 ops/s [Average]
[info]   (min, avg, max) = (870113.239, 878253.876, 894838.117), stdev = 10034.178
[info]   CI (99.9%): [839615.829, 916891.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620.519 ±(99.9%) 27.327 MB/sec [Average]
[info]   (min, avg, max) = (614.781, 620.519, 632.253), stdev = 7.097
[info]   CI (99.9%): [593.192, 647.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.001, 1112.001), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   654.940 ±(99.9%) 6.148 MB/sec [Average]
[info]   (min, avg, max) = (653.446, 654.940, 657.481), stdev = 1.596
[info]   CI (99.9%): [648.792, 661.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1173.806 ±(99.9%) 52.438 B/op [Average]
[info]   (min, avg, max) = (1152.821, 1173.806, 1189.235), stdev = 13.618
[info]   CI (99.9%): [1121.368, 1226.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.463 ±(99.9%) 3.580 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.463, 2.125), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 4.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.836 ±(99.9%) 6.473 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.836, 3.842), stdev = 1.681
[info]   CI (99.9%): [≈ 0, 7.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 11.82% complete, ETA 01:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2034036.277 ops/s
[info] # Warmup Iteration   2: 2170148.254 ops/s
[info] # Warmup Iteration   3: 2607114.412 ops/s
[info] Iteration   1: 2538481.345 ops/s
[info]                  ·gc.alloc.rate:                   1174.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     617.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2578332.826 ops/s
[info]                  ·gc.alloc.rate:                   1192.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     812.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2526699.004 ops/s
[info]                  ·gc.alloc.rate:                   1169.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2596812.513 ops/s
[info]                  ·gc.alloc.rate:                   1201.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     812.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2615482.606 ops/s
[info]                  ·gc.alloc.rate:                   1210.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     606.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2571161.659 ±(99.9%) 145596.469 ops/s [Average]
[info]   (min, avg, max) = (2526699.004, 2571161.659, 2615482.606), stdev = 37810.941
[info]   CI (99.9%): [2425565.190, 2716758.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1189.660 ±(99.9%) 67.650 MB/sec [Average]
[info]   (min, avg, max) = (1169.295, 1189.660, 1210.355), stdev = 17.568
[info]   CI (99.9%): [1122.010, 1257.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1135.476 ±(99.9%) 704.051 MB/sec [Average]
[info]   (min, avg, max) = (995.310, 1135.476, 1340.853), stdev = 182.840
[info]   CI (99.9%): [431.424, 1839.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   694.406 ±(99.9%) 414.667 B/op [Average]
[info]   (min, avg, max) = (606.893, 694.406, 812.320), stdev = 107.688
[info]   CI (99.9%): [279.739, 1109.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.056, 0.102), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.12% complete, ETA 01:01:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2039877.588 ops/s
[info] # Warmup Iteration   2: 2194681.033 ops/s
[info] # Warmup Iteration   3: 2184338.086 ops/s
[info] Iteration   1: 2193526.360 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2165952.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2190595.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2195605.653 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2200318.450 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2189199.761 ±(99.9%) 51868.275 ops/s [Average]
[info]   (min, avg, max) = (2165952.458, 2189199.761, 2200318.450), stdev = 13470.026
[info]   CI (99.9%): [2137331.486, 2241068.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.42% complete, ETA 01:01:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 386697.986 ops/s
[info] # Warmup Iteration   2: 490490.770 ops/s
[info] # Warmup Iteration   3: 498298.106 ops/s
[info] Iteration   1: 487008.325 ops/s
[info]                  ·gc.alloc.rate:                   569.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2124.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 498074.009 ops/s
[info]                  ·gc.alloc.rate:               582.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1037.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 498327.957 ops/s
[info]                  ·gc.alloc.rate:                   582.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2074.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 500176.839 ops/s
[info]                  ·gc.alloc.rate:                   584.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2068.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 500196.215 ops/s
[info]                  ·gc.alloc.rate:                   584.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2073.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   496756.669 ±(99.9%) 21332.236 ops/s [Average]
[info]   (min, avg, max) = (487008.325, 496756.669, 500196.215), stdev = 5539.914
[info]   CI (99.9%): [475424.433, 518088.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   580.797 ±(99.9%) 25.081 MB/sec [Average]
[info]   (min, avg, max) = (569.326, 580.797, 584.858), stdev = 6.514
[info]   CI (99.9%): [555.716, 605.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   591.857 ±(99.9%) 567.093 MB/sec [Average]
[info]   (min, avg, max) = (328.412, 591.857, 658.924), stdev = 147.272
[info]   CI (99.9%): [24.764, 1158.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1875.782 ±(99.9%) 1806.061 B/op [Average]
[info]   (min, avg, max) = (1037.761, 1875.782, 2124.824), stdev = 469.028
[info]   CI (99.9%): [69.721, 3681.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.456 ±(99.9%) 3.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.456, 2.094), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.472 ±(99.9%) 11.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.472, 6.768), stdev = 2.962
[info]   CI (99.9%): [≈ 0, 12.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 12.73% complete, ETA 01:01:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143361.393 ops/s
[info] # Warmup Iteration   2: 170050.337 ops/s
[info] # Warmup Iteration   3: 170027.317 ops/s
[info] Iteration   1: 171872.315 ops/s
[info]                  ·gc.alloc.rate:                   2112.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18388.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 171403.719 ops/s
[info]                  ·gc.alloc.rate:                   2106.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2356.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21641.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.147 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 170455.433 ops/s
[info]                  ·gc.alloc.rate:                   2094.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18735.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.961 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 171061.243 ops/s
[info]                  ·gc.alloc.rate:                   2103.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18718.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.532 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 170719.012 ops/s
[info]                  ·gc.alloc.rate:                   2099.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18792.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.768 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   171102.344 ±(99.9%) 2153.271 ops/s [Average]
[info]   (min, avg, max) = (170455.433, 171102.344, 171872.315), stdev = 559.198
[info]   CI (99.9%): [168949.073, 173255.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2103.336 ±(99.9%) 25.931 MB/sec [Average]
[info]   (min, avg, max) = (2094.973, 2103.336, 2112.421), stdev = 6.734
[info]   CI (99.9%): [2077.405, 2129.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19344.003, 19344.003, 19344.003), stdev = 0.001
[info]   CI (99.9%): [19344.002, 19344.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2093.757 ±(99.9%) 568.450 MB/sec [Average]
[info]   (min, avg, max) = (2008.115, 2093.757, 2356.959), stdev = 147.625
[info]   CI (99.9%): [1525.307, 2662.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19255.281 ±(99.9%) 5172.370 B/op [Average]
[info]   (min, avg, max) = (18388.846, 19255.281, 21641.438), stdev = 1343.248
[info]   CI (99.9%): [14082.911, 24427.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.167), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.034 ±(99.9%) 1.234 B/op [Average]
[info]   (min, avg, max) = (0.763, 1.034, 1.532), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 2.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.03% complete, ETA 01:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270632.153 ops/s
[info] # Warmup Iteration   2: 423159.033 ops/s
[info] # Warmup Iteration   3: 414073.566 ops/s
[info] Iteration   1: 416935.182 ops/s
[info]                  ·gc.alloc.rate:                   345.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1931.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 415717.654 ops/s
[info]                  ·gc.alloc.rate:               344.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 968.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 419171.471 ops/s
[info]                  ·gc.alloc.rate:                   347.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.176 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 420280.703 ops/s
[info]                  ·gc.alloc.rate:                   348.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1223.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 418103.098 ops/s
[info]                  ·gc.alloc.rate:                   346.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1231.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   418041.621 ±(99.9%) 6920.149 ops/s [Average]
[info]   (min, avg, max) = (415717.654, 418041.621, 420280.703), stdev = 1797.141
[info]   CI (99.9%): [411121.473, 424961.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   346.364 ±(99.9%) 5.715 MB/sec [Average]
[info]   (min, avg, max) = (344.431, 346.364, 348.207), stdev = 1.484
[info]   CI (99.9%): [340.649, 352.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.596 ±(99.9%) 368.356 MB/sec [Average]
[info]   (min, avg, max) = (255.794, 349.596, 511.625), stdev = 95.661
[info]   CI (99.9%): [≈ 0, 717.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1316.251 ±(99.9%) 1392.321 B/op [Average]
[info]   (min, avg, max) = (968.426, 1316.251, 1931.204), stdev = 361.581
[info]   CI (99.9%): [≈ 0, 2708.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.452 ±(99.9%) 3.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.178), stdev = 0.965
[info]   CI (99.9%): [≈ 0, 4.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.698 ±(99.9%) 13.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.698, 8.176), stdev = 3.622
[info]   CI (99.9%): [≈ 0, 15.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.33% complete, ETA 01:00:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 934259.429 ops/s
[info] # Warmup Iteration   2: 973917.740 ops/s
[info] # Warmup Iteration   3: 980020.696 ops/s
[info] Iteration   1: 981879.864 ops/s
[info]                  ·gc.alloc.rate:               189.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 410.029 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 984014.870 ops/s
[info]                  ·gc.alloc.rate:      190.142 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 980369.508 ops/s
[info]                  ·gc.alloc.rate:               189.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 410.650 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 980268.234 ops/s
[info]                  ·gc.alloc.rate:                   189.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     410.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 979939.545 ops/s
[info]                  ·gc.alloc.rate:                   189.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     410.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   981294.404 ±(99.9%) 6525.621 ops/s [Average]
[info]   (min, avg, max) = (979939.545, 981294.404, 984014.870), stdev = 1694.683
[info]   CI (99.9%): [974768.783, 987820.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   189.555 ±(99.9%) 1.367 MB/sec [Average]
[info]   (min, avg, max) = (189.287, 189.555, 190.142), stdev = 0.355
[info]   CI (99.9%): [188.188, 190.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.642 ±(99.9%) 440.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.642, 255.822), stdev = 114.398
[info]   CI (99.9%): [≈ 0, 645.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   328.450 ±(99.9%) 707.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 328.450, 410.856), stdev = 183.609
[info]   CI (99.9%): [≈ 0, 1035.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 13.64% complete, ETA 01:00:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50295.702 ops/s
[info] # Warmup Iteration   2: 80642.981 ops/s
[info] # Warmup Iteration   3: 80718.216 ops/s
[info] Iteration   1: 82100.043 ops/s
[info]                  ·gc.alloc.rate:                   3388.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64564.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.197 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 81730.028 ops/s
[info]                  ·gc.alloc.rate:                   3372.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65242.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.004 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 82024.902 ops/s
[info]                  ·gc.alloc.rate:                   3385.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65136.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.395 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 81967.293 ops/s
[info]                  ·gc.alloc.rate:                   3382.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58825.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.199 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 81428.128 ops/s
[info]                  ·gc.alloc.rate:                   3361.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65793.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.817 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   81850.079 ±(99.9%) 1053.204 ops/s [Average]
[info]   (min, avg, max) = (81428.128, 81850.079, 82100.043), stdev = 273.514
[info]   CI (99.9%): [80796.875, 82903.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3378.344 ±(99.9%) 42.304 MB/sec [Average]
[info]   (min, avg, max) = (3361.831, 3378.344, 3388.577), stdev = 10.986
[info]   CI (99.9%): [3336.041, 3420.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.006), stdev = 0.001
[info]   CI (99.9%): [64952.005, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3324.138 ±(99.9%) 563.281 MB/sec [Average]
[info]   (min, avg, max) = (3063.589, 3324.138, 3405.386), stdev = 146.282
[info]   CI (99.9%): [2760.857, 3887.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63912.479 ±(99.9%) 11078.018 B/op [Average]
[info]   (min, avg, max) = (58825.551, 63912.479, 65793.509), stdev = 2876.926
[info]   CI (99.9%): [52834.461, 74990.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.922 ±(99.9%) 2.776 B/op [Average]
[info]   (min, avg, max) = (1.197, 1.922, 2.817), stdev = 0.721
[info]   CI (99.9%): [≈ 0, 4.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 13.94% complete, ETA 01:00:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217765.219 ops/s
[info] # Warmup Iteration   2: 267420.824 ops/s
[info] # Warmup Iteration   3: 276011.973 ops/s
[info] Iteration   1: 275228.783 ops/s
[info]                  ·gc.alloc.rate:                   1522.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7588.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.357 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 273175.703 ops/s
[info]                  ·gc.alloc.rate:                   1510.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9606.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.480 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 276559.159 ops/s
[info]                  ·gc.alloc.rate:                   1529.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7627.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 275908.325 ops/s
[info]                  ·gc.alloc.rate:                   1525.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9598.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.712 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 276459.471 ops/s
[info]                  ·gc.alloc.rate:                   1528.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9613.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   275466.288 ±(99.9%) 5335.388 ops/s [Average]
[info]   (min, avg, max) = (273175.703, 275466.288, 276559.159), stdev = 1385.583
[info]   CI (99.9%): [270130.900, 280801.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1523.366 ±(99.9%) 29.537 MB/sec [Average]
[info]   (min, avg, max) = (1510.685, 1523.366, 1529.434), stdev = 7.671
[info]   CI (99.9%): [1493.829, 1552.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8704.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8704.002, 8704.002, 8704.002), stdev = 0.001
[info]   CI (99.9%): [8704.001, 8704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1541.154 ±(99.9%) 730.479 MB/sec [Average]
[info]   (min, avg, max) = (1326.903, 1541.154, 1688.616), stdev = 189.703
[info]   CI (99.9%): [810.674, 2271.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8806.855 ±(99.9%) 4215.279 B/op [Average]
[info]   (min, avg, max) = (7588.136, 8806.855, 9613.805), stdev = 1094.695
[info]   CI (99.9%): [4591.576, 13022.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.499 ±(99.9%) 0.500 B/op [Average]
[info]   (min, avg, max) = (0.357, 0.499, 0.712), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 14.24% complete, ETA 00:59:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1078546.511 ops/s
[info] # Warmup Iteration   2: 1465819.100 ops/s
[info] # Warmup Iteration   3: 1514017.191 ops/s
[info] Iteration   1: 1508657.391 ops/s
[info]                  ·gc.alloc.rate:                   774.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1023.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1467307.765 ops/s
[info]                  ·gc.alloc.rate:                   753.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     701.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1474061.752 ops/s
[info]                  ·gc.alloc.rate:                   756.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     700.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1468883.138 ops/s
[info]                  ·gc.alloc.rate:                   754.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1057.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1485475.662 ops/s
[info]                  ·gc.alloc.rate:                   762.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1480877.142 ±(99.9%) 65780.740 ops/s [Average]
[info]   (min, avg, max) = (1467307.765, 1480877.142, 1508657.391), stdev = 17083.049
[info]   CI (99.9%): [1415096.402, 1546657.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   760.339 ±(99.9%) 33.625 MB/sec [Average]
[info]   (min, avg, max) = (753.550, 760.339, 774.585), stdev = 8.732
[info]   CI (99.9%): [726.714, 793.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   787.861 ±(99.9%) 690.094 MB/sec [Average]
[info]   (min, avg, max) = (654.359, 787.861, 987.328), stdev = 179.215
[info]   CI (99.9%): [97.767, 1477.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   836.619 ±(99.9%) 718.360 B/op [Average]
[info]   (min, avg, max) = (699.803, 836.619, 1057.793), stdev = 186.556
[info]   CI (99.9%): [118.259, 1554.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.088 ±(99.9%) 0.205 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.088, 0.152), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.55% complete, ETA 00:59:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1800192.859 ops/s
[info] # Warmup Iteration   2: 1964020.412 ops/s
[info] # Warmup Iteration   3: 1970554.477 ops/s
[info] Iteration   1: 1981373.232 ops/s
[info]                  ·gc.alloc.rate:                   533.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1970289.103 ops/s
[info]                  ·gc.alloc.rate:                   530.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     530.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1969462.095 ops/s
[info]                  ·gc.alloc.rate:                   530.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1967961.291 ops/s
[info]                  ·gc.alloc.rate:                   530.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     530.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1989121.439 ops/s
[info]                  ·gc.alloc.rate:                   535.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1975641.432 ±(99.9%) 35521.033 ops/s [Average]
[info]   (min, avg, max) = (1967961.291, 1975641.432, 1989121.439), stdev = 9224.699
[info]   CI (99.9%): [1940120.399, 2011162.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   532.312 ±(99.9%) 9.346 MB/sec [Average]
[info]   (min, avg, max) = (530.186, 532.312, 535.871), stdev = 2.427
[info]   CI (99.9%): [522.966, 541.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.858 ±(99.9%) 699.635 MB/sec [Average]
[info]   (min, avg, max) = (331.743, 530.858, 663.625), stdev = 181.693
[info]   CI (99.9%): [≈ 0, 1230.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   422.849 ±(99.9%) 557.350 B/op [Average]
[info]   (min, avg, max) = (263.514, 422.849, 530.618), stdev = 144.742
[info]   CI (99.9%): [≈ 0, 980.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.891 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.388, 1.730), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.308 ±(99.9%) 2.296 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.308, 1.374), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 14.85% complete, ETA 00:59:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1794327.367 ops/s
[info] # Warmup Iteration   2: 1953595.278 ops/s
[info] # Warmup Iteration   3: 1956594.349 ops/s
[info] Iteration   1: 1957423.224 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1955407.088 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1960875.694 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1963224.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1956566.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1958699.520 ±(99.9%) 12512.027 ops/s [Average]
[info]   (min, avg, max) = (1955407.088, 1958699.520, 1963224.891), stdev = 3249.334
[info]   CI (99.9%): [1946187.493, 1971211.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 15.15% complete, ETA 00:59:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26007.485 ops/s
[info] # Warmup Iteration   2: 38112.363 ops/s
[info] # Warmup Iteration   3: 38869.868 ops/s
[info] Iteration   1: 38569.294 ops/s
[info]                  ·gc.alloc.rate:                   1683.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              68659.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67494.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38712.218 ops/s
[info]                  ·gc.alloc.rate:                   1688.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67761.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.924 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38895.216 ops/s
[info]                  ·gc.alloc.rate:                   1696.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67820.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.527 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 38766.938 ops/s
[info]                  ·gc.alloc.rate:                   1691.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68380.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38900.855 ops/s
[info]                  ·gc.alloc.rate:                   1696.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68362.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.527 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38768.904 ±(99.9%) 532.264 ops/s [Average]
[info]   (min, avg, max) = (38569.294, 38768.904, 38900.855), stdev = 138.227
[info]   CI (99.9%): [38236.640, 39301.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1691.395 ±(99.9%) 21.950 MB/sec [Average]
[info]   (min, avg, max) = (1683.226, 1691.395, 1696.935), stdev = 5.700
[info]   CI (99.9%): [1669.444, 1713.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68656.640 ±(99.9%) 5.416 B/op [Average]
[info]   (min, avg, max) = (68656.011, 68656.640, 68659.156), stdev = 1.407
[info]   CI (99.9%): [68651.224, 68662.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.350 ±(99.9%) 53.842 MB/sec [Average]
[info]   (min, avg, max) = (1654.682, 1674.350, 1689.681), stdev = 13.983
[info]   CI (99.9%): [1620.508, 1728.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67964.095 ±(99.9%) 1508.645 B/op [Average]
[info]   (min, avg, max) = (67494.860, 67964.095, 68380.688), stdev = 391.790
[info]   CI (99.9%): [66455.450, 69472.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.380 ±(99.9%) 7.983 B/op [Average]
[info]   (min, avg, max) = (0.849, 3.380, 5.924), stdev = 2.073
[info]   CI (99.9%): [≈ 0, 11.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 15.45% complete, ETA 00:59:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19726.005 ops/s
[info] # Warmup Iteration   2: 25179.170 ops/s
[info] # Warmup Iteration   3: 25030.641 ops/s
[info] Iteration   1: 25193.981 ops/s
[info]                  ·gc.alloc.rate:                   1586.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103883.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.802 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24828.905 ops/s
[info]                  ·gc.alloc.rate:                   1563.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              99113.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105963.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.917 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 24904.937 ops/s
[info]                  ·gc.alloc.rate:                   1568.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84908.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25116.126 ops/s
[info]                  ·gc.alloc.rate:                   1581.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105608.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25332.128 ops/s
[info]                  ·gc.alloc.rate:                   1595.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105039.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.880 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25075.215 ±(99.9%) 797.201 ops/s [Average]
[info]   (min, avg, max) = (24828.905, 25075.215, 25332.128), stdev = 207.031
[info]   CI (99.9%): [24278.014, 25872.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1579.156 ±(99.9%) 50.311 MB/sec [Average]
[info]   (min, avg, max) = (1563.587, 1579.156, 1595.320), stdev = 13.066
[info]   CI (99.9%): [1528.845, 1629.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   99109.077 ±(99.9%) 28.195 B/op [Average]
[info]   (min, avg, max) = (99104.017, 99109.077, 99120.017), stdev = 7.322
[info]   CI (99.9%): [99080.882, 99137.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.963 ±(99.9%) 576.726 MB/sec [Average]
[info]   (min, avg, max) = (1343.766, 1610.963, 1690.870), stdev = 149.774
[info]   CI (99.9%): [1034.237, 2187.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   101080.926 ±(99.9%) 34945.143 B/op [Average]
[info]   (min, avg, max) = (84908.177, 101080.926, 105963.898), stdev = 9075.143
[info]   CI (99.9%): [66135.783, 136026.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.277 ±(99.9%) 6.628 B/op [Average]
[info]   (min, avg, max) = (3.880, 6.277, 7.917), stdev = 1.721
[info]   CI (99.9%): [≈ 0, 12.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 15.76% complete, ETA 00:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38336.695 ops/s
[info] # Warmup Iteration   2: 57083.423 ops/s
[info] # Warmup Iteration   3: 57826.851 ops/s
[info] Iteration   1: 57685.623 ops/s
[info]                  ·gc.alloc.rate:                   1011.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26771.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 56304.948 ops/s
[info]                  ·gc.alloc.rate:                   986.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27511.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.909 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 58617.460 ops/s
[info]                  ·gc.alloc.rate:                   1027.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26515.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56780.291 ops/s
[info]                  ·gc.alloc.rate:                   995.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27530.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57201.373 ops/s
[info]                  ·gc.alloc.rate:                   1002.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27438.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.146 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   57317.939 ±(99.9%) 3418.598 ops/s [Average]
[info]   (min, avg, max) = (56304.948, 57317.939, 58617.460), stdev = 887.799
[info]   CI (99.9%): [53899.341, 60736.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1004.564 ±(99.9%) 59.949 MB/sec [Average]
[info]   (min, avg, max) = (986.803, 1004.564, 1027.314), stdev = 15.569
[info]   CI (99.9%): [944.614, 1064.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27584.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27584.007, 27584.008, 27584.008), stdev = 0.001
[info]   CI (99.9%): [27584.007, 27584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   988.688 ±(99.9%) 24.991 MB/sec [Average]
[info]   (min, avg, max) = (981.325, 988.688, 997.220), stdev = 6.490
[info]   CI (99.9%): [963.697, 1013.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27153.551 ±(99.9%) 1830.089 B/op [Average]
[info]   (min, avg, max) = (26515.777, 27153.551, 27530.452), stdev = 475.268
[info]   CI (99.9%): [25323.462, 28983.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.286 ±(99.9%) 3.475 B/op [Average]
[info]   (min, avg, max) = (1.146, 2.286, 3.408), stdev = 0.903
[info]   CI (99.9%): [≈ 0, 5.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 16.06% complete, ETA 00:58:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65410.184 ops/s
[info] # Warmup Iteration   2: 70502.341 ops/s
[info] # Warmup Iteration   3: 70838.908 ops/s
[info] Iteration   1: 70488.251 ops/s
[info]                  ·gc.alloc.rate:                   474.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13133.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 70745.461 ops/s
[info]                  ·gc.alloc.rate:                   475.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7394.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.926 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 70490.864 ops/s
[info]                  ·gc.alloc.rate:                   474.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14830.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 70547.079 ops/s
[info]                  ·gc.alloc.rate:               474.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7415.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 70544.717 ops/s
[info]                  ·gc.alloc.rate:                   474.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7416.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.464 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   70563.275 ±(99.9%) 406.924 ops/s [Average]
[info]   (min, avg, max) = (70488.251, 70563.275, 70745.461), stdev = 105.677
[info]   CI (99.9%): [70156.350, 70970.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   474.617 ±(99.9%) 2.892 MB/sec [Average]
[info]   (min, avg, max) = (474.015, 474.617, 475.929), stdev = 0.751
[info]   CI (99.9%): [471.725, 477.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10584.006, 10584.006, 10584.007), stdev = 0.001
[info]   CI (99.9%): [10584.005, 10584.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.036 ±(99.9%) 628.685 MB/sec [Average]
[info]   (min, avg, max) = (332.405, 450.036, 664.651), stdev = 163.268
[info]   CI (99.9%): [≈ 0, 1078.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10038.209 ±(99.9%) 14054.465 B/op [Average]
[info]   (min, avg, max) = (7394.983, 10038.209, 14830.839), stdev = 3649.900
[info]   CI (99.9%): [≈ 0, 24092.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.340 ±(99.9%) 2.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.340, 1.595), stdev = 0.702
[info]   CI (99.9%): [≈ 0, 3.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.585 ±(99.9%) 60.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.585, 35.607), stdev = 15.669
[info]   CI (99.9%): [≈ 0, 67.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.673
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 16.36% complete, ETA 00:58:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18770.445 ops/s
[info] # Warmup Iteration   2: 32572.460 ops/s
[info] # Warmup Iteration   3: 33143.847 ops/s
[info] Iteration   1: 33016.718 ops/s
[info]                  ·gc.alloc.rate:                   1689.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78670.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.977 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 33535.539 ops/s
[info]                  ·gc.alloc.rate:                   1722.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              80829.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93662.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.908 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33211.558 ops/s
[info]                  ·gc.alloc.rate:                   1706.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              80854.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79376.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.932 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33934.497 ops/s
[info]                  ·gc.alloc.rate:                   1736.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78089.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.931 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33922.710 ops/s
[info]                  ·gc.alloc.rate:                   1736.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78395.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.863 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33524.204 ±(99.9%) 1590.653 ops/s [Average]
[info]   (min, avg, max) = (33016.718, 33524.204, 33934.497), stdev = 413.088
[info]   CI (99.9%): [31933.551, 35114.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1718.291 ±(99.9%) 77.785 MB/sec [Average]
[info]   (min, avg, max) = (1689.895, 1718.291, 1736.505), stdev = 20.201
[info]   CI (99.9%): [1640.506, 1796.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80658.387 ±(99.9%) 646.083 B/op [Average]
[info]   (min, avg, max) = (80536.013, 80658.387, 80854.106), stdev = 167.786
[info]   CI (99.9%): [80012.304, 81304.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1739.132 ±(99.9%) 555.646 MB/sec [Average]
[info]   (min, avg, max) = (1650.745, 1739.132, 1995.865), stdev = 144.299
[info]   CI (99.9%): [1183.487, 2294.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81638.720 ±(99.9%) 25946.879 B/op [Average]
[info]   (min, avg, max) = (78089.391, 81638.720, 93662.494), stdev = 6738.322
[info]   CI (99.9%): [55691.842, 107585.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.522 ±(99.9%) 4.341 B/op [Average]
[info]   (min, avg, max) = (1.931, 3.522, 4.932), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 7.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 16.67% complete, ETA 00:58:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29142.882 ops/s
[info] # Warmup Iteration   2: 38863.503 ops/s
[info] # Warmup Iteration   3: 38774.522 ops/s
[info] Iteration   1: 38781.360 ops/s
[info]                  ·gc.alloc.rate:                   611.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              24826.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26790.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39284.687 ops/s
[info]                  ·gc.alloc.rate:                   619.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26420.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39310.010 ops/s
[info]                  ·gc.alloc.rate:                   620.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26430.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39233.220 ops/s
[info]                  ·gc.alloc.rate:                   618.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26509.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38564.051 ops/s
[info]                  ·gc.alloc.rate:               608.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13511.596 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39034.666 ±(99.9%) 1310.621 ops/s [Average]
[info]   (min, avg, max) = (38564.051, 39034.666, 39310.010), stdev = 340.364
[info]   CI (99.9%): [37724.045, 40345.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   615.776 ±(99.9%) 20.865 MB/sec [Average]
[info]   (min, avg, max) = (608.284, 615.776, 620.043), stdev = 5.418
[info]   CI (99.9%): [594.911, 636.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24824.582 ±(99.9%) 4.916 B/op [Average]
[info]   (min, avg, max) = (24824.011, 24824.582, 24826.866), stdev = 1.277
[info]   CI (99.9%): [24819.667, 24829.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   594.416 ±(99.9%) 566.839 MB/sec [Average]
[info]   (min, avg, max) = (331.086, 594.416, 660.911), stdev = 147.206
[info]   CI (99.9%): [27.577, 1161.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23932.502 ±(99.9%) 22439.234 B/op [Average]
[info]   (min, avg, max) = (13511.596, 23932.502, 26790.905), stdev = 5827.398
[info]   CI (99.9%): [1493.268, 46371.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.384 ±(99.9%) 3.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 1.797), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 3.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.586 ±(99.9%) 123.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.586, 72.928), stdev = 32.069
[info]   CI (99.9%): [≈ 0, 139.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 16.97% complete, ETA 00:58:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28001.248 ops/s
[info] # Warmup Iteration   2: 41427.109 ops/s
[info] # Warmup Iteration   3: 41242.205 ops/s
[info] Iteration   1: 41290.507 ops/s
[info]                  ·gc.alloc.rate:                   415.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19500.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41757.545 ops/s
[info]                  ·gc.alloc.rate:                   419.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12314.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41631.249 ops/s
[info]                  ·gc.alloc.rate:                   418.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12352.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.361 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 41799.414 ops/s
[info]                  ·gc.alloc.rate:                   420.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24631.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41828.644 ops/s
[info]                  ·gc.alloc.rate:               420.554 MB/sec
[info]                  ·gc.alloc.rate.norm:          15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12306.406 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41661.472 ±(99.9%) 849.616 ops/s [Average]
[info]   (min, avg, max) = (41290.507, 41661.472, 41828.644), stdev = 220.643
[info]   CI (99.9%): [40811.856, 42511.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   418.887 ±(99.9%) 8.553 MB/sec [Average]
[info]   (min, avg, max) = (415.154, 418.887, 420.554), stdev = 2.221
[info]   CI (99.9%): [410.334, 427.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15824.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15824.010, 15824.011, 15824.011), stdev = 0.001
[info]   CI (99.9%): [15824.009, 15824.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.271 ±(99.9%) 573.771 MB/sec [Average]
[info]   (min, avg, max) = (326.741, 429.271, 654.153), stdev = 149.007
[info]   CI (99.9%): [≈ 0, 1003.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16221.047 ±(99.9%) 21699.865 B/op [Average]
[info]   (min, avg, max) = (12306.406, 16221.047, 24631.064), stdev = 5635.386
[info]   CI (99.9%): [≈ 0, 37920.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.442 ±(99.9%) 3.514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 2.074), stdev = 0.913
[info]   CI (99.9%): [≈ 0, 3.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.654 ±(99.9%) 132.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.654, 78.150), stdev = 34.388
[info]   CI (99.9%): [≈ 0, 149.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.581
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 17.27% complete, ETA 00:57:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37874.275 ops/s
[info] # Warmup Iteration   2: 44174.658 ops/s
[info] # Warmup Iteration   3: 42698.532 ops/s
[info] Iteration   1: 44173.649 ops/s
[info]                  ·gc.alloc.rate:                   433.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18227.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43359.726 ops/s
[info]                  ·gc.alloc.rate:                   425.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12040.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44070.031 ops/s
[info]                  ·gc.alloc.rate:                   432.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23670.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.974 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43937.090 ops/s
[info]                  ·gc.alloc.rate:                   431.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11858.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 44167.473 ops/s
[info]                  ·gc.alloc.rate:               433.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11809.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   43941.594 ±(99.9%) 1305.756 ops/s [Average]
[info]   (min, avg, max) = (43359.726, 43941.594, 44173.649), stdev = 339.101
[info]   CI (99.9%): [42635.837, 45247.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   431.149 ±(99.9%) 12.911 MB/sec [Average]
[info]   (min, avg, max) = (425.391, 431.149, 433.532), stdev = 3.353
[info]   CI (99.9%): [418.238, 444.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   15440.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (15440.010, 15440.010, 15440.011), stdev = 0.001
[info]   CI (99.9%): [15440.008, 15440.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   433.789 ±(99.9%) 577.575 MB/sec [Average]
[info]   (min, avg, max) = (331.145, 433.789, 662.869), stdev = 149.994
[info]   CI (99.9%): [≈ 0, 1011.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15521.286 ±(99.9%) 20469.080 B/op [Average]
[info]   (min, avg, max) = (11809.358, 15521.286, 23670.156), stdev = 5315.755
[info]   CI (99.9%): [≈ 0, 35990.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 3.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.776), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 3.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.670 ±(99.9%) 109.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.670, 64.470), stdev = 28.423
[info]   CI (99.9%): [≈ 0, 123.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.58% complete, ETA 00:57:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38403.191 ops/s
[info] # Warmup Iteration   2: 44341.506 ops/s
[info] # Warmup Iteration   3: 44745.744 ops/s
[info] Iteration   1: 44706.182 ops/s
[info]                  ·gc.alloc.rate:                   387.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18010.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 44667.300 ops/s
[info]                  ·gc.alloc.rate:                   387.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11688.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.958 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44881.926 ops/s
[info]                  ·gc.alloc.rate:                   388.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11633.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 44937.493 ops/s
[info]                  ·gc.alloc.rate:               389.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11595.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 44875.325 ops/s
[info]                  ·gc.alloc.rate:                   388.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11611.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44813.645 ±(99.9%) 458.737 ops/s [Average]
[info]   (min, avg, max) = (44667.300, 44813.645, 44937.493), stdev = 119.133
[info]   CI (99.9%): [44354.908, 45272.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   388.405 ±(99.9%) 3.867 MB/sec [Average]
[info]   (min, avg, max) = (387.118, 388.405, 389.449), stdev = 1.004
[info]   CI (99.9%): [384.538, 392.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13640.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13640.010, 13640.010, 13640.010), stdev = 0.001
[info]   CI (99.9%): [13640.010, 13640.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.474 ±(99.9%) 310.573 MB/sec [Average]
[info]   (min, avg, max) = (331.063, 367.474, 511.753), stdev = 80.655
[info]   CI (99.9%): [56.901, 678.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   12907.783 ±(99.9%) 10984.964 B/op [Average]
[info]   (min, avg, max) = (11595.111, 12907.783, 18010.564), stdev = 2852.760
[info]   CI (99.9%): [1922.819, 23892.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 2.919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.730), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   13.215 ±(99.9%) 102.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.215, 60.958), stdev = 26.711
[info]   CI (99.9%): [≈ 0, 116.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 17.88% complete, ETA 00:57:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10670.884 ops/s
[info] # Warmup Iteration   2: 15186.592 ops/s
[info] # Warmup Iteration   3: 15358.053 ops/s
[info] Iteration   1: 15405.938 ops/s
[info]                  ·gc.alloc.rate:               1099.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          112336.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      993.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101529.975 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 15143.154 ops/s
[info]                  ·gc.alloc.rate:                   1081.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              112346.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103500.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15249.065 ops/s
[info]                  ·gc.alloc.rate:                   1088.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137500.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.594 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15055.399 ops/s
[info]                  ·gc.alloc.rate:                   1074.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104871.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15022.799 ops/s
[info]                  ·gc.alloc.rate:                   1072.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              112343.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105443.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15175.271 ±(99.9%) 600.568 ops/s [Average]
[info]   (min, avg, max) = (15022.799, 15175.271, 15405.938), stdev = 155.965
[info]   CI (99.9%): [14574.703, 15775.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1083.305 ±(99.9%) 42.659 MB/sec [Average]
[info]   (min, avg, max) = (1072.380, 1083.305, 1099.612), stdev = 11.078
[info]   CI (99.9%): [1040.646, 1125.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112346.208 ±(99.9%) 25.617 B/op [Average]
[info]   (min, avg, max) = (112336.028, 112346.208, 112352.039), stdev = 6.653
[info]   CI (99.9%): [112320.591, 112371.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1066.371 ±(99.9%) 572.693 MB/sec [Average]
[info]   (min, avg, max) = (993.836, 1066.371, 1332.262), stdev = 148.727
[info]   CI (99.9%): [493.678, 1639.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110569.218 ±(99.9%) 58260.641 B/op [Average]
[info]   (min, avg, max) = (101529.975, 110569.218, 137500.131), stdev = 15130.103
[info]   CI (99.9%): [52308.577, 168829.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.503 ±(99.9%) 15.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.503, 10.904), stdev = 4.063
[info]   CI (99.9%): [≈ 0, 22.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 18.18% complete, ETA 00:57:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10221.241 ops/s
[info] # Warmup Iteration   2: 16495.900 ops/s
[info] # Warmup Iteration   3: 16601.591 ops/s
[info] Iteration   1: 16627.748 ops/s
[info]                  ·gc.alloc.rate:                   1008.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              95464.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92934.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16173.332 ops/s
[info]                  ·gc.alloc.rate:                   981.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              95493.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95840.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16070.682 ops/s
[info]                  ·gc.alloc.rate:                   975.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96775.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16605.235 ops/s
[info]                  ·gc.alloc.rate:                   1007.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94136.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.946 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16338.510 ops/s
[info]                  ·gc.alloc.rate:                   991.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              95470.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96060.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   16363.101 ±(99.9%) 964.186 ops/s [Average]
[info]   (min, avg, max) = (16070.682, 16363.101, 16627.748), stdev = 250.396
[info]   CI (99.9%): [15398.915, 17327.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   992.886 ±(99.9%) 57.509 MB/sec [Average]
[info]   (min, avg, max) = (975.514, 992.886, 1008.579), stdev = 14.935
[info]   CI (99.9%): [935.378, 1050.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   95483.929 ±(99.9%) 59.816 B/op [Average]
[info]   (min, avg, max) = (95464.028, 95483.929, 95496.036), stdev = 15.534
[info]   CI (99.9%): [95424.113, 95543.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   989.227 ±(99.9%) 23.637 MB/sec [Average]
[info]   (min, avg, max) = (981.860, 989.227, 997.240), stdev = 6.138
[info]   CI (99.9%): [965.590, 1012.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   95149.565 ±(99.9%) 6051.447 B/op [Average]
[info]   (min, avg, max) = (92934.942, 95149.565, 96775.071), stdev = 1571.542
[info]   CI (99.9%): [89098.118, 101201.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.228 ±(99.9%) 9.022 B/op [Average]
[info]   (min, avg, max) = (3.946, 7.228, 10.026), stdev = 2.343
[info]   CI (99.9%): [≈ 0, 16.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 18.48% complete, ETA 00:57:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76560.787 ops/s
[info] # Warmup Iteration   2: 78174.783 ops/s
[info] # Warmup Iteration   3: 78324.620 ops/s
[info] Iteration   1: 78187.011 ops/s
[info]                  ·gc.alloc.rate:                   203.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5148.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 78174.490 ops/s
[info]                  ·gc.alloc.rate:               203.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5149.808 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 78362.389 ops/s
[info]                  ·gc.alloc.rate:      203.937 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78134.311 ops/s
[info]                  ·gc.alloc.rate:               203.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5152.444 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 77330.653 ops/s
[info]                  ·gc.alloc.rate:                   201.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5206.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.847 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   78037.771 ±(99.9%) 1559.008 ops/s [Average]
[info]   (min, avg, max) = (77330.653, 78037.771, 78362.389), stdev = 404.870
[info]   CI (99.9%): [76478.762, 79596.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   203.116 ±(99.9%) 3.962 MB/sec [Average]
[info]   (min, avg, max) = (201.317, 203.116, 203.937), stdev = 1.029
[info]   CI (99.9%): [199.154, 207.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.006, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.663 ±(99.9%) 440.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.663, 255.876), stdev = 114.410
[info]   CI (99.9%): [≈ 0, 645.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4131.455 ±(99.9%) 8893.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4131.455, 5206.071), stdev = 2309.680
[info]   CI (99.9%): [≈ 0, 13025.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.211 ±(99.9%) 1.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.211, 0.847), stdev = 0.367
[info]   CI (99.9%): [≈ 0, 1.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 18.79% complete, ETA 00:56:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6993.087 ops/s
[info] # Warmup Iteration   2: 13076.157 ops/s
[info] # Warmup Iteration   3: 13288.915 ops/s
[info] Iteration   1: 13336.874 ops/s
[info]                  ·gc.alloc.rate:                   1277.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              150816.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155057.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.370 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13401.021 ops/s
[info]                  ·gc.alloc.rate:                   1284.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              150816.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155138.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.779 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13258.598 ops/s
[info]                  ·gc.alloc.rate:                   1270.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              150802.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118173.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13110.927 ops/s
[info]                  ·gc.alloc.rate:                   1256.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160169.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.497 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13523.787 ops/s
[info]                  ·gc.alloc.rate:                   1296.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155976.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13326.241 ±(99.9%) 595.498 ops/s [Average]
[info]   (min, avg, max) = (13110.927, 13326.241, 13523.787), stdev = 154.649
[info]   CI (99.9%): [12730.743, 13921.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1277.154 ±(99.9%) 57.176 MB/sec [Average]
[info]   (min, avg, max) = (1256.755, 1277.154, 1296.360), stdev = 14.848
[info]   CI (99.9%): [1219.978, 1334.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   150806.827 ±(99.9%) 32.509 B/op [Average]
[info]   (min, avg, max) = (150800.033, 150806.827, 150816.035), stdev = 8.442
[info]   CI (99.9%): [150774.318, 150839.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1261.245 ±(99.9%) 573.440 MB/sec [Average]
[info]   (min, avg, max) = (995.537, 1261.245, 1340.858), stdev = 148.921
[info]   CI (99.9%): [687.805, 1834.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   148903.083 ±(99.9%) 66640.495 B/op [Average]
[info]   (min, avg, max) = (118173.353, 148903.083, 160169.124), stdev = 17306.325
[info]   CI (99.9%): [82262.588, 215543.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.865 ±(99.9%) 4.132 B/op [Average]
[info]   (min, avg, max) = (7.268, 7.865, 9.779), stdev = 1.073
[info]   CI (99.9%): [3.733, 11.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 19.09% complete, ETA 00:56:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42053.803 ops/s
[info] # Warmup Iteration   2: 56479.597 ops/s
[info] # Warmup Iteration   3: 55910.396 ops/s
[info] Iteration   1: 56599.129 ops/s
[info]                  ·gc.alloc.rate:                   1403.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36861.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.737 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 56265.942 ops/s
[info]                  ·gc.alloc.rate:                   1395.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37238.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 56345.870 ops/s
[info]                  ·gc.alloc.rate:                   1396.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37362.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 56748.111 ops/s
[info]                  ·gc.alloc.rate:                   1406.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37245.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.887 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 56307.995 ops/s
[info]                  ·gc.alloc.rate:                   1395.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47108.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   56453.409 ±(99.9%) 807.574 ops/s [Average]
[info]   (min, avg, max) = (56265.942, 56453.409, 56748.111), stdev = 209.724
[info]   CI (99.9%): [55645.836, 57260.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1399.557 ±(99.9%) 19.836 MB/sec [Average]
[info]   (min, avg, max) = (1395.043, 1399.557, 1406.842), stdev = 5.151
[info]   CI (99.9%): [1379.721, 1419.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39016.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39016.008, 39016.008, 39016.008), stdev = 0.001
[info]   CI (99.9%): [39016.007, 39016.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1404.642 ±(99.9%) 604.782 MB/sec [Average]
[info]   (min, avg, max) = (1325.595, 1404.642, 1685.354), stdev = 157.060
[info]   CI (99.9%): [799.860, 2009.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39163.213 ±(99.9%) 17117.547 B/op [Average]
[info]   (min, avg, max) = (36861.685, 39163.213, 47108.182), stdev = 4445.373
[info]   CI (99.9%): [22045.665, 56280.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.089 ±(99.9%) 2.534 B/op [Average]
[info]   (min, avg, max) = (1.163, 2.089, 2.887), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 4.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 19.39% complete, ETA 00:56:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54204.604 ops/s
[info] # Warmup Iteration   2: 81780.799 ops/s
[info] # Warmup Iteration   3: 82428.597 ops/s
[info] Iteration   1: 82374.123 ops/s
[info]                  ·gc.alloc.rate:                   1247.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25053.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 82192.055 ops/s
[info]                  ·gc.alloc.rate:                   1244.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25256.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.993 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81607.134 ops/s
[info]                  ·gc.alloc.rate:                   1235.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19174.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.803 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 81617.400 ops/s
[info]                  ·gc.alloc.rate:                   1235.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25703.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 82715.376 ops/s
[info]                  ·gc.alloc.rate:                   1252.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25501.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.980 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   82101.218 ±(99.9%) 1864.799 ops/s [Average]
[info]   (min, avg, max) = (81607.134, 82101.218, 82715.376), stdev = 484.282
[info]   CI (99.9%): [80236.419, 83966.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1243.258 ±(99.9%) 28.340 MB/sec [Average]
[info]   (min, avg, max) = (1235.735, 1243.258, 1252.481), stdev = 7.360
[info]   CI (99.9%): [1214.918, 1271.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23832.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23832.005, 23832.005, 23832.006), stdev = 0.001
[info]   CI (99.9%): [23832.005, 23832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1259.597 ±(99.9%) 572.863 MB/sec [Average]
[info]   (min, avg, max) = (994.232, 1259.597, 1340.234), stdev = 148.771
[info]   CI (99.9%): [686.734, 1832.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24138.145 ±(99.9%) 10726.471 B/op [Average]
[info]   (min, avg, max) = (19174.453, 24138.145, 25703.792), stdev = 2785.630
[info]   CI (99.9%): [13411.674, 34864.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.355 ±(99.9%) 2.310 B/op [Average]
[info]   (min, avg, max) = (0.795, 1.355, 1.993), stdev = 0.600
[info]   CI (99.9%): [≈ 0, 3.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 19.70% complete, ETA 00:56:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256896.281 ops/s
[info] # Warmup Iteration   2: 281775.882 ops/s
[info] # Warmup Iteration   3: 295326.417 ops/s
[info] Iteration   1: 295973.555 ops/s
[info]                  ·gc.alloc.rate:                   469.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1360.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 252841.888 ops/s
[info]                  ·gc.alloc.rate:                   401.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4129.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 251659.394 ops/s
[info]                  ·gc.alloc.rate:               399.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2070.482 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 252054.121 ops/s
[info]                  ·gc.alloc.rate:                   399.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2067.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 251833.675 ops/s
[info]                  ·gc.alloc.rate:               399.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2071.108 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   260872.527 ±(99.9%) 75577.661 ops/s [Average]
[info]   (min, avg, max) = (251659.394, 260872.527, 295973.555), stdev = 19627.279
[info]   CI (99.9%): [185294.866, 336450.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   413.722 ±(99.9%) 119.796 MB/sec [Average]
[info]   (min, avg, max) = (399.100, 413.722, 469.359), stdev = 31.111
[info]   CI (99.9%): [293.926, 533.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   382.572 ±(99.9%) 617.737 MB/sec [Average]
[info]   (min, avg, max) = (255.782, 382.572, 663.543), stdev = 160.424
[info]   CI (99.9%): [≈ 0, 1000.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2339.802 ±(99.9%) 4030.913 B/op [Average]
[info]   (min, avg, max) = (1360.223, 2339.802, 4129.966), stdev = 1046.815
[info]   CI (99.9%): [≈ 0, 6370.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.376 ±(99.9%) 3.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.834), stdev = 0.815
[info]   CI (99.9%): [≈ 0, 3.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.340 ±(99.9%) 19.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.340, 11.417), stdev = 5.075
[info]   CI (99.9%): [≈ 0, 21.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 20.00% complete, ETA 00:56:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298985.174 ops/s
[info] # Warmup Iteration   2: 325429.804 ops/s
[info] # Warmup Iteration   3: 338058.528 ops/s
[info] Iteration   1: 337825.135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 337807.611 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 337931.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 337766.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 337684.232 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   337802.921 ±(99.9%) 346.780 ops/s [Average]
[info]   (min, avg, max) = (337684.232, 337802.921, 337931.357), stdev = 90.058
[info]   CI (99.9%): [337456.140, 338149.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 20.30% complete, ETA 00:55:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53598.783 ops/s
[info] # Warmup Iteration   2: 73177.271 ops/s
[info] # Warmup Iteration   3: 73651.584 ops/s
[info] Iteration   1: 72973.043 ops/s
[info]                  ·gc.alloc.rate:                   1377.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28468.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 72353.213 ops/s
[info]                  ·gc.alloc.rate:                   1366.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28865.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.359 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 72703.370 ops/s
[info]                  ·gc.alloc.rate:                   1372.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28876.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.352 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72547.381 ops/s
[info]                  ·gc.alloc.rate:                   1369.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29076.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.355 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 73802.415 ops/s
[info]                  ·gc.alloc.rate:                   1393.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28695.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.220 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   72875.884 ±(99.9%) 2177.198 ops/s [Average]
[info]   (min, avg, max) = (72353.213, 72875.884, 73802.415), stdev = 565.411
[info]   CI (99.9%): [70698.686, 75053.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1375.850 ±(99.9%) 41.407 MB/sec [Average]
[info]   (min, avg, max) = (1366.034, 1375.850, 1393.526), stdev = 10.753
[info]   CI (99.9%): [1334.443, 1417.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29712.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29712.006, 29712.006, 29712.006), stdev = 0.001
[info]   CI (99.9%): [29712.005, 29712.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1333.418 ±(99.9%) 39.550 MB/sec [Average]
[info]   (min, avg, max) = (1319.943, 1333.418, 1345.829), stdev = 10.271
[info]   CI (99.9%): [1293.868, 1372.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28796.401 ±(99.9%) 876.385 B/op [Average]
[info]   (min, avg, max) = (28468.614, 28796.401, 29076.130), stdev = 227.595
[info]   CI (99.9%): [27920.015, 29672.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.616 ±(99.9%) 1.493 B/op [Average]
[info]   (min, avg, max) = (1.352, 1.616, 2.220), stdev = 0.388
[info]   CI (99.9%): [0.124, 3.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 20.61% complete, ETA 00:55:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19868.728 ops/s
[info] # Warmup Iteration   2: 26755.899 ops/s
[info] # Warmup Iteration   3: 26801.068 ops/s
[info] Iteration   1: 26505.720 ops/s
[info]                  ·gc.alloc.rate:                   588.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39117.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26252.560 ops/s
[info]                  ·gc.alloc.rate:               583.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          34960.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39455.882 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 26975.698 ops/s
[info]                  ·gc.alloc.rate:                   599.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          329.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19218.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.215 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 26355.563 ops/s
[info]                  ·gc.alloc.rate:                   585.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39381.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26134.156 ops/s
[info]                  ·gc.alloc.rate:                   580.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39792.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   26444.739 ±(99.9%) 1258.081 ops/s [Average]
[info]   (min, avg, max) = (26134.156, 26444.739, 26975.698), stdev = 326.720
[info]   CI (99.9%): [25186.658, 27702.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   587.484 ±(99.9%) 27.776 MB/sec [Average]
[info]   (min, avg, max) = (580.569, 587.484, 599.215), stdev = 7.213
[info]   CI (99.9%): [559.708, 615.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34960.018 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (34960.016, 34960.018, 34960.024), stdev = 0.003
[info]   CI (99.9%): [34960.005, 34960.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   593.391 ±(99.9%) 568.252 MB/sec [Average]
[info]   (min, avg, max) = (329.409, 593.391, 660.828), stdev = 147.573
[info]   CI (99.9%): [25.139, 1161.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35393.242 ±(99.9%) 34829.260 B/op [Average]
[info]   (min, avg, max) = (19218.711, 35393.242, 39792.938), stdev = 9045.048
[info]   CI (99.9%): [563.982, 70222.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 3.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.803), stdev = 0.799
[info]   CI (99.9%): [≈ 0, 3.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22.152 ±(99.9%) 182.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.152, 107.048), stdev = 47.461
[info]   CI (99.9%): [≈ 0, 204.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 20.91% complete, ETA 00:55:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19393.335 ops/s
[info] # Warmup Iteration   2: 28322.016 ops/s
[info] # Warmup Iteration   3: 27778.686 ops/s
[info] Iteration   1: 28306.915 ops/s
[info]                  ·gc.alloc.rate:               390.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          21712.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14221.997 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 27870.907 ops/s
[info]                  ·gc.alloc.rate:                   384.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              21687.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32896.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 28372.656 ops/s
[info]                  ·gc.alloc.rate:                   390.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18124.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28423.314 ops/s
[info]                  ·gc.alloc.rate:                   391.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18073.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27626.369 ops/s
[info]                  ·gc.alloc.rate:               380.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          21680.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18595.137 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28120.032 ±(99.9%) 1356.623 ops/s [Average]
[info]   (min, avg, max) = (27626.369, 28120.032, 28423.314), stdev = 352.311
[info]   CI (99.9%): [26763.410, 29476.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   387.546 ±(99.9%) 18.851 MB/sec [Average]
[info]   (min, avg, max) = (380.563, 387.546, 391.535), stdev = 4.895
[info]   CI (99.9%): [368.696, 406.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21687.916 ±(99.9%) 53.372 B/op [Average]
[info]   (min, avg, max) = (21680.015, 21687.916, 21712.021), stdev = 13.861
[info]   CI (99.9%): [21634.544, 21741.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.638 ±(99.9%) 486.245 MB/sec [Average]
[info]   (min, avg, max) = (255.810, 363.638, 582.784), stdev = 126.276
[info]   CI (99.9%): [≈ 0, 849.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20382.242 ±(99.9%) 27778.588 B/op [Average]
[info]   (min, avg, max) = (14221.997, 20382.242, 32896.133), stdev = 7214.011
[info]   CI (99.9%): [≈ 0, 48160.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.743 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 2.189), stdev = 0.972
[info]   CI (99.9%): [≈ 0, 4.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.404 ±(99.9%) 211.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.404, 123.558), stdev = 54.878
[info]   CI (99.9%): [≈ 0, 236.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 6.000), stdev = 2.345
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 21.21% complete, ETA 00:55:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104772.671 ops/s
[info] # Warmup Iteration   2: 121166.907 ops/s
[info] # Warmup Iteration   3: 122174.977 ops/s
[info] Iteration   1: 123472.575 ops/s
[info]                  ·gc.alloc.rate:                   482.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7493.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 124977.552 ops/s
[info]                  ·gc.alloc.rate:                   488.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4181.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 125738.696 ops/s
[info]                  ·gc.alloc.rate:                   490.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8304.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 125799.370 ops/s
[info]                  ·gc.alloc.rate:                   491.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4150.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 125733.023 ops/s
[info]                  ·gc.alloc.rate:                   491.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8299.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   125144.243 ±(99.9%) 3827.222 ops/s [Average]
[info]   (min, avg, max) = (123472.575, 125144.243, 125799.370), stdev = 993.917
[info]   CI (99.9%): [121317.021, 128971.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   488.627 ±(99.9%) 14.969 MB/sec [Average]
[info]   (min, avg, max) = (482.059, 488.627, 491.092), stdev = 3.887
[info]   CI (99.9%): [473.657, 503.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.739 ±(99.9%) 656.796 MB/sec [Average]
[info]   (min, avg, max) = (331.742, 515.739, 663.476), stdev = 170.568
[info]   CI (99.9%): [≈ 0, 1172.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6485.979 ±(99.9%) 8253.282 B/op [Average]
[info]   (min, avg, max) = (4150.400, 6485.979, 8304.562), stdev = 2143.351
[info]   CI (99.9%): [≈ 0, 14739.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.356 ±(99.9%) 2.756 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.356, 1.637), stdev = 0.716
[info]   CI (99.9%): [≈ 0, 3.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.537 ±(99.9%) 35.137 B/op [Average]
[info]   (min, avg, max) = (0.260, 4.537, 20.859), stdev = 9.125
[info]   CI (99.9%): [≈ 0, 39.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 21.52% complete, ETA 00:54:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9887.963 ops/s
[info] # Warmup Iteration   2: 21644.463 ops/s
[info] # Warmup Iteration   3: 21707.007 ops/s
[info] Iteration   1: 21540.623 ops/s
[info]                  ·gc.alloc.rate:                   1203.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95201.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21728.817 ops/s
[info]                  ·gc.alloc.rate:                   1214.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94956.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.523 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 21765.977 ops/s
[info]                  ·gc.alloc.rate:                   1216.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71550.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21618.948 ops/s
[info]                  ·gc.alloc.rate:                   1207.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96652.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 21815.127 ops/s
[info]                  ·gc.alloc.rate:                   1218.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96360.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21693.899 ±(99.9%) 431.469 ops/s [Average]
[info]   (min, avg, max) = (21540.623, 21693.899, 21815.127), stdev = 112.051
[info]   CI (99.9%): [21262.430, 22125.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1212.213 ±(99.9%) 24.127 MB/sec [Average]
[info]   (min, avg, max) = (1203.668, 1212.213, 1218.979), stdev = 6.266
[info]   CI (99.9%): [1188.085, 1236.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87944.056 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (87944.020, 87944.056, 87944.189), stdev = 0.074
[info]   CI (99.9%): [87943.769, 87944.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1253.352 ±(99.9%) 570.050 MB/sec [Average]
[info]   (min, avg, max) = (989.544, 1253.352, 1335.639), stdev = 148.040
[info]   CI (99.9%): [683.302, 1823.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   90944.251 ±(99.9%) 41839.563 B/op [Average]
[info]   (min, avg, max) = (71550.742, 90944.251, 96652.112), stdev = 10865.602
[info]   CI (99.9%): [49104.688, 132783.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.228 ±(99.9%) 4.850 B/op [Average]
[info]   (min, avg, max) = (3.004, 4.228, 6.021), stdev = 1.259
[info]   CI (99.9%): [≈ 0, 9.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 21.82% complete, ETA 00:54:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132469.000 ops/s
[info] # Warmup Iteration   2: 166027.896 ops/s
[info] # Warmup Iteration   3: 168463.323 ops/s
[info] Iteration   1: 168318.208 ops/s
[info]                  ·gc.alloc.rate:                   1101.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12351.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 167179.178 ops/s
[info]                  ·gc.alloc.rate:                   1093.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9359.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.980 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 168535.652 ops/s
[info]                  ·gc.alloc.rate:                   1102.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9315.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 167897.299 ops/s
[info]                  ·gc.alloc.rate:                   1098.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12520.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 166635.169 ops/s
[info]                  ·gc.alloc.rate:                   1090.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9500.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   167713.101 ±(99.9%) 3058.587 ops/s [Average]
[info]   (min, avg, max) = (166635.169, 167713.101, 168535.652), stdev = 794.305
[info]   CI (99.9%): [164654.514, 170771.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1097.275 ±(99.9%) 20.326 MB/sec [Average]
[info]   (min, avg, max) = (1090.083, 1097.275, 1102.941), stdev = 5.279
[info]   CI (99.9%): [1076.948, 1117.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.952 ±(99.9%) 694.173 MB/sec [Average]
[info]   (min, avg, max) = (994.388, 1130.952, 1335.687), stdev = 180.275
[info]   CI (99.9%): [436.779, 1825.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10609.504 ±(99.9%) 6429.264 B/op [Average]
[info]   (min, avg, max) = (9315.740, 10609.504, 12520.366), stdev = 1669.659
[info]   CI (99.9%): [4180.240, 17038.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.587 ±(99.9%) 1.074 B/op [Average]
[info]   (min, avg, max) = (0.389, 0.587, 0.980), stdev = 0.279
[info]   CI (99.9%): [≈ 0, 1.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 22.12% complete, ETA 00:54:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 387557.523 ops/s
[info] # Warmup Iteration   2: 533415.132 ops/s
[info] # Warmup Iteration   3: 543944.182 ops/s
[info] Iteration   1: 552863.786 ops/s
[info]                  ·gc.alloc.rate:                   559.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.992 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 555427.524 ops/s
[info]                  ·gc.alloc.rate:                   561.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1852.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 555148.391 ops/s
[info]                  ·gc.alloc.rate:                   561.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1854.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 535174.652 ops/s
[info]                  ·gc.alloc.rate:               541.564 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 961.912 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 539641.451 ops/s
[info]                  ·gc.alloc.rate:                   545.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1911.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   547651.161 ±(99.9%) 36716.171 ops/s [Average]
[info]   (min, avg, max) = (535174.652, 547651.161, 555427.524), stdev = 9535.073
[info]   CI (99.9%): [510934.990, 584367.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   554.023 ±(99.9%) 36.726 MB/sec [Average]
[info]   (min, avg, max) = (541.564, 554.023, 561.804), stdev = 9.538
[info]   CI (99.9%): [517.296, 590.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.519 ±(99.9%) 690.886 MB/sec [Average]
[info]   (min, avg, max) = (326.729, 523.519, 655.675), stdev = 179.421
[info]   CI (99.9%): [≈ 0, 1214.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1502.232 ±(99.9%) 1957.693 B/op [Average]
[info]   (min, avg, max) = (930.179, 1502.232, 1911.822), stdev = 508.407
[info]   CI (99.9%): [≈ 0, 3459.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.458 ±(99.9%) 3.546 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.105), stdev = 0.921
[info]   CI (99.9%): [≈ 0, 4.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.306 ±(99.9%) 10.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.306, 5.992), stdev = 2.621
[info]   CI (99.9%): [≈ 0, 11.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 22.42% complete, ETA 00:54:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 522398.992 ops/s
[info] # Warmup Iteration   2: 558639.068 ops/s
[info] # Warmup Iteration   3: 573242.954 ops/s
[info] Iteration   1: 589060.464 ops/s
[info]                  ·gc.alloc.rate:                   452.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     683.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 588467.262 ops/s
[info]                  ·gc.alloc.rate:                   451.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1774.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.878 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 590236.226 ops/s
[info]                  ·gc.alloc.rate:                   453.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     882.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 586183.081 ops/s
[info]                  ·gc.alloc.rate:                   449.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     888.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 589090.827 ops/s
[info]                  ·gc.alloc.rate:                   452.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1769.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   588607.572 ±(99.9%) 5772.437 ops/s [Average]
[info]   (min, avg, max) = (586183.081, 588607.572, 590236.226), stdev = 1499.083
[info]   CI (99.9%): [582835.135, 594380.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   451.779 ±(99.9%) 4.433 MB/sec [Average]
[info]   (min, avg, max) = (449.911, 451.779, 453.025), stdev = 1.151
[info]   CI (99.9%): [447.346, 456.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.726 ±(99.9%) 761.928 MB/sec [Average]
[info]   (min, avg, max) = (255.788, 448.726, 663.533), stdev = 197.870
[info]   CI (99.9%): [≈ 0, 1210.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1199.755 ±(99.9%) 2035.879 B/op [Average]
[info]   (min, avg, max) = (683.450, 1199.755, 1774.545), stdev = 528.711
[info]   CI (99.9%): [≈ 0, 3235.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 3.075 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.396, 1.824), stdev = 0.799
[info]   CI (99.9%): [≈ 0, 3.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.059 ±(99.9%) 8.224 B/op [Average]
[info]   (min, avg, max) = (0.056, 1.059, 4.878), stdev = 2.136
[info]   CI (99.9%): [≈ 0, 9.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.73% complete, ETA 00:54:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 551007.136 ops/s
[info] # Warmup Iteration   2: 602088.675 ops/s
[info] # Warmup Iteration   3: 602004.328 ops/s
[info] Iteration   1: 605166.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 602934.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 603094.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 604923.129 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 601125.829 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   603448.748 ±(99.9%) 6359.515 ops/s [Average]
[info]   (min, avg, max) = (601125.829, 603448.748, 605166.363), stdev = 1651.546
[info]   CI (99.9%): [597089.233, 609808.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.03% complete, ETA 00:53:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192863.228 ops/s
[info] # Warmup Iteration   2: 323122.371 ops/s
[info] # Warmup Iteration   3: 320976.925 ops/s
[info] Iteration   1: 324118.870 ops/s
[info]                  ·gc.alloc.rate:                   896.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4745.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 333240.353 ops/s
[info]                  ·gc.alloc.rate:                   921.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4621.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 329080.328 ops/s
[info]                  ·gc.alloc.rate:                   909.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3131.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 333630.090 ops/s
[info]                  ·gc.alloc.rate:                   922.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4657.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 329773.326 ops/s
[info]                  ·gc.alloc.rate:                   911.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4730.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   329968.594 ±(99.9%) 14808.389 ops/s [Average]
[info]   (min, avg, max) = (324118.870, 329968.594, 333630.090), stdev = 3845.692
[info]   CI (99.9%): [315160.204, 344776.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   912.479 ±(99.9%) 41.308 MB/sec [Average]
[info]   (min, avg, max) = (896.194, 912.479, 922.796), stdev = 10.728
[info]   CI (99.9%): [871.171, 953.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   917.882 ±(99.9%) 566.789 MB/sec [Average]
[info]   (min, avg, max) = (654.788, 917.882, 991.300), stdev = 147.193
[info]   CI (99.9%): [351.093, 1484.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4377.311 ±(99.9%) 2688.369 B/op [Average]
[info]   (min, avg, max) = (3131.751, 4377.311, 4745.273), stdev = 698.161
[info]   CI (99.9%): [1688.942, 7065.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.378 ±(99.9%) 0.508 B/op [Average]
[info]   (min, avg, max) = (0.199, 0.378, 0.505), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 23.33% complete, ETA 00:53:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29588.362 ops/s
[info] # Warmup Iteration   2: 35359.323 ops/s
[info] # Warmup Iteration   3: 35853.344 ops/s
[info] Iteration   1: 35728.318 ops/s
[info]                  ·gc.alloc.rate:                   1683.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73317.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.751 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 35663.178 ops/s
[info]                  ·gc.alloc.rate:                   1680.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73898.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.512 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35573.801 ops/s
[info]                  ·gc.alloc.rate:                   1676.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74386.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.842 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 36281.013 ops/s
[info]                  ·gc.alloc.rate:                   1710.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73211.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.806 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35770.320 ops/s
[info]                  ·gc.alloc.rate:                   1685.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74462.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.664 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   35803.326 ±(99.9%) 1067.162 ops/s [Average]
[info]   (min, avg, max) = (35573.801, 35803.326, 36281.013), stdev = 277.139
[info]   CI (99.9%): [34736.164, 36870.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1687.219 ±(99.9%) 51.528 MB/sec [Average]
[info]   (min, avg, max) = (1676.170, 1687.219, 1710.313), stdev = 13.382
[info]   CI (99.9%): [1635.690, 1738.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74160.013 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (74160.012, 74160.013, 74160.017), stdev = 0.002
[info]   CI (99.9%): [74160.004, 74160.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1680.240 ±(99.9%) 42.941 MB/sec [Average]
[info]   (min, avg, max) = (1664.436, 1680.240, 1692.393), stdev = 11.152
[info]   CI (99.9%): [1637.299, 1723.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   73855.637 ±(99.9%) 2242.151 B/op [Average]
[info]   (min, avg, max) = (73211.908, 73855.637, 74462.818), stdev = 582.279
[info]   CI (99.9%): [71613.486, 76097.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.115 ±(99.9%) 5.938 B/op [Average]
[info]   (min, avg, max) = (1.806, 3.115, 5.512), stdev = 1.542
[info]   CI (99.9%): [≈ 0, 9.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 23.64% complete, ETA 00:53:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61398.008 ops/s
[info] # Warmup Iteration   2: 90663.314 ops/s
[info] # Warmup Iteration   3: 91404.645 ops/s
[info] Iteration   1: 91502.702 ops/s
[info]                  ·gc.alloc.rate:                   1069.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              18386.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16888.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 91460.200 ops/s
[info]                  ·gc.alloc.rate:                   1067.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16953.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 91745.738 ops/s
[info]                  ·gc.alloc.rate:                   1070.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16975.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.714 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 91640.431 ops/s
[info]                  ·gc.alloc.rate:                   1069.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22789.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.715 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 91671.077 ops/s
[info]                  ·gc.alloc.rate:                   1069.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17172.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   91604.030 ±(99.9%) 459.083 ops/s [Average]
[info]   (min, avg, max) = (91460.200, 91604.030, 91745.738), stdev = 119.222
[info]   CI (99.9%): [91144.947, 92063.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1069.454 ±(99.9%) 4.539 MB/sec [Average]
[info]   (min, avg, max) = (1067.534, 1069.454, 1070.744), stdev = 1.179
[info]   CI (99.9%): [1064.915, 1073.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18371.800 ±(99.9%) 32.678 B/op [Average]
[info]   (min, avg, max) = (18368.005, 18371.800, 18386.981), stdev = 8.486
[info]   CI (99.9%): [18339.122, 18404.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1056.919 ±(99.9%) 582.336 MB/sec [Average]
[info]   (min, avg, max) = (982.299, 1056.919, 1327.177), stdev = 151.231
[info]   CI (99.9%): [474.583, 1639.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18155.951 ±(99.9%) 9983.274 B/op [Average]
[info]   (min, avg, max) = (16888.308, 18155.951, 22789.907), stdev = 2592.625
[info]   CI (99.9%): [8172.677, 28139.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.073 ±(99.9%) 1.951 B/op [Average]
[info]   (min, avg, max) = (0.714, 1.073, 1.791), stdev = 0.507
[info]   CI (99.9%): [≈ 0, 3.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 23.94% complete, ETA 00:53:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153166.965 ops/s
[info] # Warmup Iteration   2: 159819.668 ops/s
[info] # Warmup Iteration   3: 159738.064 ops/s
[info] Iteration   1: 160504.686 ops/s
[info]                  ·gc.alloc.rate:      104.438 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 160294.559 ops/s
[info]                  ·gc.alloc.rate:                   104.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2511.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.353 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 160925.274 ops/s
[info]                  ·gc.alloc.rate:      104.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 160108.477 ops/s
[info]                  ·gc.alloc.rate:      104.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 154814.858 ops/s
[info]                  ·gc.alloc.rate:               100.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2600.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   159329.571 ±(99.9%) 9788.457 ops/s [Average]
[info]   (min, avg, max) = (154814.858, 159329.571, 160925.274), stdev = 2542.031
[info]   CI (99.9%): [149541.114, 169118.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   103.670 ±(99.9%) 6.361 MB/sec [Average]
[info]   (min, avg, max) = (100.736, 103.670, 104.702), stdev = 1.652
[info]   CI (99.9%): [97.309, 110.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.331 ±(99.9%) 539.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.331, 255.832), stdev = 140.122
[info]   CI (99.9%): [≈ 0, 641.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1022.427 ±(99.9%) 5392.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1022.427, 2600.480), stdev = 1400.368
[info]   CI (99.9%): [≈ 0, 6414.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.496 ±(99.9%) 4.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.496, 2.481), stdev = 1.109
[info]   CI (99.9%): [≈ 0, 4.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.871 ±(99.9%) 41.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.871, 24.353), stdev = 10.891
[info]   CI (99.9%): [≈ 0, 46.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 24.24% complete, ETA 00:53:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22609.953 ops/s
[info] # Warmup Iteration   2: 37927.477 ops/s
[info] # Warmup Iteration   3: 38318.881 ops/s
[info] Iteration   1: 37639.797 ops/s
[info]                  ·gc.alloc.rate:                   1973.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83212.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.352 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38909.267 ops/s
[info]                  ·gc.alloc.rate:                   2039.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81161.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.368 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 38653.504 ops/s
[info]                  ·gc.alloc.rate:                   2026.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82225.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.238 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38576.208 ops/s
[info]                  ·gc.alloc.rate:                   2022.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82742.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.945 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 38392.985 ops/s
[info]                  ·gc.alloc.rate:                   2012.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83373.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.267 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38434.352 ±(99.9%) 1853.440 ops/s [Average]
[info]   (min, avg, max) = (37639.797, 38434.352, 38909.267), stdev = 481.332
[info]   CI (99.9%): [36580.912, 40287.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2014.798 ±(99.9%) 97.093 MB/sec [Average]
[info]   (min, avg, max) = (1973.190, 2014.798, 2039.710), stdev = 25.215
[info]   CI (99.9%): [1917.705, 2111.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82504.012 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (82504.011, 82504.012, 82504.017), stdev = 0.002
[info]   CI (99.9%): [82504.003, 82504.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.595 ±(99.9%) 67.616 MB/sec [Average]
[info]   (min, avg, max) = (1990.137, 2015.595, 2033.823), stdev = 17.560
[info]   CI (99.9%): [1947.979, 2083.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82543.239 ±(99.9%) 3437.849 B/op [Average]
[info]   (min, avg, max) = (81161.302, 82543.239, 83373.767), stdev = 892.798
[info]   CI (99.9%): [79105.390, 85981.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.434 ±(99.9%) 3.598 B/op [Average]
[info]   (min, avg, max) = (3.368, 4.434, 5.945), stdev = 0.934
[info]   CI (99.9%): [0.836, 8.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 24.55% complete, ETA 00:52:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65178.636 ops/s
[info] # Warmup Iteration   2: 84159.621 ops/s
[info] # Warmup Iteration   3: 84825.526 ops/s
[info] Iteration   1: 84778.631 ops/s
[info]                  ·gc.alloc.rate:                   677.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12249.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 84388.274 ops/s
[info]                  ·gc.alloc.rate:                   674.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12305.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 84406.301 ops/s
[info]                  ·gc.alloc.rate:                   674.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12315.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 84348.931 ops/s
[info]                  ·gc.alloc.rate:                   673.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12348.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 84123.517 ops/s
[info]                  ·gc.alloc.rate:               672.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12412.871 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   84409.131 ±(99.9%) 907.505 ops/s [Average]
[info]   (min, avg, max) = (84123.517, 84409.131, 84778.631), stdev = 235.676
[info]   CI (99.9%): [83501.626, 85316.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   674.547 ±(99.9%) 7.060 MB/sec [Average]
[info]   (min, avg, max) = (672.326, 674.547, 677.405), stdev = 1.833
[info]   CI (99.9%): [667.487, 681.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12576.005, 12576.005, 12576.005), stdev = 0.001
[info]   CI (99.9%): [12576.005, 12576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.151 ±(99.9%) 6.059 MB/sec [Average]
[info]   (min, avg, max) = (659.805, 661.151, 663.604), stdev = 1.574
[info]   CI (99.9%): [655.092, 667.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12326.380 ±(99.9%) 231.887 B/op [Average]
[info]   (min, avg, max) = (12249.257, 12326.380, 12412.871), stdev = 60.220
[info]   CI (99.9%): [12094.492, 12558.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.930 ±(99.9%) 3.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.930, 1.932), stdev = 0.802
[info]   CI (99.9%): [≈ 0, 4.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 24.85% complete, ETA 00:52:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69760.459 ops/s
[info] # Warmup Iteration   2: 96982.388 ops/s
[info] # Warmup Iteration   3: 96393.821 ops/s
[info] Iteration   1: 97643.781 ops/s
[info]                  ·gc.alloc.rate:                   385.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4123.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 96955.016 ops/s
[info]                  ·gc.alloc.rate:                   382.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9456.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 96019.337 ops/s
[info]                  ·gc.alloc.rate:                   378.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5355.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 96586.373 ops/s
[info]                  ·gc.alloc.rate:                   381.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5329.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 96701.029 ops/s
[info]                  ·gc.alloc.rate:                   381.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5323.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   96781.107 ±(99.9%) 2277.321 ops/s [Average]
[info]   (min, avg, max) = (96019.337, 96781.107, 97643.781), stdev = 591.413
[info]   CI (99.9%): [94503.786, 99058.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   381.776 ±(99.9%) 8.961 MB/sec [Average]
[info]   (min, avg, max) = (378.736, 381.776, 385.160), stdev = 2.327
[info]   CI (99.9%): [372.816, 390.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6208.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.004, 6208.005, 6208.005), stdev = 0.001
[info]   CI (99.9%): [6208.004, 6208.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.871 ±(99.9%) 485.445 MB/sec [Average]
[info]   (min, avg, max) = (255.804, 363.871, 582.542), stdev = 126.069
[info]   CI (99.9%): [≈ 0, 849.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5917.633 ±(99.9%) 7882.032 B/op [Average]
[info]   (min, avg, max) = (4123.052, 5917.633, 9456.616), stdev = 2046.939
[info]   CI (99.9%): [≈ 0, 13799.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.454 ±(99.9%) 3.643 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.454, 2.146), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.375 ±(99.9%) 59.137 B/op [Average]
[info]   (min, avg, max) = (0.336, 7.375, 34.843), stdev = 15.358
[info]   CI (99.9%): [≈ 0, 66.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 25.15% complete, ETA 00:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102708.788 ops/s
[info] # Warmup Iteration   2: 111446.742 ops/s
[info] # Warmup Iteration   3: 110098.322 ops/s
[info] Iteration   1: 111738.274 ops/s
[info]                  ·gc.alloc.rate:                   413.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7205.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 112430.254 ops/s
[info]                  ·gc.alloc.rate:                   416.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4643.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 112635.110 ops/s
[info]                  ·gc.alloc.rate:                   416.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4635.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 111916.289 ops/s
[info]                  ·gc.alloc.rate:                   414.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9311.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.878 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 113187.279 ops/s
[info]                  ·gc.alloc.rate:               418.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4608.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   112381.441 ±(99.9%) 2233.818 ops/s [Average]
[info]   (min, avg, max) = (111738.274, 112381.441, 113187.279), stdev = 580.116
[info]   CI (99.9%): [110147.623, 114615.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   415.882 ±(99.9%) 8.338 MB/sec [Average]
[info]   (min, avg, max) = (413.467, 415.882, 418.846), stdev = 2.165
[info]   CI (99.9%): [407.544, 424.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5824.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5824.004, 5824.004), stdev = 0.001
[info]   CI (99.9%): [5824.003, 5824.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   433.738 ±(99.9%) 575.949 MB/sec [Average]
[info]   (min, avg, max) = (331.409, 433.738, 662.141), stdev = 149.572
[info]   CI (99.9%): [≈ 0, 1009.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6081.010 ±(99.9%) 8174.603 B/op [Average]
[info]   (min, avg, max) = (4608.199, 6081.010, 9311.682), stdev = 2122.918
[info]   CI (99.9%): [≈ 0, 14255.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.730), stdev = 0.755
[info]   CI (99.9%): [≈ 0, 3.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.340 ±(99.9%) 40.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.340, 24.217), stdev = 10.562
[info]   CI (99.9%): [≈ 0, 46.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 25.45% complete, ETA 00:52:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101228.776 ops/s
[info] # Warmup Iteration   2: 112684.189 ops/s
[info] # Warmup Iteration   3: 112682.941 ops/s
[info] Iteration   1: 110794.088 ops/s
[info]                  ·gc.alloc.rate:               322.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7267.387 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 111859.755 ops/s
[info]                  ·gc.alloc.rate:                   325.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3599.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 112167.993 ops/s
[info]                  ·gc.alloc.rate:                   326.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4654.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 112929.199 ops/s
[info]                  ·gc.alloc.rate:                   328.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4623.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 113023.854 ops/s
[info]                  ·gc.alloc.rate:                   329.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4610.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   112154.978 ±(99.9%) 3494.187 ops/s [Average]
[info]   (min, avg, max) = (110794.088, 112154.978, 113023.854), stdev = 907.429
[info]   CI (99.9%): [108660.791, 115649.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   326.676 ±(99.9%) 10.066 MB/sec [Average]
[info]   (min, avg, max) = (322.773, 326.676, 329.199), stdev = 2.614
[info]   CI (99.9%): [316.609, 336.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4584.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4584.004, 4584.004), stdev = 0.001
[info]   CI (99.9%): [4584.004, 4584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   352.416 ±(99.9%) 365.417 MB/sec [Average]
[info]   (min, avg, max) = (255.798, 352.416, 511.718), stdev = 94.898
[info]   CI (99.9%): [≈ 0, 717.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4950.985 ±(99.9%) 5274.297 B/op [Average]
[info]   (min, avg, max) = (3599.070, 4950.985, 7267.387), stdev = 1369.718
[info]   CI (99.9%): [≈ 0, 10225.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.369 ±(99.9%) 3.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.369, 1.782), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 3.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.175 ±(99.9%) 42.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.175, 25.005), stdev = 11.088
[info]   CI (99.9%): [≈ 0, 47.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 25.76% complete, ETA 00:52:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6054.502 ops/s
[info] # Warmup Iteration   2: 9226.795 ops/s
[info] # Warmup Iteration   3: 9618.746 ops/s
[info] Iteration   1: 9535.416 ops/s
[info]                  ·gc.alloc.rate:                   1580.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              260912.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219456.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.872 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9527.757 ops/s
[info]                  ·gc.alloc.rate:                   1579.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              260912.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275816.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.633 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9559.689 ops/s
[info]                  ·gc.alloc.rate:                   1584.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              260912.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276209.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.709 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9652.748 ops/s
[info]                  ·gc.alloc.rate:                   1600.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              260917.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274456.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.780 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9582.426 ops/s
[info]                  ·gc.alloc.rate:                   1588.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              260944.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222100.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9571.607 ±(99.9%) 193.257 ops/s [Average]
[info]   (min, avg, max) = (9527.757, 9571.607, 9652.748), stdev = 50.188
[info]   CI (99.9%): [9378.350, 9764.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1586.967 ±(99.9%) 33.244 MB/sec [Average]
[info]   (min, avg, max) = (1579.477, 1586.967, 1600.961), stdev = 8.633
[info]   CI (99.9%): [1553.722, 1620.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260919.606 ±(99.9%) 53.487 B/op [Average]
[info]   (min, avg, max) = (260912.045, 260919.606, 260944.045), stdev = 13.890
[info]   CI (99.9%): [260866.120, 260973.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1542.678 ±(99.9%) 710.081 MB/sec [Average]
[info]   (min, avg, max) = (1329.603, 1542.678, 1684.034), stdev = 184.406
[info]   CI (99.9%): [832.596, 2252.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   253607.897 ±(99.9%) 115483.384 B/op [Average]
[info]   (min, avg, max) = (219456.611, 253607.897, 276209.461), stdev = 29990.668
[info]   CI (99.9%): [138124.513, 369091.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.334 ±(99.9%) 22.224 B/op [Average]
[info]   (min, avg, max) = (6.780, 12.334, 20.633), stdev = 5.772
[info]   CI (99.9%): [≈ 0, 34.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 26.06% complete, ETA 00:51:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4879.700 ops/s
[info] # Warmup Iteration   2: 9382.404 ops/s
[info] # Warmup Iteration   3: 9587.278 ops/s
[info] Iteration   1: 9556.195 ops/s
[info]                  ·gc.alloc.rate:                   1469.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270481.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.285 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9388.639 ops/s
[info]                  ·gc.alloc.rate:                   1444.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221719.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.959 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9539.157 ops/s
[info]                  ·gc.alloc.rate:                   1468.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274645.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.738 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9507.560 ops/s
[info]                  ·gc.alloc.rate:                   1462.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              242105.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221867.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.892 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9593.830 ops/s
[info]                  ·gc.alloc.rate:                   1475.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              242136.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220729.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9517.076 ±(99.9%) 301.333 ops/s [Average]
[info]   (min, avg, max) = (9388.639, 9517.076, 9593.830), stdev = 78.255
[info]   CI (99.9%): [9215.743, 9818.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1464.217 ±(99.9%) 46.546 MB/sec [Average]
[info]   (min, avg, max) = (1444.311, 1464.217, 1475.962), stdev = 12.088
[info]   CI (99.9%): [1417.671, 1510.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242110.720 ±(99.9%) 54.562 B/op [Average]
[info]   (min, avg, max) = (242104.045, 242110.720, 242136.045), stdev = 14.170
[info]   CI (99.9%): [242056.158, 242165.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1463.269 ±(99.9%) 671.431 MB/sec [Average]
[info]   (min, avg, max) = (1322.705, 1463.269, 1665.424), stdev = 174.368
[info]   CI (99.9%): [791.839, 2134.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   241888.748 ±(99.9%) 107988.220 B/op [Average]
[info]   (min, avg, max) = (220729.837, 241888.748, 274645.365), stdev = 28044.198
[info]   CI (99.9%): [133900.528, 349876.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.389 ±(99.9%) 15.022 B/op [Average]
[info]   (min, avg, max) = (6.892, 12.389, 17.074), stdev = 3.901
[info]   CI (99.9%): [≈ 0, 27.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 26.36% complete, ETA 00:51:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114746.861 ops/s
[info] # Warmup Iteration   2: 121493.782 ops/s
[info] # Warmup Iteration   3: 119782.958 ops/s
[info] Iteration   1: 117328.710 ops/s
[info]                  ·gc.alloc.rate:               305.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3431.187 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 117830.289 ops/s
[info]                  ·gc.alloc.rate:                   306.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6833.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.556 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 122214.836 ops/s
[info]                  ·gc.alloc.rate:                   318.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4284.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.973 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 122067.504 ops/s
[info]                  ·gc.alloc.rate:                   317.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4290.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 116619.355 ops/s
[info]                  ·gc.alloc.rate:      303.646 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   119212.139 ±(99.9%) 10430.314 ops/s [Average]
[info]   (min, avg, max) = (116619.355, 119212.139, 122214.836), stdev = 2708.719
[info]   CI (99.9%): [108781.825, 129642.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   310.312 ±(99.9%) 26.987 MB/sec [Average]
[info]   (min, avg, max) = (303.646, 310.312, 318.100), stdev = 7.008
[info]   CI (99.9%): [283.326, 337.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.623 ±(99.9%) 715.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.623, 511.797), stdev = 185.784
[info]   CI (99.9%): [≈ 0, 1002.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3767.982 ±(99.9%) 9480.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3767.982, 6833.607), stdev = 2462.169
[info]   CI (99.9%): [≈ 0, 13248.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.327 ±(99.9%) 2.636 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.327, 1.551), stdev = 0.685
[info]   CI (99.9%): [≈ 0, 2.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.213 ±(99.9%) 33.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.213, 19.973), stdev = 8.814
[info]   CI (99.9%): [≈ 0, 38.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 26.67% complete, ETA 00:51:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2573.673 ops/s
[info] # Warmup Iteration   2: 5464.618 ops/s
[info] # Warmup Iteration   3: 5749.062 ops/s
[info] Iteration   1: 5795.380 ops/s
[info]                  ·gc.alloc.rate:                   1541.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446870.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5776.190 ops/s
[info]                  ·gc.alloc.rate:                   1537.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451424.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.356 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5710.134 ops/s
[info]                  ·gc.alloc.rate:                   1518.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367763.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.475 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5609.485 ops/s
[info]                  ·gc.alloc.rate:                   1492.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470280.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.680 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5815.936 ops/s
[info]                  ·gc.alloc.rate:                   1547.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364486.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5741.425 ±(99.9%) 322.507 ops/s [Average]
[info]   (min, avg, max) = (5609.485, 5741.425, 5815.936), stdev = 83.754
[info]   CI (99.9%): [5418.918, 6063.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1527.546 ±(99.9%) 86.421 MB/sec [Average]
[info]   (min, avg, max) = (1492.222, 1527.546, 1547.303), stdev = 22.443
[info]   CI (99.9%): [1441.125, 1613.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418664.076 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (418664.074, 418664.076, 418664.081), stdev = 0.003
[info]   CI (99.9%): [418664.065, 418664.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1532.197 ±(99.9%) 674.753 MB/sec [Average]
[info]   (min, avg, max) = (1334.269, 1532.197, 1676.194), stdev = 175.231
[info]   CI (99.9%): [857.443, 2206.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   420165.148 ±(99.9%) 192992.040 B/op [Average]
[info]   (min, avg, max) = (364486.964, 420165.148, 470280.076), stdev = 50119.420
[info]   CI (99.9%): [227173.108, 613157.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.070 ±(99.9%) 30.490 B/op [Average]
[info]   (min, avg, max) = (11.305, 17.070, 28.356), stdev = 7.918
[info]   CI (99.9%): [≈ 0, 47.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 26.97% complete, ETA 00:51:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17193.218 ops/s
[info] # Warmup Iteration   2: 24315.617 ops/s
[info] # Warmup Iteration   3: 24219.974 ops/s
[info] Iteration   1: 24121.945 ops/s
[info]                  ·gc.alloc.rate:                   1776.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108525.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.791 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23805.554 ops/s
[info]                  ·gc.alloc.rate:                   1752.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              115884.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110582.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.881 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 24400.800 ops/s
[info]                  ·gc.alloc.rate:                   1795.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130185.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.713 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 24709.897 ops/s
[info]                  ·gc.alloc.rate:                   1818.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107594.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.629 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24217.452 ops/s
[info]                  ·gc.alloc.rate:                   1782.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110048.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24251.129 ±(99.9%) 1290.438 ops/s [Average]
[info]   (min, avg, max) = (23805.554, 24251.129, 24709.897), stdev = 335.123
[info]   CI (99.9%): [22960.691, 25541.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1785.254 ±(99.9%) 93.561 MB/sec [Average]
[info]   (min, avg, max) = (1752.855, 1785.254, 1818.615), stdev = 24.297
[info]   CI (99.9%): [1691.693, 1878.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115855.410 ±(99.9%) 124.255 B/op [Average]
[info]   (min, avg, max) = (115832.017, 115855.410, 115896.018), stdev = 32.269
[info]   CI (99.9%): [115731.155, 115979.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1747.460 ±(99.9%) 585.100 MB/sec [Average]
[info]   (min, avg, max) = (1663.364, 1747.460, 2018.386), stdev = 151.949
[info]   CI (99.9%): [1162.359, 2332.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   113387.342 ±(99.9%) 36449.180 B/op [Average]
[info]   (min, avg, max) = (107594.122, 113387.342, 130185.834), stdev = 9465.736
[info]   CI (99.9%): [76938.162, 149836.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.215 ±(99.9%) 4.655 B/op [Average]
[info]   (min, avg, max) = (4.059, 6.215, 6.881), stdev = 1.209
[info]   CI (99.9%): [1.560, 10.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 27.27% complete, ETA 00:50:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17958.483 ops/s
[info] # Warmup Iteration   2: 28159.958 ops/s
[info] # Warmup Iteration   3: 28741.843 ops/s
[info] Iteration   1: 28895.984 ops/s
[info]                  ·gc.alloc.rate:                   1843.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90014.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.937 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28462.050 ops/s
[info]                  ·gc.alloc.rate:                   1815.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110559.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.907 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28702.574 ops/s
[info]                  ·gc.alloc.rate:                   1831.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91996.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28305.202 ops/s
[info]                  ·gc.alloc.rate:                   1805.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93705.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28627.168 ops/s
[info]                  ·gc.alloc.rate:                   1826.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111592.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.722 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   28598.596 ±(99.9%) 871.285 ops/s [Average]
[info]   (min, avg, max) = (28305.202, 28598.596, 28895.984), stdev = 226.270
[info]   CI (99.9%): [27727.311, 29469.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1824.584 ±(99.9%) 56.026 MB/sec [Average]
[info]   (min, avg, max) = (1805.636, 1824.584, 1843.583), stdev = 14.550
[info]   CI (99.9%): [1768.558, 1880.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100392.016 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (100392.015, 100392.016, 100392.022), stdev = 0.003
[info]   CI (99.9%): [100392.005, 100392.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1809.311 ±(99.9%) 725.056 MB/sec [Average]
[info]   (min, avg, max) = (1653.017, 1809.311, 2029.764), stdev = 188.295
[info]   CI (99.9%): [1084.255, 2534.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99573.740 ±(99.9%) 40768.506 B/op [Average]
[info]   (min, avg, max) = (90014.777, 99573.740, 111592.717), stdev = 10587.451
[info]   CI (99.9%): [58805.235, 140342.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.946 ±(99.9%) 8.378 B/op [Average]
[info]   (min, avg, max) = (2.315, 5.946, 7.937), stdev = 2.176
[info]   CI (99.9%): [≈ 0, 14.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 27.58% complete, ETA 00:50:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314519.609 ops/s
[info] # Warmup Iteration   2: 337310.474 ops/s
[info] # Warmup Iteration   3: 331439.007 ops/s
[info] Iteration   1: 333230.953 ops/s
[info]                  ·gc.alloc.rate:                   735.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3133.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 333117.693 ops/s
[info]                  ·gc.alloc.rate:                   734.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3131.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 333636.073 ops/s
[info]                  ·gc.alloc.rate:                   736.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3129.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 333309.405 ops/s
[info]                  ·gc.alloc.rate:                   735.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3136.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 331737.443 ops/s
[info]                  ·gc.alloc.rate:                   731.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4739.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   333006.313 ±(99.9%) 2830.526 ops/s [Average]
[info]   (min, avg, max) = (331737.443, 333006.313, 333636.073), stdev = 735.079
[info]   CI (99.9%): [330175.787, 335836.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   734.610 ±(99.9%) 6.232 MB/sec [Average]
[info]   (min, avg, max) = (731.823, 734.610, 736.013), stdev = 1.618
[info]   CI (99.9%): [728.378, 740.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.549 ±(99.9%) 577.613 MB/sec [Average]
[info]   (min, avg, max) = (662.790, 730.549, 998.883), stdev = 150.004
[info]   CI (99.9%): [152.936, 1308.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3454.026 ±(99.9%) 2766.057 B/op [Average]
[info]   (min, avg, max) = (3129.824, 3454.026, 4739.018), stdev = 718.336
[info]   CI (99.9%): [687.969, 6220.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.374 ±(99.9%) 0.943 B/op [Average]
[info]   (min, avg, max) = (0.196, 0.374, 0.787), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.88% complete, ETA 00:50:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343137.488 ops/s
[info] # Warmup Iteration   2: 363370.926 ops/s
[info] # Warmup Iteration   3: 386525.955 ops/s
[info] Iteration   1: 386632.315 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 386185.185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 386234.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 386411.555 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 386484.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   386389.569 ±(99.9%) 705.798 ops/s [Average]
[info]   (min, avg, max) = (386185.185, 386389.569, 386632.315), stdev = 183.294
[info]   CI (99.9%): [385683.771, 387095.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 28.18% complete, ETA 00:50:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20027.983 ops/s
[info] # Warmup Iteration   2: 28116.175 ops/s
[info] # Warmup Iteration   3: 28255.147 ops/s
[info] Iteration   1: 28639.559 ops/s
[info]                  ·gc.alloc.rate:                   1877.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109382.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.720 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 28344.640 ops/s
[info]                  ·gc.alloc.rate:                   1859.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111284.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.085 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 28761.448 ops/s
[info]                  ·gc.alloc.rate:                   1886.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92004.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.696 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28846.722 ops/s
[info]                  ·gc.alloc.rate:                   1891.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110560.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.407 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28336.020 ops/s
[info]                  ·gc.alloc.rate:                   1857.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94084.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28585.678 ±(99.9%) 907.908 ops/s [Average]
[info]   (min, avg, max) = (28336.020, 28585.678, 28846.722), stdev = 235.781
[info]   CI (99.9%): [27677.770, 29493.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1874.589 ±(99.9%) 59.488 MB/sec [Average]
[info]   (min, avg, max) = (1857.959, 1874.589, 1891.435), stdev = 15.449
[info]   CI (99.9%): [1815.100, 1934.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103200.017 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (103200.015, 103200.017, 103200.022), stdev = 0.003
[info]   CI (99.9%): [103200.006, 103200.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1879.441 ±(99.9%) 675.425 MB/sec [Average]
[info]   (min, avg, max) = (1681.881, 1879.441, 2026.329), stdev = 175.406
[info]   CI (99.9%): [1204.015, 2554.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   103463.160 ±(99.9%) 36825.843 B/op [Average]
[info]   (min, avg, max) = (92004.652, 103463.160, 111284.845), stdev = 9563.555
[info]   CI (99.9%): [66637.317, 140289.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.275 ±(99.9%) 7.462 B/op [Average]
[info]   (min, avg, max) = (3.407, 5.275, 8.085), stdev = 1.938
[info]   CI (99.9%): [≈ 0, 12.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 28.48% complete, ETA 00:50:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105512.728 ops/s
[info] # Warmup Iteration   2: 128572.286 ops/s
[info] # Warmup Iteration   3: 127890.788 ops/s
[info] Iteration   1: 126737.677 ops/s
[info]                  ·gc.alloc.rate:                   2182.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24965.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 128142.058 ops/s
[info]                  ·gc.alloc.rate:                   2206.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28971.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.045 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 128328.104 ops/s
[info]                  ·gc.alloc.rate:                   2209.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24889.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.021 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 129653.131 ops/s
[info]                  ·gc.alloc.rate:                   2232.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28822.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.516 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 128313.293 ops/s
[info]                  ·gc.alloc.rate:                   2210.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29169.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.532 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   128234.853 ±(99.9%) 3981.512 ops/s [Average]
[info]   (min, avg, max) = (126737.677, 128234.853, 129653.131), stdev = 1033.986
[info]   CI (99.9%): [124253.341, 132216.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2208.483 ±(99.9%) 68.704 MB/sec [Average]
[info]   (min, avg, max) = (2182.497, 2208.483, 2232.759), stdev = 17.842
[info]   CI (99.9%): [2139.779, 2277.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27104.003, 27104.003, 27104.004), stdev = 0.001
[info]   CI (99.9%): [27104.003, 27104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2230.344 ±(99.9%) 740.978 MB/sec [Average]
[info]   (min, avg, max) = (2010.283, 2230.344, 2378.903), stdev = 192.430
[info]   CI (99.9%): [1489.366, 2971.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27363.696 ±(99.9%) 8577.397 B/op [Average]
[info]   (min, avg, max) = (24889.648, 27363.696, 29169.781), stdev = 2227.523
[info]   CI (99.9%): [18786.299, 35941.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.326 ±(99.9%) 2.232 B/op [Average]
[info]   (min, avg, max) = (0.517, 1.326, 2.045), stdev = 0.580
[info]   CI (99.9%): [≈ 0, 3.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 28.79% complete, ETA 00:49:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204006.995 ops/s
[info] # Warmup Iteration   2: 294355.824 ops/s
[info] # Warmup Iteration   3: 296319.306 ops/s
[info] Iteration   1: 296015.863 ops/s
[info]                  ·gc.alloc.rate:                   418.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2720.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 296735.190 ops/s
[info]                  ·gc.alloc.rate:                   419.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1733.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.440 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 297272.064 ops/s
[info]                  ·gc.alloc.rate:                   420.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1729.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 288901.818 ops/s
[info]                  ·gc.alloc.rate:               408.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      652.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3556.488 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 297227.732 ops/s
[info]                  ·gc.alloc.rate:                   420.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1731.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   295230.533 ±(99.9%) 13761.678 ops/s [Average]
[info]   (min, avg, max) = (288901.818, 295230.533, 297272.064), stdev = 3573.864
[info]   CI (99.9%): [281468.855, 308992.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   417.191 ±(99.9%) 19.315 MB/sec [Average]
[info]   (min, avg, max) = (408.312, 417.191, 420.060), stdev = 5.016
[info]   CI (99.9%): [397.876, 436.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.002, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.013 ±(99.9%) 572.021 MB/sec [Average]
[info]   (min, avg, max) = (326.742, 429.013, 652.948), stdev = 148.552
[info]   CI (99.9%): [≈ 0, 1001.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2294.284 ±(99.9%) 3177.788 B/op [Average]
[info]   (min, avg, max) = (1729.933, 2294.284, 3556.488), stdev = 825.261
[info]   CI (99.9%): [≈ 0, 5472.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.452 ±(99.9%) 3.670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.157), stdev = 0.953
[info]   CI (99.9%): [≈ 0, 4.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.398 ±(99.9%) 19.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.398, 11.440), stdev = 5.055
[info]   CI (99.9%): [≈ 0, 21.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 29.09% complete, ETA 00:49:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 669307.080 ops/s
[info] # Warmup Iteration   2: 711124.820 ops/s
[info] # Warmup Iteration   3: 712570.015 ops/s
[info] Iteration   1: 714794.777 ops/s
[info]                  ·gc.alloc.rate:                   465.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1295.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 714709.185 ops/s
[info]                  ·gc.alloc.rate:                   464.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 714939.990 ops/s
[info]                  ·gc.alloc.rate:                   465.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 700004.213 ops/s
[info]                  ·gc.alloc.rate:                   455.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 696330.952 ops/s
[info]                  ·gc.alloc.rate:               453.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 751.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   708155.824 ±(99.9%) 35465.847 ops/s [Average]
[info]   (min, avg, max) = (696330.952, 708155.824, 714939.990), stdev = 9210.368
[info]   CI (99.9%): [672689.976, 743621.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   460.775 ±(99.9%) 22.847 MB/sec [Average]
[info]   (min, avg, max) = (453.078, 460.775, 465.151), stdev = 5.933
[info]   CI (99.9%): [437.928, 483.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.095 ±(99.9%) 629.312 MB/sec [Average]
[info]   (min, avg, max) = (332.386, 450.095, 665.089), stdev = 163.430
[info]   CI (99.9%): [≈ 0, 1079.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1000.997 ±(99.9%) 1411.564 B/op [Average]
[info]   (min, avg, max) = (731.752, 1000.997, 1494.767), stdev = 366.579
[info]   CI (99.9%): [≈ 0, 2412.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.348 ±(99.9%) 2.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.595), stdev = 0.698
[info]   CI (99.9%): [≈ 0, 3.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.767 ±(99.9%) 5.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 3.511), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 6.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 29.39% complete, ETA 00:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42368.270 ops/s
[info] # Warmup Iteration   2: 69924.644 ops/s
[info] # Warmup Iteration   3: 70894.222 ops/s
[info] Iteration   1: 70160.542 ops/s
[info]                  ·gc.alloc.rate:                   2980.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67745.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.736 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 70950.701 ops/s
[info]                  ·gc.alloc.rate:                   3014.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59979.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.080 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 69644.051 ops/s
[info]                  ·gc.alloc.rate:                   2964.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              66996.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69023.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.293 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 71080.729 ops/s
[info]                  ·gc.alloc.rate:                   3019.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67728.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.305 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 71016.862 ops/s
[info]                  ·gc.alloc.rate:                   3017.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67894.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.307 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70570.577 ±(99.9%) 2458.462 ops/s [Average]
[info]   (min, avg, max) = (69644.051, 70570.577, 71080.729), stdev = 638.455
[info]   CI (99.9%): [68112.115, 73029.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2999.196 ±(99.9%) 96.866 MB/sec [Average]
[info]   (min, avg, max) = (2964.626, 2999.196, 3019.475), stdev = 25.156
[info]   CI (99.9%): [2902.330, 3096.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66884.020 ±(99.9%) 241.209 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66884.020, 66996.076), stdev = 62.641
[info]   CI (99.9%): [66642.811, 67125.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.311 ±(99.9%) 597.898 MB/sec [Average]
[info]   (min, avg, max) = (2704.302, 2980.311, 3064.250), stdev = 155.272
[info]   CI (99.9%): [2382.413, 3578.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66474.220 ±(99.9%) 14134.337 B/op [Average]
[info]   (min, avg, max) = (59979.002, 66474.220, 69023.889), stdev = 3670.643
[info]   CI (99.9%): [52339.883, 80608.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.229), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.344 ±(99.9%) 4.443 B/op [Average]
[info]   (min, avg, max) = (2.305, 3.344, 5.080), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 7.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 29.70% complete, ETA 00:49:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166238.533 ops/s
[info] # Warmup Iteration   2: 208354.655 ops/s
[info] # Warmup Iteration   3: 212648.434 ops/s
[info] Iteration   1: 212899.285 ops/s
[info]                  ·gc.alloc.rate:                   1730.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14747.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 212079.375 ops/s
[info]                  ·gc.alloc.rate:                   1723.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12413.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.772 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 213466.468 ops/s
[info]                  ·gc.alloc.rate:                   1735.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12396.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.614 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 211106.419 ops/s
[info]                  ·gc.alloc.rate:                   1715.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12579.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 213172.607 ops/s
[info]                  ·gc.alloc.rate:                   1732.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12502.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   212544.831 ±(99.9%) 3680.757 ops/s [Average]
[info]   (min, avg, max) = (211106.419, 212544.831, 213466.468), stdev = 955.881
[info]   CI (99.9%): [208864.073, 216225.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1727.481 ±(99.9%) 30.018 MB/sec [Average]
[info]   (min, avg, max) = (1715.709, 1727.481, 1735.014), stdev = 7.796
[info]   CI (99.9%): [1697.463, 1757.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12792.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12792.002, 12792.002, 12792.002), stdev = 0.001
[info]   CI (99.9%): [12792.002, 12792.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.899 ±(99.9%) 536.661 MB/sec [Average]
[info]   (min, avg, max) = (1672.749, 1745.899, 1994.841), stdev = 139.369
[info]   CI (99.9%): [1209.238, 2282.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12927.792 ±(99.9%) 3926.203 B/op [Average]
[info]   (min, avg, max) = (12396.629, 12927.792, 14747.000), stdev = 1019.622
[info]   CI (99.9%): [9001.589, 16853.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.679 ±(99.9%) 0.336 B/op [Average]
[info]   (min, avg, max) = (0.614, 0.679, 0.776), stdev = 0.087
[info]   CI (99.9%): [0.342, 1.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 30.00% complete, ETA 00:49:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 607714.199 ops/s
[info] # Warmup Iteration   2: 832441.886 ops/s
[info] # Warmup Iteration   3: 841418.067 ops/s
[info] Iteration   1: 843535.102 ops/s
[info]                  ·gc.alloc.rate:                   664.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1219.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 837495.841 ops/s
[info]                  ·gc.alloc.rate:                   659.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1229.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 844563.513 ops/s
[info]                  ·gc.alloc.rate:                   665.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1220.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 841768.391 ops/s
[info]                  ·gc.alloc.rate:                   663.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1227.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 843039.280 ops/s
[info]                  ·gc.alloc.rate:                   664.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1229.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   842080.426 ±(99.9%) 10600.989 ops/s [Average]
[info]   (min, avg, max) = (837495.841, 842080.426, 844563.513), stdev = 2753.043
[info]   CI (99.9%): [831479.436, 852681.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   663.428 ±(99.9%) 8.315 MB/sec [Average]
[info]   (min, avg, max) = (659.831, 663.428, 665.376), stdev = 2.160
[info]   CI (99.9%): [655.113, 671.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.535 ±(99.9%) 7.485 MB/sec [Average]
[info]   (min, avg, max) = (653.782, 655.535, 658.478), stdev = 1.944
[info]   CI (99.9%): [648.050, 663.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1225.255 ±(99.9%) 18.403 B/op [Average]
[info]   (min, avg, max) = (1219.903, 1225.255, 1229.317), stdev = 4.779
[info]   CI (99.9%): [1206.852, 1243.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.117 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.117, 0.233), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 30.30% complete, ETA 00:48:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 909501.556 ops/s
[info] # Warmup Iteration   2: 979809.346 ops/s
[info] # Warmup Iteration   3: 994173.330 ops/s
[info] Iteration   1: 988774.964 ops/s
[info]                  ·gc.alloc.rate:                   537.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1020274.931 ops/s
[info]                  ·gc.alloc.rate:                   554.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1023.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1018659.119 ops/s
[info]                  ·gc.alloc.rate:                   554.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1025.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1006179.861 ops/s
[info]                  ·gc.alloc.rate:               547.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 518.885 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 989053.847 ops/s
[info]                  ·gc.alloc.rate:                   537.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1055.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1004588.544 ±(99.9%) 58965.551 ops/s [Average]
[info]   (min, avg, max) = (988774.964, 1004588.544, 1020274.931), stdev = 15313.166
[info]   CI (99.9%): [945622.993, 1063554.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   546.432 ±(99.9%) 32.215 MB/sec [Average]
[info]   (min, avg, max) = (537.811, 546.432, 554.982), stdev = 8.366
[info]   CI (99.9%): [514.218, 578.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.841 ±(99.9%) 699.796 MB/sec [Average]
[info]   (min, avg, max) = (331.755, 530.841, 663.625), stdev = 181.735
[info]   CI (99.9%): [≈ 0, 1230.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   830.268 ±(99.9%) 1079.652 B/op [Average]
[info]   (min, avg, max) = (518.885, 830.268, 1055.781), stdev = 280.382
[info]   CI (99.9%): [≈ 0, 1909.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.392 ±(99.9%) 2.929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.392, 1.751), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.622 ±(99.9%) 4.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.622, 2.787), stdev = 1.212
[info]   CI (99.9%): [≈ 0, 5.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 30.61% complete, ETA 00:48:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 894897.465 ops/s
[info] # Warmup Iteration   2: 982207.992 ops/s
[info] # Warmup Iteration   3: 978829.355 ops/s
[info] Iteration   1: 1000905.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1000644.379 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 962688.254 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 990982.273 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 992739.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   989592.070 ±(99.9%) 60450.434 ops/s [Average]
[info]   (min, avg, max) = (962688.254, 989592.070, 1000905.695), stdev = 15698.786
[info]   CI (99.9%): [929141.636, 1050042.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 30.91% complete, ETA 00:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21961.463 ops/s
[info] # Warmup Iteration   2: 30253.862 ops/s
[info] # Warmup Iteration   3: 30499.197 ops/s
[info] Iteration   1: 30560.872 ops/s
[info]                  ·gc.alloc.rate:                   1687.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              86886.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85217.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.216 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30590.325 ops/s
[info]                  ·gc.alloc.rate:                   1688.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85750.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.497 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30739.321 ops/s
[info]                  ·gc.alloc.rate:                   1697.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85812.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.263 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30661.700 ops/s
[info]                  ·gc.alloc.rate:                   1692.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86458.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30313.364 ops/s
[info]                  ·gc.alloc.rate:                   1673.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87730.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.162 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30573.116 ±(99.9%) 619.070 ops/s [Average]
[info]   (min, avg, max) = (30313.364, 30573.116, 30739.321), stdev = 160.771
[info]   CI (99.9%): [29954.046, 31192.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1687.894 ±(99.9%) 35.041 MB/sec [Average]
[info]   (min, avg, max) = (1673.185, 1687.894, 1697.309), stdev = 9.100
[info]   CI (99.9%): [1652.854, 1722.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86874.933 ±(99.9%) 25.129 B/op [Average]
[info]   (min, avg, max) = (86872.014, 86874.933, 86886.607), stdev = 6.526
[info]   CI (99.9%): [86849.803, 86900.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.602 ±(99.9%) 53.796 MB/sec [Average]
[info]   (min, avg, max) = (1655.144, 1674.602, 1689.712), stdev = 13.971
[info]   CI (99.9%): [1620.806, 1728.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86193.662 ±(99.9%) 3716.313 B/op [Average]
[info]   (min, avg, max) = (85217.169, 86193.662, 87730.086), stdev = 965.115
[info]   CI (99.9%): [82477.349, 89909.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.283 ±(99.9%) 7.694 B/op [Average]
[info]   (min, avg, max) = (2.162, 4.283, 7.497), stdev = 1.998
[info]   CI (99.9%): [≈ 0, 11.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 31.21% complete, ETA 00:48:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100119.416 ops/s
[info] # Warmup Iteration   2: 129163.734 ops/s
[info] # Warmup Iteration   3: 131456.734 ops/s
[info] Iteration   1: 131333.789 ops/s
[info]                  ·gc.alloc.rate:                   1806.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19920.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.497 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 131125.320 ops/s
[info]                  ·gc.alloc.rate:                   1804.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20092.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.750 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 131133.296 ops/s
[info]                  ·gc.alloc.rate:                   1803.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20195.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.750 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 130668.320 ops/s
[info]                  ·gc.alloc.rate:                   1797.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24415.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 131592.551 ops/s
[info]                  ·gc.alloc.rate:                   1809.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20260.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.747 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   131170.655 ±(99.9%) 1306.385 ops/s [Average]
[info]   (min, avg, max) = (130668.320, 131170.655, 131592.551), stdev = 339.264
[info]   CI (99.9%): [129864.270, 132477.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1804.316 ±(99.9%) 17.906 MB/sec [Average]
[info]   (min, avg, max) = (1797.260, 1804.316, 1809.980), stdev = 4.650
[info]   CI (99.9%): [1786.410, 1822.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21648.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21648.003, 21648.003, 21648.004), stdev = 0.001
[info]   CI (99.9%): [21648.003, 21648.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1748.105 ±(99.9%) 602.013 MB/sec [Average]
[info]   (min, avg, max) = (1662.261, 1748.105, 2027.011), stdev = 156.341
[info]   CI (99.9%): [1146.093, 2350.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20976.915 ±(99.9%) 7417.914 B/op [Average]
[info]   (min, avg, max) = (19920.988, 20976.915, 24415.343), stdev = 1926.409
[info]   CI (99.9%): [13559.001, 28394.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.949 ±(99.9%) 1.253 B/op [Average]
[info]   (min, avg, max) = (0.747, 0.949, 1.497), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 2.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 31.52% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116072.610 ops/s
[info] # Warmup Iteration   2: 191001.162 ops/s
[info] # Warmup Iteration   3: 194403.053 ops/s
[info] Iteration   1: 193513.117 ops/s
[info]                  ·gc.alloc.rate:                   1154.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10635.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.847 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 189130.316 ops/s
[info]                  ·gc.alloc.rate:                   1129.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8201.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 191880.120 ops/s
[info]                  ·gc.alloc.rate:                   1145.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10835.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.854 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 194633.277 ops/s
[info]                  ·gc.alloc.rate:                   1161.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8055.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 190586.127 ops/s
[info]                  ·gc.alloc.rate:                   1137.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11029.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   191948.591 ±(99.9%) 8493.039 ops/s [Average]
[info]   (min, avg, max) = (189130.316, 191948.591, 194633.277), stdev = 2205.615
[info]   CI (99.9%): [183455.552, 200441.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1145.609 ±(99.9%) 50.052 MB/sec [Average]
[info]   (min, avg, max) = (1129.125, 1145.609, 1161.487), stdev = 12.998
[info]   CI (99.9%): [1095.557, 1195.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9392.002, 9392.002, 9392.002), stdev = 0.001
[info]   CI (99.9%): [9392.002, 9392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1189.386 ±(99.9%) 698.100 MB/sec [Average]
[info]   (min, avg, max) = (986.009, 1189.386, 1335.651), stdev = 181.294
[info]   CI (99.9%): [491.286, 1887.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9751.618 ±(99.9%) 5733.498 B/op [Average]
[info]   (min, avg, max) = (8055.776, 9751.618, 11029.883), stdev = 1488.971
[info]   CI (99.9%): [4018.121, 15485.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.104), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.684 ±(99.9%) 1.146 B/op [Average]
[info]   (min, avg, max) = (0.168, 0.684, 0.866), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 31.82% complete, ETA 00:47:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251688.145 ops/s
[info] # Warmup Iteration   2: 257942.646 ops/s
[info] # Warmup Iteration   3: 261002.690 ops/s
[info] Iteration   1: 263839.910 ops/s
[info]                  ·gc.alloc.rate:                   858.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3965.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 265768.157 ops/s
[info]                  ·gc.alloc.rate:                   864.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5905.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 265364.281 ops/s
[info]                  ·gc.alloc.rate:                   863.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3950.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 268362.981 ops/s
[info]                  ·gc.alloc.rate:                   873.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5873.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 265677.396 ops/s
[info]                  ·gc.alloc.rate:                   864.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5944.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   265802.545 ±(99.9%) 6273.327 ops/s [Average]
[info]   (min, avg, max) = (263839.910, 265802.545, 268362.981), stdev = 1629.163
[info]   CI (99.9%): [259529.219, 272075.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   864.769 ±(99.9%) 20.489 MB/sec [Average]
[info]   (min, avg, max) = (858.252, 864.769, 873.038), stdev = 5.321
[info]   CI (99.9%): [844.280, 885.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   866.748 ±(99.9%) 707.623 MB/sec [Average]
[info]   (min, avg, max) = (664.761, 866.748, 1003.643), stdev = 183.768
[info]   CI (99.9%): [159.125, 1574.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5128.183 ±(99.9%) 4113.540 B/op [Average]
[info]   (min, avg, max) = (3950.867, 5128.183, 5944.971), stdev = 1068.273
[info]   CI (99.9%): [1014.643, 9241.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.344 ±(99.9%) 0.776 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.344, 0.616), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 1.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 32.12% complete, ETA 00:47:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29922.726 ops/s
[info] # Warmup Iteration   2: 66546.555 ops/s
[info] # Warmup Iteration   3: 65535.479 ops/s
[info] Iteration   1: 67386.653 ops/s
[info]                  ·gc.alloc.rate:                   2800.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62310.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.917 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 67507.904 ops/s
[info]                  ·gc.alloc.rate:                   2805.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62773.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.883 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 66761.699 ops/s
[info]                  ·gc.alloc.rate:                   2775.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3047.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71813.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.435 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 67385.023 ops/s
[info]                  ·gc.alloc.rate:                   2801.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63443.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.945 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 66904.258 ops/s
[info]                  ·gc.alloc.rate:                   2780.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63997.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.448 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   67189.107 ±(99.9%) 1281.252 ops/s [Average]
[info]   (min, avg, max) = (66761.699, 67189.107, 67507.904), stdev = 332.737
[info]   CI (99.9%): [65907.855, 68470.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2792.862 ±(99.9%) 53.164 MB/sec [Average]
[info]   (min, avg, max) = (2775.554, 2792.862, 2805.924), stdev = 13.806
[info]   CI (99.9%): [2739.698, 2846.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65408.006, 65408.007, 65408.007), stdev = 0.001
[info]   CI (99.9%): [65408.006, 65408.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2769.275 ±(99.9%) 604.193 MB/sec [Average]
[info]   (min, avg, max) = (2667.973, 2769.275, 3047.372), stdev = 156.907
[info]   CI (99.9%): [2165.082, 3373.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64867.726 ±(99.9%) 15154.578 B/op [Average]
[info]   (min, avg, max) = (62310.591, 64867.726, 71813.605), stdev = 3935.596
[info]   CI (99.9%): [49713.148, 80022.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.926 ±(99.9%) 2.961 B/op [Average]
[info]   (min, avg, max) = (1.945, 2.926, 3.883), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 5.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 32.42% complete, ETA 00:47:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133733.120 ops/s
[info] # Warmup Iteration   2: 164619.271 ops/s
[info] # Warmup Iteration   3: 166860.832 ops/s
[info] Iteration   1: 166525.111 ops/s
[info]                  ·gc.alloc.rate:                   1089.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12484.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 166604.162 ops/s
[info]                  ·gc.alloc.rate:                   1089.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9391.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.787 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 167104.399 ops/s
[info]                  ·gc.alloc.rate:                   1093.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9395.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 167323.116 ops/s
[info]                  ·gc.alloc.rate:                   1094.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9417.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 167480.215 ops/s
[info]                  ·gc.alloc.rate:                   1095.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12595.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   167007.401 ±(99.9%) 1642.564 ops/s [Average]
[info]   (min, avg, max) = (166525.111, 167007.401, 167480.215), stdev = 426.569
[info]   CI (99.9%): [165364.836, 168649.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1092.614 ±(99.9%) 10.510 MB/sec [Average]
[info]   (min, avg, max) = (1089.635, 1092.614, 1095.583), stdev = 2.729
[info]   CI (99.9%): [1082.104, 1103.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.918 ±(99.9%) 702.986 MB/sec [Average]
[info]   (min, avg, max) = (994.162, 1130.918, 1340.246), stdev = 182.563
[info]   CI (99.9%): [427.933, 1833.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10656.894 ±(99.9%) 6621.036 B/op [Average]
[info]   (min, avg, max) = (9391.839, 10656.894, 12595.282), stdev = 1719.462
[info]   CI (99.9%): [4035.858, 17277.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.588 ±(99.9%) 0.755 B/op [Average]
[info]   (min, avg, max) = (0.392, 0.588, 0.787), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 1.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 32.73% complete, ETA 00:47:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 372657.955 ops/s
[info] # Warmup Iteration   2: 548644.156 ops/s
[info] # Warmup Iteration   3: 567561.000 ops/s
[info] Iteration   1: 552587.498 ops/s
[info]                  ·gc.alloc.rate:                   558.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     928.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.350 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 545884.451 ops/s
[info]                  ·gc.alloc.rate:                   552.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1881.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 547933.659 ops/s
[info]                  ·gc.alloc.rate:                   554.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1876.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 549891.683 ops/s
[info]                  ·gc.alloc.rate:               556.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 935.200 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 549683.200 ops/s
[info]                  ·gc.alloc.rate:                   556.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1874.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   549196.098 ±(99.9%) 9584.828 ops/s [Average]
[info]   (min, avg, max) = (545884.451, 549196.098, 552587.498), stdev = 2489.149
[info]   CI (99.9%): [539611.270, 558780.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   555.542 ±(99.9%) 9.465 MB/sec [Average]
[info]   (min, avg, max) = (552.322, 555.542, 558.919), stdev = 2.458
[info]   CI (99.9%): [546.078, 565.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   522.679 ±(99.9%) 689.969 MB/sec [Average]
[info]   (min, avg, max) = (326.057, 522.679, 654.811), stdev = 179.183
[info]   CI (99.9%): [≈ 0, 1212.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1499.208 ±(99.9%) 1993.986 B/op [Average]
[info]   (min, avg, max) = (928.726, 1499.208, 1881.223), stdev = 517.832
[info]   CI (99.9%): [≈ 0, 3493.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.479 ±(99.9%) 3.769 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.479, 2.230), stdev = 0.979
[info]   CI (99.9%): [≈ 0, 4.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.366 ±(99.9%) 10.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.366, 6.350), stdev = 2.787
[info]   CI (99.9%): [≈ 0, 12.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 33.03% complete, ETA 00:46:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 526951.162 ops/s
[info] # Warmup Iteration   2: 569463.900 ops/s
[info] # Warmup Iteration   3: 557497.733 ops/s
[info] Iteration   1: 576344.038 ops/s
[info]                  ·gc.alloc.rate:                   442.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     698.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 567910.723 ops/s
[info]                  ·gc.alloc.rate:                   436.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1837.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 562549.769 ops/s
[info]                  ·gc.alloc.rate:                   431.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     926.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 564934.074 ops/s
[info]                  ·gc.alloc.rate:               433.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.337 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 559958.007 ops/s
[info]                  ·gc.alloc.rate:                   429.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   566339.322 ±(99.9%) 24324.693 ops/s [Average]
[info]   (min, avg, max) = (559958.007, 566339.322, 576344.038), stdev = 6317.046
[info]   CI (99.9%): [542014.629, 590664.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   434.771 ±(99.9%) 18.876 MB/sec [Average]
[info]   (min, avg, max) = (429.905, 434.771, 442.547), stdev = 4.902
[info]   CI (99.9%): [415.895, 453.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   382.460 ±(99.9%) 616.960 MB/sec [Average]
[info]   (min, avg, max) = (255.904, 382.460, 663.094), stdev = 160.223
[info]   CI (99.9%): [≈ 0, 999.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1062.947 ±(99.9%) 1709.108 B/op [Average]
[info]   (min, avg, max) = (698.532, 1062.947, 1837.047), stdev = 443.850
[info]   CI (99.9%): [≈ 0, 2772.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 3.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.796), stdev = 0.796
[info]   CI (99.9%): [≈ 0, 3.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.033 ±(99.9%) 8.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.033, 4.976), stdev = 2.204
[info]   CI (99.9%): [≈ 0, 9.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.33% complete, ETA 00:46:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 540007.271 ops/s
[info] # Warmup Iteration   2: 589314.054 ops/s
[info] # Warmup Iteration   3: 588726.168 ops/s
[info] Iteration   1: 588739.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 588768.842 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 588622.410 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 588862.025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 588856.595 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   588769.794 ±(99.9%) 378.787 ops/s [Average]
[info]   (min, avg, max) = (588622.410, 588769.794, 588862.025), stdev = 98.370
[info]   CI (99.9%): [588391.007, 589148.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 33.64% complete, ETA 00:46:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195935.070 ops/s
[info] # Warmup Iteration   2: 343257.530 ops/s
[info] # Warmup Iteration   3: 348742.128 ops/s
[info] Iteration   1: 341721.398 ops/s
[info]                  ·gc.alloc.rate:                   941.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4500.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 346649.630 ops/s
[info]                  ·gc.alloc.rate:                   955.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4442.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 344614.189 ops/s
[info]                  ·gc.alloc.rate:               949.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      983.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4492.133 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 348885.210 ops/s
[info]                  ·gc.alloc.rate:                   961.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4455.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 341099.011 ops/s
[info]                  ·gc.alloc.rate:                   939.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4584.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.384 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   344593.887 ±(99.9%) 12640.923 ops/s [Average]
[info]   (min, avg, max) = (341099.011, 344593.887, 348885.210), stdev = 3282.807
[info]   CI (99.9%): [331952.965, 357234.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   949.372 ±(99.9%) 34.891 MB/sec [Average]
[info]   (min, avg, max) = (939.755, 949.372, 961.213), stdev = 9.061
[info]   CI (99.9%): [914.481, 984.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   984.137 ±(99.9%) 25.943 MB/sec [Average]
[info]   (min, avg, max) = (977.181, 984.137, 993.627), stdev = 6.737
[info]   CI (99.9%): [958.195, 1010.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4495.136 ±(99.9%) 214.016 B/op [Average]
[info]   (min, avg, max) = (4442.978, 4495.136, 4584.565), stdev = 55.579
[info]   CI (99.9%): [4281.120, 4709.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.323 ±(99.9%) 0.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.323, 0.479), stdev = 0.186
[info]   CI (99.9%): [≈ 0, 1.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 33.94% complete, ETA 00:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6757.018 ops/s
[info] # Warmup Iteration   2: 9151.998 ops/s
[info] # Warmup Iteration   3: 9240.489 ops/s
[info] Iteration   1: 9176.005 ops/s
[info]                  ·gc.alloc.rate:                   1201.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227412.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.711 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9310.652 ops/s
[info]                  ·gc.alloc.rate:                   1219.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168625.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9299.931 ops/s
[info]                  ·gc.alloc.rate:                   1218.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225902.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.091 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9227.656 ops/s
[info]                  ·gc.alloc.rate:                   1208.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              206145.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228598.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.202 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9237.095 ops/s
[info]                  ·gc.alloc.rate:                   1210.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              206160.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171887.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9250.268 ±(99.9%) 213.638 ops/s [Average]
[info]   (min, avg, max) = (9176.005, 9250.268, 9310.652), stdev = 55.481
[info]   CI (99.9%): [9036.630, 9463.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1211.732 ±(99.9%) 28.582 MB/sec [Average]
[info]   (min, avg, max) = (1201.794, 1211.732, 1219.558), stdev = 7.423
[info]   CI (99.9%): [1183.150, 1240.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206147.502 ±(99.9%) 27.094 B/op [Average]
[info]   (min, avg, max) = (206144.046, 206147.502, 206160.050), stdev = 7.036
[info]   CI (99.9%): [206120.408, 206174.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.597 ±(99.9%) 697.759 MB/sec [Average]
[info]   (min, avg, max) = (997.598, 1201.597, 1340.289), stdev = 181.206
[info]   CI (99.9%): [503.839, 1899.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204485.318 ±(99.9%) 120456.915 B/op [Average]
[info]   (min, avg, max) = (168625.704, 204485.318, 228598.430), stdev = 31282.278
[info]   CI (99.9%): [84028.402, 324942.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.627 ±(99.9%) 13.635 B/op [Average]
[info]   (min, avg, max) = (7.038, 10.627, 14.202), stdev = 3.541
[info]   CI (99.9%): [≈ 0, 24.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 34.24% complete, ETA 00:46:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5725.063 ops/s
[info] # Warmup Iteration   2: 9224.628 ops/s
[info] # Warmup Iteration   3: 9653.140 ops/s
[info] Iteration   1: 9647.042 ops/s
[info]                  ·gc.alloc.rate:                   1156.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213649.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.792 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9664.838 ops/s
[info]                  ·gc.alloc.rate:                   1158.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160752.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9549.085 ops/s
[info]                  ·gc.alloc.rate:                   1144.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218037.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9431.225 ops/s
[info]                  ·gc.alloc.rate:                   1130.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              188599.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166407.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.474 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9596.492 ops/s
[info]                  ·gc.alloc.rate:                   1150.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164348.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9577.736 ±(99.9%) 360.341 ops/s [Average]
[info]   (min, avg, max) = (9431.225, 9577.736, 9664.838), stdev = 93.579
[info]   CI (99.9%): [9217.396, 9938.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1147.959 ±(99.9%) 43.611 MB/sec [Average]
[info]   (min, avg, max) = (1130.246, 1147.959, 1158.650), stdev = 11.326
[info]   CI (99.9%): [1104.349, 1191.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   188599.891 ±(99.9%) 53.839 B/op [Average]
[info]   (min, avg, max) = (188592.045, 188599.891, 188624.315), stdev = 13.982
[info]   CI (99.9%): [188546.052, 188653.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.988 ±(99.9%) 676.533 MB/sec [Average]
[info]   (min, avg, max) = (987.610, 1123.988, 1322.977), stdev = 175.693
[info]   CI (99.9%): [447.456, 1800.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   184638.788 ±(99.9%) 110126.173 B/op [Average]
[info]   (min, avg, max) = (160752.005, 184638.788, 218037.057), stdev = 28599.417
[info]   CI (99.9%): [74512.615, 294764.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.888 ±(99.9%) 20.038 B/op [Average]
[info]   (min, avg, max) = (3.474, 8.888, 17.154), stdev = 5.204
[info]   CI (99.9%): [≈ 0, 28.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 34.55% complete, ETA 00:45:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137565.769 ops/s
[info] # Warmup Iteration   2: 151233.077 ops/s
[info] # Warmup Iteration   3: 153810.532 ops/s
[info] Iteration   1: 153893.452 ops/s
[info]                  ·gc.alloc.rate:                   1001.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10202.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 153935.209 ops/s
[info]                  ·gc.alloc.rate:                   1001.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10212.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 152494.082 ops/s
[info]                  ·gc.alloc.rate:                   992.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10340.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 148570.248 ops/s
[info]                  ·gc.alloc.rate:                   967.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10641.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 153226.954 ops/s
[info]                  ·gc.alloc.rate:                   996.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10352.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.641 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   152423.989 ±(99.9%) 8598.259 ops/s [Average]
[info]   (min, avg, max) = (148570.248, 152423.989, 153935.209), stdev = 2232.941
[info]   CI (99.9%): [143825.730, 161022.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   991.884 ±(99.9%) 55.528 MB/sec [Average]
[info]   (min, avg, max) = (967.053, 991.884, 1001.701), stdev = 14.420
[info]   CI (99.9%): [936.356, 1047.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1002.322 ±(99.9%) 15.935 MB/sec [Average]
[info]   (min, avg, max) = (998.004, 1002.322, 1007.880), stdev = 4.138
[info]   CI (99.9%): [986.387, 1018.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10349.780 ±(99.9%) 682.400 B/op [Average]
[info]   (min, avg, max) = (10202.210, 10349.780, 10641.358), stdev = 177.217
[info]   CI (99.9%): [9667.379, 11032.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.557 ±(99.9%) 0.724 B/op [Average]
[info]   (min, avg, max) = (0.221, 0.557, 0.645), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 34.85% complete, ETA 00:45:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4333.050 ops/s
[info] # Warmup Iteration   2: 7345.297 ops/s
[info] # Warmup Iteration   3: 7822.789 ops/s
[info] Iteration   1: 7741.332 ops/s
[info]                  ·gc.alloc.rate:                   1441.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     334517.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.694 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7808.803 ops/s
[info]                  ·gc.alloc.rate:                   1454.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266910.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.783 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7817.485 ops/s
[info]                  ·gc.alloc.rate:                   1456.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268212.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7827.056 ops/s
[info]                  ·gc.alloc.rate:                   1457.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336645.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.742 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7786.403 ops/s
[info]                  ·gc.alloc.rate:                   1450.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271972.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.622 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7796.216 ±(99.9%) 131.578 ops/s [Average]
[info]   (min, avg, max) = (7741.332, 7796.216, 7827.056), stdev = 34.170
[info]   CI (99.9%): [7664.638, 7927.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1452.000 ±(99.9%) 24.921 MB/sec [Average]
[info]   (min, avg, max) = (1441.667, 1452.000, 1457.691), stdev = 6.472
[info]   CI (99.9%): [1427.079, 1476.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.056 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (293096.055, 293096.056, 293096.060), stdev = 0.002
[info]   CI (99.9%): [293096.049, 293096.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.452 ±(99.9%) 688.574 MB/sec [Average]
[info]   (min, avg, max) = (1324.280, 1464.452, 1674.280), stdev = 178.821
[info]   CI (99.9%): [775.878, 2153.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   295651.698 ±(99.9%) 140571.489 B/op [Average]
[info]   (min, avg, max) = (266910.255, 295651.698, 336645.265), stdev = 36505.969
[info]   CI (99.9%): [155080.209, 436223.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.445 ±(99.9%) 13.462 B/op [Average]
[info]   (min, avg, max) = (8.382, 13.445, 16.783), stdev = 3.496
[info]   CI (99.9%): [≈ 0, 26.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 35.15% complete, ETA 00:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14614.338 ops/s
[info] # Warmup Iteration   2: 19843.034 ops/s
[info] # Warmup Iteration   3: 19638.932 ops/s
[info] Iteration   1: 19989.335 ops/s
[info]                  ·gc.alloc.rate:                   1061.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              83616.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78067.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20055.110 ops/s
[info]                  ·gc.alloc.rate:                   1065.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              83640.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77967.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19764.599 ops/s
[info]                  ·gc.alloc.rate:                   1050.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              83625.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79380.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18937.131 ops/s
[info]                  ·gc.alloc.rate:                   1005.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83127.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.730 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19664.665 ops/s
[info]                  ·gc.alloc.rate:                   1044.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80343.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.664 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   19682.168 ±(99.9%) 1717.338 ops/s [Average]
[info]   (min, avg, max) = (18937.131, 19682.168, 20055.110), stdev = 445.987
[info]   CI (99.9%): [17964.830, 21399.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1045.634 ±(99.9%) 92.287 MB/sec [Average]
[info]   (min, avg, max) = (1005.585, 1045.634, 1065.758), stdev = 23.967
[info]   CI (99.9%): [953.347, 1137.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83606.907 ±(99.9%) 113.228 B/op [Average]
[info]   (min, avg, max) = (83576.022, 83606.907, 83640.022), stdev = 29.405
[info]   CI (99.9%): [83493.678, 83720.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   997.261 ±(99.9%) 19.770 MB/sec [Average]
[info]   (min, avg, max) = (991.507, 997.261, 1004.281), stdev = 5.134
[info]   CI (99.9%): [977.491, 1017.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79777.435 ±(99.9%) 8146.030 B/op [Average]
[info]   (min, avg, max) = (77967.551, 79777.435, 83127.606), stdev = 2115.498
[info]   CI (99.9%): [71631.404, 87923.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.281 ±(99.9%) 10.282 B/op [Average]
[info]   (min, avg, max) = (1.730, 6.281, 8.288), stdev = 2.670
[info]   CI (99.9%): [≈ 0, 16.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 35.45% complete, ETA 00:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14990.446 ops/s
[info] # Warmup Iteration   2: 21628.922 ops/s
[info] # Warmup Iteration   3: 22651.942 ops/s
[info] Iteration   1: 22705.059 ops/s
[info]                  ·gc.alloc.rate:                   962.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68014.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22573.749 ops/s
[info]                  ·gc.alloc.rate:                   956.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68621.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.806 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22801.886 ops/s
[info]                  ·gc.alloc.rate:               966.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45426.339 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 22240.894 ops/s
[info]                  ·gc.alloc.rate:                   942.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70117.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.892 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22770.437 ops/s
[info]                  ·gc.alloc.rate:                   964.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68853.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   22618.405 ±(99.9%) 879.762 ops/s [Average]
[info]   (min, avg, max) = (22240.894, 22618.405, 22801.886), stdev = 228.471
[info]   CI (99.9%): [21738.643, 23498.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   958.583 ±(99.9%) 37.213 MB/sec [Average]
[info]   (min, avg, max) = (942.514, 958.583, 966.272), stdev = 9.664
[info]   CI (99.9%): [921.370, 995.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (66696.019, 66696.021, 66696.026), stdev = 0.003
[info]   CI (99.9%): [66696.010, 66696.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   922.198 ±(99.9%) 568.874 MB/sec [Average]
[info]   (min, avg, max) = (658.123, 922.198, 996.192), stdev = 147.735
[info]   CI (99.9%): [353.324, 1491.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64206.795 ±(99.9%) 40533.687 B/op [Average]
[info]   (min, avg, max) = (45426.339, 64206.795, 70117.186), stdev = 10526.470
[info]   CI (99.9%): [23673.107, 104740.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.356 ±(99.9%) 9.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.356, 5.892), stdev = 2.520
[info]   CI (99.9%): [≈ 0, 14.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 35.76% complete, ETA 00:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 606416.599 ops/s
[info] # Warmup Iteration   2: 699225.600 ops/s
[info] # Warmup Iteration   3: 702987.389 ops/s
[info] Iteration   1: 702657.622 ops/s
[info]                  ·gc.alloc.rate:                   1267.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2975.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 694539.997 ops/s
[info]                  ·gc.alloc.rate:                   1253.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3020.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 703863.777 ops/s
[info]                  ·gc.alloc.rate:                   1270.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2244.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 709883.270 ops/s
[info]                  ·gc.alloc.rate:                   1281.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2977.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 696238.681 ops/s
[info]                  ·gc.alloc.rate:                   1256.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3045.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   701436.669 ±(99.9%) 23839.017 ops/s [Average]
[info]   (min, avg, max) = (694539.997, 701436.669, 709883.270), stdev = 6190.917
[info]   CI (99.9%): [677597.653, 725275.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1265.838 ±(99.9%) 43.127 MB/sec [Average]
[info]   (min, avg, max) = (1253.360, 1265.838, 1281.304), stdev = 11.200
[info]   CI (99.9%): [1222.712, 1308.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1271.198 ±(99.9%) 576.246 MB/sec [Average]
[info]   (min, avg, max) = (1003.857, 1271.198, 1347.612), stdev = 149.649
[info]   CI (99.9%): [694.952, 1847.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2852.699 ±(99.9%) 1313.680 B/op [Average]
[info]   (min, avg, max) = (2244.745, 2852.699, 3045.647), stdev = 341.159
[info]   CI (99.9%): [1539.019, 4166.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 0.238 B/op [Average]
[info]   (min, avg, max) = (0.093, 0.178, 0.236), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 36.06% complete, ETA 00:44:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 503846.765 ops/s
[info] # Warmup Iteration   2: 530052.018 ops/s
[info] # Warmup Iteration   3: 545981.014 ops/s
[info] Iteration   1: 544965.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 545332.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 544771.647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 544112.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 547798.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   545396.195 ±(99.9%) 5444.877 ops/s [Average]
[info]   (min, avg, max) = (544112.196, 545396.195, 547798.261), stdev = 1414.017
[info]   CI (99.9%): [539951.318, 550841.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 36.36% complete, ETA 00:44:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16199.157 ops/s
[info] # Warmup Iteration   2: 21696.926 ops/s
[info] # Warmup Iteration   3: 21652.063 ops/s
[info] Iteration   1: 22047.928 ops/s
[info]                  ·gc.alloc.rate:                   1016.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70377.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21819.457 ops/s
[info]                  ·gc.alloc.rate:                   1006.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95089.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 21746.485 ops/s
[info]                  ·gc.alloc.rate:                   1003.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              72577.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71881.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21548.066 ops/s
[info]                  ·gc.alloc.rate:                   993.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72833.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 21893.907 ops/s
[info]                  ·gc.alloc.rate:                   1009.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71970.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   21811.169 ±(99.9%) 711.005 ops/s [Average]
[info]   (min, avg, max) = (21548.066, 21811.169, 22047.928), stdev = 184.646
[info]   CI (99.9%): [21100.164, 22522.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1005.840 ±(99.9%) 32.668 MB/sec [Average]
[info]   (min, avg, max) = (993.654, 1005.840, 1016.664), stdev = 8.484
[info]   CI (99.9%): [973.172, 1038.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72576.232 ±(99.9%) 1.808 B/op [Average]
[info]   (min, avg, max) = (72576.020, 72576.232, 72577.072), stdev = 0.470
[info]   CI (99.9%): [72574.424, 72578.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1059.204 ±(99.9%) 558.165 MB/sec [Average]
[info]   (min, avg, max) = (985.865, 1059.204, 1318.308), stdev = 144.954
[info]   CI (99.9%): [501.040, 1617.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76430.562 ±(99.9%) 40308.057 B/op [Average]
[info]   (min, avg, max) = (70377.420, 76430.562, 95089.213), stdev = 10467.874
[info]   CI (99.9%): [36122.505, 116738.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.909 ±(99.9%) 8.776 B/op [Average]
[info]   (min, avg, max) = (1.486, 3.909, 6.006), stdev = 2.279
[info]   CI (99.9%): [≈ 0, 12.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 36.67% complete, ETA 00:44:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17957.352 ops/s
[info] # Warmup Iteration   2: 23055.626 ops/s
[info] # Warmup Iteration   3: 23380.653 ops/s
[info] Iteration   1: 22989.877 ops/s
[info]                  ·gc.alloc.rate:                   1212.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90775.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.850 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23009.120 ops/s
[info]                  ·gc.alloc.rate:                   1220.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              83478.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91037.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.696 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 23903.392 ops/s
[info]                  ·gc.alloc.rate:                   1260.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65941.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.482 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23777.065 ops/s
[info]                  ·gc.alloc.rate:                   1254.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88711.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.756 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23150.296 ops/s
[info]                  ·gc.alloc.rate:                   1221.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91479.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.661 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   23365.950 ±(99.9%) 1692.887 ops/s [Average]
[info]   (min, avg, max) = (22989.877, 23365.950, 23903.392), stdev = 439.638
[info]   CI (99.9%): [21673.063, 25058.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1233.934 ±(99.9%) 84.815 MB/sec [Average]
[info]   (min, avg, max) = (1212.707, 1233.934, 1260.955), stdev = 22.026
[info]   CI (99.9%): [1149.120, 1318.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83114.918 ±(99.9%) 782.666 B/op [Average]
[info]   (min, avg, max) = (83024.018, 83114.918, 83478.513), stdev = 203.256
[info]   CI (99.9%): [82332.252, 83897.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1268.853 ±(99.9%) 576.234 MB/sec [Average]
[info]   (min, avg, max) = (1001.512, 1268.853, 1345.598), stdev = 149.646
[info]   CI (99.9%): [692.619, 1845.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   85589.169 ±(99.9%) 42490.470 B/op [Average]
[info]   (min, avg, max) = (65941.694, 85589.169, 91479.810), stdev = 11034.640
[info]   CI (99.9%): [43098.699, 128079.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.489 ±(99.9%) 5.936 B/op [Average]
[info]   (min, avg, max) = (2.756, 4.489, 5.696), stdev = 1.542
[info]   CI (99.9%): [≈ 0, 10.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 36.97% complete, ETA 00:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15738.273 ops/s
[info] # Warmup Iteration   2: 25450.106 ops/s
[info] # Warmup Iteration   3: 25793.010 ops/s
[info] Iteration   1: 25814.655 ops/s
[info]                  ·gc.alloc.rate:                   1196.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              72912.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59903.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.807 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25811.691 ops/s
[info]                  ·gc.alloc.rate:                   1195.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              72902.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80300.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.885 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25996.921 ops/s
[info]                  ·gc.alloc.rate:                   1203.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60129.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.781 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25528.871 ops/s
[info]                  ·gc.alloc.rate:                   1182.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82052.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.133 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25811.319 ops/s
[info]                  ·gc.alloc.rate:                   1195.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81620.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.808 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   25792.691 ±(99.9%) 645.776 ops/s [Average]
[info]   (min, avg, max) = (25528.871, 25792.691, 25996.921), stdev = 167.706
[info]   CI (99.9%): [25146.916, 26438.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1194.600 ±(99.9%) 30.021 MB/sec [Average]
[info]   (min, avg, max) = (1182.175, 1194.600, 1203.820), stdev = 7.796
[info]   CI (99.9%): [1164.579, 1224.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72890.990 ±(99.9%) 59.180 B/op [Average]
[info]   (min, avg, max) = (72880.017, 72890.990, 72912.017), stdev = 15.369
[info]   CI (99.9%): [72831.810, 72950.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.491 ±(99.9%) 719.779 MB/sec [Average]
[info]   (min, avg, max) = (982.677, 1192.491, 1338.639), stdev = 186.924
[info]   CI (99.9%): [472.712, 1912.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72801.338 ±(99.9%) 45010.196 B/op [Average]
[info]   (min, avg, max) = (59903.544, 72801.338, 82052.828), stdev = 11689.005
[info]   CI (99.9%): [27791.143, 117811.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.146), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.083 ±(99.9%) 8.482 B/op [Average]
[info]   (min, avg, max) = (3.781, 5.083, 8.885), stdev = 2.203
[info]   CI (99.9%): [≈ 0, 13.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 37.27% complete, ETA 00:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230286.863 ops/s
[info] # Warmup Iteration   2: 240875.180 ops/s
[info] # Warmup Iteration   3: 243251.222 ops/s
[info] Iteration   1: 244659.606 ops/s
[info]                  ·gc.alloc.rate:                   636.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4278.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 244971.709 ops/s
[info]                  ·gc.alloc.rate:               637.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2135.628 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 237510.320 ops/s
[info]                  ·gc.alloc.rate:                   618.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4405.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 244066.163 ops/s
[info]                  ·gc.alloc.rate:                   635.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4291.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 243546.951 ops/s
[info]                  ·gc.alloc.rate:                   633.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4304.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   242950.950 ±(99.9%) 11900.038 ops/s [Average]
[info]   (min, avg, max) = (237510.320, 242950.950, 244971.709), stdev = 3090.402
[info]   CI (99.9%): [231050.912, 254850.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   632.295 ±(99.9%) 30.990 MB/sec [Average]
[info]   (min, avg, max) = (618.107, 632.295, 637.523), stdev = 8.048
[info]   CI (99.9%): [601.305, 663.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   598.810 ±(99.9%) 573.471 MB/sec [Average]
[info]   (min, avg, max) = (332.400, 598.810, 666.310), stdev = 148.929
[info]   CI (99.9%): [25.339, 1172.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3883.174 ±(99.9%) 3766.663 B/op [Average]
[info]   (min, avg, max) = (2135.628, 3883.174, 4405.299), stdev = 978.190
[info]   CI (99.9%): [116.511, 7649.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.379 ±(99.9%) 1.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 0.690), stdev = 0.263
[info]   CI (99.9%): [≈ 0, 1.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 37.58% complete, ETA 00:43:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8878.522 ops/s
[info] # Warmup Iteration   2: 15290.928 ops/s
[info] # Warmup Iteration   3: 15713.539 ops/s
[info] Iteration   1: 15677.326 ops/s
[info]                  ·gc.alloc.rate:                   1603.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165378.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.269 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15371.696 ops/s
[info]                  ·gc.alloc.rate:                   1572.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169897.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.526 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15300.997 ops/s
[info]                  ·gc.alloc.rate:                   1565.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171850.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.565 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15387.821 ops/s
[info]                  ·gc.alloc.rate:                   1574.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137425.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.517 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15537.159 ops/s
[info]                  ·gc.alloc.rate:                   1589.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170792.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.544 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15455.000 ±(99.9%) 581.908 ops/s [Average]
[info]   (min, avg, max) = (15300.997, 15455.000, 15677.326), stdev = 151.120
[info]   CI (99.9%): [14873.092, 16036.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1581.071 ±(99.9%) 58.913 MB/sec [Average]
[info]   (min, avg, max) = (1565.199, 1581.071, 1603.581), stdev = 15.300
[info]   CI (99.9%): [1522.157, 1639.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160984.030 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (160984.028, 160984.030, 160984.038), stdev = 0.005
[info]   CI (99.9%): [160984.013, 160984.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.651 ±(99.9%) 556.930 MB/sec [Average]
[info]   (min, avg, max) = (1344.182, 1601.651, 1686.055), stdev = 144.633
[info]   CI (99.9%): [1044.721, 2158.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   163068.813 ±(99.9%) 56010.632 B/op [Average]
[info]   (min, avg, max) = (137425.458, 163068.813, 171850.527), stdev = 14545.783
[info]   CI (99.9%): [107058.181, 219079.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.484 ±(99.9%) 5.826 B/op [Average]
[info]   (min, avg, max) = (6.269, 8.484, 10.544), stdev = 1.513
[info]   CI (99.9%): [2.658, 14.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 37.88% complete, ETA 00:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33230.107 ops/s
[info] # Warmup Iteration   2: 42977.295 ops/s
[info] # Warmup Iteration   3: 42596.730 ops/s
[info] Iteration   1: 42938.704 ops/s
[info]                  ·gc.alloc.rate:                   1365.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60713.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.526 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 41964.938 ops/s
[info]                  ·gc.alloc.rate:                   1334.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49928.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.123 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42704.658 ops/s
[info]                  ·gc.alloc.rate:                   1357.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49297.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.302 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42349.018 ops/s
[info]                  ·gc.alloc.rate:                   1346.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49909.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42187.350 ops/s
[info]                  ·gc.alloc.rate:                   1341.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50300.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.553 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   42428.934 ±(99.9%) 1511.017 ops/s [Average]
[info]   (min, avg, max) = (41964.938, 42428.934, 42938.704), stdev = 392.406
[info]   CI (99.9%): [40917.917, 43939.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1349.000 ±(99.9%) 48.178 MB/sec [Average]
[info]   (min, avg, max) = (1334.247, 1349.000, 1365.316), stdev = 12.512
[info]   CI (99.9%): [1300.822, 1397.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (50040.010, 50040.010, 50040.011), stdev = 0.001
[info]   CI (99.9%): [50040.009, 50040.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.312 ±(99.9%) 545.629 MB/sec [Average]
[info]   (min, avg, max) = (1331.261, 1403.312, 1656.539), stdev = 141.698
[info]   CI (99.9%): [857.683, 1948.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   52029.805 ±(99.9%) 18743.729 B/op [Average]
[info]   (min, avg, max) = (49297.385, 52029.805, 60713.586), stdev = 4867.687
[info]   CI (99.9%): [33286.075, 70773.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.320 ±(99.9%) 3.022 B/op [Average]
[info]   (min, avg, max) = (1.526, 2.320, 3.123), stdev = 0.785
[info]   CI (99.9%): [≈ 0, 5.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 38.18% complete, ETA 00:43:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76131.734 ops/s
[info] # Warmup Iteration   2: 110619.800 ops/s
[info] # Warmup Iteration   3: 109745.468 ops/s
[info] Iteration   1: 111172.196 ops/s
[info]                  ·gc.alloc.rate:                   1086.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13914.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.884 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 113211.742 ops/s
[info]                  ·gc.alloc.rate:                   1106.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18285.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.158 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 112151.485 ops/s
[info]                  ·gc.alloc.rate:                   1096.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13909.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 114449.299 ops/s
[info]                  ·gc.alloc.rate:                   1119.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13708.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.573 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 112044.312 ops/s
[info]                  ·gc.alloc.rate:                   1095.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18752.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.877 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   112605.807 ±(99.9%) 4848.810 ops/s [Average]
[info]   (min, avg, max) = (111172.196, 112605.807, 114449.299), stdev = 1259.221
[info]   CI (99.9%): [107756.997, 117454.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1100.987 ±(99.9%) 47.535 MB/sec [Average]
[info]   (min, avg, max) = (1086.825, 1100.987, 1119.173), stdev = 12.345
[info]   CI (99.9%): [1053.452, 1148.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15384.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15384.004, 15384.004, 15384.004), stdev = 0.001
[info]   CI (99.9%): [15384.003, 15384.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1124.554 ±(99.9%) 706.976 MB/sec [Average]
[info]   (min, avg, max) = (983.023, 1124.554, 1335.581), stdev = 183.600
[info]   CI (99.9%): [417.578, 1831.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15714.186 ±(99.9%) 9884.619 B/op [Average]
[info]   (min, avg, max) = (13708.462, 15714.186, 18752.142), stdev = 2567.004
[info]   CI (99.9%): [5829.567, 25598.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.874 ±(99.9%) 0.797 B/op [Average]
[info]   (min, avg, max) = (0.573, 0.874, 1.158), stdev = 0.207
[info]   CI (99.9%): [0.076, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 38.48% complete, ETA 00:43:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1070971.864 ops/s
[info] # Warmup Iteration   2: 1218277.087 ops/s
[info] # Warmup Iteration   3: 1241682.287 ops/s
[info] Iteration   1: 1238406.089 ops/s
[info]                  ·gc.alloc.rate:                   1328.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1688.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1214147.646 ops/s
[info]                  ·gc.alloc.rate:                   1302.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1727.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1204072.825 ops/s
[info]                  ·gc.alloc.rate:                   1291.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1750.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1208994.955 ops/s
[info]                  ·gc.alloc.rate:                   1296.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1749.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1212224.032 ops/s
[info]                  ·gc.alloc.rate:                   1300.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1750.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1215569.109 ±(99.9%) 51306.192 ops/s [Average]
[info]   (min, avg, max) = (1204072.825, 1215569.109, 1238406.089), stdev = 13324.055
[info]   CI (99.9%): [1164262.917, 1266875.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1303.723 ±(99.9%) 54.659 MB/sec [Average]
[info]   (min, avg, max) = (1291.591, 1303.723, 1328.085), stdev = 14.195
[info]   CI (99.9%): [1249.064, 1358.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1338.571 ±(99.9%) 31.561 MB/sec [Average]
[info]   (min, avg, max) = (1328.178, 1338.571, 1348.370), stdev = 8.196
[info]   CI (99.9%): [1307.009, 1370.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1733.346 ±(99.9%) 104.243 B/op [Average]
[info]   (min, avg, max) = (1688.118, 1733.346, 1750.592), stdev = 27.072
[info]   CI (99.9%): [1629.103, 1837.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.086 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.086, 0.135), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 38.79% complete, ETA 00:42:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 639474.908 ops/s
[info] # Warmup Iteration   2: 692497.890 ops/s
[info] # Warmup Iteration   3: 697133.525 ops/s
[info] Iteration   1: 697132.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 696945.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 696950.160 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 697109.364 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 697278.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   697083.173 ±(99.9%) 537.530 ops/s [Average]
[info]   (min, avg, max) = (696945.434, 697083.173, 697278.567), stdev = 139.595
[info]   CI (99.9%): [696545.643, 697620.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 39.09% complete, ETA 00:42:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38052.590 ops/s
[info] # Warmup Iteration   2: 49802.942 ops/s
[info] # Warmup Iteration   3: 50807.959 ops/s
[info] Iteration   1: 49803.030 ops/s
[info]                  ·gc.alloc.rate:                   1319.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41659.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 50334.048 ops/s
[info]                  ·gc.alloc.rate:                   1333.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41427.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.254 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 50577.077 ops/s
[info]                  ·gc.alloc.rate:                   1340.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41456.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.943 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 50806.397 ops/s
[info]                  ·gc.alloc.rate:                   1346.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41477.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 50469.435 ops/s
[info]                  ·gc.alloc.rate:                   1337.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41921.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   50397.997 ±(99.9%) 1443.399 ops/s [Average]
[info]   (min, avg, max) = (49803.030, 50397.997, 50806.397), stdev = 374.846
[info]   CI (99.9%): [48954.598, 51841.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1335.669 ±(99.9%) 38.982 MB/sec [Average]
[info]   (min, avg, max) = (1319.652, 1335.669, 1346.726), stdev = 10.123
[info]   CI (99.9%): [1296.687, 1374.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41704.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41704.009, 41704.009, 41704.009), stdev = 0.001
[info]   CI (99.9%): [41704.008, 41704.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1331.957 ±(99.9%) 41.364 MB/sec [Average]
[info]   (min, avg, max) = (1318.236, 1331.957, 1344.874), stdev = 10.742
[info]   CI (99.9%): [1290.593, 1373.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41588.378 ±(99.9%) 797.595 B/op [Average]
[info]   (min, avg, max) = (41427.333, 41588.378, 41921.435), stdev = 207.133
[info]   CI (99.9%): [40790.783, 42385.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.080 ±(99.9%) 3.264 B/op [Average]
[info]   (min, avg, max) = (1.290, 2.080, 3.254), stdev = 0.848
[info]   CI (99.9%): [≈ 0, 5.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 39.39% complete, ETA 00:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11058.224 ops/s
[info] # Warmup Iteration   2: 14498.847 ops/s
[info] # Warmup Iteration   3: 14782.803 ops/s
[info] Iteration   1: 14765.370 ops/s
[info]                  ·gc.alloc.rate:                   1341.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141509.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.657 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14737.836 ops/s
[info]                  ·gc.alloc.rate:                   1338.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142266.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14553.528 ops/s
[info]                  ·gc.alloc.rate:                   1321.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144723.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14666.996 ops/s
[info]                  ·gc.alloc.rate:                   1331.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144170.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.701 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14708.878 ops/s
[info]                  ·gc.alloc.rate:                   1335.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144196.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.910 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14686.522 ±(99.9%) 318.806 ops/s [Average]
[info]   (min, avg, max) = (14553.528, 14686.522, 14765.370), stdev = 82.793
[info]   CI (99.9%): [14367.716, 15005.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1333.786 ±(99.9%) 29.334 MB/sec [Average]
[info]   (min, avg, max) = (1321.599, 1333.786, 1341.205), stdev = 7.618
[info]   CI (99.9%): [1304.451, 1363.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142928.032 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (142928.029, 142928.032, 142928.040), stdev = 0.005
[info]   CI (99.9%): [142928.015, 142928.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.890 ±(99.9%) 30.944 MB/sec [Average]
[info]   (min, avg, max) = (1327.894, 1337.890, 1347.596), stdev = 8.036
[info]   CI (99.9%): [1306.946, 1368.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   143373.111 ±(99.9%) 5388.399 B/op [Average]
[info]   (min, avg, max) = (141509.478, 143373.111, 144723.082), stdev = 1399.350
[info]   CI (99.9%): [137984.712, 148761.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.021 ±(99.9%) 12.921 B/op [Average]
[info]   (min, avg, max) = (4.502, 8.021, 13.337), stdev = 3.356
[info]   CI (99.9%): [≈ 0, 20.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 39.70% complete, ETA 00:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9606.138 ops/s
[info] # Warmup Iteration   2: 15998.858 ops/s
[info] # Warmup Iteration   3: 15926.751 ops/s
[info] Iteration   1: 15643.806 ops/s
[info]                  ·gc.alloc.rate:                   1223.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              123056.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131918.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15694.890 ops/s
[info]                  ·gc.alloc.rate:                   1227.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              123079.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99032.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15941.262 ops/s
[info]                  ·gc.alloc.rate:                   1247.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              123088.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130800.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.165 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15660.750 ops/s
[info]                  ·gc.alloc.rate:                   1224.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              123088.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133959.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16102.406 ops/s
[info]                  ·gc.alloc.rate:                   1259.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              123070.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130998.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.139 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15808.623 ±(99.9%) 784.123 ops/s [Average]
[info]   (min, avg, max) = (15643.806, 15808.623, 16102.406), stdev = 203.634
[info]   CI (99.9%): [15024.500, 16592.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1236.597 ±(99.9%) 62.011 MB/sec [Average]
[info]   (min, avg, max) = (1223.625, 1236.597, 1259.687), stdev = 16.104
[info]   CI (99.9%): [1174.587, 1298.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   123076.581 ±(99.9%) 51.941 B/op [Average]
[info]   (min, avg, max) = (123056.030, 123076.581, 123088.038), stdev = 13.489
[info]   CI (99.9%): [123024.640, 123128.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1259.751 ±(99.9%) 587.088 MB/sec [Average]
[info]   (min, avg, max) = (987.689, 1259.751, 1340.832), stdev = 152.465
[info]   CI (99.9%): [672.662, 1846.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   125341.828 ±(99.9%) 56837.183 B/op [Average]
[info]   (min, avg, max) = (99032.549, 125341.828, 133959.048), stdev = 14760.436
[info]   CI (99.9%): [68504.645, 182179.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.368 ±(99.9%) 11.970 B/op [Average]
[info]   (min, avg, max) = (2.092, 5.368, 8.350), stdev = 3.109
[info]   CI (99.9%): [≈ 0, 17.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 40.00% complete, ETA 00:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248731.836 ops/s
[info] # Warmup Iteration   2: 261588.669 ops/s
[info] # Warmup Iteration   3: 261118.668 ops/s
[info] Iteration   1: 267578.267 ops/s
[info]                  ·gc.alloc.rate:                   696.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3914.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 262499.062 ops/s
[info]                  ·gc.alloc.rate:                   683.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3986.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 266079.095 ops/s
[info]                  ·gc.alloc.rate:                   692.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3934.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 271173.790 ops/s
[info]                  ·gc.alloc.rate:                   705.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3864.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 270712.670 ops/s
[info]                  ·gc.alloc.rate:                   704.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5816.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   267608.577 ±(99.9%) 13721.687 ops/s [Average]
[info]   (min, avg, max) = (262499.062, 267608.577, 271173.790), stdev = 3563.478
[info]   CI (99.9%): [253886.890, 281330.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   696.505 ±(99.9%) 35.916 MB/sec [Average]
[info]   (min, avg, max) = (683.133, 696.505, 705.694), stdev = 9.327
[info]   CI (99.9%): [660.588, 732.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.434 ±(99.9%) 577.902 MB/sec [Average]
[info]   (min, avg, max) = (664.788, 732.434, 1000.904), stdev = 150.079
[info]   CI (99.9%): [154.532, 1310.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4303.206 ±(99.9%) 3262.848 B/op [Average]
[info]   (min, avg, max) = (3864.398, 4303.206, 5816.988), stdev = 847.351
[info]   CI (99.9%): [1040.358, 7566.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.392 ±(99.9%) 0.913 B/op [Average]
[info]   (min, avg, max) = (0.123, 0.392, 0.735), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 40.30% complete, ETA 00:41:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7015.039 ops/s
[info] # Warmup Iteration   2: 11792.689 ops/s
[info] # Warmup Iteration   3: 11996.822 ops/s
[info] Iteration   1: 12206.353 ops/s
[info]                  ·gc.alloc.rate:                   1677.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212798.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.052 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12124.367 ops/s
[info]                  ·gc.alloc.rate:                   1666.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215690.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.808 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12152.446 ops/s
[info]                  ·gc.alloc.rate:                   1670.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              216281.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216659.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12205.296 ops/s
[info]                  ·gc.alloc.rate:                   1677.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216749.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12179.853 ops/s
[info]                  ·gc.alloc.rate:                   1673.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218202.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12173.663 ±(99.9%) 135.974 ops/s [Average]
[info]   (min, avg, max) = (12124.367, 12173.663, 12206.353), stdev = 35.312
[info]   CI (99.9%): [12037.689, 12309.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1673.059 ±(99.9%) 17.524 MB/sec [Average]
[info]   (min, avg, max) = (1666.867, 1673.059, 1677.341), stdev = 4.551
[info]   CI (99.9%): [1655.534, 1690.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216280.238 ±(99.9%) 1.737 B/op [Average]
[info]   (min, avg, max) = (216280.035, 216280.238, 216281.045), stdev = 0.451
[info]   CI (99.9%): [216278.502, 216281.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1671.038 ±(99.9%) 58.465 MB/sec [Average]
[info]   (min, avg, max) = (1650.206, 1671.038, 1688.620), stdev = 15.183
[info]   CI (99.9%): [1612.573, 1729.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   216020.107 ±(99.9%) 7746.772 B/op [Average]
[info]   (min, avg, max) = (212798.742, 216020.107, 218202.279), stdev = 2011.812
[info]   CI (99.9%): [208273.334, 223766.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.538 ±(99.9%) 8.729 B/op [Average]
[info]   (min, avg, max) = (5.368, 7.538, 10.808), stdev = 2.267
[info]   CI (99.9%): [≈ 0, 16.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 40.61% complete, ETA 00:41:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26317.267 ops/s
[info] # Warmup Iteration   2: 33981.982 ops/s
[info] # Warmup Iteration   3: 34670.148 ops/s
[info] Iteration   1: 33835.418 ops/s
[info]                  ·gc.alloc.rate:               1285.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          59795.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61538.769 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 34849.806 ops/s
[info]                  ·gc.alloc.rate:                   1323.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60047.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.641 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34193.299 ops/s
[info]                  ·gc.alloc.rate:                   1298.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61477.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.916 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34095.626 ops/s
[info]                  ·gc.alloc.rate:                   1295.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61930.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.883 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34137.115 ops/s
[info]                  ·gc.alloc.rate:                   1296.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46559.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.879 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   34222.253 ±(99.9%) 1450.505 ops/s [Average]
[info]   (min, avg, max) = (33835.418, 34222.253, 34849.806), stdev = 376.691
[info]   CI (99.9%): [32771.748, 35672.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1299.900 ±(99.9%) 54.253 MB/sec [Average]
[info]   (min, avg, max) = (1285.488, 1299.900, 1323.424), stdev = 14.089
[info]   CI (99.9%): [1245.647, 1354.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59773.529 ±(99.9%) 47.495 B/op [Average]
[info]   (min, avg, max) = (59768.012, 59773.529, 59795.593), stdev = 12.334
[info]   CI (99.9%): [59726.034, 59821.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1268.121 ±(99.9%) 556.014 MB/sec [Average]
[info]   (min, avg, max) = (1010.134, 1268.121, 1342.198), stdev = 144.395
[info]   CI (99.9%): [712.107, 1824.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   58310.743 ±(99.9%) 25444.338 B/op [Average]
[info]   (min, avg, max) = (46559.698, 58310.743, 61930.559), stdev = 6607.814
[info]   CI (99.9%): [32866.405, 83755.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.664 ±(99.9%) 7.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.664, 5.641), stdev = 2.038
[info]   CI (99.9%): [≈ 0, 10.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 40.91% complete, ETA 00:41:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28005.061 ops/s
[info] # Warmup Iteration   2: 39775.637 ops/s
[info] # Warmup Iteration   3: 40753.519 ops/s
[info] Iteration   1: 40143.742 ops/s
[info]                  ·gc.alloc.rate:                   1195.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51408.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40821.515 ops/s
[info]                  ·gc.alloc.rate:                   1215.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38100.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40262.971 ops/s
[info]                  ·gc.alloc.rate:                   1199.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51792.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.255 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 40051.443 ops/s
[info]                  ·gc.alloc.rate:                   1192.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39263.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.818 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40287.629 ops/s
[info]                  ·gc.alloc.rate:                   1199.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52292.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.253 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   40313.460 ±(99.9%) 1153.256 ops/s [Average]
[info]   (min, avg, max) = (40051.443, 40313.460, 40821.515), stdev = 299.497
[info]   CI (99.9%): [39160.204, 41466.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1200.713 ±(99.9%) 34.166 MB/sec [Average]
[info]   (min, avg, max) = (1192.795, 1200.713, 1215.691), stdev = 8.873
[info]   CI (99.9%): [1166.547, 1234.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46872.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (46872.011, 46872.011, 46872.012), stdev = 0.001
[info]   CI (99.9%): [46872.009, 46872.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.569 ±(99.9%) 700.255 MB/sec [Average]
[info]   (min, avg, max) = (988.186, 1192.569, 1338.582), stdev = 181.854
[info]   CI (99.9%): [492.314, 1892.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46571.474 ±(99.9%) 27803.836 B/op [Average]
[info]   (min, avg, max) = (38100.384, 46571.474, 52292.182), stdev = 7220.568
[info]   CI (99.9%): [18767.637, 74375.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.600 ±(99.9%) 4.088 B/op [Average]
[info]   (min, avg, max) = (0.818, 2.600, 3.264), stdev = 1.062
[info]   CI (99.9%): [≈ 0, 6.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 41.21% complete, ETA 00:41:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1139976.917 ops/s
[info] # Warmup Iteration   2: 1228994.336 ops/s
[info] # Warmup Iteration   3: 1241940.560 ops/s
[info] Iteration   1: 1254393.202 ops/s
[info]                  ·gc.alloc.rate:                   1141.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1248.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1235434.551 ops/s
[info]                  ·gc.alloc.rate:                   1124.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1694.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1265224.598 ops/s
[info]                  ·gc.alloc.rate:                   1151.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1245.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1269640.800 ops/s
[info]                  ·gc.alloc.rate:                   1155.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1661.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1255013.406 ops/s
[info]                  ·gc.alloc.rate:                   1141.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1263.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1255941.311 ±(99.9%) 50853.301 ops/s [Average]
[info]   (min, avg, max) = (1235434.551, 1255941.311, 1269640.800), stdev = 13206.441
[info]   CI (99.9%): [1205088.011, 1306794.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1142.762 ±(99.9%) 46.488 MB/sec [Average]
[info]   (min, avg, max) = (1124.065, 1142.762, 1155.385), stdev = 12.073
[info]   CI (99.9%): [1096.274, 1189.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1135.014 ±(99.9%) 704.713 MB/sec [Average]
[info]   (min, avg, max) = (995.156, 1135.014, 1340.469), stdev = 183.012
[info]   CI (99.9%): [430.301, 1839.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1422.846 ±(99.9%) 898.722 B/op [Average]
[info]   (min, avg, max) = (1245.464, 1422.846, 1694.757), stdev = 233.395
[info]   CI (99.9%): [524.124, 2321.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.100 ±(99.9%) 0.266 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.100, 0.212), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 41.52% complete, ETA 00:41:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1158459.227 ops/s
[info] # Warmup Iteration   2: 1260851.567 ops/s
[info] # Warmup Iteration   3: 1263932.459 ops/s
[info] Iteration   1: 1264218.586 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1255761.234 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1257941.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1263032.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1269797.848 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1262150.416 ±(99.9%) 21272.526 ops/s [Average]
[info]   (min, avg, max) = (1255761.234, 1262150.416, 1269797.848), stdev = 5524.407
[info]   CI (99.9%): [1240877.891, 1283422.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 41.82% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2614.469 ops/s
[info] # Warmup Iteration   2: 3357.435 ops/s
[info] # Warmup Iteration   3: 3579.060 ops/s
[info] Iteration   1: 3663.212 ops/s
[info]                  ·gc.alloc.rate:               494.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          212496.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 109894.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3645.312 ops/s
[info]                  ·gc.alloc.rate:                   492.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283857.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 895.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3689.739 ops/s
[info]                  ·gc.alloc.rate:                   498.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140056.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.756 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3668.697 ops/s
[info]                  ·gc.alloc.rate:                   495.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281715.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3608.699 ops/s
[info]                  ·gc.alloc.rate:               487.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          212496.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143198.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3655.132 ±(99.9%) 117.104 ops/s [Average]
[info]   (min, avg, max) = (3608.699, 3655.132, 3689.739), stdev = 30.411
[info]   CI (99.9%): [3538.028, 3772.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   493.600 ±(99.9%) 15.672 MB/sec [Average]
[info]   (min, avg, max) = (487.404, 493.600, 498.309), stdev = 4.070
[info]   CI (99.9%): [477.927, 509.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   212496.120 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (212496.117, 212496.120, 212496.127), stdev = 0.004
[info]   CI (99.9%): [212496.104, 212496.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   445.414 ±(99.9%) 753.170 MB/sec [Average]
[info]   (min, avg, max) = (255.780, 445.414, 657.670), stdev = 195.596
[info]   CI (99.9%): [≈ 0, 1198.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   191744.538 ±(99.9%) 323931.447 B/op [Average]
[info]   (min, avg, max) = (109894.428, 191744.538, 283857.518), stdev = 84123.968
[info]   CI (99.9%): [≈ 0, 515675.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.074), stdev = 0.918
[info]   CI (99.9%): [≈ 0, 3.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   186.165 ±(99.9%) 1526.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 186.165, 895.210), stdev = 396.468
[info]   CI (99.9%): [≈ 0, 1712.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 42.12% complete, ETA 00:40:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97318.686 ops/s
[info] # Warmup Iteration   2: 117296.650 ops/s
[info] # Warmup Iteration   3: 118172.100 ops/s
[info] Iteration   1: 118333.233 ops/s
[info]                  ·gc.alloc.rate:                   2198.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26730.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.107 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 117690.667 ops/s
[info]                  ·gc.alloc.rate:                   2186.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31543.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.670 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 115903.785 ops/s
[info]                  ·gc.alloc.rate:                   2153.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27561.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.131 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 116745.332 ops/s
[info]                  ·gc.alloc.rate:                   2170.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31976.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.121 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 118586.841 ops/s
[info]                  ·gc.alloc.rate:                   2203.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27053.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   117451.972 ±(99.9%) 4312.784 ops/s [Average]
[info]   (min, avg, max) = (115903.785, 117451.972, 118586.841), stdev = 1120.016
[info]   CI (99.9%): [113139.188, 121764.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2182.353 ±(99.9%) 79.028 MB/sec [Average]
[info]   (min, avg, max) = (2153.643, 2182.353, 2203.141), stdev = 20.523
[info]   CI (99.9%): [2103.326, 2261.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29240.004, 29240.004, 29240.004), stdev = 0.001
[info]   CI (99.9%): [29240.003, 29240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.000 ±(99.9%) 718.260 MB/sec [Average]
[info]   (min, avg, max) = (2009.722, 2162.000, 2373.115), stdev = 186.530
[info]   CI (99.9%): [1443.740, 2880.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28972.958 ±(99.9%) 9880.410 B/op [Average]
[info]   (min, avg, max) = (26730.041, 28972.958, 31976.711), stdev = 2565.911
[info]   CI (99.9%): [19092.548, 38853.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.116 ±(99.9%) 1.522 B/op [Average]
[info]   (min, avg, max) = (0.553, 1.116, 1.670), stdev = 0.395
[info]   CI (99.9%): [≈ 0, 2.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 42.42% complete, ETA 00:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173403.011 ops/s
[info] # Warmup Iteration   2: 250965.993 ops/s
[info] # Warmup Iteration   3: 240250.691 ops/s
[info] Iteration   1: 251846.899 ops/s
[info]                  ·gc.alloc.rate:                   552.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3640.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 252739.951 ops/s
[info]                  ·gc.alloc.rate:                   554.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4067.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 246758.173 ops/s
[info]                  ·gc.alloc.rate:                   541.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4168.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 252958.840 ops/s
[info]                  ·gc.alloc.rate:               555.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2035.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 252821.844 ops/s
[info]                  ·gc.alloc.rate:                   555.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4080.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   251425.141 ±(99.9%) 10186.065 ops/s [Average]
[info]   (min, avg, max) = (246758.173, 251425.141, 252958.840), stdev = 2645.289
[info]   CI (99.9%): [241239.077, 261611.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   552.019 ±(99.9%) 22.316 MB/sec [Average]
[info]   (min, avg, max) = (541.839, 552.019, 555.435), stdev = 5.795
[info]   CI (99.9%): [529.703, 574.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.002, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   574.274 ±(99.9%) 545.458 MB/sec [Average]
[info]   (min, avg, max) = (327.068, 574.274, 655.462), stdev = 141.654
[info]   CI (99.9%): [28.816, 1119.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3598.308 ±(99.9%) 3456.324 B/op [Average]
[info]   (min, avg, max) = (2035.064, 3598.308, 4168.063), stdev = 897.596
[info]   CI (99.9%): [141.985, 7054.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.469 ±(99.9%) 3.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.469, 2.156), stdev = 0.943
[info]   CI (99.9%): [≈ 0, 4.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.931 ±(99.9%) 22.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.931, 13.479), stdev = 5.899
[info]   CI (99.9%): [≈ 0, 25.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 42.73% complete, ETA 00:40:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 464415.539 ops/s
[info] # Warmup Iteration   2: 485581.854 ops/s
[info] # Warmup Iteration   3: 485048.180 ops/s
[info] Iteration   1: 490155.620 ops/s
[info]                  ·gc.alloc.rate:                   617.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2136.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 488606.968 ops/s
[info]                  ·gc.alloc.rate:                   616.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2141.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 490092.785 ops/s
[info]                  ·gc.alloc.rate:                   617.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2134.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 484070.615 ops/s
[info]                  ·gc.alloc.rate:                   610.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2161.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 486845.618 ops/s
[info]                  ·gc.alloc.rate:                   613.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2153.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   487954.321 ±(99.9%) 9846.867 ops/s [Average]
[info]   (min, avg, max) = (484070.615, 487954.321, 490155.620), stdev = 2557.200
[info]   CI (99.9%): [478107.454, 497801.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   615.123 ±(99.9%) 12.355 MB/sec [Average]
[info]   (min, avg, max) = (610.196, 615.123, 617.816), stdev = 3.208
[info]   CI (99.9%): [602.768, 627.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.220 ±(99.9%) 2.331 MB/sec [Average]
[info]   (min, avg, max) = (664.751, 665.220, 666.207), stdev = 0.605
[info]   CI (99.9%): [662.890, 667.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2145.631 ±(99.9%) 44.179 B/op [Average]
[info]   (min, avg, max) = (2134.939, 2145.631, 2161.566), stdev = 11.473
[info]   CI (99.9%): [2101.451, 2189.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.368 ±(99.9%) 2.674 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.368, 1.609), stdev = 0.694
[info]   CI (99.9%): [≈ 0, 3.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.182 ±(99.9%) 8.585 B/op [Average]
[info]   (min, avg, max) = (0.134, 1.182, 5.168), stdev = 2.229
[info]   CI (99.9%): [≈ 0, 9.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 43.03% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41500.401 ops/s
[info] # Warmup Iteration   2: 67391.480 ops/s
[info] # Warmup Iteration   3: 69504.146 ops/s
[info] Iteration   1: 68806.826 ops/s
[info]                  ·gc.alloc.rate:                   2981.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3018.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69015.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.333 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 69358.954 ops/s
[info]                  ·gc.alloc.rate:                   3017.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              68474.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3040.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68995.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.251 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 69405.756 ops/s
[info]                  ·gc.alloc.rate:                   3006.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69240.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.248 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 69251.198 ops/s
[info]                  ·gc.alloc.rate:                   3000.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3060.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69519.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.366 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 68897.063 ops/s
[info]                  ·gc.alloc.rate:                   2990.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              68323.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69984.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.804 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   69143.959 ±(99.9%) 1056.082 ops/s [Average]
[info]   (min, avg, max) = (68806.826, 69143.959, 69405.756), stdev = 274.261
[info]   CI (99.9%): [68087.877, 70200.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2999.456 ±(99.9%) 54.125 MB/sec [Average]
[info]   (min, avg, max) = (2981.258, 2999.456, 3017.579), stdev = 14.056
[info]   CI (99.9%): [2945.330, 3053.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68260.450 ±(99.9%) 529.129 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68260.450, 68474.733), stdev = 137.413
[info]   CI (99.9%): [67731.320, 68789.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3047.361 ±(99.9%) 71.058 MB/sec [Average]
[info]   (min, avg, max) = (3018.332, 3047.361, 3063.615), stdev = 18.454
[info]   CI (99.9%): [2976.302, 3118.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69351.103 ±(99.9%) 1587.969 B/op [Average]
[info]   (min, avg, max) = (68995.605, 69351.103, 69984.196), stdev = 412.390
[info]   CI (99.9%): [67763.134, 70939.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.158, 0.187), stdev = 0.035
[info]   CI (99.9%): [0.024, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.600 ±(99.9%) 3.033 B/op [Average]
[info]   (min, avg, max) = (2.366, 3.600, 4.251), stdev = 0.788
[info]   CI (99.9%): [0.568, 6.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 43.33% complete, ETA 00:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140272.475 ops/s
[info] # Warmup Iteration   2: 175104.970 ops/s
[info] # Warmup Iteration   3: 174573.423 ops/s
[info] Iteration   1: 181305.699 ops/s
[info]                  ·gc.alloc.rate:                   1849.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17330.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.904 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 182471.644 ops/s
[info]                  ·gc.alloc.rate:                   1861.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14444.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.077 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 182964.252 ops/s
[info]                  ·gc.alloc.rate:                   1866.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17376.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.716 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 183656.107 ops/s
[info]                  ·gc.alloc.rate:                   1873.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14479.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.535 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 178487.250 ops/s
[info]                  ·gc.alloc.rate:                   1820.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17927.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.918 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   181776.990 ±(99.9%) 7813.042 ops/s [Average]
[info]   (min, avg, max) = (178487.250, 181776.990, 183656.107), stdev = 2029.022
[info]   CI (99.9%): [173963.948, 189590.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1854.450 ±(99.9%) 79.809 MB/sec [Average]
[info]   (min, avg, max) = (1820.845, 1854.450, 1873.574), stdev = 20.726
[info]   CI (99.9%): [1774.641, 1934.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   16056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16056.002, 16056.002, 16056.003), stdev = 0.001
[info]   CI (99.9%): [16056.002, 16056.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1882.814 ±(99.9%) 706.935 MB/sec [Average]
[info]   (min, avg, max) = (1674.948, 1882.814, 2033.037), stdev = 183.589
[info]   CI (99.9%): [1175.878, 2589.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16311.840 ±(99.9%) 6563.844 B/op [Average]
[info]   (min, avg, max) = (14444.889, 16311.840, 17927.087), stdev = 1704.610
[info]   CI (99.9%): [9747.995, 22875.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.830 ±(99.9%) 0.803 B/op [Average]
[info]   (min, avg, max) = (0.535, 0.830, 1.077), stdev = 0.209
[info]   CI (99.9%): [0.027, 1.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 43.64% complete, ETA 00:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353754.110 ops/s
[info] # Warmup Iteration   2: 481131.032 ops/s
[info] # Warmup Iteration   3: 484060.588 ops/s
[info] Iteration   1: 469632.475 ops/s
[info]                  ·gc.alloc.rate:                   482.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1952.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 478040.973 ops/s
[info]                  ·gc.alloc.rate:               491.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1075.776 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 487464.756 ops/s
[info]                  ·gc.alloc.rate:                   500.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2112.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 487574.198 ops/s
[info]                  ·gc.alloc.rate:               500.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1055.782 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 484071.187 ops/s
[info]                  ·gc.alloc.rate:                   497.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2129.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   481356.718 ±(99.9%) 29312.075 ops/s [Average]
[info]   (min, avg, max) = (469632.475, 481356.718, 487574.198), stdev = 7612.253
[info]   CI (99.9%): [452044.643, 510668.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   494.329 ±(99.9%) 29.734 MB/sec [Average]
[info]   (min, avg, max) = (482.415, 494.329, 500.656), stdev = 7.722
[info]   CI (99.9%): [464.595, 524.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.153 ±(99.9%) 650.194 MB/sec [Average]
[info]   (min, avg, max) = (326.878, 509.153, 654.830), stdev = 168.853
[info]   CI (99.9%): [≈ 0, 1159.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1664.991 ±(99.9%) 2123.180 B/op [Average]
[info]   (min, avg, max) = (1055.782, 1664.991, 2129.073), stdev = 551.383
[info]   CI (99.9%): [≈ 0, 3788.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.654 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 2.147), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.506 ±(99.9%) 12.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.506, 7.193), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 43.94% complete, ETA 00:39:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 533027.913 ops/s
[info] # Warmup Iteration   2: 584813.536 ops/s
[info] # Warmup Iteration   3: 559230.455 ops/s
[info] Iteration   1: 573530.292 ops/s
[info]                  ·gc.alloc.rate:               449.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 701.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 574324.560 ops/s
[info]                  ·gc.alloc.rate:                   449.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1818.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 559410.167 ops/s
[info]                  ·gc.alloc.rate:               437.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931.454 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 558976.856 ops/s
[info]                  ·gc.alloc.rate:                   437.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 561335.824 ops/s
[info]                  ·gc.alloc.rate:                   439.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1858.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   565515.540 ±(99.9%) 29785.613 ops/s [Average]
[info]   (min, avg, max) = (558976.856, 565515.540, 574324.560), stdev = 7735.229
[info]   CI (99.9%): [535729.927, 595301.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   442.701 ±(99.9%) 23.471 MB/sec [Average]
[info]   (min, avg, max) = (437.541, 442.701, 449.560), stdev = 6.095
[info]   CI (99.9%): [419.231, 466.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.863 ±(99.9%) 762.470 MB/sec [Average]
[info]   (min, avg, max) = (255.883, 448.863, 663.472), stdev = 198.011
[info]   CI (99.9%): [≈ 0, 1211.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1248.446 ±(99.9%) 2105.480 B/op [Average]
[info]   (min, avg, max) = (701.950, 1248.446, 1858.439), stdev = 546.787
[info]   CI (99.9%): [≈ 0, 3353.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.390 ±(99.9%) 3.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.824), stdev = 0.802
[info]   CI (99.9%): [≈ 0, 3.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.070 ±(99.9%) 8.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.070, 4.998), stdev = 2.198
[info]   CI (99.9%): [≈ 0, 9.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.24% complete, ETA 00:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 570566.585 ops/s
[info] # Warmup Iteration   2: 616525.076 ops/s
[info] # Warmup Iteration   3: 653268.050 ops/s
[info] Iteration   1: 653288.421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 653123.838 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 655039.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 655238.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 653371.860 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   654012.375 ±(99.9%) 3983.935 ops/s [Average]
[info]   (min, avg, max) = (653123.838, 654012.375, 655238.449), stdev = 1034.615
[info]   CI (99.9%): [650028.440, 657996.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 44.55% complete, ETA 00:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19925.586 ops/s
[info] # Warmup Iteration   2: 26342.915 ops/s
[info] # Warmup Iteration   3: 26783.197 ops/s
[info] Iteration   1: 26335.578 ops/s
[info]                  ·gc.alloc.rate:                   1448.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              86528.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98611.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.732 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 26634.210 ops/s
[info]                  ·gc.alloc.rate:                   1464.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              86518.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78531.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.151 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26523.080 ops/s
[info]                  ·gc.alloc.rate:                   1457.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79251.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26983.197 ops/s
[info]                  ·gc.alloc.rate:                   1483.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97875.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.643 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26976.145 ops/s
[info]                  ·gc.alloc.rate:                   1483.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78640.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26690.442 ±(99.9%) 1096.643 ops/s [Average]
[info]   (min, avg, max) = (26335.578, 26690.442, 26983.197), stdev = 284.795
[info]   CI (99.9%): [25593.799, 27787.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1467.440 ±(99.9%) 60.698 MB/sec [Average]
[info]   (min, avg, max) = (1448.012, 1467.440, 1483.522), stdev = 15.763
[info]   CI (99.9%): [1406.741, 1528.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86516.562 ±(99.9%) 27.089 B/op [Average]
[info]   (min, avg, max) = (86512.016, 86516.562, 86528.018), stdev = 7.035
[info]   CI (99.9%): [86489.472, 86543.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1468.350 ±(99.9%) 690.387 MB/sec [Average]
[info]   (min, avg, max) = (1329.102, 1468.350, 1678.383), stdev = 179.291
[info]   CI (99.9%): [777.963, 2158.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86581.978 ±(99.9%) 41017.204 B/op [Average]
[info]   (min, avg, max) = (78531.013, 86581.978, 98611.289), stdev = 10652.038
[info]   CI (99.9%): [45564.774, 127599.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.179 ±(99.9%) 5.452 B/op [Average]
[info]   (min, avg, max) = (2.429, 4.179, 6.151), stdev = 1.416
[info]   CI (99.9%): [≈ 0, 9.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 44.85% complete, ETA 00:38:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4761.851 ops/s
[info] # Warmup Iteration   2: 6828.123 ops/s
[info] # Warmup Iteration   3: 6892.771 ops/s
[info] Iteration   1: 6916.347 ops/s
[info]                  ·gc.alloc.rate:                   1093.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226069.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6989.773 ops/s
[info]                  ·gc.alloc.rate:                   1105.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224127.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6846.931 ops/s
[info]                  ·gc.alloc.rate:                   1083.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306242.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.710 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6872.430 ops/s
[info]                  ·gc.alloc.rate:                   1086.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229652.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7008.173 ops/s
[info]                  ·gc.alloc.rate:                   1108.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225795.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6926.731 ±(99.9%) 272.496 ops/s [Average]
[info]   (min, avg, max) = (6846.931, 6926.731, 7008.173), stdev = 70.766
[info]   CI (99.9%): [6654.235, 7199.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1095.447 ±(99.9%) 42.867 MB/sec [Average]
[info]   (min, avg, max) = (1083.096, 1095.447, 1108.178), stdev = 11.132
[info]   CI (99.9%): [1052.580, 1138.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248864.064 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (248864.062, 248864.064, 248864.067), stdev = 0.002
[info]   CI (99.9%): [248864.055, 248864.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1066.055 ±(99.9%) 574.544 MB/sec [Average]
[info]   (min, avg, max) = (993.451, 1066.055, 1332.819), stdev = 149.207
[info]   CI (99.9%): [491.511, 1640.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   242377.558 ±(99.9%) 137693.646 B/op [Average]
[info]   (min, avg, max) = (224127.121, 242377.558, 306242.991), stdev = 35758.603
[info]   CI (99.9%): [104683.911, 380071.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.937 ±(99.9%) 29.107 B/op [Average]
[info]   (min, avg, max) = (9.473, 18.937, 28.710), stdev = 7.559
[info]   CI (99.9%): [≈ 0, 48.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 45.15% complete, ETA 00:38:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3812.012 ops/s
[info] # Warmup Iteration   2: 7060.391 ops/s
[info] # Warmup Iteration   3: 7219.884 ops/s
[info] Iteration   1: 7300.201 ops/s
[info]                  ·gc.alloc.rate:                   1066.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211524.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7094.767 ops/s
[info]                  ·gc.alloc.rate:                   1036.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291254.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.853 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7097.852 ops/s
[info]                  ·gc.alloc.rate:                   1036.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219419.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7219.653 ops/s
[info]                  ·gc.alloc.rate:                   1054.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216728.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7294.053 ops/s
[info]                  ·gc.alloc.rate:                   1065.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215578.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.456 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   7201.305 ±(99.9%) 388.763 ops/s [Average]
[info]   (min, avg, max) = (7094.767, 7201.305, 7300.201), stdev = 100.961
[info]   CI (99.9%): [6812.542, 7590.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1051.764 ±(99.9%) 56.943 MB/sec [Average]
[info]   (min, avg, max) = (1036.143, 1051.764, 1066.136), stdev = 14.788
[info]   CI (99.9%): [994.821, 1108.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   229848.061 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (229848.059, 229848.061, 229848.065), stdev = 0.003
[info]   CI (99.9%): [229848.051, 229848.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1055.457 ±(99.9%) 554.895 MB/sec [Average]
[info]   (min, avg, max) = (981.143, 1055.457, 1312.961), stdev = 144.104
[info]   CI (99.9%): [500.562, 1610.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   230901.348 ±(99.9%) 130374.999 B/op [Average]
[info]   (min, avg, max) = (211524.575, 230901.348, 291254.692), stdev = 33857.973
[info]   CI (99.9%): [100526.349, 361276.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.950 ±(99.9%) 39.378 B/op [Average]
[info]   (min, avg, max) = (9.076, 19.950, 35.900), stdev = 10.226
[info]   CI (99.9%): [≈ 0, 59.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 45.45% complete, ETA 00:38:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89128.783 ops/s
[info] # Warmup Iteration   2: 100278.980 ops/s
[info] # Warmup Iteration   3: 98573.398 ops/s
[info] Iteration   1: 101025.242 ops/s
[info]                  ·gc.alloc.rate:                   978.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15535.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 98714.594 ops/s
[info]                  ·gc.alloc.rate:                   956.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15920.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.996 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 101889.250 ops/s
[info]                  ·gc.alloc.rate:                   987.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15455.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 100886.080 ops/s
[info]                  ·gc.alloc.rate:                   977.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15661.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 100694.545 ops/s
[info]                  ·gc.alloc.rate:                   975.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15732.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.651 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   100641.942 ±(99.9%) 4506.955 ops/s [Average]
[info]   (min, avg, max) = (98714.594, 100641.942, 101889.250), stdev = 1170.442
[info]   CI (99.9%): [96134.987, 105148.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   975.127 ±(99.9%) 43.656 MB/sec [Average]
[info]   (min, avg, max) = (956.403, 975.127, 987.124), stdev = 11.337
[info]   CI (99.9%): [931.471, 1018.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1001.435 ±(99.9%) 15.163 MB/sec [Average]
[info]   (min, avg, max) = (997.234, 1001.435, 1006.797), stdev = 3.938
[info]   CI (99.9%): [986.272, 1016.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15660.968 ±(99.9%) 695.852 B/op [Average]
[info]   (min, avg, max) = (15455.190, 15660.968, 15920.504), stdev = 180.711
[info]   CI (99.9%): [14965.116, 16356.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.847 ±(99.9%) 1.428 B/op [Average]
[info]   (min, avg, max) = (0.325, 0.847, 1.297), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 2.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 45.76% complete, ETA 00:38:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3414.459 ops/s
[info] # Warmup Iteration   2: 6379.877 ops/s
[info] # Warmup Iteration   3: 6642.250 ops/s
[info] Iteration   1: 6453.039 ops/s
[info]                  ·gc.alloc.rate:                   1177.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320064.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6649.187 ops/s
[info]                  ·gc.alloc.rate:                   1213.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234041.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.634 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6444.889 ops/s
[info]                  ·gc.alloc.rate:                   1176.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323389.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6479.233 ops/s
[info]                  ·gc.alloc.rate:                   1182.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323584.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.056 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6488.139 ops/s
[info]                  ·gc.alloc.rate:                   1184.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243402.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6502.897 ±(99.9%) 322.337 ops/s [Average]
[info]   (min, avg, max) = (6444.889, 6502.897, 6649.187), stdev = 83.710
[info]   CI (99.9%): [6180.560, 6825.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1186.863 ±(99.9%) 58.762 MB/sec [Average]
[info]   (min, avg, max) = (1176.223, 1186.863, 1213.545), stdev = 15.260
[info]   CI (99.9%): [1128.101, 1245.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   287232.068 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (287232.065, 287232.068, 287232.072), stdev = 0.003
[info]   CI (99.9%): [287232.056, 287232.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1192.254 ±(99.9%) 690.269 MB/sec [Average]
[info]   (min, avg, max) = (988.818, 1192.254, 1332.185), stdev = 179.261
[info]   CI (99.9%): [501.985, 1882.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   288896.445 ±(99.9%) 176912.461 B/op [Average]
[info]   (min, avg, max) = (234041.659, 288896.445, 323584.632), stdev = 45943.604
[info]   CI (99.9%): [111983.984, 465808.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.035 ±(99.9%) 39.166 B/op [Average]
[info]   (min, avg, max) = (5.056, 14.035, 25.245), stdev = 10.171
[info]   CI (99.9%): [≈ 0, 53.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 46.06% complete, ETA 00:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12384.855 ops/s
[info] # Warmup Iteration   2: 16663.157 ops/s
[info] # Warmup Iteration   3: 16746.077 ops/s
[info] Iteration   1: 16689.875 ops/s
[info]                  ·gc.alloc.rate:                   984.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              92812.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93343.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.815 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16638.419 ops/s
[info]                  ·gc.alloc.rate:                   982.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93824.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16727.083 ops/s
[info]                  ·gc.alloc.rate:                   987.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93638.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16179.459 ops/s
[info]                  ·gc.alloc.rate:                   954.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              92862.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97165.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16687.748 ops/s
[info]                  ·gc.alloc.rate:                   984.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94522.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   16584.517 ±(99.9%) 880.316 ops/s [Average]
[info]   (min, avg, max) = (16179.459, 16584.517, 16727.083), stdev = 228.615
[info]   CI (99.9%): [15704.201, 17464.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   978.490 ±(99.9%) 51.143 MB/sec [Average]
[info]   (min, avg, max) = (954.960, 978.490, 987.197), stdev = 13.282
[info]   CI (99.9%): [927.347, 1029.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92845.280 ±(99.9%) 124.895 B/op [Average]
[info]   (min, avg, max) = (92808.026, 92845.280, 92872.028), stdev = 32.435
[info]   CI (99.9%): [92720.385, 92970.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   995.748 ±(99.9%) 19.450 MB/sec [Average]
[info]   (min, avg, max) = (989.851, 995.748, 1002.217), stdev = 5.051
[info]   CI (99.9%): [976.298, 1015.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   94498.988 ±(99.9%) 5979.052 B/op [Average]
[info]   (min, avg, max) = (93343.553, 94498.988, 97165.969), stdev = 1552.741
[info]   CI (99.9%): [88519.936, 100478.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.891 ±(99.9%) 5.096 B/op [Average]
[info]   (min, avg, max) = (6.075, 7.891, 9.815), stdev = 1.323
[info]   CI (99.9%): [2.795, 12.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 46.36% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12107.467 ops/s
[info] # Warmup Iteration   2: 17905.088 ops/s
[info] # Warmup Iteration   3: 18571.635 ops/s
[info] Iteration   1: 18653.796 ops/s
[info]                  ·gc.alloc.rate:                   874.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82791.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18692.745 ops/s
[info]                  ·gc.alloc.rate:                   876.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55132.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18674.776 ops/s
[info]                  ·gc.alloc.rate:                   875.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83030.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18599.167 ops/s
[info]                  ·gc.alloc.rate:                   872.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83736.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18746.790 ops/s
[info]                  ·gc.alloc.rate:                   879.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55616.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   18673.455 ±(99.9%) 207.871 ops/s [Average]
[info]   (min, avg, max) = (18599.167, 18673.455, 18746.790), stdev = 53.984
[info]   CI (99.9%): [18465.583, 18881.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   875.799 ±(99.9%) 10.246 MB/sec [Average]
[info]   (min, avg, max) = (872.250, 875.799, 879.536), stdev = 2.661
[info]   CI (99.9%): [865.553, 886.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   73808.025 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (73808.023, 73808.025, 73808.032), stdev = 0.004
[info]   CI (99.9%): [73808.011, 73808.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   854.724 ±(99.9%) 688.901 MB/sec [Average]
[info]   (min, avg, max) = (654.831, 854.724, 989.579), stdev = 178.906
[info]   CI (99.9%): [165.822, 1543.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72061.287 ±(99.9%) 58676.074 B/op [Average]
[info]   (min, avg, max) = (55132.125, 72061.287, 83736.138), stdev = 15237.990
[info]   CI (99.9%): [13385.213, 130737.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.972 ±(99.9%) 11.385 B/op [Average]
[info]   (min, avg, max) = (3.495, 5.972, 10.569), stdev = 2.957
[info]   CI (99.9%): [≈ 0, 17.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 46.67% complete, ETA 00:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 418544.449 ops/s
[info] # Warmup Iteration   2: 462944.203 ops/s
[info] # Warmup Iteration   3: 473773.065 ops/s
[info] Iteration   1: 472092.077 ops/s
[info]                  ·gc.alloc.rate:                   1070.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4423.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 465812.877 ops/s
[info]                  ·gc.alloc.rate:                   1056.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3370.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 468025.178 ops/s
[info]                  ·gc.alloc.rate:                   1061.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3361.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 473965.723 ops/s
[info]                  ·gc.alloc.rate:                   1074.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3333.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 474739.970 ops/s
[info]                  ·gc.alloc.rate:                   1076.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3337.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   470927.165 ±(99.9%) 14876.747 ops/s [Average]
[info]   (min, avg, max) = (465812.877, 470927.165, 474739.970), stdev = 3863.444
[info]   CI (99.9%): [456050.418, 485803.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1067.677 ±(99.9%) 33.263 MB/sec [Average]
[info]   (min, avg, max) = (1056.377, 1067.677, 1076.228), stdev = 8.638
[info]   CI (99.9%): [1034.414, 1100.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1066.979 ±(99.9%) 559.946 MB/sec [Average]
[info]   (min, avg, max) = (997.918, 1066.979, 1327.035), stdev = 145.416
[info]   CI (99.9%): [507.033, 1626.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3565.243 ±(99.9%) 1849.402 B/op [Average]
[info]   (min, avg, max) = (3333.497, 3565.243, 4423.940), stdev = 480.284
[info]   CI (99.9%): [1715.841, 5414.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.209 ±(99.9%) 0.428 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.209, 0.352), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 46.97% complete, ETA 00:37:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 387615.537 ops/s
[info] # Warmup Iteration   2: 416341.804 ops/s
[info] # Warmup Iteration   3: 418009.672 ops/s
[info] Iteration   1: 418163.241 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 416921.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 416814.780 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 416201.480 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 416916.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   417003.410 ±(99.9%) 2748.710 ops/s [Average]
[info]   (min, avg, max) = (416201.480, 417003.410, 418163.241), stdev = 713.831
[info]   CI (99.9%): [414254.700, 419752.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 47.27% complete, ETA 00:37:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13592.354 ops/s
[info] # Warmup Iteration   2: 17986.235 ops/s
[info] # Warmup Iteration   3: 18027.667 ops/s
[info] Iteration   1: 18472.899 ops/s
[info]                  ·gc.alloc.rate:               951.034 MB/sec
[info]                  ·gc.alloc.rate.norm:          80990.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:      985.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83938.293 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 18786.732 ops/s
[info]                  ·gc.alloc.rate:                   950.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              79664.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82758.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.488 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18842.734 ops/s
[info]                  ·gc.alloc.rate:                   953.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              79664.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55166.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18236.454 ops/s
[info]                  ·gc.alloc.rate:                   924.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              79768.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85742.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.186 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18831.888 ops/s
[info]                  ·gc.alloc.rate:                   953.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              79648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83479.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18634.141 ±(99.9%) 1036.912 ops/s [Average]
[info]   (min, avg, max) = (18236.454, 18634.141, 18842.734), stdev = 269.283
[info]   CI (99.9%): [17597.230, 19671.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   946.647 ±(99.9%) 48.305 MB/sec [Average]
[info]   (min, avg, max) = (924.320, 946.647, 953.761), stdev = 12.545
[info]   CI (99.9%): [898.342, 994.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79946.967 ±(99.9%) 2253.352 B/op [Average]
[info]   (min, avg, max) = (79648.023, 79946.967, 80990.258), stdev = 585.188
[info]   CI (99.9%): [77693.615, 82200.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   925.317 ±(99.9%) 570.463 MB/sec [Average]
[info]   (min, avg, max) = (660.466, 925.317, 999.037), stdev = 148.147
[info]   CI (99.9%): [354.854, 1495.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78217.194 ±(99.9%) 49799.782 B/op [Average]
[info]   (min, avg, max) = (55166.248, 78217.194, 85742.933), stdev = 12932.845
[info]   CI (99.9%): [28417.412, 128016.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.874 ±(99.9%) 10.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.874, 7.186), stdev = 2.650
[info]   CI (99.9%): [≈ 0, 14.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 47.58% complete, ETA 00:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8635.928 ops/s
[info] # Warmup Iteration   2: 11863.110 ops/s
[info] # Warmup Iteration   3: 11684.864 ops/s
[info] Iteration   1: 11768.296 ops/s
[info]                  ·gc.alloc.rate:                   1213.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177197.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.568 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12023.381 ops/s
[info]                  ·gc.alloc.rate:                   1239.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130450.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12004.127 ops/s
[info]                  ·gc.alloc.rate:                   1238.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              162256.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175024.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.647 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11634.089 ops/s
[info]                  ·gc.alloc.rate:                   1199.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181311.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11712.498 ops/s
[info]                  ·gc.alloc.rate:                   1207.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135570.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11828.478 ±(99.9%) 677.154 ops/s [Average]
[info]   (min, avg, max) = (11634.089, 11828.478, 12023.381), stdev = 175.855
[info]   CI (99.9%): [11151.324, 12505.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1219.722 ±(99.9%) 69.882 MB/sec [Average]
[info]   (min, avg, max) = (1199.446, 1219.722, 1239.456), stdev = 18.148
[info]   CI (99.9%): [1149.840, 1289.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   162256.183 ±(99.9%) 30.832 B/op [Average]
[info]   (min, avg, max) = (162248.036, 162256.183, 162264.037), stdev = 8.007
[info]   CI (99.9%): [162225.350, 162287.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.412 ±(99.9%) 698.518 MB/sec [Average]
[info]   (min, avg, max) = (996.548, 1201.412, 1340.240), stdev = 181.403
[info]   CI (99.9%): [502.894, 1899.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   159910.854 ±(99.9%) 95213.033 B/op [Average]
[info]   (min, avg, max) = (130450.702, 159910.854, 181311.010), stdev = 24726.522
[info]   CI (99.9%): [64697.822, 255123.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.301 ±(99.9%) 12.800 B/op [Average]
[info]   (min, avg, max) = (5.450, 8.301, 13.647), stdev = 3.324
[info]   CI (99.9%): [≈ 0, 21.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 47.88% complete, ETA 00:36:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7391.747 ops/s
[info] # Warmup Iteration   2: 12033.664 ops/s
[info] # Warmup Iteration   3: 12424.820 ops/s
[info] Iteration   1: 12290.457 ops/s
[info]                  ·gc.alloc.rate:               1140.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          146048.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1309.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167697.097 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 12208.588 ops/s
[info]                  ·gc.alloc.rate:                   1132.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127218.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.683 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 12207.199 ops/s
[info]                  ·gc.alloc.rate:                   1132.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              146066.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127754.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12302.944 ops/s
[info]                  ·gc.alloc.rate:                   1141.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169990.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12363.301 ops/s
[info]                  ·gc.alloc.rate:                   1147.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127542.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12274.498 ±(99.9%) 257.037 ops/s [Average]
[info]   (min, avg, max) = (12207.199, 12274.498, 12363.301), stdev = 66.752
[info]   CI (99.9%): [12017.461, 12531.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1139.277 ±(99.9%) 24.761 MB/sec [Average]
[info]   (min, avg, max) = (1132.903, 1139.277, 1147.990), stdev = 6.430
[info]   CI (99.9%): [1114.516, 1164.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   146064.571 ±(99.9%) 61.782 B/op [Average]
[info]   (min, avg, max) = (146048.035, 146064.571, 146080.038), stdev = 16.044
[info]   CI (99.9%): [146002.790, 146126.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.719 ±(99.9%) 688.206 MB/sec [Average]
[info]   (min, avg, max) = (986.841, 1123.719, 1328.904), stdev = 178.725
[info]   CI (99.9%): [435.512, 1811.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   144040.680 ±(99.9%) 87246.327 B/op [Average]
[info]   (min, avg, max) = (127218.520, 144040.680, 169990.990), stdev = 22657.594
[info]   CI (99.9%): [56794.353, 231287.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.263 ±(99.9%) 15.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.263, 10.600), stdev = 4.019
[info]   CI (99.9%): [≈ 0, 19.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 48.18% complete, ETA 00:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163519.676 ops/s
[info] # Warmup Iteration   2: 169516.510 ops/s
[info] # Warmup Iteration   3: 166742.479 ops/s
[info] Iteration   1: 166241.333 ops/s
[info]                  ·gc.alloc.rate:                   961.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9441.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 166040.734 ops/s
[info]                  ·gc.alloc.rate:                   960.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9464.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.789 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 172452.875 ops/s
[info]                  ·gc.alloc.rate:                   997.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9133.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 173392.936 ops/s
[info]                  ·gc.alloc.rate:                   1003.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9107.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 173309.307 ops/s
[info]                  ·gc.alloc.rate:                   1002.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6091.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   170287.437 ±(99.9%) 14646.423 ops/s [Average]
[info]   (min, avg, max) = (166040.734, 170287.437, 173392.936), stdev = 3803.629
[info]   CI (99.9%): [155641.014, 184933.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   985.169 ±(99.9%) 84.771 MB/sec [Average]
[info]   (min, avg, max) = (960.455, 985.169, 1003.398), stdev = 22.015
[info]   CI (99.9%): [900.398, 1069.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   934.300 ±(99.9%) 567.260 MB/sec [Average]
[info]   (min, avg, max) = (670.809, 934.300, 1003.825), stdev = 147.316
[info]   CI (99.9%): [367.039, 1501.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8647.832 ±(99.9%) 5539.383 B/op [Average]
[info]   (min, avg, max) = (6091.765, 8647.832, 9464.890), stdev = 1438.560
[info]   CI (99.9%): [3108.449, 14187.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.083), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.691 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (0.394, 0.691, 0.789), stdev = 0.167
[info]   CI (99.9%): [0.050, 1.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 48.48% complete, ETA 00:36:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4701.423 ops/s
[info] # Warmup Iteration   2: 10493.526 ops/s
[info] # Warmup Iteration   3: 10817.407 ops/s
[info] Iteration   1: 10735.961 ops/s
[info]                  ·gc.alloc.rate:                   1378.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239293.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.155 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10793.034 ops/s
[info]                  ·gc.alloc.rate:                   1386.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191842.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.142 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10609.499 ops/s
[info]                  ·gc.alloc.rate:                   1362.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196651.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10610.697 ops/s
[info]                  ·gc.alloc.rate:                   1362.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197799.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.350 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10764.384 ops/s
[info]                  ·gc.alloc.rate:                   1381.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195962.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.175 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10702.715 ±(99.9%) 334.709 ops/s [Average]
[info]   (min, avg, max) = (10609.499, 10702.715, 10793.034), stdev = 86.923
[info]   CI (99.9%): [10368.006, 11037.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1374.252 ±(99.9%) 43.043 MB/sec [Average]
[info]   (min, avg, max) = (1362.035, 1374.252, 1386.114), stdev = 11.178
[info]   CI (99.9%): [1331.210, 1417.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202040.109 ±(99.9%) 0.589 B/op [Average]
[info]   (min, avg, max) = (202040.040, 202040.109, 202040.383), stdev = 0.153
[info]   CI (99.9%): [202039.521, 202040.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1389.799 ±(99.9%) 524.160 MB/sec [Average]
[info]   (min, avg, max) = (1316.152, 1389.799, 1632.762), stdev = 136.123
[info]   CI (99.9%): [865.639, 1913.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   204309.948 ±(99.9%) 75800.427 B/op [Average]
[info]   (min, avg, max) = (191842.297, 204309.948, 239293.676), stdev = 19685.130
[info]   CI (99.9%): [128509.521, 280110.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.017 ±(99.9%) 6.363 B/op [Average]
[info]   (min, avg, max) = (9.155, 11.017, 12.350), stdev = 1.652
[info]   CI (99.9%): [4.654, 17.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 48.79% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20034.598 ops/s
[info] # Warmup Iteration   2: 27203.821 ops/s
[info] # Warmup Iteration   3: 27413.391 ops/s
[info] Iteration   1: 27058.157 ops/s
[info]                  ·gc.alloc.rate:                   1188.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              69120.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76874.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.633 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27086.083 ops/s
[info]                  ·gc.alloc.rate:                   1188.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              69074.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57789.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.838 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27450.265 ops/s
[info]                  ·gc.alloc.rate:                   1204.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76385.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.194 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27535.926 ops/s
[info]                  ·gc.alloc.rate:                   1208.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57340.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27472.721 ops/s
[info]                  ·gc.alloc.rate:                   1205.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76934.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.770 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27320.630 ±(99.9%) 882.700 ops/s [Average]
[info]   (min, avg, max) = (27058.157, 27320.630, 27535.926), stdev = 229.234
[info]   CI (99.9%): [26437.931, 28203.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1199.081 ±(99.9%) 36.955 MB/sec [Average]
[info]   (min, avg, max) = (1188.564, 1199.081, 1208.182), stdev = 9.597
[info]   CI (99.9%): [1162.126, 1236.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   69072.523 ±(99.9%) 106.812 B/op [Average]
[info]   (min, avg, max) = (69056.016, 69072.523, 69120.023), stdev = 27.739
[info]   CI (99.9%): [68965.711, 69179.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1198.983 ±(99.9%) 704.029 MB/sec [Average]
[info]   (min, avg, max) = (994.574, 1198.983, 1342.949), stdev = 182.834
[info]   CI (99.9%): [494.954, 1903.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69064.825 ±(99.9%) 40436.165 B/op [Average]
[info]   (min, avg, max) = (57340.431, 69064.825, 76934.499), stdev = 10501.144
[info]   CI (99.9%): [28628.660, 109500.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.125 ±(99.9%) 7.041 B/op [Average]
[info]   (min, avg, max) = (1.190, 3.125, 4.838), stdev = 1.829
[info]   CI (99.9%): [≈ 0, 10.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 49.09% complete, ETA 00:35:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57507.880 ops/s
[info] # Warmup Iteration   2: 84743.558 ops/s
[info] # Warmup Iteration   3: 86277.846 ops/s
[info] Iteration   1: 85954.804 ops/s
[info]                  ·gc.alloc.rate:                   1756.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36269.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.525 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 84906.861 ops/s
[info]                  ·gc.alloc.rate:                   1735.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30856.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 84289.481 ops/s
[info]                  ·gc.alloc.rate:                   1723.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31301.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 86694.124 ops/s
[info]                  ·gc.alloc.rate:                   1771.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30565.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 85204.068 ops/s
[info]                  ·gc.alloc.rate:                   1741.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31217.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.923 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   85409.867 ±(99.9%) 3600.355 ops/s [Average]
[info]   (min, avg, max) = (84289.481, 85409.867, 86694.124), stdev = 935.001
[info]   CI (99.9%): [81809.512, 89010.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1745.828 ±(99.9%) 72.810 MB/sec [Average]
[info]   (min, avg, max) = (1723.473, 1745.828, 1771.994), stdev = 18.909
[info]   CI (99.9%): [1673.018, 1818.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   32168.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32168.005, 32168.005, 32168.005), stdev = 0.001
[info]   CI (99.9%): [32168.005, 32168.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1739.239 ±(99.9%) 521.063 MB/sec [Average]
[info]   (min, avg, max) = (1664.670, 1739.239, 1980.719), stdev = 135.319
[info]   CI (99.9%): [1218.175, 2260.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32042.019 ±(99.9%) 9170.296 B/op [Average]
[info]   (min, avg, max) = (30565.176, 32042.019, 36269.464), stdev = 2381.497
[info]   CI (99.9%): [22871.723, 41212.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.535 ±(99.9%) 2.353 B/op [Average]
[info]   (min, avg, max) = (0.777, 1.535, 2.315), stdev = 0.611
[info]   CI (99.9%): [≈ 0, 3.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 49.39% complete, ETA 00:35:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 631042.982 ops/s
[info] # Warmup Iteration   2: 694799.613 ops/s
[info] # Warmup Iteration   3: 686335.040 ops/s
[info] Iteration   1: 678337.492 ops/s
[info]                  ·gc.alloc.rate:                   930.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2309.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 691302.696 ops/s
[info]                  ·gc.alloc.rate:                   949.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2267.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 695630.922 ops/s
[info]                  ·gc.alloc.rate:                   954.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2257.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 693004.361 ops/s
[info]                  ·gc.alloc.rate:                   951.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2275.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 693123.077 ops/s
[info]                  ·gc.alloc.rate:                   951.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2281.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   690279.710 ±(99.9%) 26385.132 ops/s [Average]
[info]   (min, avg, max) = (678337.492, 690279.710, 695630.922), stdev = 6852.135
[info]   CI (99.9%): [663894.578, 716664.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   947.409 ±(99.9%) 36.282 MB/sec [Average]
[info]   (min, avg, max) = (930.929, 947.409, 954.663), stdev = 9.422
[info]   CI (99.9%): [911.127, 983.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.173 ±(99.9%) 15.042 MB/sec [Average]
[info]   (min, avg, max) = (995.197, 999.173, 1004.540), stdev = 3.906
[info]   CI (99.9%): [984.131, 1014.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2278.160 ±(99.9%) 74.612 B/op [Average]
[info]   (min, avg, max) = (2257.864, 2278.160, 2309.118), stdev = 19.377
[info]   CI (99.9%): [2203.548, 2352.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.161 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.161, 0.190), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 49.70% complete, ETA 00:35:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 690770.508 ops/s
[info] # Warmup Iteration   2: 751334.273 ops/s
[info] # Warmup Iteration   3: 731500.257 ops/s
[info] Iteration   1: 751716.630 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 751557.991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 750490.618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 748992.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 747690.336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   750089.638 ±(99.9%) 6648.373 ops/s [Average]
[info]   (min, avg, max) = (747690.336, 750089.638, 751716.630), stdev = 1726.561
[info]   CI (99.9%): [743441.265, 756738.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 50.00% complete, ETA 00:35:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42798.105 ops/s
[info] # Warmup Iteration   2: 76511.611 ops/s
[info] # Warmup Iteration   3: 75875.603 ops/s
[info] Iteration   1: 76565.642 ops/s
[info]                  ·gc.alloc.rate:                   1847.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40601.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.712 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 75893.610 ops/s
[info]                  ·gc.alloc.rate:                   1831.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41374.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.295 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 76102.535 ops/s
[info]                  ·gc.alloc.rate:                   1836.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34641.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.861 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 77204.606 ops/s
[info]                  ·gc.alloc.rate:                   1863.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41214.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.122 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 76241.430 ops/s
[info]                  ·gc.alloc.rate:                   1839.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34907.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.859 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   76401.564 ±(99.9%) 1968.048 ops/s [Average]
[info]   (min, avg, max) = (75893.610, 76401.564, 77204.606), stdev = 511.096
[info]   CI (99.9%): [74433.516, 78369.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1843.953 ±(99.9%) 47.273 MB/sec [Average]
[info]   (min, avg, max) = (1831.929, 1843.953, 1863.311), stdev = 12.277
[info]   CI (99.9%): [1796.680, 1891.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37984.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (37984.006, 37984.006, 37984.006), stdev = 0.001
[info]   CI (99.9%): [37984.005, 37984.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.693 ±(99.9%) 666.630 MB/sec [Average]
[info]   (min, avg, max) = (1675.121, 1871.693, 2021.764), stdev = 173.122
[info]   CI (99.9%): [1205.063, 2538.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   38547.986 ±(99.9%) 13315.275 B/op [Average]
[info]   (min, avg, max) = (34641.638, 38547.986, 41374.980), stdev = 3457.935
[info]   CI (99.9%): [25232.711, 51863.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.370 ±(99.9%) 2.115 B/op [Average]
[info]   (min, avg, max) = (0.859, 1.370, 2.122), stdev = 0.549
[info]   CI (99.9%): [≈ 0, 3.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 50.30% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5263.974 ops/s
[info] # Warmup Iteration   2: 21476.774 ops/s
[info] # Warmup Iteration   3: 21735.325 ops/s
[info] Iteration   1: 22205.152 ops/s
[info]                  ·gc.alloc.rate:                   1102.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              78174.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93865.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.853 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22263.451 ops/s
[info]                  ·gc.alloc.rate:                   1106.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70330.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22282.458 ops/s
[info]                  ·gc.alloc.rate:                   1106.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              78179.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70455.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22293.212 ops/s
[info]                  ·gc.alloc.rate:                   1107.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94243.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.939 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22397.665 ops/s
[info]                  ·gc.alloc.rate:                   1112.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70608.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   22288.387 ±(99.9%) 269.201 ops/s [Average]
[info]   (min, avg, max) = (22205.152, 22288.387, 22397.665), stdev = 69.911
[info]   CI (99.9%): [22019.186, 22557.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1107.186 ±(99.9%) 13.331 MB/sec [Average]
[info]   (min, avg, max) = (1102.915, 1107.186, 1112.561), stdev = 3.462
[info]   CI (99.9%): [1093.855, 1120.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78174.939 ±(99.9%) 27.458 B/op [Average]
[info]   (min, avg, max) = (78168.019, 78174.939, 78184.019), stdev = 7.131
[info]   CI (99.9%): [78147.481, 78202.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1131.384 ±(99.9%) 697.069 MB/sec [Average]
[info]   (min, avg, max) = (995.202, 1131.384, 1334.924), stdev = 181.027
[info]   CI (99.9%): [434.315, 1828.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79900.773 ±(99.9%) 49756.691 B/op [Average]
[info]   (min, avg, max) = (70330.456, 79900.773, 94243.454), stdev = 12921.655
[info]   CI (99.9%): [30144.082, 129657.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.002 ±(99.9%) 11.788 B/op [Average]
[info]   (min, avg, max) = (1.470, 5.002, 8.853), stdev = 3.061
[info]   CI (99.9%): [≈ 0, 16.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 50.61% complete, ETA 00:34:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4606.337 ops/s
[info] # Warmup Iteration   2: 17830.297 ops/s
[info] # Warmup Iteration   3: 18493.177 ops/s
[info] Iteration   1: 18786.025 ops/s
[info]                  ·gc.alloc.rate:                   749.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54747.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18734.604 ops/s
[info]                  ·gc.alloc.rate:                   748.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              62829.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82428.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18815.709 ops/s
[info]                  ·gc.alloc.rate:                   751.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              62832.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54774.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18326.967 ops/s
[info]                  ·gc.alloc.rate:               731.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          62823.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56375.976 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 18606.936 ops/s
[info]                  ·gc.alloc.rate:                   742.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55668.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18654.048 ±(99.9%) 768.305 ops/s [Average]
[info]   (min, avg, max) = (18326.967, 18654.048, 18815.709), stdev = 199.526
[info]   CI (99.9%): [17885.743, 19422.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   744.610 ±(99.9%) 30.792 MB/sec [Average]
[info]   (min, avg, max) = (731.574, 744.610, 751.183), stdev = 7.997
[info]   CI (99.9%): [713.818, 775.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   62817.203 ±(99.9%) 61.450 B/op [Average]
[info]   (min, avg, max) = (62800.023, 62817.203, 62832.023), stdev = 15.958
[info]   CI (99.9%): [62755.753, 62878.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   720.915 ±(99.9%) 561.063 MB/sec [Average]
[info]   (min, avg, max) = (653.531, 720.915, 981.544), stdev = 145.706
[info]   CI (99.9%): [159.852, 1281.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   60799.160 ±(99.9%) 46632.843 B/op [Average]
[info]   (min, avg, max) = (54747.621, 60799.160, 82428.885), stdev = 12110.401
[info]   CI (99.9%): [14166.318, 107432.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.471 ±(99.9%) 3.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.126), stdev = 0.926
[info]   CI (99.9%): [≈ 0, 4.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39.457 ±(99.9%) 298.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.457, 178.076), stdev = 77.592
[info]   CI (99.9%): [≈ 0, 338.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 50.91% complete, ETA 00:34:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170075.226 ops/s
[info] # Warmup Iteration   2: 177628.026 ops/s
[info] # Warmup Iteration   3: 177928.948 ops/s
[info] Iteration   1: 177625.178 ops/s
[info]                  ·gc.alloc.rate:                   462.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5214.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 178194.053 ops/s
[info]                  ·gc.alloc.rate:                   463.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2938.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 178258.264 ops/s
[info]                  ·gc.alloc.rate:                   463.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2934.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 176689.734 ops/s
[info]                  ·gc.alloc.rate:                   460.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5921.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.556 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 178388.797 ops/s
[info]                  ·gc.alloc.rate:               464.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2932.677 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   177831.205 ±(99.9%) 2702.559 ops/s [Average]
[info]   (min, avg, max) = (176689.734, 177831.205, 178388.797), stdev = 701.846
[info]   CI (99.9%): [175128.646, 180533.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   462.876 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (460.022, 462.876, 464.253), stdev = 1.737
[info]   CI (99.9%): [456.186, 469.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.281 ±(99.9%) 629.584 MB/sec [Average]
[info]   (min, avg, max) = (332.399, 450.281, 665.093), stdev = 163.501
[info]   CI (99.9%): [≈ 0, 1079.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3988.662 ±(99.9%) 5635.944 B/op [Average]
[info]   (min, avg, max) = (2932.677, 3988.662, 5921.946), stdev = 1463.637
[info]   CI (99.9%): [≈ 0, 9624.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.339 ±(99.9%) 2.611 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 1.552), stdev = 0.678
[info]   CI (99.9%): [≈ 0, 2.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.007 ±(99.9%) 23.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.007, 13.742), stdev = 6.005
[info]   CI (99.9%): [≈ 0, 26.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 51.21% complete, ETA 00:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2250.924 ops/s
[info] # Warmup Iteration   2: 14356.238 ops/s
[info] # Warmup Iteration   3: 15035.000 ops/s
[info] Iteration   1: 15033.150 ops/s
[info]                  ·gc.alloc.rate:                   1128.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137252.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14972.507 ops/s
[info]                  ·gc.alloc.rate:                   1124.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103674.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.188 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15542.784 ops/s
[info]                  ·gc.alloc.rate:                   1166.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133761.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.648 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15564.701 ops/s
[info]                  ·gc.alloc.rate:                   1168.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100667.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15182.112 ops/s
[info]                  ·gc.alloc.rate:                   1139.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138323.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15259.051 ±(99.9%) 1077.122 ops/s [Average]
[info]   (min, avg, max) = (14972.507, 15259.051, 15564.701), stdev = 279.725
[info]   CI (99.9%): [14181.929, 16336.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1145.454 ±(99.9%) 80.989 MB/sec [Average]
[info]   (min, avg, max) = (1124.049, 1145.454, 1168.318), stdev = 21.033
[info]   CI (99.9%): [1064.465, 1226.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118136.031 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (118136.028, 118136.031, 118136.041), stdev = 0.006
[info]   CI (99.9%): [118136.010, 118136.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1189.718 ±(99.9%) 699.343 MB/sec [Average]
[info]   (min, avg, max) = (986.446, 1189.718, 1334.352), stdev = 181.617
[info]   CI (99.9%): [490.375, 1889.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   122735.953 ±(99.9%) 72695.145 B/op [Average]
[info]   (min, avg, max) = (100667.876, 122735.953, 138323.085), stdev = 18878.698
[info]   CI (99.9%): [50040.808, 195431.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.273 ±(99.9%) 16.953 B/op [Average]
[info]   (min, avg, max) = (2.188, 7.273, 12.648), stdev = 4.403
[info]   CI (99.9%): [≈ 0, 24.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 51.52% complete, ETA 00:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61465.632 ops/s
[info] # Warmup Iteration   2: 78606.390 ops/s
[info] # Warmup Iteration   3: 78728.408 ops/s
[info] Iteration   1: 79200.703 ops/s
[info]                  ·gc.alloc.rate:                   1564.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32981.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.241 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 78686.392 ops/s
[info]                  ·gc.alloc.rate:                   1554.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26694.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 80077.062 ops/s
[info]                  ·gc.alloc.rate:                   1582.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32938.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.046 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 78767.865 ops/s
[info]                  ·gc.alloc.rate:                   1556.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33654.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.248 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 78825.196 ops/s
[info]                  ·gc.alloc.rate:                   1557.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26980.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   79111.444 ±(99.9%) 2212.897 ops/s [Average]
[info]   (min, avg, max) = (78686.392, 79111.444, 80077.062), stdev = 574.682
[info]   CI (99.9%): [76898.547, 81324.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1563.045 ±(99.9%) 43.587 MB/sec [Average]
[info]   (min, avg, max) = (1554.689, 1563.045, 1582.079), stdev = 11.319
[info]   CI (99.9%): [1519.458, 1606.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   31096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31096.005, 31096.006, 31096.006), stdev = 0.001
[info]   CI (99.9%): [31096.005, 31096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1541.138 ±(99.9%) 697.908 MB/sec [Average]
[info]   (min, avg, max) = (1334.624, 1541.138, 1684.350), stdev = 181.245
[info]   CI (99.9%): [843.230, 2239.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30649.799 ±(99.9%) 13451.649 B/op [Average]
[info]   (min, avg, max) = (26694.393, 30649.799, 33654.364), stdev = 3493.351
[info]   CI (99.9%): [17198.150, 44101.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.656 ±(99.9%) 1.578 B/op [Average]
[info]   (min, avg, max) = (1.241, 1.656, 2.082), stdev = 0.410
[info]   CI (99.9%): [0.077, 3.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 51.82% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91732.032 ops/s
[info] # Warmup Iteration   2: 131587.900 ops/s
[info] # Warmup Iteration   3: 132243.078 ops/s
[info] Iteration   1: 132984.161 ops/s
[info]                  ·gc.alloc.rate:                   1404.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15566.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.493 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 131609.136 ops/s
[info]                  ·gc.alloc.rate:                   1390.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15824.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 133160.232 ops/s
[info]                  ·gc.alloc.rate:                   1406.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15734.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 133322.399 ops/s
[info]                  ·gc.alloc.rate:                   1408.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15801.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.737 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 132475.902 ops/s
[info]                  ·gc.alloc.rate:                   1399.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19971.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.495 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   132710.366 ±(99.9%) 2667.532 ops/s [Average]
[info]   (min, avg, max) = (131609.136, 132710.366, 133322.399), stdev = 692.750
[info]   CI (99.9%): [130042.834, 135377.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1401.814 ±(99.9%) 28.093 MB/sec [Average]
[info]   (min, avg, max) = (1390.186, 1401.814, 1408.316), stdev = 7.296
[info]   CI (99.9%): [1373.721, 1429.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16624.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16624.003, 16624.003, 16624.003), stdev = 0.001
[info]   CI (99.9%): [16624.003, 16624.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1397.937 ±(99.9%) 610.701 MB/sec [Average]
[info]   (min, avg, max) = (1315.290, 1397.937, 1681.216), stdev = 158.597
[info]   CI (99.9%): [787.237, 2008.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16579.617 ±(99.9%) 7310.936 B/op [Average]
[info]   (min, avg, max) = (15566.549, 16579.617, 19971.180), stdev = 1898.627
[info]   CI (99.9%): [9268.681, 23890.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.692 ±(99.9%) 1.257 B/op [Average]
[info]   (min, avg, max) = (0.492, 0.692, 1.245), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 1.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 52.12% complete, ETA 00:33:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 418019.609 ops/s
[info] # Warmup Iteration   2: 455205.909 ops/s
[info] # Warmup Iteration   3: 468148.446 ops/s
[info] Iteration   1: 463380.858 ops/s
[info]                  ·gc.alloc.rate:                   513.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1995.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 449562.170 ops/s
[info]                  ·gc.alloc.rate:                   498.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2320.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 462212.549 ops/s
[info]                  ·gc.alloc.rate:                   512.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1127.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 462375.422 ops/s
[info]                  ·gc.alloc.rate:                   512.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2253.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 467051.460 ops/s
[info]                  ·gc.alloc.rate:               517.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1117.854 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   460916.492 ±(99.9%) 25574.177 ops/s [Average]
[info]   (min, avg, max) = (449562.170, 460916.492, 467051.460), stdev = 6641.532
[info]   CI (99.9%): [435342.315, 486490.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   510.740 ±(99.9%) 28.319 MB/sec [Average]
[info]   (min, avg, max) = (498.176, 510.740, 517.559), stdev = 7.354
[info]   CI (99.9%): [482.422, 539.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.060 ±(99.9%) 656.235 MB/sec [Average]
[info]   (min, avg, max) = (331.072, 515.060, 662.823), stdev = 170.422
[info]   CI (99.9%): [≈ 0, 1171.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1763.014 ±(99.9%) 2299.142 B/op [Average]
[info]   (min, avg, max) = (1117.854, 1763.014, 2320.395), stdev = 597.080
[info]   CI (99.9%): [≈ 0, 4062.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.389 ±(99.9%) 2.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.755), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.321 ±(99.9%) 10.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.321, 5.962), stdev = 2.598
[info]   CI (99.9%): [≈ 0, 11.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 52.42% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 475284.061 ops/s
[info] # Warmup Iteration   2: 512172.880 ops/s
[info] # Warmup Iteration   3: 531852.035 ops/s
[info] Iteration   1: 531787.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 531605.699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 531612.016 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 531845.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 529894.289 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   531349.003 ±(99.9%) 3157.830 ops/s [Average]
[info]   (min, avg, max) = (529894.289, 531349.003, 531845.989), stdev = 820.078
[info]   CI (99.9%): [528191.173, 534506.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 52.73% complete, ETA 00:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82336.194 ops/s
[info] # Warmup Iteration   2: 108509.663 ops/s
[info] # Warmup Iteration   3: 108305.621 ops/s
[info] Iteration   1: 109411.635 ops/s
[info]                  ·gc.alloc.rate:                   1564.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23784.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.797 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 109419.396 ops/s
[info]                  ·gc.alloc.rate:                   1564.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19140.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.497 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 108282.221 ops/s
[info]                  ·gc.alloc.rate:                   1548.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24307.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.815 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 109180.706 ops/s
[info]                  ·gc.alloc.rate:                   1561.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24236.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.600 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 106255.858 ops/s
[info]                  ·gc.alloc.rate:                   1519.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20005.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.542 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   108509.963 ±(99.9%) 5174.365 ops/s [Average]
[info]   (min, avg, max) = (106255.858, 108509.963, 109419.396), stdev = 1343.766
[info]   CI (99.9%): [103335.598, 113684.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1551.531 ±(99.9%) 74.084 MB/sec [Average]
[info]   (min, avg, max) = (1519.272, 1551.531, 1564.605), stdev = 19.239
[info]   CI (99.9%): [1477.446, 1625.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   22504.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22504.004, 22504.004, 22504.004), stdev = 0.001
[info]   CI (99.9%): [22504.003, 22504.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1537.665 ±(99.9%) 694.129 MB/sec [Average]
[info]   (min, avg, max) = (1330.734, 1537.665, 1681.249), stdev = 180.263
[info]   CI (99.9%): [843.536, 2231.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   22294.672 ±(99.9%) 9671.274 B/op [Average]
[info]   (min, avg, max) = (19140.194, 22294.672, 24307.467), stdev = 2511.599
[info]   CI (99.9%): [12623.398, 31965.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.450 ±(99.9%) 1.912 B/op [Average]
[info]   (min, avg, max) = (0.600, 1.450, 1.815), stdev = 0.497
[info]   CI (99.9%): [≈ 0, 3.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 53.03% complete, ETA 00:32:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122159.344 ops/s
[info] # Warmup Iteration   2: 149294.825 ops/s
[info] # Warmup Iteration   3: 148954.787 ops/s
[info] Iteration   1: 147520.399 ops/s
[info]                  ·gc.alloc.rate:                   2544.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2353.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25101.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.333 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 147348.193 ops/s
[info]                  ·gc.alloc.rate:                   2540.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28879.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.334 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 150484.521 ops/s
[info]                  ·gc.alloc.rate:                   2594.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28376.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 148497.998 ops/s
[info]                  ·gc.alloc.rate:                   2560.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25205.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.441 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 149998.108 ops/s
[info]                  ·gc.alloc.rate:                   2586.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28567.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.311 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   148769.844 ±(99.9%) 5481.204 ops/s [Average]
[info]   (min, avg, max) = (147348.193, 148769.844, 150484.521), stdev = 1423.451
[info]   CI (99.9%): [143288.640, 154251.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2565.206 ±(99.9%) 93.565 MB/sec [Average]
[info]   (min, avg, max) = (2540.591, 2565.206, 2594.435), stdev = 24.298
[info]   CI (99.9%): [2471.642, 2658.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27136.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27136.003, 27136.003, 27136.003), stdev = 0.001
[info]   CI (99.9%): [27136.003, 27136.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2574.284 ±(99.9%) 733.741 MB/sec [Average]
[info]   (min, avg, max) = (2353.616, 2574.284, 2722.747), stdev = 190.550
[info]   CI (99.9%): [1840.543, 3308.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27226.154 ±(99.9%) 7320.186 B/op [Average]
[info]   (min, avg, max) = (25101.294, 27226.154, 28879.668), stdev = 1901.029
[info]   CI (99.9%): [19905.969, 34546.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.058 ±(99.9%) 1.529 B/op [Average]
[info]   (min, avg, max) = (0.441, 1.058, 1.334), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 2.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 53.33% complete, ETA 00:32:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246770.090 ops/s
[info] # Warmup Iteration   2: 359184.524 ops/s
[info] # Warmup Iteration   3: 356352.356 ops/s
[info] Iteration   1: 360591.184 ops/s
[info]                  ·gc.alloc.rate:               368.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1116.484 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 359429.417 ops/s
[info]                  ·gc.alloc.rate:               367.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1120.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 359423.178 ops/s
[info]                  ·gc.alloc.rate:                   367.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1430.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.535 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 359577.524 ops/s
[info]                  ·gc.alloc.rate:                   367.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2861.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 359348.188 ops/s
[info]                  ·gc.alloc.rate:               367.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1432.521 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   359673.898 ±(99.9%) 2000.316 ops/s [Average]
[info]   (min, avg, max) = (359348.188, 359673.898, 360591.184), stdev = 519.476
[info]   CI (99.9%): [357673.582, 361674.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   367.484 ±(99.9%) 2.176 MB/sec [Average]
[info]   (min, avg, max) = (367.132, 367.484, 368.482), stdev = 0.565
[info]   CI (99.9%): [365.308, 369.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.855 ±(99.9%) 639.051 MB/sec [Average]
[info]   (min, avg, max) = (255.798, 363.855, 653.848), stdev = 165.960
[info]   CI (99.9%): [≈ 0, 1002.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1592.329 ±(99.9%) 2798.527 B/op [Average]
[info]   (min, avg, max) = (1116.484, 1592.329, 2861.847), stdev = 726.769
[info]   CI (99.9%): [≈ 0, 4390.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.452 ±(99.9%) 3.716 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.177), stdev = 0.965
[info]   CI (99.9%): [≈ 0, 4.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.980 ±(99.9%) 16.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.980, 9.535), stdev = 4.226
[info]   CI (99.9%): [≈ 0, 18.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 53.64% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 833799.287 ops/s
[info] # Warmup Iteration   2: 875415.994 ops/s
[info] # Warmup Iteration   3: 867805.683 ops/s
[info] Iteration   1: 867282.778 ops/s
[info]                  ·gc.alloc.rate:               299.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464.193 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 857958.936 ops/s
[info]                  ·gc.alloc.rate:                   296.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          510.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     936.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 882824.613 ops/s
[info]                  ·gc.alloc.rate:      305.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 878681.228 ops/s
[info]                  ·gc.alloc.rate:                   303.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     595.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.800 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 880416.295 ops/s
[info]                  ·gc.alloc.rate:                   304.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     594.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   873432.770 ±(99.9%) 40467.712 ops/s [Average]
[info]   (min, avg, max) = (857958.936, 873432.770, 882824.613), stdev = 10509.336
[info]   CI (99.9%): [832965.057, 913900.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   301.959 ±(99.9%) 13.640 MB/sec [Average]
[info]   (min, avg, max) = (296.831, 301.959, 305.192), stdev = 3.542
[info]   CI (99.9%): [288.320, 315.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.277 ±(99.9%) 714.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.277, 510.806), stdev = 185.440
[info]   CI (99.9%): [≈ 0, 1000.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   517.990 ±(99.9%) 1302.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 517.990, 936.152), stdev = 338.330
[info]   CI (99.9%): [≈ 0, 1820.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.334 ±(99.9%) 2.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.334, 1.563), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 2.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.599 ±(99.9%) 4.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.599, 2.800), stdev = 1.232
[info]   CI (99.9%): [≈ 0, 5.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 53.94% complete, ETA 00:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46959.094 ops/s
[info] # Warmup Iteration   2: 75536.080 ops/s
[info] # Warmup Iteration   3: 76398.147 ops/s
[info] Iteration   1: 77392.675 ops/s
[info]                  ·gc.alloc.rate:                   3319.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68416.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.540 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 77230.680 ops/s
[info]                  ·gc.alloc.rate:                   3320.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              67650.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69022.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.970 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 77446.097 ops/s
[info]                  ·gc.alloc.rate:                   3322.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62130.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.384 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 76169.709 ops/s
[info]                  ·gc.alloc.rate:                   3268.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70306.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.301 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 76371.323 ops/s
[info]                  ·gc.alloc.rate:                   3277.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              67513.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70150.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.716 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   76922.097 ±(99.9%) 2326.919 ops/s [Average]
[info]   (min, avg, max) = (76169.709, 76922.097, 77446.097), stdev = 604.293
[info]   CI (99.9%): [74595.178, 79249.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3301.517 ±(99.9%) 102.306 MB/sec [Average]
[info]   (min, avg, max) = (3268.196, 3301.517, 3322.026), stdev = 26.568
[info]   CI (99.9%): [3199.211, 3403.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67539.897 ±(99.9%) 237.359 B/op [Average]
[info]   (min, avg, max) = (67512.006, 67539.897, 67650.160), stdev = 61.641
[info]   CI (99.9%): [67302.538, 67777.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3323.579 ±(99.9%) 576.834 MB/sec [Average]
[info]   (min, avg, max) = (3057.220, 3323.579, 3405.063), stdev = 149.802
[info]   CI (99.9%): [2746.745, 3900.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68005.267 ±(99.9%) 13003.506 B/op [Average]
[info]   (min, avg, max) = (62130.467, 68005.267, 70306.978), stdev = 3376.969
[info]   CI (99.9%): [55001.761, 81008.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.146, 0.208), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.982 ±(99.9%) 3.704 B/op [Average]
[info]   (min, avg, max) = (1.716, 2.982, 4.301), stdev = 0.962
[info]   CI (99.9%): [≈ 0, 6.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 54.24% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186031.218 ops/s
[info] # Warmup Iteration   2: 227298.748 ops/s
[info] # Warmup Iteration   3: 230989.154 ops/s
[info] Iteration   1: 233247.602 ops/s
[info]                  ·gc.alloc.rate:                   1787.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11223.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 232774.471 ops/s
[info]                  ·gc.alloc.rate:                   1783.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13579.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 229690.562 ops/s
[info]                  ·gc.alloc.rate:                   1759.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11529.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.713 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 229017.142 ops/s
[info]                  ·gc.alloc.rate:                   1754.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11605.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.429 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 234073.032 ops/s
[info]                  ·gc.alloc.rate:                   1793.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11390.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.840 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   231760.562 ±(99.9%) 8695.567 ops/s [Average]
[info]   (min, avg, max) = (229017.142, 231760.562, 234073.032), stdev = 2258.211
[info]   CI (99.9%): [223064.995, 240456.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1775.481 ±(99.9%) 67.145 MB/sec [Average]
[info]   (min, avg, max) = (1754.320, 1775.481, 1793.056), stdev = 17.437
[info]   CI (99.9%): [1708.336, 1842.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12056.002, 12056.002, 12056.002), stdev = 0.001
[info]   CI (99.9%): [12056.002, 12056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1747.588 ±(99.9%) 563.113 MB/sec [Average]
[info]   (min, avg, max) = (1664.085, 1747.588, 2008.403), stdev = 146.239
[info]   CI (99.9%): [1184.475, 2310.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11865.719 ±(99.9%) 3731.407 B/op [Average]
[info]   (min, avg, max) = (11223.538, 11865.719, 13579.557), stdev = 969.035
[info]   CI (99.9%): [8134.312, 15597.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.678 ±(99.9%) 0.580 B/op [Average]
[info]   (min, avg, max) = (0.429, 0.678, 0.840), stdev = 0.150
[info]   CI (99.9%): [0.098, 1.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 54.55% complete, ETA 00:31:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 886457.704 ops/s
[info] # Warmup Iteration   2: 1229260.290 ops/s
[info] # Warmup Iteration   3: 1230669.531 ops/s
[info] Iteration   1: 1243583.971 ops/s
[info]                  ·gc.alloc.rate:                   815.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     827.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1215656.750 ops/s
[info]                  ·gc.alloc.rate:                   797.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1271.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1200286.382 ops/s
[info]                  ·gc.alloc.rate:                   787.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     861.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1199094.842 ops/s
[info]                  ·gc.alloc.rate:               786.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 864.321 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1212503.623 ops/s
[info]                  ·gc.alloc.rate:                   795.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1286.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1214225.114 ±(99.9%) 69155.490 ops/s [Average]
[info]   (min, avg, max) = (1199094.842, 1214225.114, 1243583.971), stdev = 17959.461
[info]   CI (99.9%): [1145069.623, 1283380.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   796.192 ±(99.9%) 45.233 MB/sec [Average]
[info]   (min, avg, max) = (786.274, 796.192, 815.382), stdev = 11.747
[info]   CI (99.9%): [750.959, 841.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.610 ±(99.9%) 696.747 MB/sec [Average]
[info]   (min, avg, max) = (654.105, 788.610, 991.266), stdev = 180.943
[info]   CI (99.9%): [91.863, 1485.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1022.362 ±(99.9%) 904.644 B/op [Average]
[info]   (min, avg, max) = (827.878, 1022.362, 1286.665), stdev = 234.933
[info]   CI (99.9%): [117.718, 1927.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.135), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 54.85% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1219347.435 ops/s
[info] # Warmup Iteration   2: 1324617.958 ops/s
[info] # Warmup Iteration   3: 1328310.439 ops/s
[info] Iteration   1: 1331335.690 ops/s
[info]                  ·gc.alloc.rate:                   548.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     392.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1333255.185 ops/s
[info]                  ·gc.alloc.rate:                   548.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     783.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1333051.629 ops/s
[info]                  ·gc.alloc.rate:                   548.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     783.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1335608.230 ops/s
[info]                  ·gc.alloc.rate:               550.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 390.908 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1334023.238 ops/s
[info]                  ·gc.alloc.rate:                   549.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     782.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1333454.794 ±(99.9%) 5981.960 ops/s [Average]
[info]   (min, avg, max) = (1331335.690, 1333454.794, 1335608.230), stdev = 1553.496
[info]   CI (99.9%): [1327472.834, 1339436.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   549.057 ±(99.9%) 2.831 MB/sec [Average]
[info]   (min, avg, max) = (548.106, 549.057, 550.130), stdev = 0.735
[info]   CI (99.9%): [546.226, 551.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.809 ±(99.9%) 699.585 MB/sec [Average]
[info]   (min, avg, max) = (331.711, 530.809, 663.500), stdev = 181.680
[info]   CI (99.9%): [≈ 0, 1230.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   626.483 ±(99.9%) 825.871 B/op [Average]
[info]   (min, avg, max) = (390.908, 626.483, 783.356), stdev = 214.476
[info]   CI (99.9%): [≈ 0, 1452.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 2.919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.751), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.468 ±(99.9%) 3.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.468, 2.070), stdev = 0.896
[info]   CI (99.9%): [≈ 0, 3.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.15% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1258940.012 ops/s
[info] # Warmup Iteration   2: 1375916.026 ops/s
[info] # Warmup Iteration   3: 1377434.379 ops/s
[info] Iteration   1: 1378689.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1375415.535 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1375263.662 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1375159.472 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1375758.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1376057.214 ±(99.9%) 5732.242 ops/s [Average]
[info]   (min, avg, max) = (1375159.472, 1376057.214, 1378689.214), stdev = 1488.645
[info]   CI (99.9%): [1370324.971, 1381789.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 55.45% complete, ETA 00:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19866.745 ops/s
[info] # Warmup Iteration   2: 28539.032 ops/s
[info] # Warmup Iteration   3: 28337.676 ops/s
[info] Iteration   1: 28604.499 ops/s
[info]                  ·gc.alloc.rate:                   1726.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              95008.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91061.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.436 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28408.390 ops/s
[info]                  ·gc.alloc.rate:                   1714.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              94994.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92335.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.460 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28703.689 ops/s
[info]                  ·gc.alloc.rate:                   1732.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              94992.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110347.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.990 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28987.429 ops/s
[info]                  ·gc.alloc.rate:                   1749.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              94992.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91507.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.391 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28991.741 ops/s
[info]                  ·gc.alloc.rate:                   1749.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              94992.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91799.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.650 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   28739.150 ±(99.9%) 970.781 ops/s [Average]
[info]   (min, avg, max) = (28408.390, 28739.150, 28991.741), stdev = 252.109
[info]   CI (99.9%): [27768.368, 29709.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1734.752 ±(99.9%) 58.318 MB/sec [Average]
[info]   (min, avg, max) = (1714.687, 1734.752, 1749.823), stdev = 15.145
[info]   CI (99.9%): [1676.434, 1793.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   94995.805 ±(99.9%) 26.750 B/op [Average]
[info]   (min, avg, max) = (94992.015, 94995.805, 95008.021), stdev = 6.947
[info]   CI (99.9%): [94969.055, 95022.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.235 ±(99.9%) 585.543 MB/sec [Average]
[info]   (min, avg, max) = (1655.030, 1742.235, 2013.029), stdev = 152.064
[info]   CI (99.9%): [1156.692, 2327.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   95410.405 ±(99.9%) 32202.717 B/op [Average]
[info]   (min, avg, max) = (91061.801, 95410.405, 110347.584), stdev = 8362.943
[info]   CI (99.9%): [63207.688, 127613.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.785 ±(99.9%) 7.831 B/op [Average]
[info]   (min, avg, max) = (3.391, 4.785, 7.990), stdev = 2.034
[info]   CI (99.9%): [≈ 0, 12.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 55.76% complete, ETA 00:31:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14951.332 ops/s
[info] # Warmup Iteration   2: 18174.428 ops/s
[info] # Warmup Iteration   3: 17872.202 ops/s
[info] Iteration   1: 17917.922 ops/s
[info]                  ·gc.alloc.rate:                   1880.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              165166.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176059.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.657 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18225.040 ops/s
[info]                  ·gc.alloc.rate:                   1912.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174101.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.191 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 18061.025 ops/s
[info]                  ·gc.alloc.rate:                   1896.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147006.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.814 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18122.381 ops/s
[info]                  ·gc.alloc.rate:                   1902.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              165163.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176334.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.847 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18398.870 ops/s
[info]                  ·gc.alloc.rate:                   1930.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              165160.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145075.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.123 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   18145.048 ±(99.9%) 694.143 ops/s [Average]
[info]   (min, avg, max) = (17917.922, 18145.048, 18398.870), stdev = 180.267
[info]   CI (99.9%): [17450.905, 18839.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1904.611 ±(99.9%) 72.487 MB/sec [Average]
[info]   (min, avg, max) = (1880.378, 1904.611, 1930.844), stdev = 18.825
[info]   CI (99.9%): [1832.124, 1977.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165168.546 ±(99.9%) 27.875 B/op [Average]
[info]   (min, avg, max) = (165160.023, 165168.546, 165176.033), stdev = 7.239
[info]   CI (99.9%): [165140.671, 165196.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887.139 ±(99.9%) 687.392 MB/sec [Average]
[info]   (min, avg, max) = (1687.744, 1887.139, 2031.213), stdev = 178.514
[info]   CI (99.9%): [1199.747, 2574.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   163715.295 ±(99.9%) 62272.685 B/op [Average]
[info]   (min, avg, max) = (145075.236, 163715.295, 176334.325), stdev = 16172.018
[info]   CI (99.9%): [101442.610, 225987.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.126 ±(99.9%) 13.492 B/op [Average]
[info]   (min, avg, max) = (1.814, 6.126, 10.847), stdev = 3.504
[info]   CI (99.9%): [≈ 0, 19.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 56.06% complete, ETA 00:30:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66715.476 ops/s
[info] # Warmup Iteration   2: 95786.934 ops/s
[info] # Warmup Iteration   3: 94972.709 ops/s
[info] Iteration   1: 97784.594 ops/s
[info]                  ·gc.alloc.rate:                   1283.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21106.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 98493.009 ops/s
[info]                  ·gc.alloc.rate:                   1293.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21065.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 98284.680 ops/s
[info]                  ·gc.alloc.rate:                   1290.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21239.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.000 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 97456.946 ops/s
[info]                  ·gc.alloc.rate:               1279.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21542.987 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 97646.240 ops/s
[info]                  ·gc.alloc.rate:                   1281.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21619.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.349 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97933.094 ±(99.9%) 1687.457 ops/s [Average]
[info]   (min, avg, max) = (97456.946, 97933.094, 98493.009), stdev = 438.227
[info]   CI (99.9%): [96245.637, 99620.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1285.438 ±(99.9%) 22.922 MB/sec [Average]
[info]   (min, avg, max) = (1279.014, 1285.438, 1293.173), stdev = 5.953
[info]   CI (99.9%): [1262.516, 1308.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.004, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1326.380 ±(99.9%) 45.816 MB/sec [Average]
[info]   (min, avg, max) = (1311.297, 1326.380, 1341.362), stdev = 11.898
[info]   CI (99.9%): [1280.564, 1372.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21314.608 ±(99.9%) 974.268 B/op [Average]
[info]   (min, avg, max) = (21065.618, 21314.608, 21619.183), stdev = 253.014
[info]   CI (99.9%): [20340.339, 22288.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.203 ±(99.9%) 3.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.203, 2.349), stdev = 0.874
[info]   CI (99.9%): [≈ 0, 4.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 56.36% complete, ETA 00:30:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267278.348 ops/s
[info] # Warmup Iteration   2: 279782.293 ops/s
[info] # Warmup Iteration   3: 281561.791 ops/s
[info] Iteration   1: 275002.682 ops/s
[info]                  ·gc.alloc.rate:                   894.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5707.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.477 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 281307.830 ops/s
[info]                  ·gc.alloc.rate:                   915.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5583.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.582 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 277106.219 ops/s
[info]                  ·gc.alloc.rate:               901.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3785.398 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 277993.538 ops/s
[info]                  ·gc.alloc.rate:                   904.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5670.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 282404.362 ops/s
[info]                  ·gc.alloc.rate:                   918.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5600.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   278762.926 ±(99.9%) 11744.884 ops/s [Average]
[info]   (min, avg, max) = (275002.682, 278762.926, 282404.362), stdev = 3050.109
[info]   CI (99.9%): [267018.042, 290507.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   906.855 ±(99.9%) 38.271 MB/sec [Average]
[info]   (min, avg, max) = (894.518, 906.855, 918.679), stdev = 9.939
[info]   CI (99.9%): [868.584, 945.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   933.623 ±(99.9%) 575.188 MB/sec [Average]
[info]   (min, avg, max) = (666.472, 933.623, 1004.884), stdev = 149.375
[info]   CI (99.9%): [358.435, 1508.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5269.323 ±(99.9%) 3200.205 B/op [Average]
[info]   (min, avg, max) = (3785.398, 5269.323, 5707.423), stdev = 831.083
[info]   CI (99.9%): [2069.117, 8469.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.446 ±(99.9%) 0.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.446, 0.589), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 56.67% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10164.045 ops/s
[info] # Warmup Iteration   2: 16341.009 ops/s
[info] # Warmup Iteration   3: 16634.410 ops/s
[info] Iteration   1: 16747.656 ops/s
[info]                  ·gc.alloc.rate:                   2157.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187292.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.869 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16637.739 ops/s
[info]                  ·gc.alloc.rate:                   2142.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2345.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221863.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.784 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16766.842 ops/s
[info]                  ·gc.alloc.rate:                   2160.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189831.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.862 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16598.751 ops/s
[info]                  ·gc.alloc.rate:                   2137.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224658.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.895 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16762.336 ops/s
[info]                  ·gc.alloc.rate:                   2158.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191127.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.727 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16702.665 ±(99.9%) 302.693 ops/s [Average]
[info]   (min, avg, max) = (16598.751, 16702.665, 16766.842), stdev = 78.608
[info]   CI (99.9%): [16399.972, 17005.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2151.408 ±(99.9%) 39.449 MB/sec [Average]
[info]   (min, avg, max) = (2137.930, 2151.408, 2160.141), stdev = 10.245
[info]   CI (99.9%): [2111.959, 2190.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202704.032 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (202704.026, 202704.032, 202704.047), stdev = 0.010
[info]   CI (99.9%): [202703.996, 202704.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2153.334 ±(99.9%) 720.727 MB/sec [Average]
[info]   (min, avg, max) = (1993.205, 2153.334, 2369.487), stdev = 187.170
[info]   CI (99.9%): [1432.607, 2874.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   202954.937 ±(99.9%) 71678.162 B/op [Average]
[info]   (min, avg, max) = (187292.663, 202954.937, 224658.766), stdev = 18614.591
[info]   CI (99.9%): [131276.775, 274633.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.027 ±(99.9%) 13.775 B/op [Average]
[info]   (min, avg, max) = (5.862, 9.027, 13.784), stdev = 3.577
[info]   CI (99.9%): [≈ 0, 22.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 56.97% complete, ETA 00:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14845.537 ops/s
[info] # Warmup Iteration   2: 20607.030 ops/s
[info] # Warmup Iteration   3: 20520.177 ops/s
[info] Iteration   1: 20705.812 ops/s
[info]                  ·gc.alloc.rate:                   1676.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              127381.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126230.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.329 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 20347.087 ops/s
[info]                  ·gc.alloc.rate:                   1646.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129229.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.272 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20454.031 ops/s
[info]                  ·gc.alloc.rate:                   1655.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              127376.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129214.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.805 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 20720.213 ops/s
[info]                  ·gc.alloc.rate:                   1676.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128105.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.743 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 20560.825 ops/s
[info]                  ·gc.alloc.rate:                   1663.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129465.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.374 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   20557.594 ±(99.9%) 619.292 ops/s [Average]
[info]   (min, avg, max) = (20347.087, 20557.594, 20720.213), stdev = 160.828
[info]   CI (99.9%): [19938.302, 21176.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1663.747 ±(99.9%) 49.896 MB/sec [Average]
[info]   (min, avg, max) = (1646.901, 1663.747, 1676.701), stdev = 12.958
[info]   CI (99.9%): [1613.851, 1713.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.818 ±(99.9%) 69.508 B/op [Average]
[info]   (min, avg, max) = (127352.021, 127370.818, 127392.023), stdev = 18.051
[info]   CI (99.9%): [127301.310, 127440.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.753 ±(99.9%) 47.229 MB/sec [Average]
[info]   (min, avg, max) = (1660.855, 1677.753, 1691.350), stdev = 12.265
[info]   CI (99.9%): [1630.524, 1724.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128449.144 ±(99.9%) 5191.224 B/op [Average]
[info]   (min, avg, max) = (126230.140, 128449.144, 129465.788), stdev = 1348.144
[info]   CI (99.9%): [123257.920, 133640.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.705 ±(99.9%) 10.290 B/op [Average]
[info]   (min, avg, max) = (4.743, 6.705, 11.272), stdev = 2.672
[info]   CI (99.9%): [≈ 0, 16.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 57.27% complete, ETA 00:30:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63298.863 ops/s
[info] # Warmup Iteration   2: 96994.858 ops/s
[info] # Warmup Iteration   3: 98397.698 ops/s
[info] Iteration   1: 97499.341 ops/s
[info]                  ·gc.alloc.rate:                   1335.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21161.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 97302.421 ops/s
[info]                  ·gc.alloc.rate:                   1332.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21344.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.357 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 96928.047 ops/s
[info]                  ·gc.alloc.rate:                   1328.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21556.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 98449.950 ops/s
[info]                  ·gc.alloc.rate:                   1348.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21351.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.666 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 98280.359 ops/s
[info]                  ·gc.alloc.rate:                   1346.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21485.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.000 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   97692.024 ±(99.9%) 2505.263 ops/s [Average]
[info]   (min, avg, max) = (96928.047, 97692.024, 98449.950), stdev = 650.609
[info]   CI (99.9%): [95186.760, 100197.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1338.307 ±(99.9%) 34.161 MB/sec [Average]
[info]   (min, avg, max) = (1328.106, 1338.307, 1348.708), stdev = 8.872
[info]   CI (99.9%): [1304.146, 1372.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.004 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (21559.984, 21560.004, 21560.025), stdev = 0.020
[info]   CI (99.9%): [21559.926, 21560.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.141 ±(99.9%) 47.423 MB/sec [Average]
[info]   (min, avg, max) = (1310.930, 1327.141, 1341.696), stdev = 12.316
[info]   CI (99.9%): [1279.718, 1374.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21380.186 ±(99.9%) 584.116 B/op [Average]
[info]   (min, avg, max) = (21161.848, 21380.186, 21556.898), stdev = 151.693
[info]   CI (99.9%): [20796.070, 21964.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.074 ±(99.9%) 2.960 B/op [Average]
[info]   (min, avg, max) = (0.338, 1.074, 2.357), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 4.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 57.58% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301973.383 ops/s
[info] # Warmup Iteration   2: 326684.543 ops/s
[info] # Warmup Iteration   3: 320203.640 ops/s
[info] Iteration   1: 321473.649 ops/s
[info]                  ·gc.alloc.rate:                   1025.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4872.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 321630.382 ops/s
[info]                  ·gc.alloc.rate:                   1025.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4873.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 321529.388 ops/s
[info]                  ·gc.alloc.rate:                   1024.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4889.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 320518.345 ops/s
[info]                  ·gc.alloc.rate:                   1021.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4917.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 321335.114 ops/s
[info]                  ·gc.alloc.rate:                   1024.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6571.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   321297.376 ±(99.9%) 1726.476 ops/s [Average]
[info]   (min, avg, max) = (320518.345, 321297.376, 321630.382), stdev = 448.360
[info]   CI (99.9%): [319570.900, 323023.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1024.173 ±(99.9%) 5.985 MB/sec [Average]
[info]   (min, avg, max) = (1021.518, 1024.173, 1025.370), stdev = 1.554
[info]   CI (99.9%): [1018.188, 1030.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.001), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1066.799 ±(99.9%) 591.684 MB/sec [Average]
[info]   (min, avg, max) = (995.673, 1066.799, 1341.640), stdev = 153.658
[info]   CI (99.9%): [475.115, 1658.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5224.814 ±(99.9%) 2899.274 B/op [Average]
[info]   (min, avg, max) = (4872.486, 5224.814, 6571.301), stdev = 752.932
[info]   CI (99.9%): [2325.541, 8124.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.306 ±(99.9%) 0.480 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.306, 0.408), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 57.88% complete, ETA 00:29:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 341741.926 ops/s
[info] # Warmup Iteration   2: 366773.560 ops/s
[info] # Warmup Iteration   3: 382803.115 ops/s
[info] Iteration   1: 382811.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 382562.959 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 381373.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 381597.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 381605.406 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   381990.111 ±(99.9%) 2499.225 ops/s [Average]
[info]   (min, avg, max) = (381373.063, 381990.111, 382811.249), stdev = 649.041
[info]   CI (99.9%): [379490.886, 384489.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 58.18% complete, ETA 00:29:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17960.661 ops/s
[info] # Warmup Iteration   2: 25122.072 ops/s
[info] # Warmup Iteration   3: 25558.579 ops/s
[info] Iteration   1: 25231.074 ops/s
[info]                  ·gc.alloc.rate:                   1719.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123992.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.194 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 25268.197 ops/s
[info]                  ·gc.alloc.rate:                   1722.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103911.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.076 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25716.093 ops/s
[info]                  ·gc.alloc.rate:                   1753.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102692.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.822 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25561.845 ops/s
[info]                  ·gc.alloc.rate:                   1742.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              107287.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103803.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25500.966 ops/s
[info]                  ·gc.alloc.rate:                   1738.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104364.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.570 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   25455.635 ±(99.9%) 786.170 ops/s [Average]
[info]   (min, avg, max) = (25231.074, 25455.635, 25716.093), stdev = 204.166
[info]   CI (99.9%): [24669.465, 26241.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1735.359 ±(99.9%) 53.769 MB/sec [Average]
[info]   (min, avg, max) = (1719.969, 1735.359, 1753.100), stdev = 13.964
[info]   CI (99.9%): [1681.591, 1789.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107288.215 ±(99.9%) 1.391 B/op [Average]
[info]   (min, avg, max) = (107287.939, 107288.215, 107288.850), stdev = 0.361
[info]   CI (99.9%): [107286.824, 107289.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.262 ±(99.9%) 529.517 MB/sec [Average]
[info]   (min, avg, max) = (1668.268, 1742.262, 1987.763), stdev = 137.514
[info]   CI (99.9%): [1212.744, 2271.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107752.961 ±(99.9%) 35036.853 B/op [Average]
[info]   (min, avg, max) = (102692.856, 107752.961, 123992.502), stdev = 9098.959
[info]   CI (99.9%): [72716.108, 142789.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.901 ±(99.9%) 9.671 B/op [Average]
[info]   (min, avg, max) = (2.570, 4.901, 9.076), stdev = 2.512
[info]   CI (99.9%): [≈ 0, 14.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 58.48% complete, ETA 00:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57193.138 ops/s
[info] # Warmup Iteration   2: 70747.360 ops/s
[info] # Warmup Iteration   3: 71595.448 ops/s
[info] Iteration   1: 72944.255 ops/s
[info]                  ·gc.alloc.rate:                   1569.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35710.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.898 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 73130.011 ops/s
[info]                  ·gc.alloc.rate:                   1573.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35834.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 72781.375 ops/s
[info]                  ·gc.alloc.rate:                   1566.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28968.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72114.534 ops/s
[info]                  ·gc.alloc.rate:                   1551.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36709.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73427.916 ops/s
[info]                  ·gc.alloc.rate:                   1579.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28948.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.892 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   72879.618 ±(99.9%) 1888.888 ops/s [Average]
[info]   (min, avg, max) = (72114.534, 72879.618, 73427.916), stdev = 490.538
[info]   CI (99.9%): [70990.731, 74768.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1567.915 ±(99.9%) 40.505 MB/sec [Average]
[info]   (min, avg, max) = (1551.309, 1567.915, 1579.553), stdev = 10.519
[info]   CI (99.9%): [1527.409, 1608.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33856.006, 33856.006, 33856.006), stdev = 0.001
[info]   CI (99.9%): [33856.005, 33856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1538.631 ±(99.9%) 680.263 MB/sec [Average]
[info]   (min, avg, max) = (1340.274, 1538.631, 1682.070), stdev = 176.662
[info]   CI (99.9%): [858.368, 2218.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33234.451 ±(99.9%) 15103.058 B/op [Average]
[info]   (min, avg, max) = (28948.636, 33234.451, 36709.755), stdev = 3922.216
[info]   CI (99.9%): [18131.393, 48337.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.257 ±(99.9%) 4.114 B/op [Average]
[info]   (min, avg, max) = (0.450, 1.257, 3.136), stdev = 1.068
[info]   CI (99.9%): [≈ 0, 5.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 58.79% complete, ETA 00:28:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60666.186 ops/s
[info] # Warmup Iteration   2: 88583.067 ops/s
[info] # Warmup Iteration   3: 90169.736 ops/s
[info] Iteration   1: 90537.869 ops/s
[info]                  ·gc.alloc.rate:                   1129.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              19627.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22674.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 89823.956 ops/s
[info]                  ·gc.alloc.rate:                   1119.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17228.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 89745.321 ops/s
[info]                  ·gc.alloc.rate:                   1118.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17313.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 90914.386 ops/s
[info]                  ·gc.alloc.rate:                   1132.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22948.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.081 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 89814.974 ops/s
[info]                  ·gc.alloc.rate:                   1119.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17509.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   90167.301 ±(99.9%) 2033.512 ops/s [Average]
[info]   (min, avg, max) = (89745.321, 90167.301, 90914.386), stdev = 528.097
[info]   CI (99.9%): [88133.789, 92200.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1123.668 ±(99.9%) 26.022 MB/sec [Average]
[info]   (min, avg, max) = (1118.405, 1123.668, 1132.624), stdev = 6.758
[info]   CI (99.9%): [1097.646, 1149.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   19611.841 ±(99.9%) 33.028 B/op [Average]
[info]   (min, avg, max) = (19608.005, 19611.841, 19627.184), stdev = 8.577
[info]   CI (99.9%): [19578.812, 19644.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1120.039 ±(99.9%) 686.582 MB/sec [Average]
[info]   (min, avg, max) = (983.236, 1120.039, 1325.586), stdev = 178.303
[info]   CI (99.9%): [433.457, 1806.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19534.887 ±(99.9%) 11529.809 B/op [Average]
[info]   (min, avg, max) = (17228.615, 19534.887, 22948.555), stdev = 2994.255
[info]   CI (99.9%): [8005.078, 31064.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.237 ±(99.9%) 2.919 B/op [Average]
[info]   (min, avg, max) = (0.362, 1.237, 2.189), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 4.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 59.09% complete, ETA 00:28:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95529.944 ops/s
[info] # Warmup Iteration   2: 101826.639 ops/s
[info] # Warmup Iteration   3: 104900.559 ops/s
[info] Iteration   1: 103401.321 ops/s
[info]                  ·gc.alloc.rate:                   1242.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20167.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 105142.699 ops/s
[info]                  ·gc.alloc.rate:                   1263.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19902.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.558 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 104856.611 ops/s
[info]                  ·gc.alloc.rate:                   1259.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15037.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 105325.028 ops/s
[info]                  ·gc.alloc.rate:                   1265.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20027.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.244 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 105482.566 ops/s
[info]                  ·gc.alloc.rate:                   1267.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20077.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.932 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   104841.645 ±(99.9%) 3227.330 ops/s [Average]
[info]   (min, avg, max) = (103401.321, 104841.645, 105482.566), stdev = 838.127
[info]   CI (99.9%): [101614.315, 108068.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1259.892 ±(99.9%) 39.066 MB/sec [Average]
[info]   (min, avg, max) = (1242.430, 1259.892, 1267.500), stdev = 10.145
[info]   CI (99.9%): [1220.826, 1298.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18912.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18912.004, 18912.004, 18912.004), stdev = 0.001
[info]   CI (99.9%): [18912.004, 18912.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1268.569 ±(99.9%) 574.923 MB/sec [Average]
[info]   (min, avg, max) = (1001.880, 1268.569, 1345.630), stdev = 149.306
[info]   CI (99.9%): [693.645, 1843.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19042.721 ±(99.9%) 8628.434 B/op [Average]
[info]   (min, avg, max) = (15037.935, 19042.721, 20167.068), stdev = 2240.777
[info]   CI (99.9%): [10414.287, 27671.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.873 ±(99.9%) 2.139 B/op [Average]
[info]   (min, avg, max) = (0.312, 0.873, 1.558), stdev = 0.555
[info]   CI (99.9%): [≈ 0, 3.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 59.39% complete, ETA 00:28:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26995.878 ops/s
[info] # Warmup Iteration   2: 45395.039 ops/s
[info] # Warmup Iteration   3: 45289.207 ops/s
[info] Iteration   1: 46287.217 ops/s
[info]                  ·gc.alloc.rate:                   2219.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2319.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78847.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.416 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 45959.216 ops/s
[info]                  ·gc.alloc.rate:                   2203.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2342.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80206.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.703 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 46342.895 ops/s
[info]                  ·gc.alloc.rate:                   2221.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68662.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.121 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 45972.831 ops/s
[info]                  ·gc.alloc.rate:                   2204.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81071.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.563 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 46477.101 ops/s
[info]                  ·gc.alloc.rate:                   2228.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68912.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.344 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   46207.852 ±(99.9%) 890.834 ops/s [Average]
[info]   (min, avg, max) = (45959.216, 46207.852, 46477.101), stdev = 231.347
[info]   CI (99.9%): [45317.018, 47098.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2215.254 ±(99.9%) 42.622 MB/sec [Average]
[info]   (min, avg, max) = (2203.095, 2215.254, 2228.039), stdev = 11.069
[info]   CI (99.9%): [2172.632, 2257.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75448.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75448.009, 75448.010, 75448.010), stdev = 0.001
[info]   CI (99.9%): [75448.008, 75448.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2217.348 ±(99.9%) 667.814 MB/sec [Average]
[info]   (min, avg, max) = (2021.743, 2217.348, 2368.506), stdev = 173.429
[info]   CI (99.9%): [1549.534, 2885.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75540.270 ±(99.9%) 23935.197 B/op [Average]
[info]   (min, avg, max) = (68662.283, 75540.270, 81071.937), stdev = 6215.895
[info]   CI (99.9%): [51605.074, 99475.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.187), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.829 ±(99.9%) 8.315 B/op [Average]
[info]   (min, avg, max) = (1.416, 3.829, 6.344), stdev = 2.159
[info]   CI (99.9%): [≈ 0, 12.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 59.70% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95493.503 ops/s
[info] # Warmup Iteration   2: 118784.531 ops/s
[info] # Warmup Iteration   3: 122718.415 ops/s
[info] Iteration   1: 122844.882 ops/s
[info]                  ·gc.alloc.rate:                   1152.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12631.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 120490.533 ops/s
[info]                  ·gc.alloc.rate:                   1130.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17236.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.903 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 121342.246 ops/s
[info]                  ·gc.alloc.rate:                   1138.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12903.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.810 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 121015.673 ops/s
[info]                  ·gc.alloc.rate:                   1135.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12991.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 120518.058 ops/s
[info]                  ·gc.alloc.rate:                   1130.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17468.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   121242.279 ±(99.9%) 3713.076 ops/s [Average]
[info]   (min, avg, max) = (120490.533, 121242.279, 122844.882), stdev = 964.274
[info]   CI (99.9%): [117529.203, 124955.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1137.628 ±(99.9%) 34.756 MB/sec [Average]
[info]   (min, avg, max) = (1130.580, 1137.628, 1152.628), stdev = 9.026
[info]   CI (99.9%): [1102.872, 1172.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14768.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14768.004, 14768.004, 14768.004), stdev = 0.001
[info]   CI (99.9%): [14768.003, 14768.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1127.345 ±(99.9%) 708.034 MB/sec [Average]
[info]   (min, avg, max) = (985.859, 1127.345, 1337.622), stdev = 183.874
[info]   CI (99.9%): [419.311, 1835.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14646.058 ±(99.9%) 9531.179 B/op [Average]
[info]   (min, avg, max) = (12631.286, 14646.058, 17468.002), stdev = 2475.217
[info]   CI (99.9%): [5114.878, 24177.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.921 ±(99.9%) 2.419 B/op [Average]
[info]   (min, avg, max) = (0.271, 0.921, 1.903), stdev = 0.628
[info]   CI (99.9%): [≈ 0, 3.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 60.00% complete, ETA 00:28:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248741.430 ops/s
[info] # Warmup Iteration   2: 339387.927 ops/s
[info] # Warmup Iteration   3: 335440.513 ops/s
[info] Iteration   1: 340354.900 ops/s
[info]                  ·gc.alloc.rate:                   505.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2689.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 341557.023 ops/s
[info]                  ·gc.alloc.rate:                   507.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1500.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 340165.352 ops/s
[info]                  ·gc.alloc.rate:                   504.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3014.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 341423.723 ops/s
[info]                  ·gc.alloc.rate:               506.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1501.532 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 341073.576 ops/s
[info]                  ·gc.alloc.rate:                   506.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3009.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   340914.915 ±(99.9%) 2413.822 ops/s [Average]
[info]   (min, avg, max) = (340165.352, 340914.915, 341557.023), stdev = 626.862
[info]   CI (99.9%): [338501.093, 343328.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   506.005 ±(99.9%) 3.665 MB/sec [Average]
[info]   (min, avg, max) = (504.883, 506.005, 507.022), stdev = 0.952
[info]   CI (99.9%): [502.339, 509.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2336.001, 2336.001), stdev = 0.001
[info]   CI (99.9%): [2336.001, 2336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507.324 ±(99.9%) 647.747 MB/sec [Average]
[info]   (min, avg, max) = (325.722, 507.324, 652.134), stdev = 168.218
[info]   CI (99.9%): [≈ 0, 1155.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2343.032 ±(99.9%) 3002.119 B/op [Average]
[info]   (min, avg, max) = (1500.991, 2343.032, 3014.292), stdev = 779.641
[info]   CI (99.9%): [≈ 0, 5345.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.546 ±(99.9%) 4.342 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.563), stdev = 1.128
[info]   CI (99.9%): [≈ 0, 4.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.524 ±(99.9%) 20.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.524, 11.850), stdev = 5.215
[info]   CI (99.9%): [≈ 0, 22.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 60.30% complete, ETA 00:27:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 624152.823 ops/s
[info] # Warmup Iteration   2: 655255.264 ops/s
[info] # Warmup Iteration   3: 672810.374 ops/s
[info] Iteration   1: 663700.330 ops/s
[info]                  ·gc.alloc.rate:                   823.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2350.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 667429.946 ops/s
[info]                  ·gc.alloc.rate:                   827.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1559.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 666080.136 ops/s
[info]                  ·gc.alloc.rate:                   826.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2347.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 663060.910 ops/s
[info]                  ·gc.alloc.rate:                   822.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1576.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 671838.518 ops/s
[info]                  ·gc.alloc.rate:                   833.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2340.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   666421.968 ±(99.9%) 13501.423 ops/s [Average]
[info]   (min, avg, max) = (663060.910, 666421.968, 671838.518), stdev = 3506.277
[info]   CI (99.9%): [652920.545, 679923.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   826.582 ±(99.9%) 17.279 MB/sec [Average]
[info]   (min, avg, max) = (822.403, 826.582, 833.592), stdev = 4.487
[info]   CI (99.9%): [809.302, 843.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   861.850 ±(99.9%) 700.272 MB/sec [Average]
[info]   (min, avg, max) = (661.129, 861.850, 999.321), stdev = 181.859
[info]   CI (99.9%): [161.577, 1562.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2034.750 ±(99.9%) 1641.753 B/op [Average]
[info]   (min, avg, max) = (1559.032, 2034.750, 2350.522), stdev = 426.358
[info]   CI (99.9%): [392.997, 3676.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.177 ±(99.9%) 0.289 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.177, 0.296), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 60.61% complete, ETA 00:27:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664705.025 ops/s
[info] # Warmup Iteration   2: 710050.171 ops/s
[info] # Warmup Iteration   3: 708656.424 ops/s
[info] Iteration   1: 709509.833 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 712102.540 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 709671.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 709774.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 708893.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   709990.311 ±(99.9%) 4733.436 ops/s [Average]
[info]   (min, avg, max) = (708893.148, 709990.311, 712102.540), stdev = 1229.258
[info]   CI (99.9%): [705256.876, 714723.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 60.91% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199259.822 ops/s
[info] # Warmup Iteration   2: 248865.815 ops/s
[info] # Warmup Iteration   3: 219368.775 ops/s
[info] Iteration   1: 222909.052 ops/s
[info]                  ·gc.alloc.rate:                   728.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4618.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 219677.730 ops/s
[info]                  ·gc.alloc.rate:                   718.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4686.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 216137.513 ops/s
[info]                  ·gc.alloc.rate:                   706.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4768.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.606 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 219260.105 ops/s
[info]                  ·gc.alloc.rate:                   716.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4714.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 217341.510 ops/s
[info]                  ·gc.alloc.rate:                   710.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7163.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   219065.182 ±(99.9%) 9954.275 ops/s [Average]
[info]   (min, avg, max) = (216137.513, 219065.182, 222909.052), stdev = 2585.094
[info]   CI (99.9%): [209110.907, 229019.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   715.974 ±(99.9%) 32.539 MB/sec [Average]
[info]   (min, avg, max) = (706.388, 715.974, 728.531), stdev = 8.450
[info]   CI (99.9%): [683.436, 748.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   721.814 ±(99.9%) 575.633 MB/sec [Average]
[info]   (min, avg, max) = (654.140, 721.814, 989.223), stdev = 149.490
[info]   CI (99.9%): [146.181, 1297.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5190.294 ±(99.9%) 4252.301 B/op [Average]
[info]   (min, avg, max) = (4618.739, 5190.294, 7163.393), stdev = 1104.309
[info]   CI (99.9%): [937.993, 9442.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.567 ±(99.9%) 0.736 B/op [Average]
[info]   (min, avg, max) = (0.301, 0.567, 0.746), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 61.21% complete, ETA 00:27:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97158.063 ops/s
[info] # Warmup Iteration   2: 132130.348 ops/s
[info] # Warmup Iteration   3: 131846.492 ops/s
[info] Iteration   1: 134943.261 ops/s
[info]                  ·gc.alloc.rate:                   1672.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              19512.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19356.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.971 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 132069.277 ops/s
[info]                  ·gc.alloc.rate:                   1637.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              19512.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19900.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.240 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 134943.811 ops/s
[info]                  ·gc.alloc.rate:                   1672.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              19512.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19586.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.728 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 133618.742 ops/s
[info]                  ·gc.alloc.rate:                   1656.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              19512.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15888.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.981 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 135075.510 ops/s
[info]                  ·gc.alloc.rate:                   1674.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              19512.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19698.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.698 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   134130.120 ±(99.9%) 4993.097 ops/s [Average]
[info]   (min, avg, max) = (132069.277, 134130.120, 135075.510), stdev = 1296.691
[info]   CI (99.9%): [129137.023, 139123.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1662.921 ±(99.9%) 61.480 MB/sec [Average]
[info]   (min, avg, max) = (1637.542, 1662.921, 1674.559), stdev = 15.966
[info]   CI (99.9%): [1601.441, 1724.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19512.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19512.003, 19512.003, 19512.003), stdev = 0.001
[info]   CI (99.9%): [19512.003, 19512.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.754 ±(99.9%) 562.979 MB/sec [Average]
[info]   (min, avg, max) = (1349.014, 1609.754, 1690.601), stdev = 146.204
[info]   CI (99.9%): [1046.775, 2172.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18886.443 ±(99.9%) 6496.829 B/op [Average]
[info]   (min, avg, max) = (15888.823, 18886.443, 19900.979), stdev = 1687.206
[info]   CI (99.9%): [12389.613, 25383.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.124 ±(99.9%) 1.419 B/op [Average]
[info]   (min, avg, max) = (0.728, 1.124, 1.698), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 2.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 61.52% complete, ETA 00:27:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118020.427 ops/s
[info] # Warmup Iteration   2: 183172.935 ops/s
[info] # Warmup Iteration   3: 186146.008 ops/s
[info] Iteration   1: 186420.568 ops/s
[info]                  ·gc.alloc.rate:                   1111.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8289.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.703 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 183153.276 ops/s
[info]                  ·gc.alloc.rate:                   1092.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11296.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.716 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 183038.781 ops/s
[info]                  ·gc.alloc.rate:                   1091.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8520.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 185871.771 ops/s
[info]                  ·gc.alloc.rate:                   1108.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8429.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 186899.845 ops/s
[info]                  ·gc.alloc.rate:                   1114.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11233.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   185076.848 ±(99.9%) 7104.059 ops/s [Average]
[info]   (min, avg, max) = (183038.781, 185076.848, 186899.845), stdev = 1844.902
[info]   CI (99.9%): [177972.789, 192180.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1103.491 ±(99.9%) 42.242 MB/sec [Average]
[info]   (min, avg, max) = (1091.324, 1103.491, 1114.350), stdev = 10.970
[info]   CI (99.9%): [1061.248, 1145.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.002, 9384.002, 9384.003), stdev = 0.001
[info]   CI (99.9%): [9384.002, 9384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.383 ±(99.9%) 707.092 MB/sec [Average]
[info]   (min, avg, max) = (981.839, 1123.383, 1333.933), stdev = 183.630
[info]   CI (99.9%): [416.291, 1830.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9553.968 ±(99.9%) 6023.482 B/op [Average]
[info]   (min, avg, max) = (8289.672, 9553.968, 11296.892), stdev = 1564.279
[info]   CI (99.9%): [3530.486, 15577.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.602 ±(99.9%) 0.378 B/op [Average]
[info]   (min, avg, max) = (0.526, 0.602, 0.716), stdev = 0.098
[info]   CI (99.9%): [0.224, 0.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 61.82% complete, ETA 00:26:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312978.003 ops/s
[info] # Warmup Iteration   2: 317169.608 ops/s
[info] # Warmup Iteration   3: 326556.379 ops/s
[info] Iteration   1: 330295.868 ops/s
[info]                  ·gc.alloc.rate:                   641.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3167.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 325974.107 ops/s
[info]                  ·gc.alloc.rate:               632.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1604.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 319941.395 ops/s
[info]                  ·gc.alloc.rate:                   621.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3270.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 328100.133 ops/s
[info]                  ·gc.alloc.rate:                   637.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3188.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 324448.323 ops/s
[info]                  ·gc.alloc.rate:                   630.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3231.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   325751.965 ±(99.9%) 15119.907 ops/s [Average]
[info]   (min, avg, max) = (319941.395, 325751.965, 330295.868), stdev = 3926.592
[info]   CI (99.9%): [310632.059, 340871.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   632.576 ±(99.9%) 28.948 MB/sec [Average]
[info]   (min, avg, max) = (621.515, 632.576, 641.325), stdev = 7.518
[info]   CI (99.9%): [603.628, 661.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   598.658 ±(99.9%) 573.137 MB/sec [Average]
[info]   (min, avg, max) = (332.404, 598.658, 666.163), stdev = 148.842
[info]   CI (99.9%): [25.521, 1171.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2892.703 ±(99.9%) 2776.173 B/op [Average]
[info]   (min, avg, max) = (1604.935, 2892.703, 3270.297), stdev = 720.963
[info]   CI (99.9%): [116.529, 5668.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.302 ±(99.9%) 0.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 0.496), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 1.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 62.12% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28350.646 ops/s
[info] # Warmup Iteration   2: 66941.001 ops/s
[info] # Warmup Iteration   3: 67723.683 ops/s
[info] Iteration   1: 68819.584 ops/s
[info]                  ·gc.alloc.rate:                   2859.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60998.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.904 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 68033.436 ops/s
[info]                  ·gc.alloc.rate:                   2827.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3030.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70116.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.889 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 68474.123 ops/s
[info]                  ·gc.alloc.rate:                   2845.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62254.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.392 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 68265.873 ops/s
[info]                  ·gc.alloc.rate:                   2836.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62628.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.359 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 68018.370 ops/s
[info]                  ·gc.alloc.rate:                   2826.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3060.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70809.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.890 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   68322.277 ±(99.9%) 1290.600 ops/s [Average]
[info]   (min, avg, max) = (68018.370, 68322.277, 68819.584), stdev = 335.165
[info]   CI (99.9%): [67031.678, 69612.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2839.076 ±(99.9%) 54.031 MB/sec [Average]
[info]   (min, avg, max) = (2826.421, 2839.076, 2859.978), stdev = 14.032
[info]   CI (99.9%): [2785.045, 2893.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65400.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65400.006, 65400.007, 65400.007), stdev = 0.001
[info]   CI (99.9%): [65400.006, 65400.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2836.699 ±(99.9%) 738.720 MB/sec [Average]
[info]   (min, avg, max) = (2667.479, 2836.699, 3060.198), stdev = 191.843
[info]   CI (99.9%): [2097.980, 3575.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65361.473 ±(99.9%) 18107.374 B/op [Average]
[info]   (min, avg, max) = (60998.087, 65361.473, 70809.322), stdev = 4702.428
[info]   CI (99.9%): [47254.098, 83468.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.025, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.687 ±(99.9%) 2.139 B/op [Average]
[info]   (min, avg, max) = (1.904, 2.687, 3.359), stdev = 0.555
[info]   CI (99.9%): [0.548, 4.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 62.42% complete, ETA 00:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138867.875 ops/s
[info] # Warmup Iteration   2: 173827.609 ops/s
[info] # Warmup Iteration   3: 173428.369 ops/s
[info] Iteration   1: 175276.405 ops/s
[info]                  ·gc.alloc.rate:                   1123.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11861.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.935 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 175971.618 ops/s
[info]                  ·gc.alloc.rate:                   1128.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8892.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 174612.558 ops/s
[info]                  ·gc.alloc.rate:                   1119.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11996.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 175159.212 ops/s
[info]                  ·gc.alloc.rate:                   1122.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9005.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 176542.646 ops/s
[info]                  ·gc.alloc.rate:                   1131.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8967.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.557 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   175512.488 ±(99.9%) 2895.955 ops/s [Average]
[info]   (min, avg, max) = (174612.558, 175512.488, 176542.646), stdev = 752.070
[info]   CI (99.9%): [172616.533, 178408.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1125.149 ±(99.9%) 18.349 MB/sec [Average]
[info]   (min, avg, max) = (1119.695, 1125.149, 1131.708), stdev = 4.765
[info]   CI (99.9%): [1106.800, 1143.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10088.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10088.002, 10088.002, 10088.003), stdev = 0.001
[info]   CI (99.9%): [10088.002, 10088.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1131.029 ±(99.9%) 686.501 MB/sec [Average]
[info]   (min, avg, max) = (994.462, 1131.029, 1331.546), stdev = 178.282
[info]   CI (99.9%): [444.528, 1817.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10144.601 ±(99.9%) 6277.344 B/op [Average]
[info]   (min, avg, max) = (8892.246, 10144.601, 11996.695), stdev = 1630.206
[info]   CI (99.9%): [3867.257, 16421.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.673 ±(99.9%) 0.973 B/op [Average]
[info]   (min, avg, max) = (0.372, 0.673, 0.938), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 62.73% complete, ETA 00:26:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380596.895 ops/s
[info] # Warmup Iteration   2: 530440.890 ops/s
[info] # Warmup Iteration   3: 534653.435 ops/s
[info] Iteration   1: 530111.080 ops/s
[info]                  ·gc.alloc.rate:                   522.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1729.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 525720.745 ops/s
[info]                  ·gc.alloc.rate:                   518.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1957.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 520979.585 ops/s
[info]                  ·gc.alloc.rate:                   513.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     988.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 524075.507 ops/s
[info]                  ·gc.alloc.rate:                   516.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1964.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 526949.672 ops/s
[info]                  ·gc.alloc.rate:               519.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 978.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   525567.318 ±(99.9%) 13037.289 ops/s [Average]
[info]   (min, avg, max) = (520979.585, 525567.318, 530111.080), stdev = 3385.742
[info]   CI (99.9%): [512530.029, 538604.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   518.297 ±(99.9%) 13.070 MB/sec [Average]
[info]   (min, avg, max) = (513.740, 518.297, 522.907), stdev = 3.394
[info]   CI (99.9%): [505.227, 531.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.092 ±(99.9%) 648.433 MB/sec [Average]
[info]   (min, avg, max) = (327.058, 509.092, 654.142), stdev = 168.396
[info]   CI (99.9%): [≈ 0, 1157.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1523.648 ±(99.9%) 1933.484 B/op [Average]
[info]   (min, avg, max) = (978.855, 1523.648, 1964.483), stdev = 502.120
[info]   CI (99.9%): [≈ 0, 3457.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.462 ±(99.9%) 3.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.462, 2.141), stdev = 0.939
[info]   CI (99.9%): [≈ 0, 4.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.371 ±(99.9%) 10.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.371, 6.355), stdev = 2.787
[info]   CI (99.9%): [≈ 0, 12.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 63.03% complete, ETA 00:25:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1044659.279 ops/s
[info] # Warmup Iteration   2: 1100372.127 ops/s
[info] # Warmup Iteration   3: 1111560.670 ops/s
[info] Iteration   1: 1153409.824 ops/s
[info]                  ·gc.alloc.rate:                   855.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1358.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1155734.744 ops/s
[info]                  ·gc.alloc.rate:                   857.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     903.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1148516.139 ops/s
[info]                  ·gc.alloc.rate:                   852.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1365.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1149373.155 ops/s
[info]                  ·gc.alloc.rate:                   852.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1367.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1151017.794 ops/s
[info]                  ·gc.alloc.rate:                   854.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     913.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1151610.331 ±(99.9%) 11419.454 ops/s [Average]
[info]   (min, avg, max) = (1148516.139, 1151610.331, 1155734.744), stdev = 2965.596
[info]   CI (99.9%): [1140190.877, 1163029.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   854.608 ±(99.9%) 8.458 MB/sec [Average]
[info]   (min, avg, max) = (852.335, 854.608, 857.688), stdev = 2.196
[info]   CI (99.9%): [846.150, 863.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   864.365 ±(99.9%) 698.581 MB/sec [Average]
[info]   (min, avg, max) = (663.473, 864.365, 998.842), stdev = 181.419
[info]   CI (99.9%): [165.783, 1562.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1181.625 ±(99.9%) 960.810 B/op [Average]
[info]   (min, avg, max) = (903.519, 1181.625, 1367.792), stdev = 249.519
[info]   CI (99.9%): [220.815, 2142.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (0.086, 0.119, 0.170), stdev = 0.031
[info]   CI (99.9%): [≈ 10⁻⁴, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.33% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1037376.032 ops/s
[info] # Warmup Iteration   2: 1117082.900 ops/s
[info] # Warmup Iteration   3: 1116024.577 ops/s
[info] Iteration   1: 1094878.158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1115738.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1118513.083 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1118752.952 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1118869.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1113350.495 ±(99.9%) 40073.975 ops/s [Average]
[info]   (min, avg, max) = (1094878.158, 1113350.495, 1118869.530), stdev = 10407.084
[info]   CI (99.9%): [1073276.520, 1153424.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 63.64% complete, ETA 00:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189440.238 ops/s
[info] # Warmup Iteration   2: 325498.187 ops/s
[info] # Warmup Iteration   3: 325759.407 ops/s
[info] Iteration   1: 327219.658 ops/s
[info]                  ·gc.alloc.rate:                   893.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4700.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 320490.368 ops/s
[info]                  ·gc.alloc.rate:                   875.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3202.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 324928.109 ops/s
[info]                  ·gc.alloc.rate:                   886.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4752.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 326968.150 ops/s
[info]                  ·gc.alloc.rate:                   892.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4751.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 327169.736 ops/s
[info]                  ·gc.alloc.rate:                   893.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4768.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   325355.204 ±(99.9%) 11096.830 ops/s [Average]
[info]   (min, avg, max) = (320490.368, 325355.204, 327219.658), stdev = 2881.812
[info]   CI (99.9%): [314258.374, 336452.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   888.167 ±(99.9%) 29.652 MB/sec [Average]
[info]   (min, avg, max) = (875.190, 888.167, 893.200), stdev = 7.701
[info]   CI (99.9%): [858.515, 917.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   917.882 ±(99.9%) 571.717 MB/sec [Average]
[info]   (min, avg, max) = (652.457, 917.882, 991.208), stdev = 148.473
[info]   CI (99.9%): [346.165, 1489.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4435.241 ±(99.9%) 2655.002 B/op [Average]
[info]   (min, avg, max) = (3202.683, 4435.241, 4768.308), stdev = 689.496
[info]   CI (99.9%): [1780.239, 7090.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.302 ±(99.9%) 0.609 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.302, 0.501), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 63.94% complete, ETA 00:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480.748 ops/s
[info] # Warmup Iteration   2: 671.592 ops/s
[info] # Warmup Iteration   3: 672.060 ops/s
[info] Iteration   1: 671.614 ops/s
[info]                  ·gc.alloc.rate:               1402.852 MB/sec
[info]                  ·gc.alloc.rate.norm:          3284912.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1318.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3088079.691 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 674.560 ops/s
[info]                  ·gc.alloc.rate:                   1408.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3092134.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242.726 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 675.784 ops/s
[info]                  ·gc.alloc.rate:                   1410.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3104622.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.947 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 678.319 ops/s
[info]                  ·gc.alloc.rate:                   1416.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3884672.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.778 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 672.918 ops/s
[info]                  ·gc.alloc.rate:                   1404.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3150402.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   674.639 ±(99.9%) 9.999 ops/s [Average]
[info]   (min, avg, max) = (671.614, 674.639, 678.319), stdev = 2.597
[info]   CI (99.9%): [664.640, 684.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1408.411 ±(99.9%) 20.191 MB/sec [Average]
[info]   (min, avg, max) = (1402.852, 1408.411, 1416.111), stdev = 5.243
[info]   CI (99.9%): [1388.220, 1428.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3284912.749 ±(99.9%) 0.475 B/op [Average]
[info]   (min, avg, max) = (3284912.639, 3284912.749, 3284912.948), stdev = 0.123
[info]   CI (99.9%): [3284912.274, 3284913.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1399.797 ±(99.9%) 593.044 MB/sec [Average]
[info]   (min, avg, max) = (1318.793, 1399.797, 1674.665), stdev = 154.012
[info]   CI (99.9%): [806.753, 1992.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3263982.303 ±(99.9%) 1339485.058 B/op [Average]
[info]   (min, avg, max) = (3088079.691, 3263982.303, 3884672.943), stdev = 347860.016
[info]   CI (99.9%): [1924497.245, 4603467.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   126.104 ±(99.9%) 339.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.104, 242.726), stdev = 88.176
[info]   CI (99.9%): [≈ 0, 465.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 64.24% complete, ETA 00:25:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375.477 ops/s
[info] # Warmup Iteration   2: 674.229 ops/s
[info] # Warmup Iteration   3: 684.275 ops/s
[info] Iteration   1: 682.700 ops/s
[info]                  ·gc.alloc.rate:                   1416.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264568.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3009090.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.977 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 681.082 ops/s
[info]                  ·gc.alloc.rate:                   1413.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264596.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3797628.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288.282 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 693.954 ops/s
[info]                  ·gc.alloc.rate:                   1440.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264568.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3003151.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188.593 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 677.176 ops/s
[info]                  ·gc.alloc.rate:                   1405.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264568.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3097010.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 690.219 ops/s
[info]                  ·gc.alloc.rate:                   1432.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              3264571.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3821004.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.685 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   685.026 ±(99.9%) 26.488 ops/s [Average]
[info]   (min, avg, max) = (677.176, 685.026, 693.954), stdev = 6.879
[info]   CI (99.9%): [658.538, 711.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1421.664 ±(99.9%) 54.373 MB/sec [Average]
[info]   (min, avg, max) = (1405.791, 1421.664, 1440.225), stdev = 14.120
[info]   CI (99.9%): [1367.291, 1476.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3264574.757 ±(99.9%) 47.011 B/op [Average]
[info]   (min, avg, max) = (3264568.633, 3264574.757, 3264596.504), stdev = 12.209
[info]   CI (99.9%): [3264527.746, 3264621.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1456.966 ±(99.9%) 716.692 MB/sec [Average]
[info]   (min, avg, max) = (1305.937, 1456.966, 1676.201), stdev = 186.123
[info]   CI (99.9%): [740.274, 2173.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3345577.405 ±(99.9%) 1636688.346 B/op [Average]
[info]   (min, avg, max) = (3003151.839, 3345577.405, 3821004.874), stdev = 425042.766
[info]   CI (99.9%): [1708889.060, 4982265.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   171.905 ±(99.9%) 334.700 B/op [Average]
[info]   (min, avg, max) = (47.977, 171.905, 288.282), stdev = 86.921
[info]   CI (99.9%): [≈ 0, 506.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 64.55% complete, ETA 00:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12868.723 ops/s
[info] # Warmup Iteration   2: 27150.232 ops/s
[info] # Warmup Iteration   3: 26648.864 ops/s
[info] Iteration   1: 27372.850 ops/s
[info]                  ·gc.alloc.rate:                   494.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29414.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27316.561 ops/s
[info]                  ·gc.alloc.rate:                   493.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38149.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27097.523 ops/s
[info]                  ·gc.alloc.rate:                   489.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          330.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19188.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27134.482 ops/s
[info]                  ·gc.alloc.rate:                   490.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38329.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27512.339 ops/s
[info]                  ·gc.alloc.rate:               497.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          28432.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      330.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18900.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   27286.751 ±(99.9%) 661.888 ops/s [Average]
[info]   (min, avg, max) = (27097.523, 27286.751, 27512.339), stdev = 171.890
[info]   CI (99.9%): [26624.863, 27948.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   492.980 ±(99.9%) 11.747 MB/sec [Average]
[info]   (min, avg, max) = (489.710, 492.980, 497.018), stdev = 3.051
[info]   CI (99.9%): [481.234, 504.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28432.017 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (28432.016, 28432.017, 28432.023), stdev = 0.003
[info]   CI (99.9%): [28432.006, 28432.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   499.096 ±(99.9%) 637.944 MB/sec [Average]
[info]   (min, avg, max) = (330.404, 499.096, 662.162), stdev = 165.672
[info]   CI (99.9%): [≈ 0, 1137.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28796.624 ±(99.9%) 36982.876 B/op [Average]
[info]   (min, avg, max) = (18900.814, 28796.624, 38329.552), stdev = 9604.335
[info]   CI (99.9%): [≈ 0, 65779.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.469 ±(99.9%) 3.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.469, 2.178), stdev = 0.956
[info]   CI (99.9%): [≈ 0, 4.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27.021 ±(99.9%) 212.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.021, 125.463), stdev = 55.077
[info]   CI (99.9%): [≈ 0, 239.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 64.85% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380.520 ops/s
[info] # Warmup Iteration   2: 646.328 ops/s
[info] # Warmup Iteration   3: 658.906 ops/s
[info] Iteration   1: 670.055 ops/s
[info]                  ·gc.alloc.rate:                   1428.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353120.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3067592.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.835 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 675.896 ops/s
[info]                  ·gc.alloc.rate:                   1440.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353142.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3833662.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.893 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 672.604 ops/s
[info]                  ·gc.alloc.rate:                   1433.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353105.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3103660.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.689 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 683.709 ops/s
[info]                  ·gc.alloc.rate:                   1457.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353104.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3072143.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.813 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 664.490 ops/s
[info]                  ·gc.alloc.rate:                   1415.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353104.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3971185.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.826 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   673.351 ±(99.9%) 27.478 ops/s [Average]
[info]   (min, avg, max) = (664.490, 673.351, 683.709), stdev = 7.136
[info]   CI (99.9%): [645.873, 700.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1434.891 ±(99.9%) 58.539 MB/sec [Average]
[info]   (min, avg, max) = (1415.932, 1434.891, 1457.032), stdev = 15.202
[info]   CI (99.9%): [1376.351, 1493.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3353115.696 ±(99.9%) 63.682 B/op [Average]
[info]   (min, avg, max) = (3353104.632, 3353115.696, 3353142.686), stdev = 16.538
[info]   CI (99.9%): [3353052.013, 3353179.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1458.300 ±(99.9%) 717.243 MB/sec [Average]
[info]   (min, avg, max) = (1306.554, 1458.300, 1676.932), stdev = 186.266
[info]   CI (99.9%): [741.057, 2175.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3409648.954 ±(99.9%) 1743083.492 B/op [Average]
[info]   (min, avg, max) = (3067592.680, 3409648.954, 3971185.949), stdev = 452673.247
[info]   CI (99.9%): [1666565.462, 5152732.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   107.011 ±(99.9%) 244.491 B/op [Average]
[info]   (min, avg, max) = (48.689, 107.011, 193.893), stdev = 63.493
[info]   CI (99.9%): [≈ 0, 351.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 65.15% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9019.010 ops/s
[info] # Warmup Iteration   2: 12672.682 ops/s
[info] # Warmup Iteration   3: 12785.368 ops/s
[info] Iteration   1: 13004.105 ops/s
[info]                  ·gc.alloc.rate:                   1047.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158826.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13073.190 ops/s
[info]                  ·gc.alloc.rate:                   1052.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118851.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.518 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13053.528 ops/s
[info]                  ·gc.alloc.rate:                   1051.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              126771.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119506.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13075.337 ops/s
[info]                  ·gc.alloc.rate:                   1053.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119786.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12940.776 ops/s
[info]                  ·gc.alloc.rate:                   1042.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121643.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13029.387 ±(99.9%) 220.396 ops/s [Average]
[info]   (min, avg, max) = (12940.776, 13029.387, 13075.337), stdev = 57.236
[info]   CI (99.9%): [12808.991, 13249.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1049.458 ±(99.9%) 17.779 MB/sec [Average]
[info]   (min, avg, max) = (1042.491, 1049.458, 1053.271), stdev = 4.617
[info]   CI (99.9%): [1031.679, 1067.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126749.572 ±(99.9%) 132.125 B/op [Average]
[info]   (min, avg, max) = (126712.033, 126749.572, 126776.036), stdev = 34.313
[info]   CI (99.9%): [126617.447, 126881.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1057.363 ±(99.9%) 549.346 MB/sec [Average]
[info]   (min, avg, max) = (987.633, 1057.363, 1312.428), stdev = 142.663
[info]   CI (99.9%): [508.017, 1606.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127723.168 ±(99.9%) 67070.687 B/op [Average]
[info]   (min, avg, max) = (118851.980, 127723.168, 158826.289), stdev = 17418.044
[info]   CI (99.9%): [60652.481, 194793.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.060 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (0.031, 0.060, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.293 ±(99.9%) 11.115 B/op [Average]
[info]   (min, avg, max) = (3.740, 7.293, 10.127), stdev = 2.887
[info]   CI (99.9%): [≈ 0, 18.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 65.45% complete, ETA 00:24:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10447.178 ops/s
[info] # Warmup Iteration   2: 15181.960 ops/s
[info] # Warmup Iteration   3: 15681.724 ops/s
[info] Iteration   1: 15731.654 ops/s
[info]                  ·gc.alloc.rate:                   983.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97766.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15340.919 ops/s
[info]                  ·gc.alloc.rate:                   959.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              98399.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100463.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15283.422 ops/s
[info]                  ·gc.alloc.rate:                   955.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101249.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.144 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15746.066 ops/s
[info]                  ·gc.alloc.rate:                   984.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98911.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15585.126 ops/s
[info]                  ·gc.alloc.rate:                   974.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100330.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   15537.437 ±(99.9%) 831.827 ops/s [Average]
[info]   (min, avg, max) = (15283.422, 15537.437, 15746.066), stdev = 216.023
[info]   CI (99.9%): [14705.610, 16369.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   971.546 ±(99.9%) 52.329 MB/sec [Average]
[info]   (min, avg, max) = (955.512, 971.546, 984.487), stdev = 13.590
[info]   CI (99.9%): [919.217, 1023.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98400.055 ±(99.9%) 0.386 B/op [Average]
[info]   (min, avg, max) = (98399.903, 98400.055, 98400.152), stdev = 0.100
[info]   CI (99.9%): [98399.669, 98400.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   984.683 ±(99.9%) 26.428 MB/sec [Average]
[info]   (min, avg, max) = (977.553, 984.683, 993.756), stdev = 6.863
[info]   CI (99.9%): [958.254, 1011.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99744.260 ±(99.9%) 5352.968 B/op [Average]
[info]   (min, avg, max) = (97766.683, 99744.260, 101249.390), stdev = 1390.149
[info]   CI (99.9%): [94391.292, 105097.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.751 ±(99.9%) 15.805 B/op [Average]
[info]   (min, avg, max) = (2.144, 6.751, 12.814), stdev = 4.104
[info]   CI (99.9%): [≈ 0, 22.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 65.76% complete, ETA 00:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254268.780 ops/s
[info] # Warmup Iteration   2: 264281.363 ops/s
[info] # Warmup Iteration   3: 275390.894 ops/s
[info] Iteration   1: 276800.447 ops/s
[info]                  ·gc.alloc.rate:                   976.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5636.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 263812.149 ops/s
[info]                  ·gc.alloc.rate:                   930.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5917.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.621 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 275277.293 ops/s
[info]                  ·gc.alloc.rate:                   971.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5686.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 277255.259 ops/s
[info]                  ·gc.alloc.rate:                   977.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5666.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 276457.081 ops/s
[info]                  ·gc.alloc.rate:                   975.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5701.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   273920.446 ±(99.9%) 21940.951 ops/s [Average]
[info]   (min, avg, max) = (263812.149, 273920.446, 277255.259), stdev = 5697.995
[info]   CI (99.9%): [251979.495, 295861.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   966.284 ±(99.9%) 77.458 MB/sec [Average]
[info]   (min, avg, max) = (930.573, 966.284, 977.998), stdev = 20.116
[info]   CI (99.9%): [888.825, 1043.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   995.478 ±(99.9%) 16.795 MB/sec [Average]
[info]   (min, avg, max) = (991.138, 995.478, 1001.514), stdev = 4.362
[info]   CI (99.9%): [978.683, 1012.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5721.580 ±(99.9%) 432.410 B/op [Average]
[info]   (min, avg, max) = (5636.100, 5721.580, 5917.624), stdev = 112.295
[info]   CI (99.9%): [5289.171, 6153.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.385 ±(99.9%) 0.711 B/op [Average]
[info]   (min, avg, max) = (0.118, 0.385, 0.621), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 1.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.06% complete, ETA 00:23:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273743.838 ops/s
[info] # Warmup Iteration   2: 288608.265 ops/s
[info] # Warmup Iteration   3: 298369.605 ops/s
[info] Iteration   1: 297666.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 299144.418 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 296707.662 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 296940.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 298293.078 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   297750.508 ±(99.9%) 3844.602 ops/s [Average]
[info]   (min, avg, max) = (296707.662, 297750.508, 299144.418), stdev = 998.431
[info]   CI (99.9%): [293905.906, 301595.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 66.36% complete, ETA 00:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11291.674 ops/s
[info] # Warmup Iteration   2: 15316.632 ops/s
[info] # Warmup Iteration   3: 15432.962 ops/s
[info] Iteration   1: 15547.813 ops/s
[info]                  ·gc.alloc.rate:                   1030.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              104255.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99361.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15252.603 ops/s
[info]                  ·gc.alloc.rate:                   1010.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              104256.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101489.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15364.875 ops/s
[info]                  ·gc.alloc.rate:                   1017.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              104256.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101220.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15438.531 ops/s
[info]                  ·gc.alloc.rate:                   1023.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              104256.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101217.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15057.753 ops/s
[info]                  ·gc.alloc.rate:                   997.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              104247.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104265.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.527 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15332.315 ±(99.9%) 721.725 ops/s [Average]
[info]   (min, avg, max) = (15057.753, 15332.315, 15547.813), stdev = 187.430
[info]   CI (99.9%): [14610.590, 16054.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1015.831 ±(99.9%) 48.675 MB/sec [Average]
[info]   (min, avg, max) = (997.389, 1015.831, 1030.358), stdev = 12.641
[info]   CI (99.9%): [967.155, 1064.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   104254.304 ±(99.9%) 14.886 B/op [Average]
[info]   (min, avg, max) = (104247.390, 104254.304, 104256.157), stdev = 3.866
[info]   CI (99.9%): [104239.418, 104269.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   988.940 ±(99.9%) 25.236 MB/sec [Average]
[info]   (min, avg, max) = (981.990, 988.940, 997.565), stdev = 6.554
[info]   CI (99.9%): [963.704, 1014.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   101511.143 ±(99.9%) 6773.821 B/op [Average]
[info]   (min, avg, max) = (99361.848, 101511.143, 104265.774), stdev = 1759.140
[info]   CI (99.9%): [94737.322, 108284.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.557 ±(99.9%) 4.534 B/op [Average]
[info]   (min, avg, max) = (4.244, 5.557, 6.527), stdev = 1.177
[info]   CI (99.9%): [1.024, 10.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 66.67% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569687.092 ops/s
[info] # Warmup Iteration   2: 860029.576 ops/s
[info] # Warmup Iteration   3: 886147.162 ops/s
[info] Iteration   1: 891728.921 ops/s
[info]                  ·gc.alloc.rate:                   2905.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4748.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 865925.119 ops/s
[info]                  ·gc.alloc.rate:                   2822.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3046.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5534.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 870353.758 ops/s
[info]                  ·gc.alloc.rate:                   2835.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4911.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 883814.011 ops/s
[info]                  ·gc.alloc.rate:                   2879.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3060.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5449.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 884258.627 ops/s
[info]                  ·gc.alloc.rate:                   2882.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4846.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   879216.087 ±(99.9%) 41218.523 ops/s [Average]
[info]   (min, avg, max) = (865925.119, 879216.087, 891728.921), stdev = 10704.320
[info]   CI (99.9%): [837997.564, 920434.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2865.055 ±(99.9%) 133.126 MB/sec [Average]
[info]   (min, avg, max) = (2822.668, 2865.055, 2905.272), stdev = 34.572
[info]   CI (99.9%): [2731.930, 2998.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5128.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.000, 5128.001, 5128.001), stdev = 0.001
[info]   CI (99.9%): [5128.000, 5128.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2847.378 ±(99.9%) 725.740 MB/sec [Average]
[info]   (min, avg, max) = (2690.391, 2847.378, 3060.300), stdev = 188.472
[info]   CI (99.9%): [2121.638, 3573.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5098.187 ±(99.9%) 1406.839 B/op [Average]
[info]   (min, avg, max) = (4748.720, 5098.187, 5534.351), stdev = 365.352
[info]   CI (99.9%): [3691.349, 6505.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.167), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.209 ±(99.9%) 0.266 B/op [Average]
[info]   (min, avg, max) = (0.111, 0.209, 0.301), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 66.97% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 792282.501 ops/s
[info] # Warmup Iteration   2: 1626459.856 ops/s
[info] # Warmup Iteration   3: 1672261.926 ops/s
[info] Iteration   1: 1676411.987 ops/s
[info]                  ·gc.alloc.rate:                   1525.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1537.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1675162.629 ops/s
[info]                  ·gc.alloc.rate:                   1524.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1551.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1681436.573 ops/s
[info]                  ·gc.alloc.rate:                   1529.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1245.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1679210.564 ops/s
[info]                  ·gc.alloc.rate:                   1527.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1568.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1672635.223 ops/s
[info]                  ·gc.alloc.rate:                   1521.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1266.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1676971.395 ±(99.9%) 13246.810 ops/s [Average]
[info]   (min, avg, max) = (1672635.223, 1676971.395, 1681436.573), stdev = 3440.154
[info]   CI (99.9%): [1663724.585, 1690218.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1525.862 ±(99.9%) 11.880 MB/sec [Average]
[info]   (min, avg, max) = (1521.910, 1525.862, 1529.883), stdev = 3.085
[info]   CI (99.9%): [1513.981, 1537.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1527.917 ±(99.9%) 668.701 MB/sec [Average]
[info]   (min, avg, max) = (1330.921, 1527.917, 1674.011), stdev = 173.660
[info]   CI (99.9%): [859.216, 2196.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1433.937 ±(99.9%) 627.645 B/op [Average]
[info]   (min, avg, max) = (1245.768, 1433.937, 1568.998), stdev = 162.997
[info]   CI (99.9%): [806.292, 2061.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.082, 0.117), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 67.27% complete, ETA 00:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7138589.831 ops/s
[info] # Warmup Iteration   2: 7887248.350 ops/s
[info] # Warmup Iteration   3: 8078736.259 ops/s
[info] Iteration   1: 8310194.145 ops/s
[info]                  ·gc.alloc.rate:                   2492.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2356.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8256130.810 ops/s
[info]                  ·gc.alloc.rate:                   2475.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     515.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8221006.120 ops/s
[info]                  ·gc.alloc.rate:                   2466.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8377659.446 ops/s
[info]                  ·gc.alloc.rate:                   2512.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8069630.302 ops/s
[info]                  ·gc.alloc.rate:                   2420.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   8246924.165 ±(99.9%) 444430.144 ops/s [Average]
[info]   (min, avg, max) = (8069630.302, 8246924.165, 8377659.446), stdev = 115417.097
[info]   CI (99.9%): [7802494.021, 8691354.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2473.463 ±(99.9%) 133.108 MB/sec [Average]
[info]   (min, avg, max) = (2420.053, 2473.463, 2512.354), stdev = 34.568
[info]   CI (99.9%): [2340.355, 2606.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2439.673 ±(99.9%) 573.502 MB/sec [Average]
[info]   (min, avg, max) = (2356.113, 2439.673, 2705.480), stdev = 148.937
[info]   CI (99.9%): [1866.171, 3013.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   465.621 ±(99.9%) 111.701 B/op [Average]
[info]   (min, avg, max) = (446.182, 465.621, 515.760), stdev = 29.008
[info]   CI (99.9%): [353.920, 577.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.016, 0.024), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 67.58% complete, ETA 00:22:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79821.037 ops/s
[info] # Warmup Iteration   2: 298895.212 ops/s
[info] # Warmup Iteration   3: 312693.666 ops/s
[info] Iteration   1: 315990.584 ops/s
[info]                  ·gc.alloc.rate:                   1925.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9814.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.518 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 312256.050 ops/s
[info]                  ·gc.alloc.rate:                   1903.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10036.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 314186.236 ops/s
[info]                  ·gc.alloc.rate:                   1915.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8380.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 314910.381 ops/s
[info]                  ·gc.alloc.rate:                   1919.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10094.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 313872.206 ops/s
[info]                  ·gc.alloc.rate:                   1913.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10169.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   314243.091 ±(99.9%) 5303.599 ops/s [Average]
[info]   (min, avg, max) = (312256.050, 314243.091, 315990.584), stdev = 1377.328
[info]   CI (99.9%): [308939.493, 319546.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1915.441 ±(99.9%) 31.903 MB/sec [Average]
[info]   (min, avg, max) = (1903.118, 1915.441, 1925.699), stdev = 8.285
[info]   CI (99.9%): [1883.538, 1947.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1936.774 ±(99.9%) 573.428 MB/sec [Average]
[info]   (min, avg, max) = (1673.631, 1936.774, 2028.904), stdev = 148.918
[info]   CI (99.9%): [1363.345, 2510.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9699.088 ±(99.9%) 2883.495 B/op [Average]
[info]   (min, avg, max) = (8380.639, 9699.088, 10169.793), stdev = 748.834
[info]   CI (99.9%): [6815.593, 12582.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.501 ±(99.9%) 0.442 B/op [Average]
[info]   (min, avg, max) = (0.312, 0.501, 0.626), stdev = 0.115
[info]   CI (99.9%): [0.059, 0.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 67.88% complete, ETA 00:22:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 589526.327 ops/s
[info] # Warmup Iteration   2: 1008096.567 ops/s
[info] # Warmup Iteration   3: 1023222.380 ops/s
[info] Iteration   1: 1033041.933 ops/s
[info]                  ·gc.alloc.rate:                   2378.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2339.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3563.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1017464.859 ops/s
[info]                  ·gc.alloc.rate:                   2342.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2356.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3644.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1011465.857 ops/s
[info]                  ·gc.alloc.rate:                   2328.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3683.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1025716.740 ops/s
[info]                  ·gc.alloc.rate:                   2362.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3643.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1022606.410 ops/s
[info]                  ·gc.alloc.rate:                   2354.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3660.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1022059.160 ±(99.9%) 31496.781 ops/s [Average]
[info]   (min, avg, max) = (1011465.857, 1022059.160, 1033041.933), stdev = 8179.614
[info]   CI (99.9%): [990562.379, 1053555.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2353.413 ±(99.9%) 72.656 MB/sec [Average]
[info]   (min, avg, max) = (2328.980, 2353.413, 2378.644), stdev = 18.869
[info]   CI (99.9%): [2280.757, 2426.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3624.000, 3624.000, 3624.000), stdev = 0.001
[info]   CI (99.9%): [3624.000, 3624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2363.204 ±(99.9%) 61.152 MB/sec [Average]
[info]   (min, avg, max) = (2339.176, 2363.204, 2378.072), stdev = 15.881
[info]   CI (99.9%): [2302.052, 2424.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3639.332 ±(99.9%) 173.967 B/op [Average]
[info]   (min, avg, max) = (3563.868, 3639.332, 3683.869), stdev = 45.179
[info]   CI (99.9%): [3465.364, 3813.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.179 ±(99.9%) 0.239 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.179, 0.225), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 68.18% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1434144.338 ops/s
[info] # Warmup Iteration   2: 3376365.258 ops/s
[info] # Warmup Iteration   3: 3372673.637 ops/s
[info] Iteration   1: 3364379.018 ops/s
[info]                  ·gc.alloc.rate:                   1950.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     770.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3349130.504 ops/s
[info]                  ·gc.alloc.rate:                   1940.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     937.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 3380284.768 ops/s
[info]                  ·gc.alloc.rate:                   1958.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     936.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3422768.329 ops/s
[info]                  ·gc.alloc.rate:                   1983.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3393317.823 ops/s
[info]                  ·gc.alloc.rate:                   1967.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3381976.088 ±(99.9%) 108639.893 ops/s [Average]
[info]   (min, avg, max) = (3349130.504, 3381976.088, 3422768.329), stdev = 28213.435
[info]   CI (99.9%): [3273336.195, 3490615.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1960.127 ±(99.9%) 63.212 MB/sec [Average]
[info]   (min, avg, max) = (1940.711, 1960.127, 1983.697), stdev = 16.416
[info]   CI (99.9%): [1896.915, 2023.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1942.071 ±(99.9%) 634.257 MB/sec [Average]
[info]   (min, avg, max) = (1648.463, 1942.071, 2031.942), stdev = 164.714
[info]   CI (99.9%): [1307.815, 2576.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   903.448 ±(99.9%) 285.953 B/op [Average]
[info]   (min, avg, max) = (770.819, 903.448, 942.061), stdev = 74.261
[info]   CI (99.9%): [617.495, 1189.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.167), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.041, 0.078), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 68.48% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13474397.814 ops/s
[info] # Warmup Iteration   2: 15527675.359 ops/s
[info] # Warmup Iteration   3: 16568718.385 ops/s
[info] Iteration   1: 16622940.314 ops/s
[info]                  ·gc.alloc.rate:                   1013.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16551137.452 ops/s
[info]                  ·gc.alloc.rate:                   1009.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16614498.236 ops/s
[info]                  ·gc.alloc.rate:                   1013.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16609000.615 ops/s
[info]                  ·gc.alloc.rate:                   1013.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16588236.483 ops/s
[info]                  ·gc.alloc.rate:                   1011.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   16597162.620 ±(99.9%) 110653.988 ops/s [Average]
[info]   (min, avg, max) = (16551137.452, 16597162.620, 16622940.314), stdev = 28736.489
[info]   CI (99.9%): [16486508.632, 16707816.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1012.346 ±(99.9%) 6.677 MB/sec [Average]
[info]   (min, avg, max) = (1009.586, 1012.346, 1013.917), stdev = 1.734
[info]   CI (99.9%): [1005.669, 1019.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.210 ±(99.9%) 15.243 MB/sec [Average]
[info]   (min, avg, max) = (995.201, 999.210, 1004.538), stdev = 3.959
[info]   CI (99.9%): [983.967, 1014.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   94.755 ±(99.9%) 1.557 B/op [Average]
[info]   (min, avg, max) = (94.228, 94.755, 95.313), stdev = 0.404
[info]   CI (99.9%): [93.197, 96.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
[info]   CI (99.9%): [0.001, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 68.79% complete, ETA 00:21:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142447.857 ops/s
[info] # Warmup Iteration   2: 456420.086 ops/s
[info] # Warmup Iteration   3: 466548.053 ops/s
[info] Iteration   1: 468884.358 ops/s
[info]                  ·gc.alloc.rate:                   1653.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5497.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 472660.563 ops/s
[info]                  ·gc.alloc.rate:                   1667.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5502.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 475381.533 ops/s
[info]                  ·gc.alloc.rate:                   1676.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5514.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 474132.632 ops/s
[info]                  ·gc.alloc.rate:                   1673.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5565.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 470657.073 ops/s
[info]                  ·gc.alloc.rate:                   1660.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5633.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   472343.232 ±(99.9%) 10067.218 ops/s [Average]
[info]   (min, avg, max) = (468884.358, 472343.232, 475381.533), stdev = 2614.425
[info]   CI (99.9%): [462276.014, 482410.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1666.371 ±(99.9%) 35.913 MB/sec [Average]
[info]   (min, avg, max) = (1653.964, 1666.371, 1676.870), stdev = 9.327
[info]   CI (99.9%): [1630.458, 1702.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.001), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1663.542 ±(99.9%) 73.154 MB/sec [Average]
[info]   (min, avg, max) = (1637.604, 1663.542, 1684.816), stdev = 18.998
[info]   CI (99.9%): [1590.388, 1736.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5542.593 ±(99.9%) 222.077 B/op [Average]
[info]   (min, avg, max) = (5497.085, 5542.593, 5633.625), stdev = 57.673
[info]   CI (99.9%): [5320.516, 5764.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.264 ±(99.9%) 0.224 B/op [Average]
[info]   (min, avg, max) = (0.207, 0.264, 0.348), stdev = 0.058
[info]   CI (99.9%): [0.039, 0.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 69.09% complete, ETA 00:21:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1152858.736 ops/s
[info] # Warmup Iteration   2: 2047721.063 ops/s
[info] # Warmup Iteration   3: 2087264.221 ops/s
[info] Iteration   1: 2064476.530 ops/s
[info]                  ·gc.alloc.rate:                   1248.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     995.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2104415.517 ops/s
[info]                  ·gc.alloc.rate:                   1272.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2062251.951 ops/s
[info]                  ·gc.alloc.rate:                   1247.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2106692.591 ops/s
[info]                  ·gc.alloc.rate:                   1274.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     993.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2093923.474 ops/s
[info]                  ·gc.alloc.rate:                   1266.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1004.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2086352.012 ±(99.9%) 82961.184 ops/s [Average]
[info]   (min, avg, max) = (2062251.951, 2086352.012, 2106692.591), stdev = 21544.756
[info]   CI (99.9%): [2003390.829, 2169313.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1261.974 ±(99.9%) 50.263 MB/sec [Average]
[info]   (min, avg, max) = (1247.409, 1261.974, 1274.277), stdev = 13.053
[info]   CI (99.9%): [1211.711, 1312.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1255.139 ±(99.9%) 570.949 MB/sec [Average]
[info]   (min, avg, max) = (990.867, 1255.139, 1336.953), stdev = 148.274
[info]   CI (99.9%): [684.190, 1826.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   946.312 ±(99.9%) 410.403 B/op [Average]
[info]   (min, avg, max) = (756.212, 946.312, 1004.904), stdev = 106.580
[info]   CI (99.9%): [535.909, 1356.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.059, 0.078), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 69.39% complete, ETA 00:21:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7943637.630 ops/s
[info] # Warmup Iteration   2: 9104868.915 ops/s
[info] # Warmup Iteration   3: 9215965.284 ops/s
[info] Iteration   1: 9196466.480 ops/s
[info]                  ·gc.alloc.rate:                   1215.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9036635.159 ops/s
[info]                  ·gc.alloc.rate:                   1194.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9248912.520 ops/s
[info]                  ·gc.alloc.rate:                   1222.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9118890.605 ops/s
[info]                  ·gc.alloc.rate:                   1205.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9074011.679 ops/s
[info]                  ·gc.alloc.rate:                   1199.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   9134983.288 ±(99.9%) 335740.595 ops/s [Average]
[info]   (min, avg, max) = (9036635.159, 9134983.288, 9248912.520), stdev = 87190.766
[info]   CI (99.9%): [8799242.694, 9470723.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1207.398 ±(99.9%) 44.731 MB/sec [Average]
[info]   (min, avg, max) = (1194.252, 1207.398, 1222.746), stdev = 11.617
[info]   CI (99.9%): [1162.667, 1252.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1271.673 ±(99.9%) 577.027 MB/sec [Average]
[info]   (min, avg, max) = (1003.884, 1271.673, 1347.196), stdev = 149.852
[info]   CI (99.9%): [694.645, 1848.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   219.237 ±(99.9%) 104.682 B/op [Average]
[info]   (min, avg, max) = (170.770, 219.237, 233.625), stdev = 27.186
[info]   CI (99.9%): [114.555, 323.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.013, 0.022), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 69.70% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145226.541 ops/s
[info] # Warmup Iteration   2: 397672.618 ops/s
[info] # Warmup Iteration   3: 412201.501 ops/s
[info] Iteration   1: 414082.316 ops/s
[info]                  ·gc.alloc.rate:                   1942.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7502.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 413061.974 ops/s
[info]                  ·gc.alloc.rate:                   1937.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7599.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.555 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 414296.610 ops/s
[info]                  ·gc.alloc.rate:                   1943.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6360.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 410568.974 ops/s
[info]                  ·gc.alloc.rate:                   1926.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7749.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 406614.909 ops/s
[info]                  ·gc.alloc.rate:                   1907.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7853.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   411724.957 ±(99.9%) 12389.121 ops/s [Average]
[info]   (min, avg, max) = (406614.909, 411724.957, 414296.610), stdev = 3217.415
[info]   CI (99.9%): [399335.836, 424114.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1931.755 ±(99.9%) 57.821 MB/sec [Average]
[info]   (min, avg, max) = (1907.728, 1931.755, 1943.739), stdev = 15.016
[info]   CI (99.9%): [1873.934, 1989.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1938.765 ±(99.9%) 575.559 MB/sec [Average]
[info]   (min, avg, max) = (1674.350, 1938.765, 2029.127), stdev = 149.471
[info]   CI (99.9%): [1363.206, 2514.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7413.153 ±(99.9%) 2324.790 B/op [Average]
[info]   (min, avg, max) = (6360.627, 7413.153, 7853.884), stdev = 603.741
[info]   CI (99.9%): [5088.363, 9737.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.350 ±(99.9%) 0.557 B/op [Average]
[info]   (min, avg, max) = (0.158, 0.350, 0.555), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 70.00% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1529549.421 ops/s
[info] # Warmup Iteration   2: 2549850.886 ops/s
[info] # Warmup Iteration   3: 2538833.237 ops/s
[info] Iteration   1: 2503411.497 ops/s
[info]                  ·gc.alloc.rate:                   1323.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2509327.466 ops/s
[info]                  ·gc.alloc.rate:                   1326.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2512708.553 ops/s
[info]                  ·gc.alloc.rate:                   1328.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2511191.728 ops/s
[info]                  ·gc.alloc.rate:                   1327.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2527177.873 ops/s
[info]                  ·gc.alloc.rate:                   1335.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2512763.424 ±(99.9%) 33872.204 ops/s [Average]
[info]   (min, avg, max) = (2503411.497, 2512763.424, 2527177.873), stdev = 8796.504
[info]   CI (99.9%): [2478891.219, 2546635.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1328.412 ±(99.9%) 17.934 MB/sec [Average]
[info]   (min, avg, max) = (1323.281, 1328.412, 1335.967), stdev = 4.657
[info]   CI (99.9%): [1310.478, 1346.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1324.218 ±(99.9%) 51.572 MB/sec [Average]
[info]   (min, avg, max) = (1306.863, 1324.218, 1340.267), stdev = 13.393
[info]   CI (99.9%): [1272.646, 1375.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   829.361 ±(99.9%) 23.259 B/op [Average]
[info]   (min, avg, max) = (821.678, 829.361, 835.399), stdev = 6.040
[info]   CI (99.9%): [806.102, 852.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.044, 0.065), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 70.30% complete, ETA 00:20:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5870798.947 ops/s
[info] # Warmup Iteration   2: 6547713.266 ops/s
[info] # Warmup Iteration   3: 6612770.070 ops/s
[info] Iteration   1: 6605582.203 ops/s
[info]                  ·gc.alloc.rate:                   1007.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6479374.556 ops/s
[info]                  ·gc.alloc.rate:                   988.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6586482.188 ops/s
[info]                  ·gc.alloc.rate:                   1004.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6618586.724 ops/s
[info]                  ·gc.alloc.rate:                   1009.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6548049.942 ops/s
[info]                  ·gc.alloc.rate:                   998.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6567615.122 ±(99.9%) 215814.452 ops/s [Average]
[info]   (min, avg, max) = (6479374.556, 6567615.122, 6618586.724), stdev = 56046.328
[info]   CI (99.9%): [6351800.671, 6783429.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1001.475 ±(99.9%) 32.839 MB/sec [Average]
[info]   (min, avg, max) = (988.014, 1001.475, 1009.202), stdev = 8.528
[info]   CI (99.9%): [968.635, 1034.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.218 ±(99.9%) 16.744 MB/sec [Average]
[info]   (min, avg, max) = (994.481, 999.218, 1005.288), stdev = 4.348
[info]   CI (99.9%): [982.474, 1015.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   239.473 ±(99.9%) 8.427 B/op [Average]
[info]   (min, avg, max) = (236.971, 239.473, 241.914), stdev = 2.188
[info]   CI (99.9%): [231.046, 247.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.018, 0.020), stdev = 0.003
[info]   CI (99.9%): [0.007, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 70.61% complete, ETA 00:20:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273035.891 ops/s
[info] # Warmup Iteration   2: 643989.990 ops/s
[info] # Warmup Iteration   3: 655383.698 ops/s
[info] Iteration   1: 657418.601 ops/s
[info]                  ·gc.alloc.rate:                   1951.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4726.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 652143.565 ops/s
[info]                  ·gc.alloc.rate:                   1935.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4815.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 658621.913 ops/s
[info]                  ·gc.alloc.rate:                   1956.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4806.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 658400.209 ops/s
[info]                  ·gc.alloc.rate:                   1955.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4836.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 653327.354 ops/s
[info]                  ·gc.alloc.rate:                   1939.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4076.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   655982.329 ±(99.9%) 11657.570 ops/s [Average]
[info]   (min, avg, max) = (652143.565, 655982.329, 658621.913), stdev = 3027.434
[info]   CI (99.9%): [644324.758, 667639.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1947.597 ±(99.9%) 35.706 MB/sec [Average]
[info]   (min, avg, max) = (1935.959, 1947.597, 1956.056), stdev = 9.273
[info]   CI (99.9%): [1911.891, 1983.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4672.001, 4672.001, 4672.001), stdev = 0.001
[info]   CI (99.9%): [4672.001, 4672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.608 ±(99.9%) 537.495 MB/sec [Average]
[info]   (min, avg, max) = (1692.152, 1939.608, 2023.805), stdev = 139.586
[info]   CI (99.9%): [1402.113, 2477.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4652.244 ±(99.9%) 1250.074 B/op [Average]
[info]   (min, avg, max) = (4076.266, 4652.244, 4836.257), stdev = 324.640
[info]   CI (99.9%): [3402.169, 5902.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.210 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.210, 0.301), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.91% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458605.058 ops/s
[info] # Warmup Iteration   2: 807808.483 ops/s
[info] # Warmup Iteration   3: 835109.765 ops/s
[info] Iteration   1: 838213.806 ops/s
[info]                  ·gc.alloc.rate:                   2781.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5043.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 825110.673 ops/s
[info]                  ·gc.alloc.rate:                   2739.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5155.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 830191.677 ops/s
[info]                  ·gc.alloc.rate:                   2755.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3053.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5787.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 831894.316 ops/s
[info]                  ·gc.alloc.rate:                   2761.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5143.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 820124.631 ops/s
[info]                  ·gc.alloc.rate:                   2722.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5226.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   829107.021 ±(99.9%) 26436.091 ops/s [Average]
[info]   (min, avg, max) = (820124.631, 829107.021, 838213.806), stdev = 6865.369
[info]   CI (99.9%): [802670.930, 855543.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2752.349 ±(99.9%) 86.532 MB/sec [Average]
[info]   (min, avg, max) = (2722.742, 2752.349, 2781.960), stdev = 22.472
[info]   CI (99.9%): [2665.817, 2838.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2777.025 ±(99.9%) 596.883 MB/sec [Average]
[info]   (min, avg, max) = (2685.577, 2777.025, 3053.006), stdev = 155.009
[info]   CI (99.9%): [2180.142, 3373.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5271.091 ±(99.9%) 1140.523 B/op [Average]
[info]   (min, avg, max) = (5043.011, 5271.091, 5787.900), stdev = 296.190
[info]   CI (99.9%): [4130.568, 6411.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.125), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.206 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (0.118, 0.206, 0.240), stdev = 0.052
[info]   CI (99.9%): [0.007, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 71.21% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 319786.519 ops/s
[info] # Warmup Iteration   2: 961852.155 ops/s
[info] # Warmup Iteration   3: 980593.910 ops/s
[info] Iteration   1: 974012.350 ops/s
[info]                  ·gc.alloc.rate:                   1208.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1581.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 984372.782 ops/s
[info]                  ·gc.alloc.rate:                   1221.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2096.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 977479.584 ops/s
[info]                  ·gc.alloc.rate:                   1212.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2125.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 993464.431 ops/s
[info]                  ·gc.alloc.rate:                   1232.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1576.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 985130.303 ops/s
[info]                  ·gc.alloc.rate:                   1221.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2132.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   982891.890 ±(99.9%) 29015.659 ops/s [Average]
[info]   (min, avg, max) = (974012.350, 982891.890, 993464.431), stdev = 7535.275
[info]   CI (99.9%): [953876.231, 1011907.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1219.328 ±(99.9%) 36.381 MB/sec [Average]
[info]   (min, avg, max) = (1208.006, 1219.328, 1232.619), stdev = 9.448
[info]   CI (99.9%): [1182.948, 1255.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.294 ±(99.9%) 707.801 MB/sec [Average]
[info]   (min, avg, max) = (978.876, 1188.294, 1334.958), stdev = 183.814
[info]   CI (99.9%): [480.494, 1896.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1902.512 ±(99.9%) 1137.659 B/op [Average]
[info]   (min, avg, max) = (1576.692, 1902.512, 2132.760), stdev = 295.446
[info]   CI (99.9%): [764.853, 3040.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.133 ±(99.9%) 0.203 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.133, 0.200), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 71.52% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6560081.138 ops/s
[info] # Warmup Iteration   2: 7138865.718 ops/s
[info] # Warmup Iteration   3: 7247807.379 ops/s
[info] Iteration   1: 7224597.039 ops/s
[info]                  ·gc.alloc.rate:                   330.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7254527.215 ops/s
[info]                  ·gc.alloc.rate:               331.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.496 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7236276.213 ops/s
[info]                  ·gc.alloc.rate:                   331.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7254460.620 ops/s
[info]                  ·gc.alloc.rate:                   331.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7478234.672 ops/s
[info]                  ·gc.alloc.rate:                   342.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          334.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7289619.152 ±(99.9%) 408951.824 ops/s [Average]
[info]   (min, avg, max) = (7224597.039, 7289619.152, 7478234.672), stdev = 106203.490
[info]   CI (99.9%): [6880667.328, 7698570.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   333.513 ±(99.9%) 18.690 MB/sec [Average]
[info]   (min, avg, max) = (330.600, 333.513, 342.137), stdev = 4.854
[info]   CI (99.9%): [314.824, 352.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   354.432 ±(99.9%) 363.363 MB/sec [Average]
[info]   (min, avg, max) = (255.841, 354.432, 511.748), stdev = 94.364
[info]   CI (99.9%): [≈ 0, 717.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   76.580 ±(99.9%) 80.030 B/op [Average]
[info]   (min, avg, max) = (55.496, 76.580, 111.451), stdev = 20.784
[info]   CI (99.9%): [≈ 0, 156.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.314 ±(99.9%) 2.557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 1.501), stdev = 0.664
[info]   CI (99.9%): [≈ 0, 2.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.326), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.82% complete, ETA 00:19:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37270.438 ops/s
[info] # Warmup Iteration   2: 286335.915 ops/s
[info] # Warmup Iteration   3: 289936.613 ops/s
[info] Iteration   1: 292068.520 ops/s
[info]                  ·gc.alloc.rate:                   1621.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7042.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 289910.040 ops/s
[info]                  ·gc.alloc.rate:                   1609.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8937.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.565 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 297904.067 ops/s
[info]                  ·gc.alloc.rate:                   1653.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8772.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 300277.836 ops/s
[info]                  ·gc.alloc.rate:                   1666.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8769.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 292222.183 ops/s
[info]                  ·gc.alloc.rate:                   1622.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9057.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   294476.529 ±(99.9%) 16909.609 ops/s [Average]
[info]   (min, avg, max) = (289910.040, 294476.529, 300277.836), stdev = 4391.372
[info]   CI (99.9%): [277566.920, 311386.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1634.640 ±(99.9%) 93.571 MB/sec [Average]
[info]   (min, avg, max) = (1609.148, 1634.640, 1666.719), stdev = 24.300
[info]   CI (99.9%): [1541.069, 1728.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8736.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8736.001, 8736.002, 8736.002), stdev = 0.001
[info]   CI (99.9%): [8736.001, 8736.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1593.776 ±(99.9%) 619.311 MB/sec [Average]
[info]   (min, avg, max) = (1307.080, 1593.776, 1682.063), stdev = 160.833
[info]   CI (99.9%): [974.466, 2213.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8515.760 ±(99.9%) 3205.136 B/op [Average]
[info]   (min, avg, max) = (7042.602, 8515.760, 9057.170), stdev = 832.364
[info]   CI (99.9%): [5310.624, 11720.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.357 ±(99.9%) 0.574 B/op [Average]
[info]   (min, avg, max) = (0.220, 0.357, 0.565), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 72.12% complete, ETA 00:19:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5415.744 ops/s
[info] # Warmup Iteration   2: 7629.588 ops/s
[info] # Warmup Iteration   3: 8173.946 ops/s
[info] Iteration   1: 8220.808 ops/s
[info]                  ·gc.alloc.rate:                   2115.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     382424.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.604 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8228.813 ops/s
[info]                  ·gc.alloc.rate:                   2117.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384855.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.924 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8226.625 ops/s
[info]                  ·gc.alloc.rate:                   2116.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2360.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451583.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.172 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8157.869 ops/s
[info]                  ·gc.alloc.rate:                   2099.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391738.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.910 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8210.863 ops/s
[info]                  ·gc.alloc.rate:                   2112.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              405012.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     390040.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.939 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8208.996 ±(99.9%) 113.259 ops/s [Average]
[info]   (min, avg, max) = (8157.869, 8208.996, 8228.813), stdev = 29.413
[info]   CI (99.9%): [8095.737, 8322.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2112.554 ±(99.9%) 28.060 MB/sec [Average]
[info]   (min, avg, max) = (2099.900, 2112.554, 2117.525), stdev = 7.287
[info]   CI (99.9%): [2084.494, 2140.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405002.494 ±(99.9%) 21.008 B/op [Average]
[info]   (min, avg, max) = (405000.053, 405002.494, 405012.254), stdev = 5.456
[info]   CI (99.9%): [404981.487, 405023.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2087.228 ±(99.9%) 590.763 MB/sec [Average]
[info]   (min, avg, max) = (1997.597, 2087.228, 2360.353), stdev = 153.419
[info]   CI (99.9%): [1496.464, 2677.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   400128.501 ±(99.9%) 111709.563 B/op [Average]
[info]   (min, avg, max) = (382424.836, 400128.501, 451583.502), stdev = 29010.619
[info]   CI (99.9%): [288418.939, 511838.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.138 ±(99.9%) 0.340 MB/sec [Average]
[info]   (min, avg, max) = (0.029, 0.138, 0.241), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26.510 ±(99.9%) 65.282 B/op [Average]
[info]   (min, avg, max) = (5.604, 26.510, 46.172), stdev = 16.954
[info]   CI (99.9%): [≈ 0, 91.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 72.42% complete, ETA 00:19:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7037.235 ops/s
[info] # Warmup Iteration   2: 12850.767 ops/s
[info] # Warmup Iteration   3: 13206.035 ops/s
[info] Iteration   1: 13066.002 ops/s
[info]                  ·gc.alloc.rate:                   476.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              57368.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30812.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13198.104 ops/s
[info]                  ·gc.alloc.rate:                   481.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              57368.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77133.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12921.518 ops/s
[info]                  ·gc.alloc.rate:               470.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          57368.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39431.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 13236.125 ops/s
[info]                  ·gc.alloc.rate:                   482.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              57368.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76985.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13527.375 ops/s
[info]                  ·gc.alloc.rate:               493.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          57368.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37665.036 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13189.825 ±(99.9%) 868.473 ops/s [Average]
[info]   (min, avg, max) = (12921.518, 13189.825, 13527.375), stdev = 225.540
[info]   CI (99.9%): [12321.352, 14058.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   480.907 ±(99.9%) 31.716 MB/sec [Average]
[info]   (min, avg, max) = (470.997, 480.907, 493.155), stdev = 8.236
[info]   CI (99.9%): [449.192, 512.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57368.033 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (57368.032, 57368.033, 57368.035), stdev = 0.001
[info]   CI (99.9%): [57368.029, 57368.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   439.645 ±(99.9%) 738.065 MB/sec [Average]
[info]   (min, avg, max) = (255.896, 439.645, 647.723), stdev = 191.673
[info]   CI (99.9%): [≈ 0, 1177.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   52405.614 ±(99.9%) 87545.550 B/op [Average]
[info]   (min, avg, max) = (30812.151, 52405.614, 77133.886), stdev = 22735.301
[info]   CI (99.9%): [≈ 0, 139951.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.540 ±(99.9%) 4.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.540, 2.654), stdev = 1.182
[info]   CI (99.9%): [≈ 0, 5.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   64.403 ±(99.9%) 542.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.403, 316.318), stdev = 140.840
[info]   CI (99.9%): [≈ 0, 606.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.73% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18474.176 ops/s
[info] # Warmup Iteration   2: 22572.518 ops/s
[info] # Warmup Iteration   3: 23138.842 ops/s
[info] Iteration   1: 23123.117 ops/s
[info]                  ·gc.alloc.rate:                   432.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34822.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23078.026 ops/s
[info]                  ·gc.alloc.rate:                   431.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22646.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.487 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23018.687 ops/s
[info]                  ·gc.alloc.rate:                   430.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45387.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.693 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23032.675 ops/s
[info]                  ·gc.alloc.rate:               430.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22667.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 23202.334 ops/s
[info]                  ·gc.alloc.rate:                   434.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22502.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23090.968 ±(99.9%) 287.036 ops/s [Average]
[info]   (min, avg, max) = (23018.687, 23090.968, 23202.334), stdev = 74.542
[info]   CI (99.9%): [22803.932, 23378.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   432.048 ±(99.9%) 5.365 MB/sec [Average]
[info]   (min, avg, max) = (430.690, 432.048, 434.123), stdev = 1.393
[info]   CI (99.9%): [426.683, 437.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29448.021 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (29448.019, 29448.021, 29448.026), stdev = 0.003
[info]   CI (99.9%): [29448.010, 29448.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.194 ±(99.9%) 578.053 MB/sec [Average]
[info]   (min, avg, max) = (331.728, 434.194, 663.809), stdev = 150.119
[info]   CI (99.9%): [≈ 0, 1012.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29605.343 ±(99.9%) 39611.745 B/op [Average]
[info]   (min, avg, max) = (22502.407, 29605.343, 45387.281), stdev = 10287.044
[info]   CI (99.9%): [≈ 0, 69217.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.367 ±(99.9%) 2.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.664), stdev = 0.726
[info]   CI (99.9%): [≈ 0, 3.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.047 ±(99.9%) 190.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.047, 113.487), stdev = 49.480
[info]   CI (99.9%): [≈ 0, 215.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 73.03% complete, ETA 00:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 857.356 ops/s
[info] # Warmup Iteration   2: 2308.067 ops/s
[info] # Warmup Iteration   3: 2335.025 ops/s
[info] Iteration   1: 2323.807 ops/s
[info]                  ·gc.alloc.rate:                   1455.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              985538.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1641.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1111941.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.094 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2333.529 ops/s
[info]                  ·gc.alloc.rate:                   1461.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     894030.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.118 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2336.945 ops/s
[info]                  ·gc.alloc.rate:                   1463.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1124147.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.046 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2351.920 ops/s
[info]                  ·gc.alloc.rate:                   1472.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     898397.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.778 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2344.421 ops/s
[info]                  ·gc.alloc.rate:                   1468.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     905039.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.947 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2338.124 ±(99.9%) 41.179 ops/s [Average]
[info]   (min, avg, max) = (2323.807, 2338.124, 2351.920), stdev = 10.694
[info]   CI (99.9%): [2296.945, 2379.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1464.189 ±(99.9%) 25.613 MB/sec [Average]
[info]   (min, avg, max) = (1455.328, 1464.189, 1472.815), stdev = 6.652
[info]   CI (99.9%): [1438.576, 1489.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   985530.222 ±(99.9%) 17.512 B/op [Average]
[info]   (min, avg, max) = (985528.184, 985530.222, 985538.357), stdev = 4.548
[info]   CI (99.9%): [985512.710, 985547.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1465.532 ±(99.9%) 670.035 MB/sec [Average]
[info]   (min, avg, max) = (1325.617, 1465.532, 1669.285), stdev = 174.006
[info]   CI (99.9%): [795.498, 2135.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   986711.144 ±(99.9%) 462200.021 B/op [Average]
[info]   (min, avg, max) = (894030.094, 986711.144, 1124147.025), stdev = 120031.878
[info]   CI (99.9%): [524511.123, 1448911.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33.597 ±(99.9%) 48.065 B/op [Average]
[info]   (min, avg, max) = (14.094, 33.597, 42.118), stdev = 12.482
[info]   CI (99.9%): [≈ 0, 81.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 73.33% complete, ETA 00:18:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6050.261 ops/s
[info] # Warmup Iteration   2: 8513.873 ops/s
[info] # Warmup Iteration   3: 8644.781 ops/s
[info] Iteration   1: 8669.013 ops/s
[info]                  ·gc.alloc.rate:                   1995.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361819.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.285 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8655.639 ops/s
[info]                  ·gc.alloc.rate:                   1993.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365130.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.906 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8545.183 ops/s
[info]                  ·gc.alloc.rate:                   1966.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372037.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8688.258 ops/s
[info]                  ·gc.alloc.rate:                   1999.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367363.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.675 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8463.310 ops/s
[info]                  ·gc.alloc.rate:                   1948.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              362299.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     378241.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.226 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8604.281 ±(99.9%) 371.568 ops/s [Average]
[info]   (min, avg, max) = (8463.310, 8604.281, 8688.258), stdev = 96.495
[info]   CI (99.9%): [8232.712, 8975.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1980.769 ±(99.9%) 85.681 MB/sec [Average]
[info]   (min, avg, max) = (1948.303, 1980.769, 1999.800), stdev = 22.251
[info]   CI (99.9%): [1895.088, 2066.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362277.494 ±(99.9%) 46.860 B/op [Average]
[info]   (min, avg, max) = (362272.050, 362277.494, 362299.263), stdev = 12.169
[info]   CI (99.9%): [362230.634, 362324.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2016.788 ±(99.9%) 62.610 MB/sec [Average]
[info]   (min, avg, max) = (1993.001, 2016.788, 2034.035), stdev = 16.260
[info]   CI (99.9%): [1954.178, 2079.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   368918.591 ±(99.9%) 24641.880 B/op [Average]
[info]   (min, avg, max) = (361819.789, 368918.591, 378241.588), stdev = 6399.418
[info]   CI (99.9%): [344276.711, 393560.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.153 ±(99.9%) 0.151 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.153, 0.214), stdev = 0.039
[info]   CI (99.9%): [0.002, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28.019 ±(99.9%) 26.968 B/op [Average]
[info]   (min, avg, max) = (23.003, 28.019, 38.906), stdev = 7.003
[info]   CI (99.9%): [1.051, 54.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.64% complete, ETA 00:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23740.293 ops/s
[info] # Warmup Iteration   2: 41010.064 ops/s
[info] # Warmup Iteration   3: 39856.080 ops/s
[info] Iteration   1: 40200.388 ops/s
[info]                  ·gc.alloc.rate:                   582.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12674.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 41138.578 ops/s
[info]                  ·gc.alloc.rate:                   596.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              22808.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24770.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41419.666 ops/s
[info]                  ·gc.alloc.rate:                   600.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24615.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41642.522 ops/s
[info]                  ·gc.alloc.rate:                   603.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24521.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41613.135 ops/s
[info]                  ·gc.alloc.rate:               603.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          22808.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24613.987 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   41202.858 ±(99.9%) 2292.439 ops/s [Average]
[info]   (min, avg, max) = (40200.388, 41202.858, 41642.522), stdev = 595.339
[info]   CI (99.9%): [38910.418, 43495.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   597.118 ±(99.9%) 33.225 MB/sec [Average]
[info]   (min, avg, max) = (582.565, 597.118, 603.463), stdev = 8.628
[info]   CI (99.9%): [563.893, 630.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.862 ±(99.9%) 0.669 B/op [Average]
[info]   (min, avg, max) = (22807.689, 22807.862, 22808.067), stdev = 0.174
[info]   CI (99.9%): [22807.192, 22808.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   583.745 ±(99.9%) 559.717 MB/sec [Average]
[info]   (min, avg, max) = (323.733, 583.745, 650.814), stdev = 145.357
[info]   CI (99.9%): [24.028, 1143.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22239.133 ±(99.9%) 20591.930 B/op [Average]
[info]   (min, avg, max) = (12674.292, 22239.133, 24770.716), stdev = 5347.659
[info]   CI (99.9%): [1647.203, 42831.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.564 ±(99.9%) 4.543 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.564, 2.673), stdev = 1.180
[info]   CI (99.9%): [≈ 0, 5.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.040 ±(99.9%) 177.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.040, 104.660), stdev = 46.211
[info]   CI (99.9%): [≈ 0, 199.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 73.94% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56447.560 ops/s
[info] # Warmup Iteration   2: 64565.660 ops/s
[info] # Warmup Iteration   3: 65094.330 ops/s
[info] Iteration   1: 65262.680 ops/s
[info]                  ·gc.alloc.rate:                   491.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14160.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 64624.571 ops/s
[info]                  ·gc.alloc.rate:               486.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8071.211 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 63554.174 ops/s
[info]                  ·gc.alloc.rate:                   478.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16396.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 63142.732 ops/s
[info]                  ·gc.alloc.rate:                   475.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8252.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 63109.649 ops/s
[info]                  ·gc.alloc.rate:                   475.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16513.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   63938.761 ±(99.9%) 3699.472 ops/s [Average]
[info]   (min, avg, max) = (63109.649, 63938.761, 65262.680), stdev = 960.741
[info]   CI (99.9%): [60239.289, 67638.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   481.686 ±(99.9%) 28.115 MB/sec [Average]
[info]   (min, avg, max) = (475.407, 481.686, 491.809), stdev = 7.301
[info]   CI (99.9%): [453.571, 509.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11856.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11856.007, 11856.007, 11856.007), stdev = 0.001
[info]   CI (99.9%): [11856.006, 11856.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.833 ±(99.9%) 655.967 MB/sec [Average]
[info]   (min, avg, max) = (331.072, 514.833, 662.167), stdev = 170.352
[info]   CI (99.9%): [≈ 0, 1170.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12678.835 ±(99.9%) 16285.050 B/op [Average]
[info]   (min, avg, max) = (8071.211, 12678.835, 16513.531), stdev = 4229.176
[info]   CI (99.9%): [≈ 0, 28963.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.425 ±(99.9%) 3.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 1.915), stdev = 0.834
[info]   CI (99.9%): [≈ 0, 3.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.267 ±(99.9%) 77.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.267, 46.153), stdev = 20.083
[info]   CI (99.9%): [≈ 0, 87.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 74.24% complete, ETA 00:18:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94141.984 ops/s
[info] # Warmup Iteration   2: 100209.875 ops/s
[info] # Warmup Iteration   3: 106095.995 ops/s
[info] Iteration   1: 105067.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106024.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 105019.158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105088.487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 106152.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   105470.324 ±(99.9%) 2182.128 ops/s [Average]
[info]   (min, avg, max) = (105019.158, 105470.324, 106152.878), stdev = 566.692
[info]   CI (99.9%): [103288.196, 107652.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.55% complete, ETA 00:17:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2457.701 ops/s
[info] # Warmup Iteration   2: 5158.019 ops/s
[info] # Warmup Iteration   3: 5317.968 ops/s
[info] Iteration   1: 5340.390 ops/s
[info]                  ·gc.alloc.rate:                   1686.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              496897.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     481987.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.536 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5322.768 ops/s
[info]                  ·gc.alloc.rate:                   1680.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              496895.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488344.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.310 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5363.410 ops/s
[info]                  ·gc.alloc.rate:                   1693.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              496895.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488814.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5355.996 ops/s
[info]                  ·gc.alloc.rate:                   1690.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              496896.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492480.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.467 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5352.175 ops/s
[info]                  ·gc.alloc.rate:                   1690.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              496895.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495394.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.607 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5346.948 ±(99.9%) 61.124 ops/s [Average]
[info]   (min, avg, max) = (5322.768, 5346.948, 5363.410), stdev = 15.874
[info]   CI (99.9%): [5285.824, 5408.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1688.329 ±(99.9%) 19.565 MB/sec [Average]
[info]   (min, avg, max) = (1680.595, 1688.329, 1693.627), stdev = 5.081
[info]   CI (99.9%): [1668.764, 1707.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   496896.025 ±(99.9%) 3.209 B/op [Average]
[info]   (min, avg, max) = (496895.280, 496896.025, 496897.171), stdev = 0.833
[info]   CI (99.9%): [496892.816, 496899.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1662.890 ±(99.9%) 75.736 MB/sec [Average]
[info]   (min, avg, max) = (1635.590, 1662.890, 1685.138), stdev = 19.668
[info]   CI (99.9%): [1587.155, 1738.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   489404.267 ±(99.9%) 19428.276 B/op [Average]
[info]   (min, avg, max) = (481987.714, 489404.267, 495394.863), stdev = 5045.462
[info]   CI (99.9%): [469975.991, 508832.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23.270 ±(99.9%) 25.712 B/op [Average]
[info]   (min, avg, max) = (12.310, 23.270, 30.607), stdev = 6.677
[info]   CI (99.9%): [≈ 0, 48.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 74.85% complete, ETA 00:17:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4551931.643 ops/s
[info] # Warmup Iteration   2: 5432459.801 ops/s
[info] # Warmup Iteration   3: 5539277.499 ops/s
[info] Iteration   1: 5579869.887 ops/s
[info]                  ·gc.alloc.rate:                   1673.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5748099.566 ops/s
[info]                  ·gc.alloc.rate:                   1724.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5783794.138 ops/s
[info]                  ·gc.alloc.rate:                   1734.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5754162.291 ops/s
[info]                  ·gc.alloc.rate:                   1725.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5576785.506 ops/s
[info]                  ·gc.alloc.rate:                   1673.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     478.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5688542.278 ±(99.9%) 390917.356 ops/s [Average]
[info]   (min, avg, max) = (5576785.506, 5688542.278, 5783794.138), stdev = 101519.996
[info]   CI (99.9%): [5297624.921, 6079459.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1706.170 ±(99.9%) 116.445 MB/sec [Average]
[info]   (min, avg, max) = (1673.258, 1706.170, 1734.523), stdev = 30.240
[info]   CI (99.9%): [1589.725, 1822.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1682.492 ±(99.9%) 40.925 MB/sec [Average]
[info]   (min, avg, max) = (1668.101, 1682.492, 1694.829), stdev = 10.628
[info]   CI (99.9%): [1641.567, 1723.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   465.563 ±(99.9%) 32.944 B/op [Average]
[info]   (min, avg, max) = (457.983, 465.563, 478.085), stdev = 8.555
[info]   CI (99.9%): [432.619, 498.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.023, 0.028), stdev = 0.004
[info]   CI (99.9%): [0.007, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 75.15% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124798.778 ops/s
[info] # Warmup Iteration   2: 346825.726 ops/s
[info] # Warmup Iteration   3: 353469.767 ops/s
[info] Iteration   1: 357623.905 ops/s
[info]                  ·gc.alloc.rate:                   1921.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7230.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 352605.781 ops/s
[info]                  ·gc.alloc.rate:                   1894.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7411.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 355263.026 ops/s
[info]                  ·gc.alloc.rate:                   1909.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8897.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 357407.559 ops/s
[info]                  ·gc.alloc.rate:                   1920.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8899.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 355907.304 ops/s
[info]                  ·gc.alloc.rate:                   1912.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7476.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.460 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   355761.515 ±(99.9%) 7798.470 ops/s [Average]
[info]   (min, avg, max) = (352605.781, 355761.515, 357623.905), stdev = 2025.238
[info]   CI (99.9%): [347963.045, 363559.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1911.439 ±(99.9%) 41.723 MB/sec [Average]
[info]   (min, avg, max) = (1894.468, 1911.439, 1921.344), stdev = 10.835
[info]   CI (99.9%): [1869.717, 1953.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8456.001, 8456.001, 8456.001), stdev = 0.001
[info]   CI (99.9%): [8456.001, 8456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1804.755 ±(99.9%) 741.614 MB/sec [Average]
[info]   (min, avg, max) = (1642.981, 1804.755, 2020.997), stdev = 192.595
[info]   CI (99.9%): [1063.141, 2546.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7983.238 ±(99.9%) 3236.626 B/op [Average]
[info]   (min, avg, max) = (7230.902, 7983.238, 8899.810), stdev = 840.542
[info]   CI (99.9%): [4746.611, 11219.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.350 ±(99.9%) 0.636 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.350, 0.465), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 75.45% complete, ETA 00:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2854449.325 ops/s
[info] # Warmup Iteration   2: 3259544.919 ops/s
[info] # Warmup Iteration   3: 3322316.648 ops/s
[info] Iteration   1: 3340546.888 ops/s
[info]                  ·gc.alloc.rate:                   492.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3380567.349 ops/s
[info]                  ·gc.alloc.rate:                   498.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3388163.713 ops/s
[info]                  ·gc.alloc.rate:                   499.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3359234.305 ops/s
[info]                  ·gc.alloc.rate:               495.351 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.115 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3361947.707 ops/s
[info]                  ·gc.alloc.rate:                   495.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3366091.993 ±(99.9%) 72384.223 ops/s [Average]
[info]   (min, avg, max) = (3340546.888, 3366091.993, 3388163.713), stdev = 18797.953
[info]   CI (99.9%): [3293707.769, 3438476.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   496.220 ±(99.9%) 10.618 MB/sec [Average]
[info]   (min, avg, max) = (492.414, 496.220, 499.427), stdev = 2.758
[info]   CI (99.9%): [485.602, 506.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.943 ±(99.9%) 656.294 MB/sec [Average]
[info]   (min, avg, max) = (331.191, 514.943, 662.805), stdev = 170.438
[info]   CI (99.9%): [≈ 0, 1171.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   240.785 ±(99.9%) 306.847 B/op [Average]
[info]   (min, avg, max) = (154.286, 240.785, 310.289), stdev = 79.687
[info]   CI (99.9%): [≈ 0, 547.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 3.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.394, 1.803), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.185 ±(99.9%) 1.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.849), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 1.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 75.76% complete, ETA 00:17:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98312.976 ops/s
[info] # Warmup Iteration   2: 344454.658 ops/s
[info] # Warmup Iteration   3: 347670.032 ops/s
[info] Iteration   1: 348828.395 ops/s
[info]                  ·gc.alloc.rate:                   1367.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5889.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.657 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 348353.843 ops/s
[info]                  ·gc.alloc.rate:                   1365.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5934.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.470 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 353109.884 ops/s
[info]                  ·gc.alloc.rate:                   1384.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5896.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 347931.441 ops/s
[info]                  ·gc.alloc.rate:                   1363.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6023.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 344857.970 ops/s
[info]                  ·gc.alloc.rate:                   1351.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6110.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   348616.307 ±(99.9%) 11374.113 ops/s [Average]
[info]   (min, avg, max) = (344857.970, 348616.307, 353109.884), stdev = 2953.821
[info]   CI (99.9%): [337242.193, 359990.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1366.398 ±(99.9%) 44.878 MB/sec [Average]
[info]   (min, avg, max) = (1351.537, 1366.398, 1384.051), stdev = 11.655
[info]   CI (99.9%): [1321.520, 1411.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6168.001, 6168.001, 6168.001), stdev = 0.001
[info]   CI (99.9%): [6168.001, 6168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1322.626 ±(99.9%) 51.297 MB/sec [Average]
[info]   (min, avg, max) = (1305.830, 1322.626, 1338.960), stdev = 13.322
[info]   CI (99.9%): [1271.330, 1373.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5970.939 ±(99.9%) 363.957 B/op [Average]
[info]   (min, avg, max) = (5889.391, 5970.939, 6110.600), stdev = 94.518
[info]   CI (99.9%): [5606.982, 6334.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.339 ±(99.9%) 0.871 B/op [Average]
[info]   (min, avg, max) = (0.093, 0.339, 0.657), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 76.06% complete, ETA 00:16:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4113280.055 ops/s
[info] # Warmup Iteration   2: 6167536.781 ops/s
[info] # Warmup Iteration   3: 6137064.292 ops/s
[info] Iteration   1: 6214985.093 ops/s
[info]                  ·gc.alloc.rate:                   3853.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3724.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 6191924.843 ops/s
[info]                  ·gc.alloc.rate:                   3839.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3737.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     949.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 6085420.262 ops/s
[info]                  ·gc.alloc.rate:                   3773.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     968.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 6227522.185 ops/s
[info]                  ·gc.alloc.rate:                   3861.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1032.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 6255786.730 ops/s
[info]                  ·gc.alloc.rate:                   3880.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6195127.823 ±(99.9%) 252277.553 ops/s [Average]
[info]   (min, avg, max) = (6085420.262, 6195127.823, 6255786.730), stdev = 65515.679
[info]   CI (99.9%): [5942850.269, 6447405.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3841.917 ±(99.9%) 157.205 MB/sec [Average]
[info]   (min, avg, max) = (3773.736, 3841.917, 3880.212), stdev = 40.826
[info]   CI (99.9%): [3684.711, 3999.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3807.351 ±(99.9%) 598.659 MB/sec [Average]
[info]   (min, avg, max) = (3724.609, 3807.351, 4085.068), stdev = 155.470
[info]   CI (99.9%): [3208.692, 4406.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   967.218 ±(99.9%) 146.029 B/op [Average]
[info]   (min, avg, max) = (942.062, 967.218, 1032.381), stdev = 37.923
[info]   CI (99.9%): [821.189, 1113.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.034, 0.042), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 76.36% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4022682.497 ops/s
[info] # Warmup Iteration   2: 8449325.314 ops/s
[info] # Warmup Iteration   3: 8351743.299 ops/s
[info] Iteration   1: 8429453.531 ops/s
[info]                  ·gc.alloc.rate:                   3170.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     563.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 8399091.693 ops/s
[info]                  ·gc.alloc.rate:                   3159.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8522547.352 ops/s
[info]                  ·gc.alloc.rate:                   3205.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     564.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8526425.635 ops/s
[info]                  ·gc.alloc.rate:                   3207.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8499691.097 ops/s
[info]                  ·gc.alloc.rate:                   3197.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   8475441.861 ±(99.9%) 222460.705 ops/s [Average]
[info]   (min, avg, max) = (8399091.693, 8475441.861, 8526425.635), stdev = 57772.339
[info]   CI (99.9%): [8252981.156, 8697902.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3188.038 ±(99.9%) 83.808 MB/sec [Average]
[info]   (min, avg, max) = (3159.244, 3188.038, 3207.184), stdev = 21.765
[info]   CI (99.9%): [3104.230, 3271.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3184.538 ±(99.9%) 731.738 MB/sec [Average]
[info]   (min, avg, max) = (3019.633, 3184.538, 3401.524), stdev = 190.030
[info]   CI (99.9%): [2452.800, 3916.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   591.397 ±(99.9%) 138.863 B/op [Average]
[info]   (min, avg, max) = (563.791, 591.397, 633.744), stdev = 36.062
[info]   CI (99.9%): [452.534, 730.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.018, 0.027), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 76.67% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44138055.483 ops/s
[info] # Warmup Iteration   2: 44172942.879 ops/s
[info] # Warmup Iteration   3: 46283395.999 ops/s
[info] Iteration   1: 46249019.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 46262742.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 46247476.786 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 46255642.995 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 46227080.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   46248392.469 ±(99.9%) 51443.485 ops/s [Average]
[info]   (min, avg, max) = (46227080.483, 46248392.469, 46262742.551), stdev = 13359.710
[info]   CI (99.9%): [46196948.984, 46299835.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 76.97% complete, ETA 00:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13725171.471 ops/s
[info] # Warmup Iteration   2: 16981529.696 ops/s
[info] # Warmup Iteration   3: 16622477.272 ops/s
[info] Iteration   1: 16733658.554 ops/s
[info]                  ·gc.alloc.rate:                   1105.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17173859.514 ops/s
[info]                  ·gc.alloc.rate:                   1134.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17167180.792 ops/s
[info]                  ·gc.alloc.rate:                   1134.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17053479.544 ops/s
[info]                  ·gc.alloc.rate:                   1127.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16737580.841 ops/s
[info]                  ·gc.alloc.rate:                   1105.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   16973151.849 ±(99.9%) 855055.567 ops/s [Average]
[info]   (min, avg, max) = (16733658.554, 16973151.849, 17173859.514), stdev = 222055.215
[info]   CI (99.9%): [16118096.282, 17828207.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1121.616 ±(99.9%) 56.648 MB/sec [Average]
[info]   (min, avg, max) = (1105.739, 1121.616, 1134.896), stdev = 14.711
[info]   CI (99.9%): [1064.969, 1178.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1138.505 ±(99.9%) 696.065 MB/sec [Average]
[info]   (min, avg, max) = (1001.987, 1138.505, 1339.378), stdev = 180.766
[info]   CI (99.9%): [442.440, 1834.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   105.598 ±(99.9%) 65.316 B/op [Average]
[info]   (min, avg, max) = (91.820, 105.598, 125.431), stdev = 16.962
[info]   CI (99.9%): [40.282, 170.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.005, 0.008), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 77.27% complete, ETA 00:15:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3974765.485 ops/s
[info] # Warmup Iteration   2: 7059362.848 ops/s
[info] # Warmup Iteration   3: 7108517.353 ops/s
[info] Iteration   1: 7152933.848 ops/s
[info]                  ·gc.alloc.rate:                   3453.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 7224128.840 ops/s
[info]                  ·gc.alloc.rate:                   3488.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     738.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7300960.404 ops/s
[info]                  ·gc.alloc.rate:                   3525.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7158044.292 ops/s
[info]                  ·gc.alloc.rate:                   3457.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     823.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 7114041.648 ops/s
[info]                  ·gc.alloc.rate:                   3436.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     753.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7190021.806 ±(99.9%) 283236.553 ops/s [Average]
[info]   (min, avg, max) = (7114041.648, 7190021.806, 7300960.404), stdev = 73555.633
[info]   CI (99.9%): [6906785.254, 7473258.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3472.180 ±(99.9%) 135.466 MB/sec [Average]
[info]   (min, avg, max) = (3436.138, 3472.180, 3525.409), stdev = 35.180
[info]   CI (99.9%): [3336.715, 3607.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3461.385 ±(99.9%) 613.633 MB/sec [Average]
[info]   (min, avg, max) = (3368.430, 3461.385, 3745.389), stdev = 159.359
[info]   CI (99.9%): [2847.752, 4075.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   757.761 ±(99.9%) 144.024 B/op [Average]
[info]   (min, avg, max) = (732.642, 757.761, 823.332), stdev = 37.403
[info]   CI (99.9%): [613.737, 901.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.137, 0.208), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.030, 0.045), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 77.58% complete, ETA 00:15:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7985286.104 ops/s
[info] # Warmup Iteration   2: 12209270.086 ops/s
[info] # Warmup Iteration   3: 12409151.124 ops/s
[info] Iteration   1: 12572008.634 ops/s
[info]                  ·gc.alloc.rate:                   2428.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     335.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 12899870.994 ops/s
[info]                  ·gc.alloc.rate:                   2491.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12918837.112 ops/s
[info]                  ·gc.alloc.rate:                   2496.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     329.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12688960.131 ops/s
[info]                  ·gc.alloc.rate:                   2450.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12928269.047 ops/s
[info]                  ·gc.alloc.rate:                   2497.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   12801589.184 ±(99.9%) 623420.058 ops/s [Average]
[info]   (min, avg, max) = (12572008.634, 12801589.184, 12928269.047), stdev = 161900.209
[info]   CI (99.9%): [12178169.126, 13425009.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2472.778 ±(99.9%) 120.849 MB/sec [Average]
[info]   (min, avg, max) = (2428.336, 2472.778, 2497.045), stdev = 31.384
[info]   CI (99.9%): [2351.930, 2593.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2499.695 ±(99.9%) 677.766 MB/sec [Average]
[info]   (min, avg, max) = (2358.526, 2499.695, 2706.911), stdev = 176.014
[info]   CI (99.9%): [1821.929, 3177.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   307.409 ±(99.9%) 88.745 B/op [Average]
[info]   (min, avg, max) = (287.758, 307.409, 335.131), stdev = 23.047
[info]   CI (99.9%): [218.664, 396.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.010, 0.015), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 77.88% complete, ETA 00:15:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4857804.540 ops/s
[info] # Warmup Iteration   2: 11166161.619 ops/s
[info] # Warmup Iteration   3: 11295870.885 ops/s
[info] Iteration   1: 11214603.995 ops/s
[info]                  ·gc.alloc.rate:                   2736.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3003.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     421.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11122763.374 ops/s
[info]                  ·gc.alloc.rate:                   2713.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11245509.708 ops/s
[info]                  ·gc.alloc.rate:                   2743.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11143610.938 ops/s
[info]                  ·gc.alloc.rate:                   2718.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     383.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 11229907.358 ops/s
[info]                  ·gc.alloc.rate:                   2740.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11191279.075 ±(99.9%) 210414.087 ops/s [Average]
[info]   (min, avg, max) = (11122763.374, 11191279.075, 11245509.708), stdev = 54643.870
[info]   CI (99.9%): [10980864.988, 11401693.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2730.487 ±(99.9%) 51.061 MB/sec [Average]
[info]   (min, avg, max) = (2713.937, 2730.487, 2743.570), stdev = 13.260
[info]   CI (99.9%): [2679.426, 2781.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2768.834 ±(99.9%) 505.851 MB/sec [Average]
[info]   (min, avg, max) = (2695.451, 2768.834, 3003.205), stdev = 131.368
[info]   CI (99.9%): [2262.983, 3274.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   389.381 ±(99.9%) 69.399 B/op [Average]
[info]   (min, avg, max) = (379.082, 389.381, 421.489), stdev = 18.023
[info]   CI (99.9%): [319.981, 458.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.016, 0.027), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 78.18% complete, ETA 00:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31899238.836 ops/s
[info] # Warmup Iteration   2: 44847722.343 ops/s
[info] # Warmup Iteration   3: 44514845.953 ops/s
[info] Iteration   1: 44000456.460 ops/s
[info]                  ·gc.alloc.rate:                   894.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 44733525.155 ops/s
[info]                  ·gc.alloc.rate:                   909.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 44433960.304 ops/s
[info]                  ·gc.alloc.rate:                   903.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 44655963.969 ops/s
[info]                  ·gc.alloc.rate:                   908.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 43744632.332 ops/s
[info]                  ·gc.alloc.rate:                   889.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   44313707.644 ±(99.9%) 1644792.820 ops/s [Average]
[info]   (min, avg, max) = (43744632.332, 44313707.644, 44733525.155), stdev = 427147.472
[info]   CI (99.9%): [42668914.824, 45958500.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   901.056 ±(99.9%) 33.470 MB/sec [Average]
[info]   (min, avg, max) = (889.567, 901.056, 909.679), stdev = 8.692
[info]   CI (99.9%): [867.586, 934.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   931.615 ±(99.9%) 569.985 MB/sec [Average]
[info]   (min, avg, max) = (666.878, 931.615, 1002.717), stdev = 148.023
[info]   CI (99.9%): [361.630, 1501.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   33.106 ±(99.9%) 20.729 B/op [Average]
[info]   (min, avg, max) = (23.501, 33.106, 36.070), stdev = 5.383
[info]   CI (99.9%): [12.378, 53.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 78.48% complete, ETA 00:15:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41856585.364 ops/s
[info] # Warmup Iteration   2: 56560316.349 ops/s
[info] # Warmup Iteration   3: 55224986.693 ops/s
[info] Iteration   1: 57500788.761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 59214672.761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 59190985.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 59205426.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 59052529.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   58832880.751 ±(99.9%) 2878668.337 ops/s [Average]
[info]   (min, avg, max) = (57500788.761, 58832880.751, 59214672.761), stdev = 747581.026
[info]   CI (99.9%): [55954212.414, 61711549.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 78.79% complete, ETA 00:14:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13230360.510 ops/s
[info] # Warmup Iteration   2: 13062189.433 ops/s
[info] # Warmup Iteration   3: 13063335.116 ops/s
[info] Iteration   1: 13104593.832 ops/s
[info]                  ·gc.alloc.rate:                   2198.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13048848.049 ops/s
[info]                  ·gc.alloc.rate:                   2189.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12933923.038 ops/s
[info]                  ·gc.alloc.rate:                   2169.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 13108164.007 ops/s
[info]                  ·gc.alloc.rate:                   2198.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13113767.874 ops/s
[info]                  ·gc.alloc.rate:                   2199.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   13061859.360 ±(99.9%) 293267.972 ops/s [Average]
[info]   (min, avg, max) = (12933923.038, 13061859.360, 13113767.874), stdev = 76160.761
[info]   CI (99.9%): [12768591.388, 13355127.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2191.159 ±(99.9%) 49.095 MB/sec [Average]
[info]   (min, avg, max) = (2169.547, 2191.159, 2199.732), stdev = 12.750
[info]   CI (99.9%): [2142.064, 2240.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2236.546 ±(99.9%) 711.805 MB/sec [Average]
[info]   (min, avg, max) = (2030.176, 2236.546, 2380.893), stdev = 184.853
[info]   CI (99.9%): [1524.741, 2948.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   269.499 ±(99.9%) 87.278 B/op [Average]
[info]   (min, avg, max) = (244.739, 269.499, 288.854), stdev = 22.666
[info]   CI (99.9%): [182.220, 356.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.011, 0.013), stdev = 0.002
[info]   CI (99.9%): [0.002, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 79.09% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1542118.053 ops/s
[info] # Warmup Iteration   2: 2223456.772 ops/s
[info] # Warmup Iteration   3: 2194315.251 ops/s
[info] Iteration   1: 2192987.376 ops/s
[info]                  ·gc.alloc.rate:                   1894.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1194.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2241171.509 ops/s
[info]                  ·gc.alloc.rate:                   1937.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1411.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2231119.357 ops/s
[info]                  ·gc.alloc.rate:                   1928.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1426.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2234583.167 ops/s
[info]                  ·gc.alloc.rate:                   1930.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1190.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2246378.614 ops/s
[info]                  ·gc.alloc.rate:                   1941.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1425.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2229248.005 ±(99.9%) 81284.777 ops/s [Average]
[info]   (min, avg, max) = (2192987.376, 2229248.005, 2246378.614), stdev = 21109.398
[info]   CI (99.9%): [2147963.228, 2310532.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1926.575 ±(99.9%) 70.920 MB/sec [Average]
[info]   (min, avg, max) = (1894.896, 1926.575, 1941.084), stdev = 18.418
[info]   CI (99.9%): [1855.655, 1997.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1360.000, 1360.000, 1360.000), stdev = 0.001
[info]   CI (99.9%): [1360.000, 1360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1884.708 ±(99.9%) 728.596 MB/sec [Average]
[info]   (min, avg, max) = (1664.948, 1884.708, 2034.070), stdev = 189.214
[info]   CI (99.9%): [1156.112, 2613.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1329.810 ±(99.9%) 481.812 B/op [Average]
[info]   (min, avg, max) = (1190.823, 1329.810, 1426.251), stdev = 125.125
[info]   CI (99.9%): [847.999, 1811.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.062, 0.102), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 79.39% complete, ETA 00:14:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446290.842 ops/s
[info] # Warmup Iteration   2: 650730.771 ops/s
[info] # Warmup Iteration   3: 648449.467 ops/s
[info] Iteration   1: 659851.096 ops/s
[info]                  ·gc.alloc.rate:                   2411.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2344.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5591.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 661909.963 ops/s
[info]                  ·gc.alloc.rate:                   2419.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5614.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 654167.237 ops/s
[info]                  ·gc.alloc.rate:                   2390.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5702.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 661541.073 ops/s
[info]                  ·gc.alloc.rate:                   2418.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5653.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 666244.965 ops/s
[info]                  ·gc.alloc.rate:                   2434.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5619.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   660742.867 ±(99.9%) 16818.377 ops/s [Average]
[info]   (min, avg, max) = (654167.237, 660742.867, 666244.965), stdev = 4367.679
[info]   CI (99.9%): [643924.489, 677561.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2415.031 ±(99.9%) 61.844 MB/sec [Average]
[info]   (min, avg, max) = (2390.717, 2415.031, 2434.959), stdev = 16.061
[info]   CI (99.9%): [2353.187, 2476.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5752.001, 5752.001, 5752.001), stdev = 0.001
[info]   CI (99.9%): [5752.001, 5752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2366.389 ±(99.9%) 54.674 MB/sec [Average]
[info]   (min, avg, max) = (2344.205, 2366.389, 2378.894), stdev = 14.199
[info]   CI (99.9%): [2311.716, 2421.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5636.300 ±(99.9%) 166.919 B/op [Average]
[info]   (min, avg, max) = (5591.408, 5636.300, 5702.972), stdev = 43.348
[info]   CI (99.9%): [5469.381, 5803.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.258 ±(99.9%) 0.280 B/op [Average]
[info]   (min, avg, max) = (0.149, 0.258, 0.344), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 79.70% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274538.006 ops/s
[info] # Warmup Iteration   2: 629512.283 ops/s
[info] # Warmup Iteration   3: 635959.315 ops/s
[info] Iteration   1: 643360.341 ops/s
[info]                  ·gc.alloc.rate:                   748.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1584.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 632102.283 ops/s
[info]                  ·gc.alloc.rate:                   735.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1613.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 627332.695 ops/s
[info]                  ·gc.alloc.rate:                   730.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1627.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 628661.919 ops/s
[info]                  ·gc.alloc.rate:                   731.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2445.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 640976.368 ops/s
[info]                  ·gc.alloc.rate:                   746.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1607.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   634486.721 ±(99.9%) 28010.001 ops/s [Average]
[info]   (min, avg, max) = (627332.695, 634486.721, 643360.341), stdev = 7274.108
[info]   CI (99.9%): [606476.720, 662496.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   738.622 ±(99.9%) 32.575 MB/sec [Average]
[info]   (min, avg, max) = (730.224, 738.622, 748.839), stdev = 8.460
[info]   CI (99.9%): [706.047, 771.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   715.331 ±(99.9%) 563.712 MB/sec [Average]
[info]   (min, avg, max) = (647.782, 715.331, 977.154), stdev = 146.394
[info]   CI (99.9%): [151.619, 1279.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1775.862 ±(99.9%) 1443.233 B/op [Average]
[info]   (min, avg, max) = (1584.769, 1775.862, 2445.759), stdev = 374.803
[info]   CI (99.9%): [332.629, 3219.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 0.181 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.134, 0.207), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.00% complete, ETA 00:14:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3243618.265 ops/s
[info] # Warmup Iteration   2: 3602167.625 ops/s
[info] # Warmup Iteration   3: 3651434.558 ops/s
[info] Iteration   1: 3659004.465 ops/s
[info]                  ·gc.alloc.rate:                   1450.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3712734.891 ops/s
[info]                  ·gc.alloc.rate:                   1472.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3709524.107 ops/s
[info]                  ·gc.alloc.rate:                   1470.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3721090.735 ops/s
[info]                  ·gc.alloc.rate:                   1475.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     570.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3696700.960 ops/s
[info]                  ·gc.alloc.rate:                   1465.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3699811.031 ±(99.9%) 94105.598 ops/s [Average]
[info]   (min, avg, max) = (3659004.465, 3699811.031, 3721090.735), stdev = 24438.925
[info]   CI (99.9%): [3605705.434, 3793916.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1466.879 ±(99.9%) 37.292 MB/sec [Average]
[info]   (min, avg, max) = (1450.719, 1466.879, 1475.295), stdev = 9.685
[info]   CI (99.9%): [1429.588, 1504.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1410.381 ±(99.9%) 580.340 MB/sec [Average]
[info]   (min, avg, max) = (1333.703, 1410.381, 1679.641), stdev = 150.712
[info]   CI (99.9%): [830.042, 1990.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   599.903 ±(99.9%) 243.074 B/op [Average]
[info]   (min, avg, max) = (567.046, 599.903, 712.672), stdev = 63.126
[info]   CI (99.9%): [356.829, 842.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.037, 0.053), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 80.30% complete, ETA 00:13:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60810.405 ops/s
[info] # Warmup Iteration   2: 224258.008 ops/s
[info] # Warmup Iteration   3: 227849.899 ops/s
[info] Iteration   1: 226898.386 ops/s
[info]                  ·gc.alloc.rate:                   1578.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1634.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11341.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.722 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 230606.674 ops/s
[info]                  ·gc.alloc.rate:                   1604.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11250.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.852 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 227965.472 ops/s
[info]                  ·gc.alloc.rate:                   1586.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9179.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 231691.772 ops/s
[info]                  ·gc.alloc.rate:                   1612.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11364.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.707 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 231636.375 ops/s
[info]                  ·gc.alloc.rate:                   1612.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11421.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   229759.736 ±(99.9%) 8475.473 ops/s [Average]
[info]   (min, avg, max) = (226898.386, 229759.736, 231691.772), stdev = 2201.053
[info]   CI (99.9%): [221284.263, 238235.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1598.926 ±(99.9%) 59.058 MB/sec [Average]
[info]   (min, avg, max) = (1578.868, 1598.926, 1612.250), stdev = 15.337
[info]   CI (99.9%): [1539.868, 1657.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1593.489 ±(99.9%) 572.010 MB/sec [Average]
[info]   (min, avg, max) = (1329.840, 1593.489, 1681.228), stdev = 148.549
[info]   CI (99.9%): [1021.478, 2165.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10911.322 ±(99.9%) 3735.220 B/op [Average]
[info]   (min, avg, max) = (9179.599, 10911.322, 11421.080), stdev = 970.025
[info]   CI (99.9%): [7176.101, 14646.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.598 ±(99.9%) 1.054 B/op [Average]
[info]   (min, avg, max) = (0.144, 0.598, 0.852), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.61% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604345.339 ops/s
[info] # Warmup Iteration   2: 874835.362 ops/s
[info] # Warmup Iteration   3: 883116.732 ops/s
[info] Iteration   1: 894272.000 ops/s
[info]                  ·gc.alloc.rate:                   2145.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2336.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4111.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 867335.401 ops/s
[info]                  ·gc.alloc.rate:                   2081.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3658.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 889454.710 ops/s
[info]                  ·gc.alloc.rate:                   2134.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3584.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 896606.541 ops/s
[info]                  ·gc.alloc.rate:                   2151.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4159.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 890882.103 ops/s
[info]                  ·gc.alloc.rate:                   2137.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3599.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   887710.151 ±(99.9%) 45170.812 ops/s [Average]
[info]   (min, avg, max) = (867335.401, 887710.151, 896606.541), stdev = 11730.716
[info]   CI (99.9%): [842539.339, 932880.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2130.206 ±(99.9%) 107.607 MB/sec [Average]
[info]   (min, avg, max) = (2081.642, 2130.206, 2151.647), stdev = 27.945
[info]   CI (99.9%): [2022.599, 2237.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3776.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3776.000, 3776.000, 3776.001), stdev = 0.001
[info]   CI (99.9%): [3776.000, 3776.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2157.518 ±(99.9%) 689.510 MB/sec [Average]
[info]   (min, avg, max) = (2017.132, 2157.518, 2370.059), stdev = 179.064
[info]   CI (99.9%): [1468.008, 2847.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3822.832 ±(99.9%) 1105.921 B/op [Average]
[info]   (min, avg, max) = (3584.402, 3822.832, 4159.300), stdev = 287.204
[info]   CI (99.9%): [2716.911, 4928.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.141 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (0.110, 0.141, 0.189), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 80.91% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 659157.079 ops/s
[info] # Warmup Iteration   2: 1483241.059 ops/s
[info] # Warmup Iteration   3: 1476864.712 ops/s
[info] Iteration   1: 1492757.043 ops/s
[info]                  ·gc.alloc.rate:                   978.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1026.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1477102.411 ops/s
[info]                  ·gc.alloc.rate:                   968.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1039.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1522254.679 ops/s
[info]                  ·gc.alloc.rate:                   998.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1012.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1525209.931 ops/s
[info]                  ·gc.alloc.rate:                   1000.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1016.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1516459.611 ops/s
[info]                  ·gc.alloc.rate:                   994.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1029.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1506756.735 ±(99.9%) 80547.124 ops/s [Average]
[info]   (min, avg, max) = (1477102.411, 1506756.735, 1525209.931), stdev = 20917.832
[info]   CI (99.9%): [1426209.611, 1587303.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   988.096 ±(99.9%) 52.307 MB/sec [Average]
[info]   (min, avg, max) = (968.969, 988.096, 1000.086), stdev = 13.584
[info]   CI (99.9%): [935.790, 1040.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   980.998 ±(99.9%) 28.592 MB/sec [Average]
[info]   (min, avg, max) = (973.224, 980.998, 991.689), stdev = 7.425
[info]   CI (99.9%): [952.405, 1009.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1024.684 ±(99.9%) 40.524 B/op [Average]
[info]   (min, avg, max) = (1012.735, 1024.684, 1039.123), stdev = 10.524
[info]   CI (99.9%): [984.160, 1065.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (0.043, 0.065, 0.089), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 81.21% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5933854.891 ops/s
[info] # Warmup Iteration   2: 6770399.592 ops/s
[info] # Warmup Iteration   3: 6964083.400 ops/s
[info] Iteration   1: 6956393.723 ops/s
[info]                  ·gc.alloc.rate:                   778.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6914235.714 ops/s
[info]                  ·gc.alloc.rate:                   773.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6884361.870 ops/s
[info]                  ·gc.alloc.rate:                   769.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6979934.766 ops/s
[info]                  ·gc.alloc.rate:               780.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149.901 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 6914983.487 ops/s
[info]                  ·gc.alloc.rate:                   773.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6929981.912 ±(99.9%) 145956.106 ops/s [Average]
[info]   (min, avg, max) = (6884361.870, 6929981.912, 6979934.766), stdev = 37904.337
[info]   CI (99.9%): [6784025.806, 7075938.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   775.016 ±(99.9%) 16.563 MB/sec [Average]
[info]   (min, avg, max) = (769.814, 775.016, 780.680), stdev = 4.301
[info]   CI (99.9%): [758.454, 791.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.077 ±(99.9%) 569.945 MB/sec [Average]
[info]   (min, avg, max) = (662.243, 730.077, 994.833), stdev = 148.013
[info]   CI (99.9%): [160.132, 1300.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   165.900 ±(99.9%) 132.511 B/op [Average]
[info]   (min, avg, max) = (149.813, 165.900, 227.446), stdev = 34.413
[info]   CI (99.9%): [33.389, 298.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.024), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.52% complete, ETA 00:12:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179765.772 ops/s
[info] # Warmup Iteration   2: 503303.304 ops/s
[info] # Warmup Iteration   3: 498655.626 ops/s
[info] Iteration   1: 509904.445 ops/s
[info]                  ·gc.alloc.rate:                   1785.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1641.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5067.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 501680.195 ops/s
[info]                  ·gc.alloc.rate:                   1756.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6236.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 512036.939 ops/s
[info]                  ·gc.alloc.rate:                   1793.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5134.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 510887.460 ops/s
[info]                  ·gc.alloc.rate:                   1789.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5179.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 508564.959 ops/s
[info]                  ·gc.alloc.rate:                   1781.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5221.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.258 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   508614.800 ±(99.9%) 15715.915 ops/s [Average]
[info]   (min, avg, max) = (501680.195, 508614.800, 512036.939), stdev = 4081.373
[info]   CI (99.9%): [492898.885, 524330.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1781.387 ±(99.9%) 55.610 MB/sec [Average]
[info]   (min, avg, max) = (1756.962, 1781.387, 1793.932), stdev = 14.442
[info]   CI (99.9%): [1725.776, 1836.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5512.001, 5512.001, 5512.001), stdev = 0.001
[info]   CI (99.9%): [5512.001, 5512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1733.816 ±(99.9%) 550.794 MB/sec [Average]
[info]   (min, avg, max) = (1641.593, 1733.816, 1987.751), stdev = 143.039
[info]   CI (99.9%): [1183.022, 2284.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5367.823 ±(99.9%) 1881.829 B/op [Average]
[info]   (min, avg, max) = (5067.407, 5367.823, 6236.038), stdev = 488.705
[info]   CI (99.9%): [3485.993, 7249.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.258 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (0.192, 0.258, 0.327), stdev = 0.047
[info]   CI (99.9%): [0.075, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.82% complete, ETA 00:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 414335.615 ops/s
[info] # Warmup Iteration   2: 627255.017 ops/s
[info] # Warmup Iteration   3: 638945.353 ops/s
[info] Iteration   1: 645721.296 ops/s
[info]                  ·gc.alloc.rate:                   2300.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2341.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5706.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 647685.725 ops/s
[info]                  ·gc.alloc.rate:                   2307.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5728.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 641325.918 ops/s
[info]                  ·gc.alloc.rate:                   2285.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5811.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 633866.999 ops/s
[info]                  ·gc.alloc.rate:                   2258.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5052.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 649679.191 ops/s
[info]                  ·gc.alloc.rate:                   2315.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5761.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   643655.826 ±(99.9%) 24203.739 ops/s [Average]
[info]   (min, avg, max) = (633866.999, 643655.826, 649679.191), stdev = 6285.634
[info]   CI (99.9%): [619452.087, 667859.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2293.601 ±(99.9%) 87.223 MB/sec [Average]
[info]   (min, avg, max) = (2258.475, 2293.601, 2315.790), stdev = 22.652
[info]   CI (99.9%): [2206.377, 2380.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.001, 5608.001, 5608.001), stdev = 0.001
[info]   CI (99.9%): [5608.001, 5608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296.150 ±(99.9%) 564.784 MB/sec [Average]
[info]   (min, avg, max) = (2034.954, 2296.150, 2379.006), stdev = 146.673
[info]   CI (99.9%): [1731.366, 2860.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5612.176 ±(99.9%) 1213.206 B/op [Average]
[info]   (min, avg, max) = (5052.976, 5612.176, 5811.355), stdev = 315.066
[info]   CI (99.9%): [4398.970, 6825.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.203, 0.354), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 82.12% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76971.338 ops/s
[info] # Warmup Iteration   2: 627317.714 ops/s
[info] # Warmup Iteration   3: 655435.881 ops/s
[info] Iteration   1: 668714.674 ops/s
[info]                  ·gc.alloc.rate:                   1012.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          972.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2289.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 647825.127 ops/s
[info]                  ·gc.alloc.rate:                   981.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3157.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 656478.602 ops/s
[info]                  ·gc.alloc.rate:               994.495 MB/sec
[info]                  ·gc.alloc.rate.norm:          2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      979.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2348.443 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 657841.128 ops/s
[info]                  ·gc.alloc.rate:                   996.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2356.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 651114.020 ops/s
[info]                  ·gc.alloc.rate:                   986.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2396.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   656394.710 ±(99.9%) 30757.229 ops/s [Average]
[info]   (min, avg, max) = (647825.127, 656394.710, 668714.674), stdev = 7987.555
[info]   CI (99.9%): [625637.481, 687151.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   994.387 ±(99.9%) 46.090 MB/sec [Average]
[info]   (min, avg, max) = (981.418, 994.387, 1012.853), stdev = 11.969
[info]   CI (99.9%): [948.297, 1040.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2384.001, 2384.001, 2384.001), stdev = 0.001
[info]   CI (99.9%): [2384.001, 2384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1045.867 ±(99.9%) 547.474 MB/sec [Average]
[info]   (min, avg, max) = (972.841, 1045.867, 1299.890), stdev = 142.177
[info]   CI (99.9%): [498.393, 1593.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2509.822 ±(99.9%) 1402.167 B/op [Average]
[info]   (min, avg, max) = (2289.823, 2509.822, 3157.616), stdev = 364.138
[info]   CI (99.9%): [1107.655, 3911.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.180 ±(99.9%) 0.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.303), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 82.42% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4394046.460 ops/s
[info] # Warmup Iteration   2: 4299794.315 ops/s
[info] # Warmup Iteration   3: 4424448.654 ops/s
[info] Iteration   1: 4488375.780 ops/s
[info]                  ·gc.alloc.rate:                   1117.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4441379.736 ops/s
[info]                  ·gc.alloc.rate:                   1106.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     472.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4581992.232 ops/s
[info]                  ·gc.alloc.rate:                   1141.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4546740.519 ops/s
[info]                  ·gc.alloc.rate:                   1132.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4578062.262 ops/s
[info]                  ·gc.alloc.rate:                   1140.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   4527310.106 ±(99.9%) 234568.443 ops/s [Average]
[info]   (min, avg, max) = (4441379.736, 4527310.106, 4581992.232), stdev = 60916.680
[info]   CI (99.9%): [4292741.663, 4761878.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1127.697 ±(99.9%) 58.494 MB/sec [Average]
[info]   (min, avg, max) = (1106.395, 1127.697, 1141.343), stdev = 15.191
[info]   CI (99.9%): [1069.203, 1186.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1136.827 ±(99.9%) 711.705 MB/sec [Average]
[info]   (min, avg, max) = (997.173, 1136.827, 1345.267), stdev = 184.828
[info]   CI (99.9%): [425.122, 1848.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   395.396 ±(99.9%) 253.452 B/op [Average]
[info]   (min, avg, max) = (344.479, 395.396, 472.345), stdev = 65.821
[info]   CI (99.9%): [141.944, 648.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.187), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.032, 0.066), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.73% complete, ETA 00:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125562.310 ops/s
[info] # Warmup Iteration   2: 354291.694 ops/s
[info] # Warmup Iteration   3: 369678.388 ops/s
[info] Iteration   1: 369191.583 ops/s
[info]                  ·gc.alloc.rate:                   1899.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8397.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 369436.281 ops/s
[info]                  ·gc.alloc.rate:                   1900.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8482.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.443 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 365112.722 ops/s
[info]                  ·gc.alloc.rate:                   1878.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8657.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 364917.249 ops/s
[info]                  ·gc.alloc.rate:                   1877.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7264.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 366507.494 ops/s
[info]                  ·gc.alloc.rate:                   1885.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8709.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   367033.066 ±(99.9%) 8364.691 ops/s [Average]
[info]   (min, avg, max) = (364917.249, 367033.066, 369436.281), stdev = 2172.284
[info]   CI (99.9%): [358668.375, 375397.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1888.125 ±(99.9%) 42.686 MB/sec [Average]
[info]   (min, avg, max) = (1877.625, 1888.125, 1900.386), stdev = 11.085
[info]   CI (99.9%): [1845.438, 1930.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.001), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1936.425 ±(99.9%) 547.992 MB/sec [Average]
[info]   (min, avg, max) = (1684.760, 1936.425, 2028.014), stdev = 142.312
[info]   CI (99.9%): [1388.433, 2484.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8302.107 ±(99.9%) 2286.425 B/op [Average]
[info]   (min, avg, max) = (7264.400, 8302.107, 8709.003), stdev = 593.777
[info]   CI (99.9%): [6015.682, 10588.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.392 ±(99.9%) 0.384 B/op [Average]
[info]   (min, avg, max) = (0.268, 0.392, 0.532), stdev = 0.100
[info]   CI (99.9%): [0.008, 0.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 83.03% complete, ETA 00:11:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254480.671 ops/s
[info] # Warmup Iteration   2: 478348.224 ops/s
[info] # Warmup Iteration   3: 498419.609 ops/s
[info] Iteration   1: 499582.356 ops/s
[info]                  ·gc.alloc.rate:                   1351.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4163.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 501007.788 ops/s
[info]                  ·gc.alloc.rate:                   1355.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4169.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 491382.216 ops/s
[info]                  ·gc.alloc.rate:                   1329.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4271.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 497969.436 ops/s
[info]                  ·gc.alloc.rate:                   1346.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4234.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 489085.345 ops/s
[info]                  ·gc.alloc.rate:                   1323.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4330.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   495805.428 ±(99.9%) 20260.479 ops/s [Average]
[info]   (min, avg, max) = (489085.345, 495805.428, 501007.788), stdev = 5261.582
[info]   CI (99.9%): [475544.949, 516065.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1341.056 ±(99.9%) 54.293 MB/sec [Average]
[info]   (min, avg, max) = (1323.172, 1341.056, 1355.276), stdev = 14.100
[info]   CI (99.9%): [1286.764, 1395.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4256.001, 4256.001, 4256.001), stdev = 0.001
[info]   CI (99.9%): [4256.001, 4256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1333.917 ±(99.9%) 37.285 MB/sec [Average]
[info]   (min, avg, max) = (1321.723, 1333.917, 1346.239), stdev = 9.683
[info]   CI (99.9%): [1296.632, 1371.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4233.908 ±(99.9%) 270.648 B/op [Average]
[info]   (min, avg, max) = (4163.597, 4233.908, 4330.195), stdev = 70.286
[info]   CI (99.9%): [3963.260, 4504.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.211 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (0.132, 0.211, 0.327), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 83.33% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2887139.481 ops/s
[info] # Warmup Iteration   2: 3471003.361 ops/s
[info] # Warmup Iteration   3: 3499568.247 ops/s
[info] Iteration   1: 3482994.446 ops/s
[info]                  ·gc.alloc.rate:               424.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231.172 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3440159.496 ops/s
[info]                  ·gc.alloc.rate:                   419.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3384175.069 ops/s
[info]                  ·gc.alloc.rate:                   412.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3386291.306 ops/s
[info]                  ·gc.alloc.rate:               413.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 307.758 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3478918.531 ops/s
[info]                  ·gc.alloc.rate:                   424.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3434507.770 ±(99.9%) 184805.073 ops/s [Average]
[info]   (min, avg, max) = (3384175.069, 3434507.770, 3482994.446), stdev = 47993.290
[info]   CI (99.9%): [3249702.697, 3619312.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   419.000 ±(99.9%) 22.563 MB/sec [Average]
[info]   (min, avg, max) = (412.839, 419.000, 424.893), stdev = 5.859
[info]   CI (99.9%): [396.437, 441.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   433.534 ±(99.9%) 576.640 MB/sec [Average]
[info]   (min, avg, max) = (331.064, 433.534, 662.148), stdev = 149.752
[info]   CI (99.9%): [≈ 0, 1010.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   198.889 ±(99.9%) 269.170 B/op [Average]
[info]   (min, avg, max) = (149.775, 198.889, 307.758), stdev = 69.903
[info]   CI (99.9%): [≈ 0, 468.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 3.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.782), stdev = 0.788
[info]   CI (99.9%): [≈ 0, 3.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.171 ±(99.9%) 1.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.815), stdev = 0.360
[info]   CI (99.9%): [≈ 0, 1.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.64% complete, ETA 00:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91035.922 ops/s
[info] # Warmup Iteration   2: 315611.613 ops/s
[info] # Warmup Iteration   3: 315780.875 ops/s
[info] Iteration   1: 313223.963 ops/s
[info]                  ·gc.alloc.rate:                   1154.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1301.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6542.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 321281.568 ops/s
[info]                  ·gc.alloc.rate:                   1184.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4805.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 320039.112 ops/s
[info]                  ·gc.alloc.rate:                   1179.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6469.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 322353.232 ops/s
[info]                  ·gc.alloc.rate:                   1187.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6472.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 322828.454 ops/s
[info]                  ·gc.alloc.rate:                   1189.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4873.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   319945.266 ±(99.9%) 15047.286 ops/s [Average]
[info]   (min, avg, max) = (313223.963, 319945.266, 322828.454), stdev = 3907.732
[info]   CI (99.9%): [304897.979, 334992.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1179.054 ±(99.9%) 55.576 MB/sec [Average]
[info]   (min, avg, max) = (1154.217, 1179.054, 1189.647), stdev = 14.433
[info]   CI (99.9%): [1123.478, 1234.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5800.001, 5800.001, 5800.001), stdev = 0.001
[info]   CI (99.9%): [5800.001, 5800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1184.742 ±(99.9%) 684.847 MB/sec [Average]
[info]   (min, avg, max) = (980.986, 1184.742, 1325.644), stdev = 177.852
[info]   CI (99.9%): [499.895, 1869.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5832.564 ±(99.9%) 3494.778 B/op [Average]
[info]   (min, avg, max) = (4805.251, 5832.564, 6542.219), stdev = 907.583
[info]   CI (99.9%): [2337.786, 9327.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.328 ±(99.9%) 0.583 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.328, 0.510), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.94% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1116411.357 ops/s
[info] # Warmup Iteration   2: 2073560.792 ops/s
[info] # Warmup Iteration   3: 2155120.198 ops/s
[info] Iteration   1: 2164894.169 ops/s
[info]                  ·gc.alloc.rate:                   3267.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2449.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2150803.414 ops/s
[info]                  ·gc.alloc.rate:                   3248.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2479.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2175075.866 ops/s
[info]                  ·gc.alloc.rate:                   3283.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2212.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2139490.639 ops/s
[info]                  ·gc.alloc.rate:                   3229.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2503.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2116450.207 ops/s
[info]                  ·gc.alloc.rate:                   3195.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2278.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2149342.859 ±(99.9%) 87916.974 ops/s [Average]
[info]   (min, avg, max) = (2116450.207, 2149342.859, 2175075.866), stdev = 22831.759
[info]   CI (99.9%): [2061425.885, 2237259.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3244.950 ±(99.9%) 132.684 MB/sec [Average]
[info]   (min, avg, max) = (3195.075, 3244.950, 3283.620), stdev = 34.457
[info]   CI (99.9%): [3112.267, 3377.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2376.000, 2376.000, 2376.000), stdev = 0.001
[info]   CI (99.9%): [2376.000, 2376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3256.432 ±(99.9%) 690.958 MB/sec [Average]
[info]   (min, avg, max) = (3057.193, 3256.432, 3403.806), stdev = 179.440
[info]   CI (99.9%): [2565.474, 3947.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2384.492 ±(99.9%) 503.512 B/op [Average]
[info]   (min, avg, max) = (2212.159, 2384.492, 2503.944), stdev = 130.761
[info]   CI (99.9%): [1880.980, 2888.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.146, 0.187), stdev = 0.025
[info]   CI (99.9%): [0.048, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.107 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.107, 0.136), stdev = 0.019
[info]   CI (99.9%): [0.035, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 84.24% complete, ETA 00:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64720.502 ops/s
[info] # Warmup Iteration   2: 292302.940 ops/s
[info] # Warmup Iteration   3: 298478.083 ops/s
[info] Iteration   1: 299315.583 ops/s
[info]                  ·gc.alloc.rate:                   704.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3422.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 296732.131 ops/s
[info]                  ·gc.alloc.rate:                   698.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3455.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 296398.036 ops/s
[info]                  ·gc.alloc.rate:                   697.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3462.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 285747.897 ops/s
[info]                  ·gc.alloc.rate:               672.497 MB/sec
[info]                  ·gc.alloc.rate.norm:          3704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3599.193 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 291696.482 ops/s
[info]                  ·gc.alloc.rate:               686.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3536.707 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   293978.026 ±(99.9%) 20635.242 ops/s [Average]
[info]   (min, avg, max) = (285747.897, 293978.026, 299315.583), stdev = 5358.907
[info]   CI (99.9%): [273342.784, 314613.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   692.014 ±(99.9%) 48.666 MB/sec [Average]
[info]   (min, avg, max) = (672.497, 692.014, 704.375), stdev = 12.638
[info]   CI (99.9%): [643.349, 740.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3704.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3704.001, 3704.002, 3704.002), stdev = 0.001
[info]   CI (99.9%): [3704.001, 3704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   652.824 ±(99.9%) 7.315 MB/sec [Average]
[info]   (min, avg, max) = (650.775, 652.824, 655.730), stdev = 1.900
[info]   CI (99.9%): [645.509, 660.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3495.275 ±(99.9%) 275.656 B/op [Average]
[info]   (min, avg, max) = (3422.140, 3495.275, 3599.193), stdev = 71.587
[info]   CI (99.9%): [3219.619, 3770.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.497 ±(99.9%) 3.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.497, 2.338), stdev = 1.030
[info]   CI (99.9%): [≈ 0, 4.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.614 ±(99.9%) 20.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.614, 12.295), stdev = 5.416
[info]   CI (99.9%): [≈ 0, 23.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.55% complete, ETA 00:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676207.655 ops/s
[info] # Warmup Iteration   2: 711876.022 ops/s
[info] # Warmup Iteration   3: 723372.987 ops/s
[info] Iteration   1: 728698.269 ops/s
[info]                  ·gc.alloc.rate:                   651.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1445.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 728065.814 ops/s
[info]                  ·gc.alloc.rate:                   651.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1445.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 729379.784 ops/s
[info]                  ·gc.alloc.rate:                   652.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1443.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 720289.520 ops/s
[info]                  ·gc.alloc.rate:               644.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 730.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 713624.234 ops/s
[info]                  ·gc.alloc.rate:                   638.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1476.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   724011.524 ±(99.9%) 26466.712 ops/s [Average]
[info]   (min, avg, max) = (713624.234, 724011.524, 729379.784), stdev = 6873.321
[info]   CI (99.9%): [697544.812, 750478.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   647.845 ±(99.9%) 23.428 MB/sec [Average]
[info]   (min, avg, max) = (638.606, 647.845, 652.540), stdev = 6.084
[info]   CI (99.9%): [624.416, 671.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1408.001, 1408.001, 1408.001), stdev = 0.001
[info]   CI (99.9%): [1408.001, 1408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   602.317 ±(99.9%) 576.452 MB/sec [Average]
[info]   (min, avg, max) = (334.521, 602.317, 669.686), stdev = 149.703
[info]   CI (99.9%): [25.865, 1178.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1308.431 ±(99.9%) 1244.782 B/op [Average]
[info]   (min, avg, max) = (730.675, 1308.431, 1476.526), stdev = 323.266
[info]   CI (99.9%): [63.649, 2553.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.117 ±(99.9%) 0.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.315), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.85% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3651253.726 ops/s
[info] # Warmup Iteration   2: 4050060.868 ops/s
[info] # Warmup Iteration   3: 4065506.020 ops/s
[info] Iteration   1: 4048481.550 ops/s
[info]                  ·gc.alloc.rate:                   2367.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2360.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4150115.253 ops/s
[info]                  ·gc.alloc.rate:                   2426.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     898.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4131994.959 ops/s
[info]                  ·gc.alloc.rate:                   2415.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     904.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4151967.509 ops/s
[info]                  ·gc.alloc.rate:                   2427.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     901.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4061400.176 ops/s
[info]                  ·gc.alloc.rate:                   2374.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     923.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4108791.889 ±(99.9%) 192469.118 ops/s [Average]
[info]   (min, avg, max) = (4048481.550, 4108791.889, 4151967.509), stdev = 49983.619
[info]   CI (99.9%): [3916322.772, 4301261.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2402.047 ±(99.9%) 112.427 MB/sec [Average]
[info]   (min, avg, max) = (2367.133, 2402.047, 2427.139), stdev = 29.197
[info]   CI (99.9%): [2289.620, 2514.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2373.406 ±(99.9%) 34.160 MB/sec [Average]
[info]   (min, avg, max) = (2360.159, 2373.406, 2382.859), stdev = 8.871
[info]   CI (99.9%): [2339.245, 2407.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   909.129 ±(99.9%) 41.240 B/op [Average]
[info]   (min, avg, max) = (898.360, 909.129, 923.397), stdev = 10.710
[info]   CI (99.9%): [867.890, 950.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.005, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.043, 0.056), stdev = 0.011
[info]   CI (99.9%): [0.002, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 85.15% complete, ETA 00:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7314505.281 ops/s
[info] # Warmup Iteration   2: 7911012.230 ops/s
[info] # Warmup Iteration   3: 8254299.821 ops/s
[info] Iteration   1: 7973081.900 ops/s
[info]                  ·gc.alloc.rate:                   851.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7906678.471 ops/s
[info]                  ·gc.alloc.rate:                   844.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8055304.638 ops/s
[info]                  ·gc.alloc.rate:               859.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130.806 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 8287893.571 ops/s
[info]                  ·gc.alloc.rate:                   884.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8114915.998 ops/s
[info]                  ·gc.alloc.rate:                   866.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8067574.916 ±(99.9%) 563789.515 ops/s [Average]
[info]   (min, avg, max) = (7906678.471, 8067574.916, 8287893.571), stdev = 146414.347
[info]   CI (99.9%): [7503785.400, 8631364.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   861.308 ±(99.9%) 59.713 MB/sec [Average]
[info]   (min, avg, max) = (844.313, 861.308, 884.708), stdev = 15.507
[info]   CI (99.9%): [801.595, 921.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   804.002 ±(99.9%) 705.787 MB/sec [Average]
[info]   (min, avg, max) = (669.051, 804.002, 1005.961), stdev = 183.291
[info]   CI (99.9%): [98.215, 1509.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   156.770 ±(99.9%) 136.182 B/op [Average]
[info]   (min, avg, max) = (130.302, 156.770, 199.695), stdev = 35.366
[info]   CI (99.9%): [20.589, 292.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.021), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.45% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19256.673 ops/s
[info] # Warmup Iteration   2: 172098.893 ops/s
[info] # Warmup Iteration   3: 185707.128 ops/s
[info] Iteration   1: 187423.470 ops/s
[info]                  ·gc.alloc.rate:                   1608.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              13504.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1631.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13701.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.699 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 186856.240 ops/s
[info]                  ·gc.alloc.rate:                   1603.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              13504.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13861.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.578 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 186082.899 ops/s
[info]                  ·gc.alloc.rate:                   1597.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              13504.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14037.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 185094.131 ops/s
[info]                  ·gc.alloc.rate:                   1588.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              13504.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11368.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 186380.449 ops/s
[info]                  ·gc.alloc.rate:                   1599.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              13504.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14183.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.879 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   186367.438 ±(99.9%) 3366.052 ops/s [Average]
[info]   (min, avg, max) = (185094.131, 186367.438, 187423.470), stdev = 874.153
[info]   CI (99.9%): [183001.386, 189733.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1599.344 ±(99.9%) 28.749 MB/sec [Average]
[info]   (min, avg, max) = (1588.108, 1599.344, 1608.031), stdev = 7.466
[info]   CI (99.9%): [1570.595, 1628.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13504.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13504.002, 13504.002, 13504.002), stdev = 0.001
[info]   CI (99.9%): [13504.002, 13504.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1591.045 ±(99.9%) 551.323 MB/sec [Average]
[info]   (min, avg, max) = (1336.967, 1591.045, 1680.358), stdev = 143.177
[info]   CI (99.9%): [1039.722, 2142.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13430.630 ±(99.9%) 4493.570 B/op [Average]
[info]   (min, avg, max) = (11368.504, 13430.630, 14183.781), stdev = 1166.966
[info]   CI (99.9%): [8937.060, 17924.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.187), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.878 ±(99.9%) 1.580 B/op [Average]
[info]   (min, avg, max) = (0.528, 0.878, 1.578), stdev = 0.410
[info]   CI (99.9%): [≈ 0, 2.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.76% complete, ETA 00:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 498678.374 ops/s
[info] # Warmup Iteration   2: 735165.196 ops/s
[info] # Warmup Iteration   3: 750960.509 ops/s
[info] Iteration   1: 753558.324 ops/s
[info]                  ·gc.alloc.rate:                   2903.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3028.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6323.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 754420.427 ops/s
[info]                  ·gc.alloc.rate:                   2906.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5647.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 743208.511 ops/s
[info]                  ·gc.alloc.rate:                   2863.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6469.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 738366.347 ops/s
[info]                  ·gc.alloc.rate:                   2845.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5798.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 736854.879 ops/s
[info]                  ·gc.alloc.rate:                   2838.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5816.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   745281.698 ±(99.9%) 31936.581 ops/s [Average]
[info]   (min, avg, max) = (736854.879, 745281.698, 754420.427), stdev = 8293.829
[info]   CI (99.9%): [713345.117, 777218.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2871.696 ±(99.9%) 123.299 MB/sec [Average]
[info]   (min, avg, max) = (2838.981, 2871.696, 2906.893), stdev = 32.020
[info]   CI (99.9%): [2748.397, 2994.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.001, 6064.001, 6064.001), stdev = 0.001
[info]   CI (99.9%): [6064.001, 6064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2846.878 ±(99.9%) 685.175 MB/sec [Average]
[info]   (min, avg, max) = (2707.430, 2846.878, 3054.815), stdev = 177.938
[info]   CI (99.9%): [2161.703, 3532.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6011.218 ±(99.9%) 1391.367 B/op [Average]
[info]   (min, avg, max) = (5647.906, 6011.218, 6469.321), stdev = 361.334
[info]   CI (99.9%): [4619.851, 7402.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.263 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (0.176, 0.263, 0.391), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 86.06% complete, ETA 00:09:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2377120.366 ops/s
[info] # Warmup Iteration   2: 2718655.520 ops/s
[info] # Warmup Iteration   3: 2786823.477 ops/s
[info] Iteration   1: 2793253.019 ops/s
[info]                  ·gc.alloc.rate:                   1803.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1129.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2786351.799 ops/s
[info]                  ·gc.alloc.rate:                   1798.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2733286.319 ops/s
[info]                  ·gc.alloc.rate:               1764.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1686.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 970.843 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2778963.428 ops/s
[info]                  ·gc.alloc.rate:                   1794.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1149.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2761679.799 ops/s
[info]                  ·gc.alloc.rate:                   1783.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   2770706.873 ±(99.9%) 92396.380 ops/s [Average]
[info]   (min, avg, max) = (2733286.319, 2770706.873, 2793253.019), stdev = 23995.046
[info]   CI (99.9%): [2678310.493, 2863103.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1788.930 ±(99.9%) 59.877 MB/sec [Average]
[info]   (min, avg, max) = (1764.448, 1788.930, 1803.487), stdev = 15.550
[info]   CI (99.9%): [1729.053, 1848.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1819.269 ±(99.9%) 697.458 MB/sec [Average]
[info]   (min, avg, max) = (1679.306, 1819.269, 2029.843), stdev = 181.128
[info]   CI (99.9%): [1121.811, 2516.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1032.881 ±(99.9%) 376.406 B/op [Average]
[info]   (min, avg, max) = (948.603, 1032.881, 1149.172), stdev = 97.751
[info]   CI (99.9%): [656.475, 1409.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.36% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57200.259 ops/s
[info] # Warmup Iteration   2: 246371.734 ops/s
[info] # Warmup Iteration   3: 256436.914 ops/s
[info] Iteration   1: 253123.834 ops/s
[info]                  ·gc.alloc.rate:                   1814.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              11280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1966.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12227.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.165 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 255345.984 ops/s
[info]                  ·gc.alloc.rate:                   1830.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              11280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10200.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 256377.294 ops/s
[info]                  ·gc.alloc.rate:                   1838.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              11280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12296.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.895 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 250985.448 ops/s
[info]                  ·gc.alloc.rate:                   1798.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              11280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10537.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 251684.112 ops/s
[info]                  ·gc.alloc.rate:                   1804.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              11280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12665.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   253503.334 ±(99.9%) 8916.620 ops/s [Average]
[info]   (min, avg, max) = (250985.448, 253503.334, 256377.294), stdev = 2315.618
[info]   CI (99.9%): [244586.714, 262419.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1817.063 ±(99.9%) 64.632 MB/sec [Average]
[info]   (min, avg, max) = (1798.874, 1817.063, 1838.251), stdev = 16.785
[info]   CI (99.9%): [1752.430, 1881.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11280.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11280.002, 11280.002, 11280.002), stdev = 0.001
[info]   CI (99.9%): [11280.002, 11280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1866.300 ±(99.9%) 703.654 MB/sec [Average]
[info]   (min, avg, max) = (1655.002, 1866.300, 2025.707), stdev = 182.737
[info]   CI (99.9%): [1162.645, 2569.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11585.637 ±(99.9%) 4348.189 B/op [Average]
[info]   (min, avg, max) = (10200.978, 11585.637, 12665.893), stdev = 1129.211
[info]   CI (99.9%): [7237.449, 15933.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.697 ±(99.9%) 1.242 B/op [Average]
[info]   (min, avg, max) = (0.391, 0.697, 1.165), stdev = 0.323
[info]   CI (99.9%): [≈ 0, 1.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.67% complete, ETA 00:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560083.774 ops/s
[info] # Warmup Iteration   2: 817726.970 ops/s
[info] # Warmup Iteration   3: 842718.462 ops/s
[info] Iteration   1: 848408.529 ops/s
[info]                  ·gc.alloc.rate:                   1957.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3086.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 855534.793 ops/s
[info]                  ·gc.alloc.rate:                   1974.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3697.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 835297.765 ops/s
[info]                  ·gc.alloc.rate:                   1928.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3809.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 846389.680 ops/s
[info]                  ·gc.alloc.rate:                   1953.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3773.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 848371.171 ops/s
[info]                  ·gc.alloc.rate:                   1957.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3775.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   846800.388 ±(99.9%) 28153.337 ops/s [Average]
[info]   (min, avg, max) = (835297.765, 846800.388, 855534.793), stdev = 7311.332
[info]   CI (99.9%): [818647.050, 874953.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1954.196 ±(99.9%) 64.284 MB/sec [Average]
[info]   (min, avg, max) = (1928.006, 1954.196, 1974.259), stdev = 16.694
[info]   CI (99.9%): [1889.912, 2018.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.001, 3632.001, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.000, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1952.014 ±(99.9%) 621.201 MB/sec [Average]
[info]   (min, avg, max) = (1663.924, 1952.014, 2035.100), stdev = 161.324
[info]   CI (99.9%): [1330.813, 2573.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3628.448 ±(99.9%) 1176.444 B/op [Average]
[info]   (min, avg, max) = (3086.878, 3628.448, 3809.475), stdev = 305.519
[info]   CI (99.9%): [2452.004, 4804.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.096, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.177 ±(99.9%) 0.369 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.177, 0.306), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.97% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 732265.022 ops/s
[info] # Warmup Iteration   2: 1505333.443 ops/s
[info] # Warmup Iteration   3: 1551862.814 ops/s
[info] Iteration   1: 1543388.602 ops/s
[info]                  ·gc.alloc.rate:               886.597 MB/sec
[info]                  ·gc.alloc.rate.norm:          904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 661.661 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 1521018.090 ops/s
[info]                  ·gc.alloc.rate:                   873.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1007.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1534327.249 ops/s
[info]                  ·gc.alloc.rate:                   881.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1002.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1541551.588 ops/s
[info]                  ·gc.alloc.rate:                   885.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1004.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1530575.616 ops/s
[info]                  ·gc.alloc.rate:                   879.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1534172.229 ±(99.9%) 34729.922 ops/s [Average]
[info]   (min, avg, max) = (1521018.090, 1534172.229, 1543388.602), stdev = 9019.250
[info]   CI (99.9%): [1499442.307, 1568902.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   881.417 ±(99.9%) 19.993 MB/sec [Average]
[info]   (min, avg, max) = (873.725, 881.417, 886.597), stdev = 5.192
[info]   CI (99.9%): [861.424, 901.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   848.688 ±(99.9%) 684.580 MB/sec [Average]
[info]   (min, avg, max) = (648.924, 848.688, 983.821), stdev = 177.783
[info]   CI (99.9%): [164.107, 1533.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   870.697 ±(99.9%) 707.355 B/op [Average]
[info]   (min, avg, max) = (661.661, 870.697, 1007.745), stdev = 183.698
[info]   CI (99.9%): [163.342, 1578.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.108), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.27% complete, ETA 00:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3998210.112 ops/s
[info] # Warmup Iteration   2: 4659810.960 ops/s
[info] # Warmup Iteration   3: 4682118.757 ops/s
[info] Iteration   1: 4706428.753 ops/s
[info]                  ·gc.alloc.rate:                   358.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4677266.527 ops/s
[info]                  ·gc.alloc.rate:               356.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 4729245.201 ops/s
[info]                  ·gc.alloc.rate:                   360.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4730439.531 ops/s
[info]                  ·gc.alloc.rate:                   360.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 4727387.583 ops/s
[info]                  ·gc.alloc.rate:                   360.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4714153.519 ±(99.9%) 87986.491 ops/s [Average]
[info]   (min, avg, max) = (4677266.527, 4714153.519, 4730439.531), stdev = 22849.812
[info]   CI (99.9%): [4626167.028, 4802140.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   359.454 ±(99.9%) 6.781 MB/sec [Average]
[info]   (min, avg, max) = (356.623, 359.454, 360.686), stdev = 1.761
[info]   CI (99.9%): [352.673, 366.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   367.361 ±(99.9%) 651.514 MB/sec [Average]
[info]   (min, avg, max) = (255.786, 367.361, 662.372), stdev = 169.196
[info]   CI (99.9%): [≈ 0, 1018.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   122.526 ±(99.9%) 216.001 B/op [Average]
[info]   (min, avg, max) = (85.541, 122.526, 220.454), stdev = 56.095
[info]   CI (99.9%): [≈ 0, 338.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.382 ±(99.9%) 3.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.813), stdev = 0.800
[info]   CI (99.9%): [≈ 0, 3.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.127 ±(99.9%) 1.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.603), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.58% complete, ETA 00:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180258.024 ops/s
[info] # Warmup Iteration   2: 467254.524 ops/s
[info] # Warmup Iteration   3: 482899.311 ops/s
[info] Iteration   1: 473728.157 ops/s
[info]                  ·gc.alloc.rate:                   1639.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5444.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 474271.467 ops/s
[info]                  ·gc.alloc.rate:                   1641.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5483.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 467670.625 ops/s
[info]                  ·gc.alloc.rate:                   1618.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5605.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 471218.195 ops/s
[info]                  ·gc.alloc.rate:                   1631.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5602.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 471546.954 ops/s
[info]                  ·gc.alloc.rate:                   1632.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5622.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   471687.079 ±(99.9%) 10044.287 ops/s [Average]
[info]   (min, avg, max) = (467670.625, 471687.079, 474271.467), stdev = 2608.469
[info]   CI (99.9%): [461642.793, 481731.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1632.904 ±(99.9%) 34.732 MB/sec [Average]
[info]   (min, avg, max) = (1618.838, 1632.904, 1641.661), stdev = 9.020
[info]   CI (99.9%): [1598.172, 1667.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1663.910 ±(99.9%) 71.927 MB/sec [Average]
[info]   (min, avg, max) = (1638.852, 1663.910, 1684.612), stdev = 18.679
[info]   CI (99.9%): [1591.983, 1735.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5551.720 ±(99.9%) 314.787 B/op [Average]
[info]   (min, avg, max) = (5444.423, 5551.720, 5622.803), stdev = 81.749
[info]   CI (99.9%): [5236.933, 5866.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.347 ±(99.9%) 0.494 B/op [Average]
[info]   (min, avg, max) = (0.209, 0.347, 0.553), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 87.88% complete, ETA 00:08:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53966.721 ops/s
[info] # Warmup Iteration   2: 554171.174 ops/s
[info] # Warmup Iteration   3: 578327.782 ops/s
[info] Iteration   1: 579210.819 ops/s
[info]                  ·gc.alloc.rate:                   962.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2640.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 578625.308 ops/s
[info]                  ·gc.alloc.rate:                   961.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2649.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 581054.245 ops/s
[info]                  ·gc.alloc.rate:                   965.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2646.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 591484.056 ops/s
[info]                  ·gc.alloc.rate:                   983.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2617.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 589886.917 ops/s
[info]                  ·gc.alloc.rate:                   980.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2638.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   584052.269 ±(99.9%) 23670.834 ops/s [Average]
[info]   (min, avg, max) = (578625.308, 584052.269, 591484.056), stdev = 6147.240
[info]   CI (99.9%): [560381.435, 607723.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   970.796 ±(99.9%) 39.270 MB/sec [Average]
[info]   (min, avg, max) = (961.740, 970.796, 983.112), stdev = 10.198
[info]   CI (99.9%): [931.527, 1010.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2616.001, 2616.001, 2616.001), stdev = 0.001
[info]   CI (99.9%): [2616.001, 2616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   979.058 ±(99.9%) 27.320 MB/sec [Average]
[info]   (min, avg, max) = (971.696, 979.058, 988.908), stdev = 7.095
[info]   CI (99.9%): [951.737, 1006.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2638.347 ±(99.9%) 48.734 B/op [Average]
[info]   (min, avg, max) = (2617.181, 2638.347, 2649.095), stdev = 12.656
[info]   CI (99.9%): [2589.614, 2687.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.191 ±(99.9%) 0.334 B/op [Average]
[info]   (min, avg, max) = (0.111, 0.191, 0.283), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 88.18% complete, ETA 00:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2800223.549 ops/s
[info] # Warmup Iteration   2: 3292337.649 ops/s
[info] # Warmup Iteration   3: 3342174.148 ops/s
[info] Iteration   1: 3237630.645 ops/s
[info]                  ·gc.alloc.rate:                   1530.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3316460.778 ops/s
[info]                  ·gc.alloc.rate:                   1568.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3297258.082 ops/s
[info]                  ·gc.alloc.rate:                   1558.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3276797.934 ops/s
[info]                  ·gc.alloc.rate:                   1549.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3320476.024 ops/s
[info]                  ·gc.alloc.rate:                   1570.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     802.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3289724.693 ±(99.9%) 130554.795 ops/s [Average]
[info]   (min, avg, max) = (3237630.645, 3289724.693, 3320476.024), stdev = 33904.666
[info]   CI (99.9%): [3159169.897, 3420279.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1555.354 ±(99.9%) 62.706 MB/sec [Average]
[info]   (min, avg, max) = (1530.446, 1555.354, 1570.419), stdev = 16.285
[info]   CI (99.9%): [1492.647, 1618.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.988 ±(99.9%) 578.727 MB/sec [Average]
[info]   (min, avg, max) = (1345.730, 1613.988, 1693.251), stdev = 150.294
[info]   CI (99.9%): [1035.260, 2192.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   772.164 ±(99.9%) 280.668 B/op [Average]
[info]   (min, avg, max) = (642.325, 772.164, 810.876), stdev = 72.889
[info]   CI (99.9%): [491.496, 1052.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (0.030, 0.044, 0.061), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.48% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109344.658 ops/s
[info] # Warmup Iteration   2: 300882.966 ops/s
[info] # Warmup Iteration   3: 308737.884 ops/s
[info] Iteration   1: 311229.934 ops/s
[info]                  ·gc.alloc.rate:                   1645.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8283.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 302345.558 ops/s
[info]                  ·gc.alloc.rate:                   1598.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8601.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 304797.796 ops/s
[info]                  ·gc.alloc.rate:                   1611.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6875.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 306431.750 ops/s
[info]                  ·gc.alloc.rate:                   1619.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8599.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.855 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 308333.873 ops/s
[info]                  ·gc.alloc.rate:                   1629.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8594.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   306627.782 ±(99.9%) 13031.923 ops/s [Average]
[info]   (min, avg, max) = (302345.558, 306627.782, 311229.934), stdev = 3384.349
[info]   CI (99.9%): [293595.860, 319659.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1620.916 ±(99.9%) 68.958 MB/sec [Average]
[info]   (min, avg, max) = (1598.275, 1620.916, 1645.282), stdev = 17.908
[info]   CI (99.9%): [1551.958, 1689.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8320.001, 8320.001, 8320.002), stdev = 0.001
[info]   CI (99.9%): [8320.001, 8320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1595.999 ±(99.9%) 573.343 MB/sec [Average]
[info]   (min, avg, max) = (1331.585, 1595.999, 1683.707), stdev = 148.895
[info]   CI (99.9%): [1022.656, 2169.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8191.008 ±(99.9%) 2879.040 B/op [Average]
[info]   (min, avg, max) = (6875.942, 8191.008, 8601.479), stdev = 747.677
[info]   CI (99.9%): [5311.968, 11070.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.167), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.427 ±(99.9%) 1.050 B/op [Average]
[info]   (min, avg, max) = (0.107, 0.427, 0.855), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.79% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230237.818 ops/s
[info] # Warmup Iteration   2: 471456.853 ops/s
[info] # Warmup Iteration   3: 477480.307 ops/s
[info] Iteration   1: 479858.701 ops/s
[info]                  ·gc.alloc.rate:                   1304.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4335.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 481023.183 ops/s
[info]                  ·gc.alloc.rate:                   1308.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4344.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 477191.539 ops/s
[info]                  ·gc.alloc.rate:                   1297.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4399.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 477064.104 ops/s
[info]                  ·gc.alloc.rate:                   1297.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3314.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 477782.156 ops/s
[info]                  ·gc.alloc.rate:                   1299.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4428.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   478583.937 ±(99.9%) 6797.903 ops/s [Average]
[info]   (min, avg, max) = (477064.104, 478583.937, 481023.183), stdev = 1765.394
[info]   CI (99.9%): [471786.034, 485381.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1301.468 ±(99.9%) 18.527 MB/sec [Average]
[info]   (min, avg, max) = (1297.357, 1301.468, 1308.113), stdev = 4.811
[info]   CI (99.9%): [1282.941, 1319.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.001), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1266.553 ±(99.9%) 564.830 MB/sec [Average]
[info]   (min, avg, max) = (1004.570, 1266.553, 1344.302), stdev = 146.685
[info]   CI (99.9%): [701.723, 1831.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4164.594 ±(99.9%) 1836.689 B/op [Average]
[info]   (min, avg, max) = (3314.092, 4164.594, 4428.232), stdev = 476.982
[info]   CI (99.9%): [2327.906, 6001.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.219 ±(99.9%) 0.285 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.219, 0.341), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 89.09% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2512550.193 ops/s
[info] # Warmup Iteration   2: 2926532.398 ops/s
[info] # Warmup Iteration   3: 3028366.625 ops/s
[info] Iteration   1: 3011939.712 ops/s
[info]                  ·gc.alloc.rate:                   566.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2976589.931 ops/s
[info]                  ·gc.alloc.rate:               559.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.053 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2913577.853 ops/s
[info]                  ·gc.alloc.rate:                   547.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2897373.721 ops/s
[info]                  ·gc.alloc.rate:                   545.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2878536.996 ops/s
[info]                  ·gc.alloc.rate:               541.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 181.193 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2935603.642 ±(99.9%) 217061.039 ops/s [Average]
[info]   (min, avg, max) = (2878536.996, 2935603.642, 3011939.712), stdev = 56370.063
[info]   CI (99.9%): [2718542.603, 3152664.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   552.135 ±(99.9%) 40.710 MB/sec [Average]
[info]   (min, avg, max) = (541.399, 552.135, 566.458), stdev = 10.572
[info]   CI (99.9%): [511.425, 592.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.017 ±(99.9%) 698.727 MB/sec [Average]
[info]   (min, avg, max) = (331.072, 530.017, 662.810), stdev = 181.457
[info]   CI (99.9%): [≈ 0, 1228.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   284.029 ±(99.9%) 372.893 B/op [Average]
[info]   (min, avg, max) = (175.053, 284.029, 359.862), stdev = 96.839
[info]   CI (99.9%): [≈ 0, 656.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 3.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.394, 1.803), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.206 ±(99.9%) 1.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.942), stdev = 0.412
[info]   CI (99.9%): [≈ 0, 1.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 89.39% complete, ETA 00:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92610.641 ops/s
[info] # Warmup Iteration   2: 339737.675 ops/s
[info] # Warmup Iteration   3: 346171.291 ops/s
[info] Iteration   1: 343959.960 ops/s
[info]                  ·gc.alloc.rate:                   1330.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5962.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 335868.574 ops/s
[info]                  ·gc.alloc.rate:                   1299.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6146.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 337604.518 ops/s
[info]                  ·gc.alloc.rate:                   1305.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6154.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 339206.913 ops/s
[info]                  ·gc.alloc.rate:                   1312.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6169.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 341740.556 ops/s
[info]                  ·gc.alloc.rate:                   1321.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6160.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   339676.104 ±(99.9%) 12421.278 ops/s [Average]
[info]   (min, avg, max) = (335868.574, 339676.104, 343959.960), stdev = 3225.766
[info]   CI (99.9%): [327254.826, 352097.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1313.968 ±(99.9%) 48.110 MB/sec [Average]
[info]   (min, avg, max) = (1299.216, 1313.968, 1330.543), stdev = 12.494
[info]   CI (99.9%): [1265.858, 1362.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.479 ±(99.9%) 53.243 MB/sec [Average]
[info]   (min, avg, max) = (1303.030, 1320.479, 1337.714), stdev = 13.827
[info]   CI (99.9%): [1267.236, 1373.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6118.636 ±(99.9%) 338.473 B/op [Average]
[info]   (min, avg, max) = (5962.113, 6118.636, 6169.440), stdev = 87.900
[info]   CI (99.9%): [5780.163, 6457.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.328 ±(99.9%) 0.730 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.328, 0.585), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 1.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.70% complete, ETA 00:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190104.243 ops/s
[info] # Warmup Iteration   2: 707489.860 ops/s
[info] # Warmup Iteration   3: 706523.897 ops/s
[info] Iteration   1: 714471.420 ops/s
[info]                  ·gc.alloc.rate:                   2113.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4406.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 715701.414 ops/s
[info]                  ·gc.alloc.rate:                   2117.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4425.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 716548.945 ops/s
[info]                  ·gc.alloc.rate:                   2119.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4443.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 714816.291 ops/s
[info]                  ·gc.alloc.rate:                   2114.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5217.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 713957.383 ops/s
[info]                  ·gc.alloc.rate:                   2112.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4489.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   715099.090 ±(99.9%) 3965.562 ops/s [Average]
[info]   (min, avg, max) = (713957.383, 715099.090, 716548.945), stdev = 1029.844
[info]   CI (99.9%): [711133.529, 719064.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2115.468 ±(99.9%) 11.764 MB/sec [Average]
[info]   (min, avg, max) = (2112.084, 2115.468, 2119.735), stdev = 3.055
[info]   CI (99.9%): [2103.704, 2127.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2088.338 ±(99.9%) 607.409 MB/sec [Average]
[info]   (min, avg, max) = (2000.359, 2088.338, 2369.515), stdev = 157.742
[info]   CI (99.9%): [1480.929, 2695.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4596.362 ±(99.9%) 1341.603 B/op [Average]
[info]   (min, avg, max) = (4406.589, 4596.362, 5217.205), stdev = 348.410
[info]   CI (99.9%): [3254.759, 5937.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 0.329 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.229, 0.320), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 90.00% complete, ETA 00:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458474.813 ops/s
[info] # Warmup Iteration   2: 1422954.859 ops/s
[info] # Warmup Iteration   3: 1451174.887 ops/s
[info] Iteration   1: 1458167.240 ops/s
[info]                  ·gc.alloc.rate:                   1104.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1054.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1451268.780 ops/s
[info]                  ·gc.alloc.rate:                   1099.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1418.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1483022.802 ops/s
[info]                  ·gc.alloc.rate:                   1123.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1048.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1482251.320 ops/s
[info]                  ·gc.alloc.rate:                   1122.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1053.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1451796.643 ops/s
[info]                  ·gc.alloc.rate:                   1100.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1442.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1465301.357 ±(99.9%) 61836.623 ops/s [Average]
[info]   (min, avg, max) = (1451268.780, 1465301.357, 1483022.802), stdev = 16058.775
[info]   CI (99.9%): [1403464.733, 1527137.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1110.050 ±(99.9%) 46.767 MB/sec [Average]
[info]   (min, avg, max) = (1099.428, 1110.050, 1123.367), stdev = 12.145
[info]   CI (99.9%): [1063.283, 1156.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.534 ±(99.9%) 705.900 MB/sec [Average]
[info]   (min, avg, max) = (977.312, 1119.534, 1331.493), stdev = 183.320
[info]   CI (99.9%): [413.634, 1825.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1203.602 ±(99.9%) 799.497 B/op [Average]
[info]   (min, avg, max) = (1048.030, 1203.602, 1442.852), stdev = 207.627
[info]   CI (99.9%): [404.105, 2003.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.072, 0.090), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 90.30% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4671057.154 ops/s
[info] # Warmup Iteration   2: 5246545.299 ops/s
[info] # Warmup Iteration   3: 5341287.839 ops/s
[info] Iteration   1: 5404046.579 ops/s
[info]                  ·gc.alloc.rate:                   164.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5434068.760 ops/s
[info]                  ·gc.alloc.rate:               165.724 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.087 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5427767.205 ops/s
[info]                  ·gc.alloc.rate:      165.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5383342.679 ops/s
[info]                  ·gc.alloc.rate:                   164.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5328500.068 ops/s
[info]                  ·gc.alloc.rate:               162.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75.556 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   5395545.058 ±(99.9%) 163805.720 ops/s [Average]
[info]   (min, avg, max) = (5328500.068, 5395545.058, 5434068.760), stdev = 42539.825
[info]   CI (99.9%): [5231739.339, 5559350.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   164.549 ±(99.9%) 4.989 MB/sec [Average]
[info]   (min, avg, max) = (162.507, 164.549, 165.724), stdev = 1.296
[info]   CI (99.9%): [159.560, 169.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.632 ±(99.9%) 440.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.632, 255.797), stdev = 114.393
[info]   CI (99.9%): [≈ 0, 645.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   59.785 ±(99.9%) 128.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.785, 75.556), stdev = 33.425
[info]   CI (99.9%): [≈ 0, 188.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.256 ±(99.9%) 2.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.256, 1.254), stdev = 0.558
[info]   CI (99.9%): [≈ 0, 2.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.365), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.61% complete, ETA 00:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31103.525 ops/s
[info] # Warmup Iteration   2: 217059.477 ops/s
[info] # Warmup Iteration   3: 214759.895 ops/s
[info] Iteration   1: 222184.635 ops/s
[info]                  ·gc.alloc.rate:                   1529.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11563.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 224744.279 ops/s
[info]                  ·gc.alloc.rate:                   1547.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9213.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 222244.388 ops/s
[info]                  ·gc.alloc.rate:                   1529.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11744.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.590 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 223941.978 ops/s
[info]                  ·gc.alloc.rate:                   1541.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9386.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 221970.561 ops/s
[info]                  ·gc.alloc.rate:                   1528.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11900.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.443 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   223017.168 ±(99.9%) 4803.233 ops/s [Average]
[info]   (min, avg, max) = (221970.561, 223017.168, 224744.279), stdev = 1247.384
[info]   CI (99.9%): [218213.935, 227820.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1535.163 ±(99.9%) 33.470 MB/sec [Average]
[info]   (min, avg, max) = (1528.456, 1535.163, 1547.511), stdev = 8.692
[info]   CI (99.9%): [1501.693, 1568.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.002, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1524.356 ±(99.9%) 700.899 MB/sec [Average]
[info]   (min, avg, max) = (1316.285, 1524.356, 1679.182), stdev = 182.021
[info]   CI (99.9%): [823.458, 2225.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10761.669 ±(99.9%) 5163.174 B/op [Average]
[info]   (min, avg, max) = (9213.503, 10761.669, 11900.179), stdev = 1340.860
[info]   CI (99.9%): [5598.495, 15924.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.558 ±(99.9%) 1.089 B/op [Average]
[info]   (min, avg, max) = (0.146, 0.558, 0.885), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.91% complete, ETA 00:06:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480224.864 ops/s
[info] # Warmup Iteration   2: 960073.927 ops/s
[info] # Warmup Iteration   3: 972728.092 ops/s
[info] Iteration   1: 995460.250 ops/s
[info]                  ·gc.alloc.rate:                   1735.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2624.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 958418.906 ops/s
[info]                  ·gc.alloc.rate:                   1671.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2740.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 962284.435 ops/s
[info]                  ·gc.alloc.rate:                   1677.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2744.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 995312.629 ops/s
[info]                  ·gc.alloc.rate:                   1735.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2666.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 993346.052 ops/s
[info]                  ·gc.alloc.rate:                   1732.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2679.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   980964.455 ±(99.9%) 72718.752 ops/s [Average]
[info]   (min, avg, max) = (958418.906, 980964.455, 995460.250), stdev = 18884.829
[info]   CI (99.9%): [908245.703, 1053683.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1710.524 ±(99.9%) 127.229 MB/sec [Average]
[info]   (min, avg, max) = (1671.108, 1710.524, 1735.655), stdev = 33.041
[info]   CI (99.9%): [1583.295, 1837.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2744.000, 2744.000, 2744.000), stdev = 0.001
[info]   CI (99.9%): [2744.000, 2744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.034 ±(99.9%) 49.335 MB/sec [Average]
[info]   (min, avg, max) = (1659.868, 1677.034, 1691.705), stdev = 12.812
[info]   CI (99.9%): [1627.700, 1726.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2691.012 ±(99.9%) 198.072 B/op [Average]
[info]   (min, avg, max) = (2624.184, 2691.012, 2744.564), stdev = 51.439
[info]   CI (99.9%): [2492.940, 2889.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.113 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.113, 0.165), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 91.21% complete, ETA 00:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 843346.234 ops/s
[info] # Warmup Iteration   2: 2399140.678 ops/s
[info] # Warmup Iteration   3: 2507940.739 ops/s
[info] Iteration   1: 2477837.702 ops/s
[info]                  ·gc.alloc.rate:                   1095.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     621.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2466618.078 ops/s
[info]                  ·gc.alloc.rate:                   1091.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2461154.329 ops/s
[info]                  ·gc.alloc.rate:                   1088.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     631.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2419808.474 ops/s
[info]                  ·gc.alloc.rate:                   1070.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     645.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2520703.926 ops/s
[info]                  ·gc.alloc.rate:                   1114.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     622.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2469224.502 ±(99.9%) 139345.744 ops/s [Average]
[info]   (min, avg, max) = (2419808.474, 2469224.502, 2520703.926), stdev = 36187.647
[info]   CI (99.9%): [2329878.758, 2608570.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1092.041 ±(99.9%) 61.605 MB/sec [Average]
[info]   (min, avg, max) = (1070.077, 1092.041, 1114.672), stdev = 15.999
[info]   CI (99.9%): [1030.436, 1153.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1053.084 ±(99.9%) 552.552 MB/sec [Average]
[info]   (min, avg, max) = (978.052, 1053.084, 1309.451), stdev = 143.496
[info]   CI (99.9%): [500.531, 1605.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   671.305 ±(99.9%) 354.872 B/op [Average]
[info]   (min, avg, max) = (621.143, 671.305, 835.239), stdev = 92.159
[info]   CI (99.9%): [316.433, 1026.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.083), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.048, 0.053), stdev = 0.012
[info]   CI (99.9%): [0.003, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.52% complete, ETA 00:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4524368.195 ops/s
[info] # Warmup Iteration   2: 7022486.445 ops/s
[info] # Warmup Iteration   3: 7033234.609 ops/s
[info] Iteration   1: 6927029.753 ops/s
[info]                  ·gc.alloc.rate:                   563.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7135948.074 ops/s
[info]                  ·gc.alloc.rate:               580.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146.406 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 7139601.105 ops/s
[info]                  ·gc.alloc.rate:                   580.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7107964.431 ops/s
[info]                  ·gc.alloc.rate:                   578.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7167543.680 ops/s
[info]                  ·gc.alloc.rate:               583.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.844 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   7095617.409 ±(99.9%) 371885.111 ops/s [Average]
[info]   (min, avg, max) = (6927029.753, 7095617.409, 7167543.680), stdev = 96577.382
[info]   CI (99.9%): [6723732.298, 7467502.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   577.116 ±(99.9%) 30.169 MB/sec [Average]
[info]   (min, avg, max) = (563.455, 577.116, 583.003), stdev = 7.835
[info]   CI (99.9%): [546.946, 607.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.943 ±(99.9%) 699.480 MB/sec [Average]
[info]   (min, avg, max) = (331.785, 530.943, 663.796), stdev = 181.653
[info]   CI (99.9%): [≈ 0, 1230.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   117.574 ±(99.9%) 152.698 B/op [Average]
[info]   (min, avg, max) = (72.844, 117.574, 146.912), stdev = 39.655
[info]   CI (99.9%): [≈ 0, 270.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.986 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.772), stdev = 0.775
[info]   CI (99.9%): [≈ 0, 3.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.088 ±(99.9%) 0.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.403), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.82% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4158186.286 ops/s
[info] # Warmup Iteration   2: 6309657.776 ops/s
[info] # Warmup Iteration   3: 6271501.082 ops/s
[info] Iteration   1: 6428295.093 ops/s
[info]                  ·gc.alloc.rate:               392.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62.630 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6489346.801 ops/s
[info]                  ·gc.alloc.rate:               395.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62.039 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6287580.660 ops/s
[info]                  ·gc.alloc.rate:                   383.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6345954.813 ops/s
[info]                  ·gc.alloc.rate:                   387.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6476418.222 ops/s
[info]                  ·gc.alloc.rate:               395.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80.615 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6405519.118 ±(99.9%) 333641.657 ops/s [Average]
[info]   (min, avg, max) = (6287580.660, 6405519.118, 6489346.801), stdev = 86645.679
[info]   CI (99.9%): [6071877.461, 6739160.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   390.749 ±(99.9%) 20.248 MB/sec [Average]
[info]   (min, avg, max) = (383.633, 390.749, 395.829), stdev = 5.258
[info]   CI (99.9%): [370.501, 410.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.885 ±(99.9%) 654.615 MB/sec [Average]
[info]   (min, avg, max) = (255.799, 367.885, 664.307), stdev = 170.001
[info]   CI (99.9%): [≈ 0, 1022.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   90.759 ±(99.9%) 166.602 B/op [Average]
[info]   (min, avg, max) = (62.039, 90.759, 166.236), stdev = 43.266
[info]   CI (99.9%): [≈ 0, 257.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 3.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.866), stdev = 0.832
[info]   CI (99.9%): [≈ 0, 3.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.094 ±(99.9%) 0.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.467), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 92.12% complete, ETA 00:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46887.458 ops/s
[info] # Warmup Iteration   2: 302847.647 ops/s
[info] # Warmup Iteration   3: 312373.963 ops/s
[info] Iteration   1: 309954.134 ops/s
[info]                  ·gc.alloc.rate:                   1595.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6639.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 308891.877 ops/s
[info]                  ·gc.alloc.rate:                   1589.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8398.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 314404.446 ops/s
[info]                  ·gc.alloc.rate:                   1617.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8314.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 311917.265 ops/s
[info]                  ·gc.alloc.rate:                   1604.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8443.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 314262.128 ops/s
[info]                  ·gc.alloc.rate:                   1616.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8427.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   311885.970 ±(99.9%) 9566.043 ops/s [Average]
[info]   (min, avg, max) = (308891.877, 311885.970, 314404.446), stdev = 2484.271
[info]   CI (99.9%): [302319.927, 321452.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1604.630 ±(99.9%) 47.916 MB/sec [Average]
[info]   (min, avg, max) = (1589.640, 1604.630, 1617.316), stdev = 12.444
[info]   CI (99.9%): [1556.714, 1652.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.001), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.881 ±(99.9%) 618.989 MB/sec [Average]
[info]   (min, avg, max) = (1308.219, 1594.881, 1682.749), stdev = 160.749
[info]   CI (99.9%): [975.893, 2213.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8044.819 ±(99.9%) 3030.220 B/op [Average]
[info]   (min, avg, max) = (6639.897, 8044.819, 8443.193), stdev = 786.939
[info]   CI (99.9%): [5014.598, 11075.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.336 ±(99.9%) 0.604 B/op [Average]
[info]   (min, avg, max) = (0.106, 0.336, 0.530), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.42% complete, ETA 00:05:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2318677.696 ops/s
[info] # Warmup Iteration   2: 3320529.255 ops/s
[info] # Warmup Iteration   3: 3366939.422 ops/s
[info] Iteration   1: 3409769.165 ops/s
[info]                  ·gc.alloc.rate:                   3102.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3035.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1401.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3373921.073 ops/s
[info]                  ·gc.alloc.rate:                   3070.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3051.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1422.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3390913.380 ops/s
[info]                  ·gc.alloc.rate:                   3085.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1419.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3404517.833 ops/s
[info]                  ·gc.alloc.rate:                   3097.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1416.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3370994.419 ops/s
[info]                  ·gc.alloc.rate:                   3067.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1430.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3390023.174 ±(99.9%) 67308.192 ops/s [Average]
[info]   (min, avg, max) = (3370994.419, 3390023.174, 3409769.165), stdev = 17479.724
[info]   CI (99.9%): [3322714.983, 3457331.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3084.600 ±(99.9%) 60.496 MB/sec [Average]
[info]   (min, avg, max) = (3067.086, 3084.600, 3102.396), stdev = 15.711
[info]   CI (99.9%): [3024.104, 3145.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3054.377 ±(99.9%) 44.570 MB/sec [Average]
[info]   (min, avg, max) = (3035.716, 3054.377, 3063.630), stdev = 11.575
[info]   CI (99.9%): [3009.807, 3098.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1418.009 ±(99.9%) 41.508 B/op [Average]
[info]   (min, avg, max) = (1401.222, 1418.009, 1430.387), stdev = 10.780
[info]   CI (99.9%): [1376.501, 1459.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.167), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.052, 0.078), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.73% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1817314.397 ops/s
[info] # Warmup Iteration   2: 3877371.397 ops/s
[info] # Warmup Iteration   3: 4003741.330 ops/s
[info] Iteration   1: 3932402.307 ops/s
[info]                  ·gc.alloc.rate:                   2358.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2328.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3949259.599 ops/s
[info]                  ·gc.alloc.rate:                   2368.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     936.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3976741.115 ops/s
[info]                  ·gc.alloc.rate:                   2385.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     935.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3936765.108 ops/s
[info]                  ·gc.alloc.rate:                   2361.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4001101.601 ops/s
[info]                  ·gc.alloc.rate:                   2400.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     935.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3959253.946 ±(99.9%) 111994.716 ops/s [Average]
[info]   (min, avg, max) = (3932402.307, 3959253.946, 4001101.601), stdev = 29084.672
[info]   CI (99.9%): [3847259.230, 4071248.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2374.862 ±(99.9%) 67.858 MB/sec [Average]
[info]   (min, avg, max) = (2358.607, 2374.862, 2400.169), stdev = 17.622
[info]   CI (99.9%): [2307.004, 2442.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2358.483 ±(99.9%) 76.815 MB/sec [Average]
[info]   (min, avg, max) = (2328.594, 2358.483, 2378.116), stdev = 19.949
[info]   CI (99.9%): [2281.668, 2435.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   937.500 ±(99.9%) 24.479 B/op [Average]
[info]   (min, avg, max) = (931.988, 937.500, 948.491), stdev = 6.357
[info]   CI (99.9%): [913.021, 961.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.040, 0.050), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.03% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6877240.336 ops/s
[info] # Warmup Iteration   2: 7460480.704 ops/s
[info] # Warmup Iteration   3: 7533949.873 ops/s
[info] Iteration   1: 7427438.939 ops/s
[info]                  ·gc.alloc.rate:                   1396.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7606118.069 ops/s
[info]                  ·gc.alloc.rate:                   1431.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7614342.631 ops/s
[info]                  ·gc.alloc.rate:                   1432.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7409475.966 ops/s
[info]                  ·gc.alloc.rate:                   1393.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7382628.853 ops/s
[info]                  ·gc.alloc.rate:                   1388.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7488000.892 ±(99.9%) 434163.661 ops/s [Average]
[info]   (min, avg, max) = (7382628.853, 7488000.892, 7614342.631), stdev = 112750.924
[info]   CI (99.9%): [7053837.231, 7922164.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1408.506 ±(99.9%) 81.946 MB/sec [Average]
[info]   (min, avg, max) = (1388.693, 1408.506, 1432.055), stdev = 21.281
[info]   CI (99.9%): [1326.559, 1490.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1414.040 ±(99.9%) 560.993 MB/sec [Average]
[info]   (min, avg, max) = (1344.223, 1414.040, 1674.573), stdev = 145.688
[info]   CI (99.9%): [853.047, 1975.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   297.337 ±(99.9%) 125.182 B/op [Average]
[info]   (min, avg, max) = (278.023, 297.337, 354.860), stdev = 32.509
[info]   CI (99.9%): [172.155, 422.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.015, 0.026), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 93.33% complete, ETA 00:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2922768.712 ops/s
[info] # Warmup Iteration   2: 4972563.855 ops/s
[info] # Warmup Iteration   3: 5133378.401 ops/s
[info] Iteration   1: 5139044.389 ops/s
[info]                  ·gc.alloc.rate:                   3186.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1029.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5145215.765 ops/s
[info]                  ·gc.alloc.rate:                   3190.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3046.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 5166116.385 ops/s
[info]                  ·gc.alloc.rate:                   3203.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1034.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 5158464.048 ops/s
[info]                  ·gc.alloc.rate:                   3199.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3062.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     934.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 5129116.416 ops/s
[info]                  ·gc.alloc.rate:                   3180.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5147591.400 ±(99.9%) 57160.005 ops/s [Average]
[info]   (min, avg, max) = (5129116.416, 5147591.400, 5166116.385), stdev = 14844.272
[info]   CI (99.9%): [5090431.396, 5204751.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3192.235 ±(99.9%) 35.489 MB/sec [Average]
[info]   (min, avg, max) = (3180.840, 3192.235, 3203.641), stdev = 9.216
[info]   CI (99.9%): [3156.746, 3227.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3254.027 ±(99.9%) 704.639 MB/sec [Average]
[info]   (min, avg, max) = (3046.347, 3254.027, 3404.214), stdev = 182.992
[info]   CI (99.9%): [2549.388, 3958.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   994.932 ±(99.9%) 218.428 B/op [Average]
[info]   (min, avg, max) = (931.851, 994.932, 1044.539), stdev = 56.725
[info]   CI (99.9%): [776.504, 1213.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.112, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.069, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.034, 0.038), stdev = 0.003
[info]   CI (99.9%): [0.021, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.64% complete, ETA 00:04:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1755204.506 ops/s
[info] # Warmup Iteration   2: 2728392.298 ops/s
[info] # Warmup Iteration   3: 2751180.125 ops/s
[info] Iteration   1: 2778736.689 ops/s
[info]                  ·gc.alloc.rate:                   1723.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2720354.340 ops/s
[info]                  ·gc.alloc.rate:                   1686.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     967.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2729435.527 ops/s
[info]                  ·gc.alloc.rate:                   1692.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     968.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2791714.597 ops/s
[info]                  ·gc.alloc.rate:                   1731.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2787279.485 ops/s
[info]                  ·gc.alloc.rate:                   1728.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     955.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2761504.128 ±(99.9%) 130520.682 ops/s [Average]
[info]   (min, avg, max) = (2720354.340, 2761504.128, 2791714.597), stdev = 33895.807
[info]   CI (99.9%): [2630983.445, 2892024.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1712.468 ±(99.9%) 80.958 MB/sec [Average]
[info]   (min, avg, max) = (1686.951, 1712.468, 1731.251), stdev = 21.025
[info]   CI (99.9%): [1631.509, 1793.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1678.881 ±(99.9%) 47.283 MB/sec [Average]
[info]   (min, avg, max) = (1661.611, 1678.881, 1692.351), stdev = 12.279
[info]   CI (99.9%): [1631.598, 1726.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   956.952 ±(99.9%) 44.631 B/op [Average]
[info]   (min, avg, max) = (941.162, 956.952, 968.948), stdev = 11.590
[info]   CI (99.9%): [912.321, 1001.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.052, 0.072), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.94% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2372131.199 ops/s
[info] # Warmup Iteration   2: 4646942.837 ops/s
[info] # Warmup Iteration   3: 4851665.394 ops/s
[info] Iteration   1: 4691437.289 ops/s
[info]                  ·gc.alloc.rate:                   1240.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     330.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4685225.397 ops/s
[info]                  ·gc.alloc.rate:                   1238.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     442.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4772888.559 ops/s
[info]                  ·gc.alloc.rate:                   1261.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4897104.480 ops/s
[info]                  ·gc.alloc.rate:               1294.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 428.622 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4864028.005 ops/s
[info]                  ·gc.alloc.rate:                   1285.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4782136.746 ±(99.9%) 373470.222 ops/s [Average]
[info]   (min, avg, max) = (4685225.397, 4782136.746, 4897104.480), stdev = 96989.031
[info]   CI (99.9%): [4408666.524, 5155606.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1264.046 ±(99.9%) 98.508 MB/sec [Average]
[info]   (min, avg, max) = (1238.586, 1264.046, 1294.304), stdev = 25.582
[info]   CI (99.9%): [1165.538, 1362.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1260.289 ±(99.9%) 595.812 MB/sec [Average]
[info]   (min, avg, max) = (983.915, 1260.289, 1340.475), stdev = 154.730
[info]   CI (99.9%): [664.477, 1856.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   414.431 ±(99.9%) 182.634 B/op [Average]
[info]   (min, avg, max) = (330.078, 414.431, 442.615), stdev = 47.429
[info]   CI (99.9%): [231.797, 597.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.048), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.24% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6836941.176 ops/s
[info] # Warmup Iteration   2: 9768930.044 ops/s
[info] # Warmup Iteration   3: 9915366.915 ops/s
[info] Iteration   1: 9980847.053 ops/s
[info]                  ·gc.alloc.rate:                   963.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9878190.355 ops/s
[info]                  ·gc.alloc.rate:                   953.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9986511.305 ops/s
[info]                  ·gc.alloc.rate:               964.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104.875 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 9985901.340 ops/s
[info]                  ·gc.alloc.rate:                   964.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9994013.464 ops/s
[info]                  ·gc.alloc.rate:                   965.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9965092.703 ±(99.9%) 187937.303 ops/s [Average]
[info]   (min, avg, max) = (9878190.355, 9965092.703, 9994013.464), stdev = 48806.721
[info]   CI (99.9%): [9777155.400, 10153030.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   962.577 ±(99.9%) 18.626 MB/sec [Average]
[info]   (min, avg, max) = (953.987, 962.577, 965.507), stdev = 4.837
[info]   CI (99.9%): [943.951, 981.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   932.349 ±(99.9%) 574.097 MB/sec [Average]
[info]   (min, avg, max) = (665.728, 932.349, 1004.192), stdev = 149.091
[info]   CI (99.9%): [358.251, 1506.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   147.254 ±(99.9%) 91.257 B/op [Average]
[info]   (min, avg, max) = (104.875, 147.254, 158.674), stdev = 23.699
[info]   CI (99.9%): [55.997, 238.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.55% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5505497.634 ops/s
[info] # Warmup Iteration   2: 7584405.101 ops/s
[info] # Warmup Iteration   3: 7558932.751 ops/s
[info] Iteration   1: 7533203.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7534318.029 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7528591.078 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7533780.781 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7535754.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7533129.546 ±(99.9%) 10426.584 ops/s [Average]
[info]   (min, avg, max) = (7528591.078, 7533129.546, 7535754.018), stdev = 2707.751
[info]   CI (99.9%): [7522702.961, 7543556.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.85% complete, ETA 00:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3823791.449 ops/s
[info] # Warmup Iteration   2: 5061975.433 ops/s
[info] # Warmup Iteration   3: 4961126.402 ops/s
[info] Iteration   1: 4913664.498 ops/s
[info]                  ·gc.alloc.rate:                   1573.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     532.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5046468.625 ops/s
[info]                  ·gc.alloc.rate:                   1615.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5032107.660 ops/s
[info]                  ·gc.alloc.rate:                   1611.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     525.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4970498.359 ops/s
[info]                  ·gc.alloc.rate:                   1592.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4995962.606 ops/s
[info]                  ·gc.alloc.rate:                   1600.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     426.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4991740.349 ±(99.9%) 203662.230 ops/s [Average]
[info]   (min, avg, max) = (4913664.498, 4991740.349, 5046468.625), stdev = 52890.434
[info]   CI (99.9%): [4788078.120, 5195402.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1598.740 ±(99.9%) 65.037 MB/sec [Average]
[info]   (min, avg, max) = (1573.427, 1598.740, 1615.981), stdev = 16.890
[info]   CI (99.9%): [1533.703, 1663.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1610.175 ±(99.9%) 553.757 MB/sec [Average]
[info]   (min, avg, max) = (1353.497, 1610.175, 1686.788), stdev = 143.809
[info]   CI (99.9%): [1056.418, 2163.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   507.665 ±(99.9%) 176.502 B/op [Average]
[info]   (min, avg, max) = (426.210, 507.665, 533.878), stdev = 45.837
[info]   CI (99.9%): [331.164, 684.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.024, 0.033), stdev = 0.006
[info]   CI (99.9%): [0.001, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 95.15% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 920179.124 ops/s
[info] # Warmup Iteration   2: 1348664.932 ops/s
[info] # Warmup Iteration   3: 1386131.503 ops/s
[info] Iteration   1: 1388149.803 ops/s
[info]                  ·gc.alloc.rate:                   1890.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2270.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1387761.885 ops/s
[info]                  ·gc.alloc.rate:                   1890.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1903.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1394895.739 ops/s
[info]                  ·gc.alloc.rate:                   1900.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2282.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1389159.183 ops/s
[info]                  ·gc.alloc.rate:                   1892.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2300.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1391756.808 ops/s
[info]                  ·gc.alloc.rate:                   1895.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1918.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1390344.683 ±(99.9%) 11487.569 ops/s [Average]
[info]   (min, avg, max) = (1387761.885, 1390344.683, 1394895.739), stdev = 2983.285
[info]   CI (99.9%): [1378857.114, 1401832.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1894.072 ±(99.9%) 15.437 MB/sec [Average]
[info]   (min, avg, max) = (1890.910, 1894.072, 1900.233), stdev = 4.009
[info]   CI (99.9%): [1878.636, 1909.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.000, 2144.000, 2144.000), stdev = 0.001
[info]   CI (99.9%): [2144.000, 2144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886.090 ±(99.9%) 700.403 MB/sec [Average]
[info]   (min, avg, max) = (1678.442, 1886.090, 2030.420), stdev = 181.892
[info]   CI (99.9%): [1185.687, 2586.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2134.909 ±(99.9%) 789.969 B/op [Average]
[info]   (min, avg, max) = (1903.094, 2134.909, 2300.442), stdev = 205.153
[info]   CI (99.9%): [1344.940, 2924.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.104 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.104, 0.142), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.45% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491544.469 ops/s
[info] # Warmup Iteration   2: 1067101.447 ops/s
[info] # Warmup Iteration   3: 1062523.343 ops/s
[info] Iteration   1: 1074526.532 ops/s
[info]                  ·gc.alloc.rate:                   693.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1072313.598 ops/s
[info]                  ·gc.alloc.rate:                   692.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     960.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1073823.121 ops/s
[info]                  ·gc.alloc.rate:                   693.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1440.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1072162.320 ops/s
[info]                  ·gc.alloc.rate:                   692.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1075690.725 ops/s
[info]                  ·gc.alloc.rate:               694.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 963.931 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1073703.259 ±(99.9%) 5759.197 ops/s [Average]
[info]   (min, avg, max) = (1072162.320, 1073703.259, 1075690.725), stdev = 1495.645
[info]   CI (99.9%): [1067944.062, 1079462.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   693.229 ±(99.9%) 3.458 MB/sec [Average]
[info]   (min, avg, max) = (692.224, 693.229, 694.390), stdev = 0.898
[info]   CI (99.9%): [689.771, 696.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.619 ±(99.9%) 563.278 MB/sec [Average]
[info]   (min, avg, max) = (654.152, 721.619, 983.274), stdev = 146.281
[info]   CI (99.9%): [158.341, 1284.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1057.572 ±(99.9%) 824.446 B/op [Average]
[info]   (min, avg, max) = (959.119, 1057.572, 1440.555), stdev = 214.106
[info]   CI (99.9%): [233.126, 1882.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.463 ±(99.9%) 3.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.463, 2.167), stdev = 0.953
[info]   CI (99.9%): [≈ 0, 4.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.678 ±(99.9%) 5.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.678, 3.174), stdev = 1.396
[info]   CI (99.9%): [≈ 0, 6.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.76% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1723299.470 ops/s
[info] # Warmup Iteration   2: 1815976.362 ops/s
[info] # Warmup Iteration   3: 1767209.187 ops/s
[info] Iteration   1: 1841970.183 ops/s
[info]                  ·gc.alloc.rate:               346.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1802847.583 ops/s
[info]                  ·gc.alloc.rate:               339.060 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 223.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1838501.983 ops/s
[info]                  ·gc.alloc.rate:                   345.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.303 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1784792.313 ops/s
[info]                  ·gc.alloc.rate:                   335.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     295.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1786537.361 ops/s
[info]                  ·gc.alloc.rate:                   336.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          334.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1810929.884 ±(99.9%) 106628.985 ops/s [Average]
[info]   (min, avg, max) = (1784792.313, 1810929.884, 1841970.183), stdev = 27691.209
[info]   CI (99.9%): [1704300.899, 1917558.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   340.630 ±(99.9%) 19.787 MB/sec [Average]
[info]   (min, avg, max) = (335.798, 340.630, 346.393), stdev = 5.139
[info]   CI (99.9%): [320.844, 360.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.279 ±(99.9%) 166.921 MB/sec [Average]
[info]   (min, avg, max) = (255.785, 303.279, 335.202), stdev = 43.349
[info]   CI (99.9%): [136.358, 470.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   263.760 ±(99.9%) 151.194 B/op [Average]
[info]   (min, avg, max) = (218.573, 263.760, 295.475), stdev = 39.265
[info]   CI (99.9%): [112.566, 414.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.317 ±(99.9%) 2.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.317, 1.522), stdev = 0.674
[info]   CI (99.9%): [≈ 0, 2.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 2.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.272, 1.303), stdev = 0.577
[info]   CI (99.9%): [≈ 0, 2.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 96.06% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 705513.080 ops/s
[info] # Warmup Iteration   2: 1147683.221 ops/s
[info] # Warmup Iteration   3: 1153238.335 ops/s
[info] Iteration   1: 1149767.223 ops/s
[info]                  ·gc.alloc.rate:                   712.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     898.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1116762.882 ops/s
[info]                  ·gc.alloc.rate:                   692.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1117726.587 ops/s
[info]                  ·gc.alloc.rate:                   693.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1123992.726 ops/s
[info]                  ·gc.alloc.rate:               696.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.505 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1149808.440 ops/s
[info]                  ·gc.alloc.rate:               713.025 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 904.071 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1131611.571 ±(99.9%) 64780.058 ops/s [Average]
[info]   (min, avg, max) = (1116762.882, 1131611.571, 1149808.440), stdev = 16823.175
[info]   CI (99.9%): [1066831.514, 1196391.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   701.724 ±(99.9%) 40.185 MB/sec [Average]
[info]   (min, avg, max) = (692.523, 701.724, 713.025), stdev = 10.436
[info]   CI (99.9%): [661.539, 741.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   657.998 ±(99.9%) 6.345 MB/sec [Average]
[info]   (min, avg, max) = (656.450, 657.998, 660.477), stdev = 1.648
[info]   CI (99.9%): [651.653, 664.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   915.337 ±(99.9%) 49.988 B/op [Average]
[info]   (min, avg, max) = (898.625, 915.337, 925.816), stdev = 12.982
[info]   CI (99.9%): [865.348, 965.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.147), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.36% complete, ETA 00:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 804298.146 ops/s
[info] # Warmup Iteration   2: 1248308.427 ops/s
[info] # Warmup Iteration   3: 1247106.665 ops/s
[info] Iteration   1: 1249766.459 ops/s
[info]                  ·gc.alloc.rate:                   946.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     832.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1239951.978 ops/s
[info]                  ·gc.alloc.rate:                   939.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1271826.219 ops/s
[info]                  ·gc.alloc.rate:               963.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      995.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1231.153 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1274529.042 ops/s
[info]                  ·gc.alloc.rate:                   965.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1232.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1253110.530 ops/s
[info]                  ·gc.alloc.rate:                   949.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1258.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1257836.845 ±(99.9%) 57168.436 ops/s [Average]
[info]   (min, avg, max) = (1239951.978, 1257836.845, 1274529.042), stdev = 14846.461
[info]   CI (99.9%): [1200668.409, 1315005.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   952.867 ±(99.9%) 43.444 MB/sec [Average]
[info]   (min, avg, max) = (939.101, 952.867, 965.307), stdev = 11.282
[info]   CI (99.9%): [909.423, 996.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   929.737 ±(99.9%) 578.465 MB/sec [Average]
[info]   (min, avg, max) = (661.090, 929.737, 1002.148), stdev = 150.226
[info]   CI (99.9%): [351.272, 1508.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1162.664 ±(99.9%) 713.241 B/op [Average]
[info]   (min, avg, max) = (832.189, 1162.664, 1259.002), stdev = 185.226
[info]   CI (99.9%): [449.424, 1875.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.159), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.67% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1208461.376 ops/s
[info] # Warmup Iteration   2: 2356417.774 ops/s
[info] # Warmup Iteration   3: 2432154.886 ops/s
[info] Iteration   1: 2436647.785 ops/s
[info]                  ·gc.alloc.rate:                   1089.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2381429.791 ops/s
[info]                  ·gc.alloc.rate:                   1065.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2407577.465 ops/s
[info]                  ·gc.alloc.rate:                   1077.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2387214.136 ops/s
[info]                  ·gc.alloc.rate:                   1068.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2434263.898 ops/s
[info]                  ·gc.alloc.rate:                   1088.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2409426.615 ±(99.9%) 98897.072 ops/s [Average]
[info]   (min, avg, max) = (2381429.791, 2409426.615, 2436647.785), stdev = 25683.255
[info]   CI (99.9%): [2310529.543, 2508323.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1077.899 ±(99.9%) 43.801 MB/sec [Average]
[info]   (min, avg, max) = (1065.278, 1077.899, 1089.891), stdev = 11.375
[info]   CI (99.9%): [1034.098, 1121.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1056.599 ±(99.9%) 555.480 MB/sec [Average]
[info]   (min, avg, max) = (982.544, 1056.599, 1314.408), stdev = 144.256
[info]   CI (99.9%): [501.118, 1612.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   690.652 ±(99.9%) 384.245 B/op [Average]
[info]   (min, avg, max) = (634.661, 690.652, 868.640), stdev = 99.787
[info]   CI (99.9%): [306.408, 1074.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.041, 0.069), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 6.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.97% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1826407.818 ops/s
[info] # Warmup Iteration   2: 2515002.543 ops/s
[info] # Warmup Iteration   3: 2587269.005 ops/s
[info] Iteration   1: 2600068.598 ops/s
[info]                  ·gc.alloc.rate:                   607.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     401.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2519857.621 ops/s
[info]                  ·gc.alloc.rate:                   589.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2599871.512 ops/s
[info]                  ·gc.alloc.rate:                   608.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2539819.368 ops/s
[info]                  ·gc.alloc.rate:                   593.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2607692.742 ops/s
[info]                  ·gc.alloc.rate:                   609.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2573461.968 ±(99.9%) 156204.887 ops/s [Average]
[info]   (min, avg, max) = (2519857.621, 2573461.968, 2607692.742), stdev = 40565.913
[info]   CI (99.9%): [2417257.082, 2729666.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   601.760 ±(99.9%) 36.650 MB/sec [Average]
[info]   (min, avg, max) = (589.184, 601.760, 609.805), stdev = 9.518
[info]   CI (99.9%): [565.110, 638.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.288 ±(99.9%) 571.478 MB/sec [Average]
[info]   (min, avg, max) = (331.803, 597.288, 664.242), stdev = 148.411
[info]   CI (99.9%): [25.810, 1168.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   365.764 ±(99.9%) 355.783 B/op [Average]
[info]   (min, avg, max) = (200.818, 365.764, 414.403), stdev = 92.396
[info]   CI (99.9%): [9.981, 721.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.415 ±(99.9%) 3.079 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.415, 1.844), stdev = 0.800
[info]   CI (99.9%): [≈ 0, 3.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.251 ±(99.9%) 1.863 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.251, 1.117), stdev = 0.484
[info]   CI (99.9%): [≈ 0, 2.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.27% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1907051.395 ops/s
[info] # Warmup Iteration   2: 2641177.383 ops/s
[info] # Warmup Iteration   3: 2651058.314 ops/s
[info] Iteration   1: 2655788.574 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2655198.024 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2652816.834 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2662894.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2650426.292 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2655424.896 ±(99.9%) 18037.563 ops/s [Average]
[info]   (min, avg, max) = (2650426.292, 2655424.896, 2662894.757), stdev = 4684.298
[info]   CI (99.9%): [2637387.333, 2673462.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.58% complete, ETA 00:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1742146.254 ops/s
[info] # Warmup Iteration   2: 2331017.937 ops/s
[info] # Warmup Iteration   3: 2366501.132 ops/s
[info] Iteration   1: 2339259.137 ops/s
[info]                  ·gc.alloc.rate:                   1070.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     667.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2365712.019 ops/s
[info]                  ·gc.alloc.rate:                   1082.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     661.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2359177.527 ops/s
[info]                  ·gc.alloc.rate:                   1079.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     887.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2363862.173 ops/s
[info]                  ·gc.alloc.rate:                   1081.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     667.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2360660.664 ops/s
[info]                  ·gc.alloc.rate:                   1080.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     670.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2357734.304 ±(99.9%) 40985.984 ops/s [Average]
[info]   (min, avg, max) = (2339259.137, 2357734.304, 2365712.019), stdev = 10643.930
[info]   CI (99.9%): [2316748.320, 2398720.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1078.761 ±(99.9%) 18.633 MB/sec [Average]
[info]   (min, avg, max) = (1070.375, 1078.761, 1082.252), stdev = 4.839
[info]   CI (99.9%): [1060.128, 1097.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1064.921 ±(99.9%) 571.608 MB/sec [Average]
[info]   (min, avg, max) = (992.754, 1064.921, 1330.292), stdev = 148.445
[info]   CI (99.9%): [493.313, 1636.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   710.748 ±(99.9%) 380.671 B/op [Average]
[info]   (min, avg, max) = (661.211, 710.748, 887.494), stdev = 98.859
[info]   CI (99.9%): [330.077, 1091.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.047, 0.069), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.88% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5573.921 ops/s
[info] # Warmup Iteration   2: 9828.532 ops/s
[info] # Warmup Iteration   3: 11031.886 ops/s
[info] Iteration   1: 11805.852 ops/s
[info]                  ·gc.alloc.rate:                   1673.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              223056.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264364.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.076 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11610.573 ops/s
[info]                  ·gc.alloc.rate:                   1645.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              223056.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180315.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.465 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11815.336 ops/s
[info]                  ·gc.alloc.rate:                   1674.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              223056.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267511.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.273 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 11786.405 ops/s
[info]                  ·gc.alloc.rate:                   1670.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179654.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11819.244 ops/s
[info]                  ·gc.alloc.rate:                   1675.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224713.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.772 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11767.482 ±(99.9%) 341.276 ops/s [Average]
[info]   (min, avg, max) = (11610.573, 11767.482, 11819.244), stdev = 88.628
[info]   CI (99.9%): [11426.206, 12108.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1667.896 ±(99.9%) 47.769 MB/sec [Average]
[info]   (min, avg, max) = (1645.909, 1667.896, 1675.368), stdev = 12.406
[info]   CI (99.9%): [1620.127, 1715.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   223072.196 ±(99.9%) 83.819 B/op [Average]
[info]   (min, avg, max) = (223056.037, 223072.196, 223096.039), stdev = 21.767
[info]   CI (99.9%): [222988.377, 223156.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1670.889 ±(99.9%) 1266.965 MB/sec [Average]
[info]   (min, avg, max) = (1330.532, 1670.889, 2007.852), stdev = 329.027
[info]   CI (99.9%): [403.923, 2937.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   223311.970 ±(99.9%) 165572.722 B/op [Average]
[info]   (min, avg, max) = (179654.243, 223311.970, 267511.985), stdev = 42998.710
[info]   CI (99.9%): [57739.248, 388884.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.428 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.146, 0.271), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.452 ±(99.9%) 56.920 B/op [Average]
[info]   (min, avg, max) = (2.772, 19.452, 36.076), stdev = 14.782
[info]   CI (99.9%): [≈ 0, 76.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.18% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5648.255 ops/s
[info] # Warmup Iteration   2: 15017.265 ops/s
[info] # Warmup Iteration   3: 15492.544 ops/s
[info] Iteration   1: 15461.856 ops/s
[info]                  ·gc.alloc.rate:               244.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26038.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15279.785 ops/s
[info]                  ·gc.alloc.rate:               241.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26348.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15343.683 ops/s
[info]                  ·gc.alloc.rate:                   242.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26236.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15427.444 ops/s
[info]                  ·gc.alloc.rate:                   243.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26093.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15155.759 ops/s
[info]                  ·gc.alloc.rate:                   239.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              24878.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          322.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33479.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15333.705 ±(99.9%) 471.140 ops/s [Average]
[info]   (min, avg, max) = (15155.759, 15333.705, 15461.856), stdev = 122.353
[info]   CI (99.9%): [14862.566, 15804.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   242.395 ±(99.9%) 7.455 MB/sec [Average]
[info]   (min, avg, max) = (239.579, 242.395, 244.417), stdev = 1.936
[info]   CI (99.9%): [234.940, 249.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24879.682 ±(99.9%) 2.989 B/op [Average]
[info]   (min, avg, max) = (24878.293, 24879.682, 24880.030), stdev = 0.776
[info]   CI (99.9%): [24876.693, 24882.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   269.111 ±(99.9%) 114.719 MB/sec [Average]
[info]   (min, avg, max) = (255.777, 269.111, 322.405), stdev = 29.792
[info]   CI (99.9%): [154.392, 383.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27639.173 ±(99.9%) 12579.746 B/op [Average]
[info]   (min, avg, max) = (26038.100, 27639.173, 33479.173), stdev = 3266.920
[info]   CI (99.9%): [15059.426, 40218.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 5.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.938), stdev = 1.307
[info]   CI (99.9%): [≈ 0, 5.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   62.253 ±(99.9%) 522.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 62.253, 305.121), stdev = 135.776
[info]   CI (99.9%): [≈ 0, 585.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.48% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19170.988 ops/s
[info] # Warmup Iteration   2: 28149.602 ops/s
[info] # Warmup Iteration   3: 35466.985 ops/s
[info] Iteration   1: 35541.637 ops/s
[info]                  ·gc.alloc.rate:                   393.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              17424.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22654.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 35966.720 ops/s
[info]                  ·gc.alloc.rate:               398.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          17424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11193.206 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 37127.860 ops/s
[info]                  ·gc.alloc.rate:                   411.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              17424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14076.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37220.784 ops/s
[info]                  ·gc.alloc.rate:                   412.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              17424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28067.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 37164.857 ops/s
[info]                  ·gc.alloc.rate:                   411.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              17424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14048.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36604.372 ±(99.9%) 3046.728 ops/s [Average]
[info]   (min, avg, max) = (35541.637, 36604.372, 37220.784), stdev = 791.226
[info]   CI (99.9%): [33557.644, 39651.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   405.253 ±(99.9%) 33.683 MB/sec [Average]
[info]   (min, avg, max) = (393.472, 405.253, 412.064), stdev = 8.747
[info]   CI (99.9%): [371.571, 438.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17424.019 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (17424.012, 17424.019, 17424.047), stdev = 0.016
[info]   CI (99.9%): [17423.958, 17424.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   418.999 ±(99.9%) 639.379 MB/sec [Average]
[info]   (min, avg, max) = (255.835, 418.999, 663.780), stdev = 166.045
[info]   CI (99.9%): [≈ 0, 1058.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18007.960 ±(99.9%) 27252.771 B/op [Average]
[info]   (min, avg, max) = (11193.206, 18007.960, 28067.744), stdev = 7077.458
[info]   CI (99.9%): [≈ 0, 45260.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 2.969 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.752), stdev = 0.771
[info]   CI (99.9%): [≈ 0, 3.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.820 ±(99.9%) 125.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.820, 74.258), stdev = 32.679
[info]   CI (99.9%): [≈ 0, 141.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.79% complete, ETA 00:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 947.543 ops/s
[info] # Warmup Iteration   2: 3183.335 ops/s
[info] # Warmup Iteration   3: 2958.657 ops/s
[info] Iteration   1: 3474.582 ops/s
[info]                  ·gc.alloc.rate:                   1107.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              501299.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     444800.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 3650.344 ops/s
[info]                  ·gc.alloc.rate:                   1163.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              501256.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     569235.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.950 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3576.898 ops/s
[info]                  ·gc.alloc.rate:                   1139.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              501256.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     438567.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 3572.400 ops/s
[info]                  ·gc.alloc.rate:               1138.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          501256.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1000.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 440648.437 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   5: 3604.780 ops/s
[info]                  ·gc.alloc.rate:               1148.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          501256.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 585062.372 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3575.801 ±(99.9%) 248.468 ops/s [Average]
[info]   (min, avg, max) = (3474.582, 3575.801, 3650.344), stdev = 64.526
[info]   CI (99.9%): [3327.333, 3824.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1139.428 ±(99.9%) 78.858 MB/sec [Average]
[info]   (min, avg, max) = (1107.344, 1139.428, 1163.124), stdev = 20.479
[info]   CI (99.9%): [1060.571, 1218.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   501264.866 ±(99.9%) 75.267 B/op [Average]
[info]   (min, avg, max) = (501256.118, 501264.866, 501299.832), stdev = 19.547
[info]   CI (99.9%): [501189.599, 501340.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1128.390 ±(99.9%) 712.431 MB/sec [Average]
[info]   (min, avg, max) = (982.540, 1128.390, 1340.702), stdev = 185.016
[info]   CI (99.9%): [415.959, 1840.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   495662.697 ±(99.9%) 287374.268 B/op [Average]
[info]   (min, avg, max) = (438567.352, 495662.697, 585062.372), stdev = 74630.185
[info]   CI (99.9%): [208288.429, 783036.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.182 ±(99.9%) 100.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.182, 64.107), stdev = 26.224
[info]   CI (99.9%): [≈ 0, 121.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.200, 18.000), stdev = 5.215
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.09% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25581.252 ops/s
[info] # Warmup Iteration   2: 58189.247 ops/s
[info] # Warmup Iteration   3: 59737.016 ops/s
[info] Iteration   1: 58041.094 ops/s
[info]                  ·gc.alloc.rate:                   741.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17512.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 58047.783 ops/s
[info]                  ·gc.alloc.rate:                   741.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17519.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 59365.501 ops/s
[info]                  ·gc.alloc.rate:                   758.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25747.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57564.071 ops/s
[info]                  ·gc.alloc.rate:                   735.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17757.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 57713.131 ops/s
[info]                  ·gc.alloc.rate:                   737.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17783.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   58146.316 ±(99.9%) 2745.762 ops/s [Average]
[info]   (min, avg, max) = (57564.071, 58146.316, 59365.501), stdev = 713.066
[info]   CI (99.9%): [55400.554, 60892.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   742.622 ±(99.9%) 35.035 MB/sec [Average]
[info]   (min, avg, max) = (735.151, 742.622, 758.158), stdev = 9.098
[info]   CI (99.9%): [707.587, 777.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.018 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (20099.988, 20100.018, 20100.037), stdev = 0.024
[info]   CI (99.9%): [20099.927, 20100.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   712.978 ±(99.9%) 555.866 MB/sec [Average]
[info]   (min, avg, max) = (645.967, 712.978, 971.170), stdev = 144.357
[info]   CI (99.9%): [157.111, 1268.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19264.107 ±(99.9%) 13964.241 B/op [Average]
[info]   (min, avg, max) = (17512.695, 19264.107, 25747.311), stdev = 3626.469
[info]   CI (99.9%): [5299.865, 33228.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.259 ±(99.9%) 3.108 B/op [Average]
[info]   (min, avg, max) = (1.104, 2.259, 3.386), stdev = 0.807
[info]   CI (99.9%): [≈ 0, 5.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.39% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57275.028 ops/s
[info] # Warmup Iteration   2: 77800.406 ops/s
[info] # Warmup Iteration   3: 78834.379 ops/s
[info] Iteration   1: 80099.958 ops/s
[info]                  ·gc.alloc.rate:                   525.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11537.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 79509.436 ops/s
[info]                  ·gc.alloc.rate:                   521.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6560.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 78245.271 ops/s
[info]                  ·gc.alloc.rate:                   513.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13318.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 80207.059 ops/s
[info]                  ·gc.alloc.rate:                   525.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12993.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 80602.476 ops/s
[info]                  ·gc.alloc.rate:               528.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6464.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   79732.840 ±(99.9%) 3538.979 ops/s [Average]
[info]   (min, avg, max) = (78245.271, 79732.840, 80602.476), stdev = 919.062
[info]   CI (99.9%): [76193.861, 83271.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   522.870 ±(99.9%) 23.422 MB/sec [Average]
[info]   (min, avg, max) = (513.053, 522.870, 528.772), stdev = 6.083
[info]   CI (99.9%): [499.448, 546.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.827 ±(99.9%) 655.669 MB/sec [Average]
[info]   (min, avg, max) = (331.225, 514.827, 662.142), stdev = 170.275
[info]   CI (99.9%): [≈ 0, 1170.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10174.936 ±(99.9%) 13131.714 B/op [Average]
[info]   (min, avg, max) = (6464.502, 10174.936, 13318.909), stdev = 3410.264
[info]   CI (99.9%): [≈ 0, 23306.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.405 ±(99.9%) 3.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.405, 1.879), stdev = 0.824
[info]   CI (99.9%): [≈ 0, 3.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.961 ±(99.9%) 62.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.961, 36.917), stdev = 16.193
[info]   CI (99.9%): [≈ 0, 70.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.70% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62012.497 ops/s
[info] # Warmup Iteration   2: 85305.306 ops/s
[info] # Warmup Iteration   3: 86847.081 ops/s
[info] Iteration   1: 87555.058 ops/s
[info]                  ·gc.alloc.rate:      12.462 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 85561.452 ops/s
[info]                  ·gc.alloc.rate:      12.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 85824.389 ops/s
[info]                  ·gc.alloc.rate:      12.215 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 85753.825 ops/s
[info]                  ·gc.alloc.rate:      12.205 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 84471.804 ops/s
[info]                  ·gc.alloc.rate:      12.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   85833.305 ±(99.9%) 4261.193 ops/s [Average]
[info]   (min, avg, max) = (84471.804, 85833.305, 87555.058), stdev = 1106.618
[info]   CI (99.9%): [81572.112, 90094.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.217 ±(99.9%) 0.605 MB/sec [Average]
[info]   (min, avg, max) = (12.024, 12.217, 12.462), stdev = 0.157
[info]   CI (99.9%): [11.612, 12.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.005, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.005, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:10:12
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    792678.820 ±   30743.431   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      2087.187 ±      81.312  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      2088.057 ±     589.905  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5      4146.952 ±    1246.061    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.100 ±       0.067  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.198 ±       0.135    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        26.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1578648.383 ±   67591.308   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1267.889 ±      54.476  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1264.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      1254.211 ±     569.773  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1251.026 ±     588.844    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.075 ±       0.193  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.075 ±       0.194    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        19.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        19.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   3698439.932 ±  105195.204   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       244.436 ±       6.756  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5       271.708 ±     136.464  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       115.580 ±      56.894    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.300 ±       2.484  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.127 ±       1.052    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         5.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        10.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    167666.494 ±    4608.609   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1404.861 ±      39.084  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     13184.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      1454.841 ±     698.855  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5     13653.708 ±    6570.442    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.067 ±       0.119  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.625 ±       1.108    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        22.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        26.000                    ms
[info] AdtBenchmark.writeCirce                                                                  thrpt    5    593830.775 ±   22495.324   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1965.031 ±      74.421  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      5208.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      1951.220 ±     597.750  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5172.888 ±    1655.790    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.092 ±       0.072  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.243 ±       0.187    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                        thrpt    5        29.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                         thrpt    5        22.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2085573.960 ±   49256.285   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       869.403 ±      21.108  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       656.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5       917.034 ±     566.178  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       691.982 ±     428.065    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.067 ±       0.286  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.050 ±       0.216    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        14.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        14.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5  10093127.387 ±  673191.679   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       513.075 ±      34.120  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       515.659 ±     657.507  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        80.272 ±     101.118    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.388 ±       2.980  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.059 ±       0.451    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         8.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        10.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    320865.400 ±   17456.384   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       993.333 ±      54.271  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      4872.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5       983.495 ±      28.719  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4824.250 ±     199.685    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.046 ±       0.088  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.224 ±       0.427    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        14.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1700872.158 ±   39087.873   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2628.843 ±      60.533  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2639.785 ±     564.650  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      2442.577 ±     555.340    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.108 ±       0.104  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.100 ±       0.096    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        39.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        36.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2582041.288 ±   68157.792   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1811.182 ±      47.786  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1802.319 ±     662.456  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1098.802 ±     413.642    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.146  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.056 ±       0.088    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5  10394104.496 ±  545457.320   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1320.988 ±      69.672  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5      1344.191 ±      22.745  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       203.535 ±       7.951    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.072  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.011 ±       0.011    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    626238.280 ±   28543.068   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1655.237 ±      75.540  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1661.960 ±      74.074  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4177.718 ±     354.266    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.092 ±       0.122  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.230 ±       0.300    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   2110686.525 ±   73583.659   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      2049.417 ±      72.251  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1528.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      2020.987 ±      57.537  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      1506.947 ±      84.084    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.087 ±       0.174  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.065 ±       0.130    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        30.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   6071714.823 ±  140244.943   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1666.694 ±      37.464  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1662.583 ±      74.219  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       430.924 ±      10.084    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.092 ±       0.072  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.024 ±       0.019    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  23619301.357 ± 1375184.255   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       720.429 ±      41.810  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       730.645 ±     572.430  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5        48.771 ±      40.629    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.160  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.006 ±       0.011    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  28640845.076 ±  217053.550   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1328329.051 ±   68854.971   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1964.798 ±     101.926  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2328.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1939.360 ±     637.568  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2296.653 ±     682.599    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.083 ±       0.080  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.099 ±       0.096    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        29.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     19365.806 ±     559.354   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1371.322 ±      39.618  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    111446.615 ±      10.486    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1338.821 ±      30.574  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    108807.151 ±    1944.479    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         6.089 ±       7.400    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     31275.472 ±    1131.743   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       839.737 ±      30.833  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     42253.423 ±      46.574    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       854.701 ±     696.958  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     42975.281 ±   34368.579    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.108 ±       0.183  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         5.452 ±       9.247    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     28602.032 ±    1610.484   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       384.320 ±      21.507  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     21144.016 ±       0.012    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       368.311 ±     308.730  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     20275.633 ±   17273.985    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.344 ±       2.785  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5        19.093 ±     154.790    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     25476.028 ±    1160.810   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1318.635 ±      60.529  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     81456.018 ±       0.013    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1327.383 ±      44.548  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     82002.218 ±    3304.774    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.067 ±       0.143  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         4.111 ±       8.896    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     27522.215 ±    1182.308   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1884.510 ±      80.920  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    107762.628 ±      66.905    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1882.833 ±     698.457  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5    107643.553 ±   38588.228    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         5.003 ±       6.057    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     27115.272 ±    1191.327   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1590.553 ±      70.414  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     92312.017 ±       0.012    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1595.826 ±     596.753  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     92608.083 ±   33949.952    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         5.320 ±       5.333    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     30700.457 ±    1362.948   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1703.627 ±      76.164  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5     87328.016 ±       0.010    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5      1680.106 ±      43.310  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5     86133.223 ±    4998.763    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.092 ±       0.176  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         4.693 ±       8.939    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        25.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     30716.176 ±     655.821   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1644.253 ±      35.351  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5     84248.015 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5      1612.310 ±     577.630  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5     82595.835 ±   28864.470    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5         4.048 ±       5.282    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      8291.754 ±     483.651   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1172.611 ±      68.905  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    222544.054 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1194.079 ±     700.331  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5    226568.471 ±  130771.616    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.046 ±       0.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         8.693 ±       6.798    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5     17795.435 ±     486.670   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1534.810 ±      42.012  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    135736.026 ±       0.015    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1543.173 ±     720.011  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    136415.996 ±   61230.446    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         6.625 ±      10.685    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        23.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        20.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     41456.787 ±    1374.103   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1144.604 ±      38.698  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     43448.288 ±       2.385    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1190.539 ±     698.170  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     45192.371 ±   26465.935    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         3.164 ±       3.782    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     60473.621 ±    4036.150   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       781.457 ±      52.309  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       799.199 ±     704.394  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     20826.317 ±   18911.329    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.629 ±       2.631    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                     thrpt    5     31728.139 ±     824.184   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2152.441 ±      55.471  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    106760.015 ±       0.010    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2146.495 ±     683.619  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    106466.870 ±   33901.117    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.543 ±       6.666    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                           thrpt    5        32.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                            thrpt    5        33.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     28521.428 ±     763.033   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1662.697 ±      44.539  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     91736.017 ±       0.010    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1667.650 ±      69.663  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     92012.086 ±    4248.660    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.100 ±       0.067  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.512 ±       3.644    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        25.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        25.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     36745.382 ±     433.781   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1693.339 ±      20.055  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     72528.012 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5      1681.466 ±      41.889  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     72020.596 ±    2359.614    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         3.211 ±       7.118    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        25.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        21.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     36735.517 ±    1030.290   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1628.826 ±      45.782  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     69784.012 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5      1612.576 ±     567.479  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     69078.639 ±   23814.136    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5         3.568 ±       2.461    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    326747.577 ±    4466.333   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1795.543 ±      24.312  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      8648.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1817.759 ±     694.777  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8754.948 ±    3342.504    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.096 ±       0.108  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.461 ±       0.520    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        27.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    691683.723 ±   39028.278   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       573.188 ±      32.246  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       588.854 ±     564.944  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1341.493 ±    1308.708    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.471 ±       3.788  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.061 ±       8.526    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1721268.088 ±   83273.064   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       332.539 ±      15.857  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       353.133 ±     364.557  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       322.359 ±     323.557    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.349 ±       2.707  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.322 ±       2.504    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    105983.574 ±    3676.412   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3850.936 ±     133.263  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      3805.483 ±     582.161  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     56499.667 ±    8186.450    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.133 ±       0.185  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.979 ±       2.733    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        56.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        45.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    372495.714 ±    8317.940   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1270.520 ±      28.381  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      5368.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1267.733 ±     594.469  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      5354.511 ±    2452.229    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.263 ±       0.673    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        19.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5    878253.876 ±   38638.048   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       620.519 ±      27.327  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       654.940 ±       6.148  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1173.806 ±      52.438    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.463 ±       3.580  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.836 ±       6.473    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2571161.659 ±  145596.469   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5      1189.660 ±      67.650  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1135.476 ±     704.051  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       694.406 ±     414.667    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.056 ±       0.101    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2189199.761 ±   51868.275   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    496756.669 ±   21332.236   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       580.797 ±      25.081  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5       591.857 ±     567.093  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1875.782 ±    1806.061    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.456 ±       3.528  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.472 ±      11.408    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    171102.344 ±    2153.271   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2103.336 ±      25.931  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     19344.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2093.757 ±     568.450  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     19255.281 ±    5172.370    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.112 ±       0.134  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.034 ±       1.234    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    418041.621 ±    6920.149   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       346.364 ±       5.715  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       349.596 ±     368.356  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1316.251 ±    1392.321    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.452 ±       3.715  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.698 ±      13.947    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5    981294.404 ±    6525.621   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       189.555 ±       1.367  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       204.642 ±     440.507  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       328.450 ±     707.015    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.003 ±       0.018  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.005 ±       0.029    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     81850.079 ±    1053.204   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3378.344 ±      42.304  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      3324.138 ±     563.281  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     63912.479 ±   11078.018    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.100 ±       0.143  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.922 ±       2.776    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        49.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        44.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    275466.288 ±    5335.388   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1523.366 ±      29.537  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      8704.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1541.154 ±     730.479  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      8806.855 ±    4215.279    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.499 ±       0.500    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        23.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                  thrpt    5   1480877.142 ±   65780.740   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       760.339 ±      33.625  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       787.861 ±     690.094  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       836.619 ±     718.360    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.083 ±       0.196  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.088 ±       0.205    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        13.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1975641.432 ±   35521.033   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       532.312 ±       9.346  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       530.858 ±     699.635  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       422.849 ±     557.350    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.388 ±       2.891  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.308 ±       2.296    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1958699.520 ±   12512.027   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     38768.904 ±     532.264   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1691.395 ±      21.950  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     68656.640 ±       5.416    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1674.350 ±      53.842  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     67964.095 ±    1508.645    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.196  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.380 ±       7.983    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     25075.215 ±     797.201   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1579.156 ±      50.311  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     99109.077 ±      28.195    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1610.963 ±     576.726  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    101080.926 ±   34945.143    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.100 ±       0.104  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         6.277 ±       6.628    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     57317.939 ±    3418.598   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1004.564 ±      59.949  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     27584.008 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       988.688 ±      24.991  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     27153.551 ±    1830.089    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.286 ±       3.475    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     70563.275 ±     406.924   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       474.617 ±       2.892  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10584.006 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.036 ±     628.685  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     10038.209 ±   14054.465    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.340 ±       2.702  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         7.585 ±      60.336    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     33524.204 ±    1590.653   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1718.291 ±      77.785  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80658.387 ±     646.083    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1739.132 ±     555.646  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     81638.720 ±   25946.879    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.522 ±       4.341    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     39034.666 ±    1310.621   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       615.776 ±      20.865  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24824.582 ±       4.916    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5       594.416 ±     566.839  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     23932.502 ±   22439.234    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.384 ±       3.042  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        15.586 ±     123.484    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     41661.472 ±     849.616   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       418.887 ±       8.553  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     15824.011 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       429.271 ±     573.771  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16221.047 ±   21699.865    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.442 ±       3.514  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        16.654 ±     132.416    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     43941.594 ±    1305.756   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       431.149 ±      12.911  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     15440.010 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       433.789 ±     577.575  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     15521.286 ±   20469.080    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.377 ±       3.015  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        13.670 ±     109.446    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     44813.645 ±     458.737   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       388.405 ±       3.867  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     13640.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5       367.474 ±     310.573  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     12907.783 ±   10984.964    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.375 ±       2.919  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5        13.215 ±     102.854    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     15175.271 ±     600.568   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1083.305 ±      42.659  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    112346.208 ±      25.617    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1066.371 ±     572.693  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    110569.218 ±   58260.641    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         6.503 ±      15.645    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     16363.101 ±     964.186   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       992.886 ±      57.509  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     95483.929 ±      59.816    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       989.227 ±      23.637  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     95149.565 ±    6051.447    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         7.228 ±       9.022    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        14.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     78037.771 ±    1559.008   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       203.116 ±       3.962  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       204.663 ±     440.552  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4131.455 ±    8893.754    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.010 ±       0.069  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.211 ±       1.412    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     13326.241 ±     595.498   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1277.154 ±      57.176  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    150806.827 ±      32.509    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1261.245 ±     573.440  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    148903.083 ±   66640.495    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         7.865 ±       4.132    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        19.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     56453.409 ±     807.574   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1399.557 ±      19.836  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     39016.008 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1404.642 ±     604.782  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     39163.213 ±   17117.547    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         2.089 ±       2.534    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        21.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        19.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                              thrpt    5     82101.218 ±    1864.799   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1243.258 ±      28.340  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     23832.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1259.597 ±     572.863  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     24138.145 ±   10726.471    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.355 ±       2.310    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        19.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    260872.527 ±   75577.661   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       413.722 ±     119.796  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       382.572 ±     617.737  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2339.802 ±    4030.913    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.376 ±       3.140  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.340 ±      19.543    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    337802.921 ±     346.780   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     72875.884 ±    2177.198   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1375.850 ±      41.407  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     29712.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1333.418 ±      39.550  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5     28796.401 ±     876.385    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.616 ±       1.493    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        20.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        18.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     26444.739 ±    1258.081   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       587.484 ±      27.776  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     34960.018 ±       0.013    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5       593.391 ±     568.252  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     35393.242 ±   34829.260    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.373 ±       3.078  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        22.152 ±     182.757    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                   thrpt    5     28120.032 ±    1356.623   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       387.546 ±      18.851  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     21687.916 ±      53.372    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       363.638 ±     486.245  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     20382.242 ±   27778.588    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.450 ±       3.743  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        25.404 ±     211.317    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    125144.243 ±    3827.222   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       488.627 ±      14.969  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.004 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       515.739 ±     656.796  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      6485.979 ±    8253.282    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.356 ±       2.756  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         4.537 ±      35.137    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     21693.899 ±     431.469   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1212.213 ±      24.127  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     87944.056 ±       0.286    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1253.352 ±     570.050  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     90944.251 ±   41839.563    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.228 ±       4.850    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        20.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    167713.101 ±    3058.587   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1097.275 ±      20.326  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1130.952 ±     694.173  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10609.504 ±    6429.264    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.587 ±       1.074    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        17.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                  thrpt    5    547651.161 ±   36716.171   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       554.023 ±      36.726  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       523.519 ±     690.886  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1502.232 ±    1957.693    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.458 ±       3.546  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.306 ±      10.093    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    588607.572 ±    5772.437   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       451.779 ±       4.433  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       448.726 ±     761.928  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1199.755 ±    2035.879    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.396 ±       3.075  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.059 ±       8.224    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    603448.748 ±    6359.515   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    329968.594 ±   14808.389   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       912.479 ±      41.308  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5       917.882 ±     566.789  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      4377.311 ±    2688.369    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.378 ±       0.508    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     35803.326 ±    1067.162   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1687.219 ±      51.528  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     74160.013 ±       0.009    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1680.240 ±      42.941  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     73855.637 ±    2242.151    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.071 ±       0.134  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         3.115 ±       5.938    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5     91604.030 ±     459.083   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1069.454 ±       4.539  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     18371.800 ±      32.678    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1056.919 ±     582.336  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     18155.951 ±    9983.274    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.073 ±       1.951    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    159329.571 ±    9788.457   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       103.670 ±       6.361  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       102.331 ±     539.560  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1022.427 ±    5392.317    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.496 ±       4.272  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         4.871 ±      41.937    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         3.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     38434.352 ±    1853.440   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2014.798 ±      97.093  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     82504.012 ±       0.009    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      2015.595 ±      67.616  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     82543.239 ±    3437.849    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.108 ±       0.088  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         4.434 ±       3.598    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     84409.131 ±     907.505   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       674.547 ±       7.060  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12576.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5       661.151 ±       6.059  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12326.380 ±     231.887    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.050 ±       0.166  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.930 ±       3.089    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5     96781.107 ±    2277.321   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       381.776 ±       8.961  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      6208.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       363.871 ±     485.445  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5917.633 ±    7882.032    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.454 ±       3.643  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         7.375 ±      59.137    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    112381.441 ±    2233.818   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       415.882 ±       8.338  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5824.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       433.738 ±     575.949  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      6081.010 ±    8174.603    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.381 ±       2.906  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.340 ±      40.671    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    112154.978 ±    3494.187   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       326.676 ±      10.066  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      4584.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5       352.416 ±     365.417  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5      4950.985 ±    5274.297    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5         0.369 ±       3.043  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.175 ±      42.695    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9571.607 ±     193.257   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1586.967 ±      33.244  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    260919.606 ±      53.487    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1542.678 ±     710.081  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    253607.897 ±  115483.384    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        12.334 ±      22.224    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5      9517.076 ±     301.333   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1464.217 ±      46.546  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    242110.720 ±      54.562    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1463.269 ±     671.431  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    241888.748 ±  107988.220    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        12.389 ±      15.022    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    119212.139 ±   10430.314   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       310.312 ±      26.987  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       286.623 ±     715.389  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3767.982 ±    9480.937    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.327 ±       2.636  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         4.213 ±      33.940    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5741.425 ±     322.507   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1527.546 ±      86.421  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    418664.076 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1532.197 ±     674.753  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    420165.148 ±  192992.040    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        17.070 ±      30.490    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        23.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     24251.129 ±    1290.438   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1785.254 ±      93.561  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    115855.410 ±     124.255    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1747.460 ±     585.100  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    113387.342 ±   36449.180    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.096 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         6.215 ±       4.655    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                               thrpt    5     28598.596 ±     871.285   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5      1824.584 ±      56.026  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5    100392.016 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1809.311 ±     725.056  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     99573.740 ±   40768.506    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.108 ±       0.154  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         5.946 ±       8.378    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        27.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    333006.313 ±    2830.526   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       734.610 ±       6.232  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       730.549 ±     577.613  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3454.026 ±    2766.057    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.200  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.374 ±       0.943    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    386389.569 ±     705.798   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28585.678 ±     907.908   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1874.589 ±      59.488  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    103200.017 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1879.441 ±     675.425  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    103463.160 ±   36825.843    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.096 ±       0.134  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         5.275 ±       7.462    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    128234.853 ±    3981.512   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2208.483 ±      68.704  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     27104.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2230.344 ±     740.978  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     27363.696 ±    8577.397    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.108 ±       0.183  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         1.326 ±       2.232    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        33.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    295230.533 ±   13761.678   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       417.191 ±      19.315  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       429.013 ±     572.021  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2294.284 ±    3177.788    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.452 ±       3.670  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.398 ±      19.465    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    708155.824 ±   35465.847   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       460.775 ±      22.847  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       450.095 ±     629.312  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1000.997 ±    1411.564    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.348 ±       2.686  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.767 ±       5.913    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     70570.577 ±    2458.462   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      2999.196 ±      96.866  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66884.020 ±     241.209    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      2980.311 ±     597.898  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     66474.220 ±   14134.337    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.150 ±       0.200  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         3.344 ±       4.443    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        40.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    212544.831 ±    3680.757   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1727.481 ±      30.018  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     12792.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1745.899 ±     536.661  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     12927.792 ±    3926.203    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.092 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.679 ±       0.336    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        26.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    842080.426 ±   10600.989   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       663.428 ±       8.315  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       655.535 ±       7.485  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1225.255 ±      18.403    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.062 ±       0.188  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.117 ±       0.352    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1004588.544 ±   58965.551   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       546.432 ±      32.215  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.841 ±     699.796  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       830.268 ±    1079.652    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.392 ±       2.929  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.622 ±       4.665    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5    989592.070 ±   60450.434   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     30573.116 ±     619.070   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1687.894 ±      35.041  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     86874.933 ±      25.129    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1674.602 ±      53.796  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     86193.662 ±    3716.313    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.283 ±       7.694    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                      thrpt    5    131170.655 ±    1306.385   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1804.316 ±      17.906  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     21648.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1748.105 ±     602.013  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5     20976.915 ±    7417.914    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.104  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.949 ±       1.253    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                             thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    191948.591 ±    8493.039   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1145.609 ±      50.052  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      9392.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1189.386 ±     698.100  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      9751.618 ±    5733.498    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.083 ±       0.139  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.684 ±       1.146    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        18.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    265802.545 ±    6273.327   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       864.769 ±      20.489  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       866.748 ±     707.623  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      5128.183 ±    4113.540    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.344 ±       0.776    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     67189.107 ±    1281.252   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2792.862 ±      53.164  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     65408.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      2769.275 ±     604.193  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     64867.726 ±   15154.578    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.125 ±       0.127  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.926 ±       2.961    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        41.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        41.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                     thrpt    5    167007.401 ±    1642.564   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1092.614 ±      10.510  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1130.918 ±     702.986  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     10656.894 ±    6621.036    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.588 ±       0.755    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                           thrpt    5        17.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                            thrpt    5        14.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    549196.098 ±    9584.828   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       555.542 ±       9.465  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       522.679 ±     689.969  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1499.208 ±    1993.986    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.479 ±       3.769  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.366 ±      10.734    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    566339.322 ±   24324.693   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       434.771 ±      18.876  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       382.460 ±     616.960  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      1062.947 ±    1709.108    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.373 ±       3.064  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.033 ±       8.487    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    588769.794 ±     378.787   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    344593.887 ±   12640.923   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       949.372 ±      34.891  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5       984.137 ±      25.943  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4495.136 ±     214.016    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.323 ±       0.716    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        15.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5      9250.268 ±     213.638   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1211.732 ±      28.582  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    206147.502 ±      27.094    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1201.597 ±     697.759  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5    204485.318 ±  120456.915    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5        10.627 ±      13.635    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5      9577.736 ±     360.341   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1147.959 ±      43.611  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    188599.891 ±      53.839    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1123.988 ±     676.533  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5    184638.788 ±  110126.173    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         8.888 ±      20.038    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        17.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    152423.989 ±    8598.259   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       991.884 ±      55.528  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5      1002.322 ±      15.935  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     10349.780 ±     682.400    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.557 ±       0.724    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        13.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      7796.216 ±     131.578   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1452.000 ±      24.921  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    293096.056 ±       0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1464.452 ±     688.574  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5    295651.698 ±  140571.489    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5        13.445 ±      13.462    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        22.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     19682.168 ±    1717.338   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1045.634 ±      92.287  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     83606.907 ±     113.228    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5       997.261 ±      19.770  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5     79777.435 ±    8146.030    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         6.281 ±      10.282    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        13.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                         thrpt    5     22618.405 ±     879.762   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       958.583 ±      37.213  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5     66696.021 ±       0.011    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       922.198 ±     568.874  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     64206.795 ±   40533.687    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.062 ±       0.139  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         4.356 ±       9.702    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                               thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                thrpt    5        13.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    701436.669 ±   23839.017   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1265.838 ±      43.127  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1271.198 ±     576.246  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      2852.699 ±    1313.680    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.178 ±       0.238    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        19.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    545396.195 ±    5444.877   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     21811.169 ±     711.005   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1005.840 ±      32.668  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     72576.232 ±       1.808    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1059.204 ±     558.165  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5     76430.562 ±   40308.057    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         3.909 ±       8.776    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     23365.950 ±    1692.887   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1233.934 ±      84.815  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     83114.918 ±     782.666    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1268.853 ±     576.234  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     85589.169 ±   42490.470    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.489 ±       5.936    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        19.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     25792.691 ±     645.776   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1194.600 ±      30.021  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     72890.990 ±      59.180    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1192.491 ±     719.779  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     72801.338 ±   45010.196    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.083 ±       0.139  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         5.083 ±       8.482    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    242950.950 ±   11900.038   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       632.295 ±      30.990  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       598.810 ±     573.471  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      3883.174 ±    3766.663    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.379 ±       1.014    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     15455.000 ±     581.908   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1581.071 ±      58.913  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    160984.030 ±       0.018    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1601.651 ±     556.930  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    163068.813 ±   56010.632    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         8.484 ±       5.826    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        21.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     42428.934 ±    1511.017   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1349.000 ±      48.178  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     50040.010 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1403.312 ±     545.629  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     52029.805 ±   18743.729    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.320 ±       3.022    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                             thrpt    5    112605.807 ±    4848.810   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5      1100.987 ±      47.535  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     15384.004 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1124.554 ±     706.976  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     15714.186 ±    9884.619    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.874 ±       0.797    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1215569.109 ±   51306.192   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1303.723 ±      54.659  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1338.571 ±      31.561  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1733.346 ±     104.243    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.086 ±       0.136    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    697083.173 ±     537.530   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     50397.997 ±    1443.399   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1335.669 ±      38.982  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     41704.009 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1331.957 ±      41.364  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     41588.378 ±     797.595    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.080 ±       3.264    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     14686.522 ±     318.806   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1333.786 ±      29.334  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    142928.032 ±       0.017    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1337.890 ±      30.944  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    143373.111 ±    5388.399    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         8.021 ±      12.921    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     15808.623 ±     784.123   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1236.597 ±      62.011  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    123076.581 ±      51.941    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1259.751 ±     587.088  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    125341.828 ±   56837.183    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         5.368 ±      11.970    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    267608.577 ±   13721.687   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       696.505 ±      35.916  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       732.434 ±     577.902  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      4303.206 ±    3262.848    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.392 ±       0.913    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     12173.663 ±     135.974   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1673.059 ±      17.524  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    216280.238 ±       1.737    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1671.038 ±      58.465  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    216020.107 ±    7746.772    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         7.538 ±       8.729    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     34222.253 ±    1450.505   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1299.900 ±      54.253  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     59773.529 ±      47.495    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1268.121 ±     556.014  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     58310.743 ±   25444.338    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.664 ±       7.847    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                             thrpt    5     40313.460 ±    1153.256   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5      1200.713 ±      34.166  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     46872.011 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1192.569 ±     700.255  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     46571.474 ±   27803.836    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.600 ±       4.088    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1255941.311 ±   50853.301   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1142.762 ±      46.488  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1135.014 ±     704.713  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1422.846 ±     898.722    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.079 ±       0.207  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.100 ±       0.266    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        17.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        14.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1262150.416 ±   21272.526   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5      3655.132 ±     117.104   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       493.600 ±      15.672  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5    212496.120 ±       0.016    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       445.414 ±     753.170  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    191744.538 ±  323931.447    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.431 ±       3.537  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       186.165 ±    1526.659    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    117451.972 ±    4312.784   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2182.353 ±      79.028  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     29240.004 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2162.000 ±     718.260  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     28972.958 ±    9880.410    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±       0.113  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.116 ±       1.522    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    251425.141 ±   10186.065   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       552.019 ±      22.316  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       574.274 ±     545.458  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3598.308 ±    3456.324    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.469 ±       3.633  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.931 ±      22.714    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        12.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    487954.321 ±    9846.867   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       615.123 ±      12.355  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       665.220 ±       2.331  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      2145.631 ±      44.179    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.368 ±       2.674  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.182 ±       8.585    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     69143.959 ±    1056.082   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2999.456 ±      54.125  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68260.450 ±     529.129    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      3047.361 ±      71.058  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     69351.103 ±    1587.969    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.158 ±       0.134  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.600 ±       3.033    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        45.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        39.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    181776.990 ±    7813.042   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1854.450 ±      79.809  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     16056.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1882.814 ±     706.935  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     16311.840 ±    6563.844    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.830 ±       0.803    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        28.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    481356.718 ±   29312.075   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       494.329 ±      29.734  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       509.153 ±     650.194  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1664.991 ±    2123.180    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.450 ±       3.654  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.506 ±      12.246    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    565515.540 ±   29785.613   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       442.701 ±      23.471  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       448.863 ±     762.470  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1248.446 ±    2105.480    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.390 ±       3.090  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.070 ±       8.464    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    654012.375 ±    3983.935   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     26690.442 ±    1096.643   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1467.440 ±      60.698  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     86516.562 ±      27.089    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1468.350 ±     690.387  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     86581.978 ±   41017.204    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         4.179 ±       5.452    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        20.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      6926.731 ±     272.496   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1095.447 ±      42.867  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    248864.064 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1066.055 ±     574.544  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    242377.558 ±  137693.646    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5        18.937 ±      29.107    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                         thrpt    5      7201.305 ±     388.763   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                          thrpt    5      1051.764 ±      56.943  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                     thrpt    5    229848.061 ±       0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5      1055.457 ±     554.895  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5    230901.348 ±  130374.999    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.092 ±       0.185  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        19.950 ±      39.378    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                thrpt    5        15.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5    100641.942 ±    4506.955   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       975.127 ±      43.656  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.004 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1001.435 ±      15.163  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     15660.968 ±     695.852    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.847 ±       1.428    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      6502.897 ±     322.337   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1186.863 ±      58.762  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    287232.068 ±       0.013    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1192.254 ±     690.269  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    288896.445 ±  176912.461    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.058 ±       0.164  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5        14.035 ±      39.166    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     16584.517 ±     880.316   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       978.490 ±      51.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     92845.280 ±     124.895    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5       995.748 ±      19.450  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5     94498.988 ±    5979.052    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5         7.891 ±       5.096    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                        thrpt    5     18673.455 ±     207.871   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                         thrpt    5       875.799 ±      10.246  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                    thrpt    5     73808.025 ±       0.014    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                thrpt    5       854.724 ±     688.901  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     72061.287 ±   58676.074    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.071 ±       0.134  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.972 ±      11.385    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                              thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                               thrpt    5        11.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    470927.165 ±   14876.747   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5      1067.677 ±      33.263  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5      1066.979 ±     559.946  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5      3565.243 ±    1849.402    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.209 ±       0.428    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        16.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    417003.410 ±    2748.710   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     18634.141 ±    1036.912   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       946.647 ±      48.305  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     79946.967 ±    2253.352    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5       925.317 ±     570.463  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5     78217.194 ±   49799.782    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5         0.046 ±       0.119  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5         3.874 ±      10.203    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        14.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     11828.478 ±     677.154   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1219.722 ±      69.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    162256.183 ±      30.832    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1201.412 ±     698.518  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    159910.854 ±   95213.033    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         8.301 ±      12.800    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     12274.498 ±     257.037   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1139.277 ±      24.761  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    146064.571 ±      61.782    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1123.719 ±     688.206  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5    144040.680 ±   87246.327    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         4.263 ±      15.476    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    170287.437 ±   14646.423   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       985.169 ±      84.771  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.003 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       934.300 ±     567.260  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      8647.832 ±    5539.383    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.691 ±       0.641    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                 thrpt    5     10702.715 ±     334.709   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1374.252 ±      43.043  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5    202040.109 ±       0.589    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1389.799 ±     524.160  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    204309.948 ±   75800.427    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5        11.017 ±       6.363    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                        thrpt    5        22.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     27320.630 ±     882.700   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1199.081 ±      36.955  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     69072.523 ±     106.812    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1198.983 ±     704.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     69064.825 ±   40436.165    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         3.125 ±       7.041    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                            thrpt    5     85409.867 ±    3600.355   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1745.828 ±      72.810  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     32168.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1739.239 ±     521.063  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     32042.019 ±    9170.296    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.535 ±       2.353    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        26.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    690279.710 ±   26385.132   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       947.409 ±      36.282  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       999.173 ±      15.042  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      2278.160 ±      74.612    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.071 ±       0.072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.161 ±       0.161    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    750089.638 ±    6648.373   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                thrpt    5     76401.564 ±    1968.048   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1843.953 ±      47.273  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5     37984.006 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1871.693 ±     666.630  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5     38547.986 ±   13315.275    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.370 ±       2.115    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                      thrpt    5        28.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                       thrpt    5        31.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     22288.387 ±     269.201   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1107.186 ±      13.331  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     78174.939 ±      27.458    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1131.384 ±     697.069  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     79900.773 ±   49756.691    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         5.002 ±      11.788    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        17.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        15.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     18654.048 ±     768.305   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       744.610 ±      30.792  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     62817.203 ±      61.450    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       720.915 ±     561.063  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     60799.160 ±   46632.843    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.471 ±       3.567  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        39.457 ±     298.779    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    177831.205 ±    2702.559   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       462.876 ±       6.690  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.281 ±     629.584  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      3988.662 ±    5635.944    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.339 ±       2.611  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         3.007 ±      23.122    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     15259.051 ±    1077.122   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1145.454 ±      80.989  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    118136.031 ±       0.022    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1189.718 ±     699.343  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    122735.953 ±   72695.145    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         7.273 ±      16.953    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        18.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     79111.444 ±    2212.897   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1563.045 ±      43.587  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     31096.006 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1541.138 ±     697.908  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     30649.799 ±   13451.649    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.656 ±       1.578    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        23.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    132710.366 ±    2667.532   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1401.814 ±      28.093  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     16624.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1397.937 ±     610.701  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16579.617 ±    7310.936    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.692 ±       1.257    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        21.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    460916.492 ±   25574.177   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       510.740 ±      28.319  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       515.060 ±     656.235  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1763.014 ±    2299.142    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.389 ±       2.946  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.321 ±      10.004    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    531349.003 ±    3157.830   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    108509.963 ±    5174.365   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1551.531 ±      74.084  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     22504.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1537.665 ±     694.129  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     22294.672 ±    9671.274    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.100 ±       0.132  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.450 ±       1.912    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        23.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        19.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    148769.844 ±    5481.204   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2565.206 ±      93.565  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     27136.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2574.284 ±     733.741  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     27226.154 ±    7320.186    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.100 ±       0.143  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.058 ±       1.529    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        38.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    359673.898 ±    2000.316   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       367.484 ±       2.176  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       363.855 ±     639.051  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1592.329 ±    2798.527    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.452 ±       3.716  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.980 ±      16.274    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    873432.770 ±   40467.712   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       301.959 ±      13.640  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       286.277 ±     714.065  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       517.990 ±    1302.788    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.334 ±       2.649  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.599 ±       4.744    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     76922.097 ±    2326.919   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3301.517 ±     102.306  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67539.897 ±     237.359    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      3323.579 ±     576.834  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     68005.267 ±   13003.506    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.146 ±       0.179  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         2.982 ±       3.704    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        49.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        43.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    231760.562 ±    8695.567   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1775.481 ±      67.145  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12056.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1747.588 ±     563.113  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     11865.719 ±    3731.407    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.100 ±       0.088  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.678 ±       0.580    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        26.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        20.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1214225.114 ±   69155.490   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       796.192 ±      45.233  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       788.610 ±     696.747  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1022.362 ±     904.644    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.081 ±       0.206    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1333454.794 ±    5981.960   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       549.057 ±       2.831  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       530.809 ±     699.585  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       626.483 ±     825.871    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.396 ±       2.919  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.468 ±       3.451    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1376057.214 ±    5732.242   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     28739.150 ±     970.781   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1734.752 ±      58.318  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     94995.805 ±      26.750    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1742.235 ±     585.543  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     95410.405 ±   32202.717    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.785 ±       7.831    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     18145.048 ±     694.143   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1904.611 ±      72.487  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    165168.546 ±      27.875    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1887.139 ±     687.392  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    163715.295 ±   62272.685    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         6.126 ±      13.492    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        28.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     97933.094 ±    1687.457   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1285.438 ±      22.922  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     20656.004 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5      1326.380 ±      45.816  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     21314.608 ±     974.268    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.075 ±       0.209  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.203 ±       3.364    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    278762.926 ±   11744.884   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       906.855 ±      38.271  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       933.623 ±     575.188  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5269.323 ±    3200.205    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.079 ±       0.174  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.446 ±       0.976    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     16702.665 ±     302.693   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2151.408 ±      39.449  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    202704.032 ±       0.037    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2153.334 ±     720.727  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    202954.937 ±   71678.162    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.096 ±       0.146  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         9.027 ±      13.775    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        32.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     20557.594 ±     619.292   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1663.747 ±      49.896  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5    127370.818 ±      69.508    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1677.753 ±      47.229  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    128449.144 ±    5191.224    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.087 ±       0.132  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         6.705 ±      10.290    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     97692.024 ±    2505.263   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1338.307 ±      34.161  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.004 ±       0.079    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1327.141 ±      47.423  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     21380.186 ±     584.116    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.183  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.074 ±       2.960    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    321297.376 ±    1726.476   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5      1024.173 ±       5.985  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5      1066.799 ±     591.684  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5224.814 ±    2899.274    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.306 ±       0.480    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        15.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    381990.111 ±    2499.225   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     25455.635 ±     786.170   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1735.359 ±      53.769  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5    107288.215 ±       1.391    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1742.262 ±     529.517  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    107752.961 ±   35036.853    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         4.901 ±       9.671    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     72879.618 ±    1888.888   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1567.915 ±      40.505  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     33856.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1538.631 ±     680.263  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     33234.451 ±   15103.058    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.058 ±       0.191  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         1.257 ±       4.114    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        23.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        20.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     90167.301 ±    2033.512   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1123.668 ±      26.022  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     19611.841 ±      33.028    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1120.039 ±     686.582  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     19534.887 ±   11529.809    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.237 ±       2.919    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    104841.645 ±    3227.330   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1259.892 ±      39.066  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     18912.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1268.569 ±     574.923  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     19042.721 ±    8628.434    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.873 ±       2.139    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        19.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     46207.852 ±     890.834   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2215.254 ±      42.622  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     75448.010 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2217.348 ±     667.814  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     75540.270 ±   23935.197    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.112 ±       0.244  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.829 ±       8.315    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        33.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        31.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    121242.279 ±    3713.076   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1137.628 ±      34.756  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     14768.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1127.345 ±     708.034  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     14646.058 ±    9531.179    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.921 ±       2.419    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    340914.915 ±    2413.822   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       506.005 ±       3.665  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       507.324 ±     647.747  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      2343.032 ±    3002.119    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.546 ±       4.342  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.524 ±      20.081    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    666421.968 ±   13501.423   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       826.582 ±      17.279  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       861.850 ±     700.272  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      2034.750 ±    1641.753    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.177 ±       0.289    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    709990.311 ±    4733.436   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    219065.182 ±    9954.275   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       715.974 ±      32.539  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5       721.814 ±     575.633  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      5190.294 ±    4252.301    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.567 ±       0.736    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                    thrpt    5    134130.120 ±    4993.097   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1662.921 ±      61.480  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5     19512.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1609.754 ±     562.979  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     18886.443 ±    6496.829    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.096 ±       0.122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.124 ±       1.419    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                          thrpt    5        24.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                           thrpt    5        22.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    185076.848 ±    7104.059   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1103.491 ±      42.242  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      9384.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1123.383 ±     707.092  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      9553.968 ±    6023.482    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.602 ±       0.378    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    325751.965 ±   15119.907   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       632.576 ±      28.948  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       598.658 ±     573.137  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      2892.703 ±    2776.173    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.302 ±       0.773    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         7.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                 thrpt    5     68322.277 ±    1290.600   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      2839.076 ±      54.031  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     65400.007 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      2836.699 ±     738.720  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     65361.473 ±   18107.374    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.117 ±       0.091  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.687 ±       2.139    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                       thrpt    5        42.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                        thrpt    5        40.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                   thrpt    5    175512.488 ±    2895.955   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1125.149 ±      18.349  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     10088.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1131.029 ±     686.501  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10144.601 ±    6277.344    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.075 ±       0.108  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.673 ±       0.973    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                         thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                          thrpt    5        14.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    525567.318 ±   13037.289   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       518.297 ±      13.070  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5       509.092 ±     648.433  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1523.648 ±    1933.484    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.462 ±       3.617  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.371 ±      10.732    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        11.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5   1151610.331 ±   11419.454   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       854.608 ±       8.458  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       864.365 ±     698.581  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      1181.625 ±     960.810    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.119 ±       0.119    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1113350.495 ±   40073.975   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                thrpt    5    325355.204 ±   11096.830   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5       888.167 ±      29.652  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5      4296.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5       917.882 ±     571.717  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4435.241 ±    2655.002    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.302 ±       0.609    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                      thrpt    5        14.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5       674.639 ±       9.999   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1408.411 ±      20.191  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5   3284912.749 ±       0.475    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1399.797 ±     593.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5   3263982.303 ± 1339485.058    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.054 ±       0.146  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5       126.104 ±     339.536    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        19.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                          thrpt    5       685.026 ±      26.488   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1421.664 ±      54.373  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5   3264574.757 ±      47.011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1456.966 ±     716.692  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5   3345577.405 ± 1636688.346    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.075 ±       0.145  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5       171.905 ±     334.700    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     27286.751 ±     661.888   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       492.980 ±      11.747  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     28432.017 ±       0.012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       499.096 ±     637.944  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     28796.624 ±   36982.876    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.469 ±       3.681  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        27.021 ±     212.083    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        10.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5       673.351 ±      27.478   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1434.891 ±      58.539  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5   3353115.696 ±      63.682    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1458.300 ±     717.243  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5   3409648.954 ± 1743083.492    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.046 ±       0.105  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5       107.011 ±     244.491    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     13029.387 ±     220.396   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1049.458 ±      17.779  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5    126749.572 ±     132.125    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1057.363 ±     549.346  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    127723.168 ±   67070.687    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.060 ±       0.092  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         7.293 ±      11.115    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                         thrpt    5     15537.437 ±     831.827   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       971.546 ±      52.329  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5     98400.055 ±       0.386    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       984.683 ±      26.428  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     99744.260 ±    5352.968    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         6.751 ±      15.805    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    273920.446 ±   21940.951   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       966.284 ±      77.458  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       995.478 ±      16.795  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      5721.580 ±     432.410    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.385 ±       0.711    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    297750.508 ±    3844.602   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     15332.315 ±     721.725   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1015.831 ±      48.675  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5    104254.304 ±      14.886    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       988.940 ±      25.236  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    101511.143 ±    6773.821    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.054 ±       0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         5.557 ±       4.534    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    879216.087 ±   41218.523   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2865.055 ±     133.126  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5128.001 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2847.378 ±     725.740  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5098.187 ±    1406.839    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.117 ±       0.146  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.209 ±       0.266    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        42.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        36.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1676971.395 ±   13246.810   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1525.862 ±      11.880  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1432.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5      1527.917 ±     668.701  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1433.937 ±     627.645    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.087 ±       0.104  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.082 ±       0.098    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        23.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        23.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   8246924.165 ±  444430.144   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2473.463 ±     133.108  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5      2439.673 ±     573.502  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       465.621 ±     111.701    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.083 ±       0.150  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.016 ±       0.028    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        36.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        26.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    314243.091 ±    5303.599   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1915.441 ±      31.903  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5      1936.774 ±     573.428  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      9699.088 ±    2883.495    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.100 ±       0.088  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.501 ±       0.442    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        29.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        29.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1022059.160 ±   31496.781   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2353.413 ±      72.656  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3624.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2363.204 ±      61.152  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      3639.332 ±     173.967    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.117 ±       0.156  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.179 ±       0.239    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        35.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        28.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3381976.088 ±  108639.893   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      1960.127 ±      63.212  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1942.071 ±     634.257  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       903.448 ±     285.953    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.087 ±       0.191  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.041 ±       0.091    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        29.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        31.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5  16597162.620 ±  110653.988   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5      1012.346 ±       6.677  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       999.210 ±      15.243  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5        94.755 ±       1.557    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±       0.067  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.008 ±       0.006    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        15.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        13.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    472343.232 ±   10067.218   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1666.371 ±      35.913  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5552.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1663.542 ±      73.154  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      5542.593 ±     222.077    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.079 ±       0.067  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.264 ±       0.224    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        25.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        24.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2086352.012 ±   82961.184   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1261.974 ±      50.263  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       952.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1255.139 ±     570.949  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       946.312 ±     410.403    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.132  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.059 ±       0.097    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        19.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        18.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   9134983.288 ±  335740.595   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1207.398 ±      44.731  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5      1271.673 ±     577.027  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       219.237 ±     104.682    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.075 ±       0.146  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.013 ±       0.025    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        19.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        16.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    411724.957 ±   12389.121   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1931.755 ±      57.821  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7384.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1938.765 ±     575.559  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      7413.153 ±    2324.790    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.092 ±       0.146  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.350 ±       0.557    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        29.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        30.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2512763.424 ±   33872.204   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1328.412 ±      17.934  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1324.218 ±      51.572  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       829.361 ±      23.259    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.108  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.044 ±       0.067    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        20.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        19.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6567615.122 ±  215814.452   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1001.475 ±      32.839  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       999.218 ±      16.744  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       239.473 ±       8.427    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.075 ±       0.044  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.018 ±       0.011    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        15.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        13.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    655982.329 ±   11657.570   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1947.597 ±      35.706  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4672.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1939.608 ±     537.495  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      4652.244 ±    1250.074    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.087 ±       0.132  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.210 ±       0.319    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        29.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    829107.021 ±   26436.091   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2752.349 ±      86.532  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5224.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2777.025 ±     596.883  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5271.091 ±    1140.523    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.108 ±       0.104  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.206 ±       0.199    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        41.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        33.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    982891.890 ±   29015.659   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1219.328 ±      36.381  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1188.294 ±     707.801  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1902.512 ±    1137.659    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.083 ±       0.127  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.133 ±       0.203    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        17.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   7289619.152 ±  408951.824   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       333.513 ±      18.690  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       354.432 ±     363.363  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        76.580 ±      80.030    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.314 ±       2.557  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.068 ±       0.556    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    294476.529 ±   16909.609   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1634.640 ±      93.571  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8736.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1593.776 ±     619.311  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      8515.760 ±    3205.136    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.105  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.357 ±       0.574    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        24.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      8208.996 ±     113.259   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2112.554 ±      28.060  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    405002.494 ±      21.008    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2087.228 ±     590.763  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    400128.501 ±  111709.563    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.138 ±       0.340  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        26.510 ±      65.282    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        31.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     13189.825 ±     868.473   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       480.907 ±      31.716  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     57368.033 ±       0.005    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       439.645 ±     738.065  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     52405.614 ±   87545.550    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.540 ±       4.550  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        64.403 ±     542.324    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     23090.968 ±     287.036   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       432.048 ±       5.365  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     29448.021 ±       0.011    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       434.194 ±     578.053  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     29605.343 ±   39611.745    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.367 ±       2.794  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        25.047 ±     190.531    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2338.124 ±      41.179   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1464.189 ±      25.613  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    985530.222 ±      17.512    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1465.532 ±     670.035  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    986711.144 ±  462200.021    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.050 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        33.597 ±      48.065    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      8604.281 ±     371.568   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1980.769 ±      85.681  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    362277.494 ±      46.860    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      2016.788 ±      62.610  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    368918.591 ±   24641.880    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.153 ±       0.151  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        28.019 ±      26.968    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        30.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     41202.858 ±    2292.439   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       597.118 ±      33.225  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.862 ±       0.669    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       583.745 ±     559.717  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     22239.133 ±   20591.930    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.564 ±       4.543  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        22.040 ±     177.943    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     63938.761 ±    3699.472   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       481.686 ±      28.115  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11856.007 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       514.833 ±     655.967  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     12678.835 ±   16285.050    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.425 ±       3.211  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        10.267 ±      77.333    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    105470.324 ±    2182.128   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5346.948 ±      61.124   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1688.329 ±      19.565  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    496896.025 ±       3.209    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1662.890 ±      75.736  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    489404.267 ±   19428.276    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.088  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        23.270 ±      25.712    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        27.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5688542.278 ±  390917.356   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1706.170 ±     116.445  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1682.492 ±      40.925  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       465.563 ±      32.944    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.057  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.023 ±       0.016    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        25.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        20.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    355761.515 ±    7798.470   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1911.439 ±      41.723  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8456.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1804.755 ±     741.614  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      7983.238 ±    3236.626    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.143  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.350 ±       0.636    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        27.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        27.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3366091.993 ±   72384.223   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       496.220 ±      10.618  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       232.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       514.943 ±     656.294  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       240.785 ±     306.847    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.394 ±       3.037  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.185 ±       1.431    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    348616.307 ±   11374.113   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1366.398 ±      44.878  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6168.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1322.626 ±      51.297  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      5970.939 ±     363.957    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.193  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.339 ±       0.871    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        21.000                    ms
[info] IntBenchmark.readCirce                                                                   thrpt    5   6195127.823 ±  252277.553   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      3841.917 ±     157.205  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5       976.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      3807.351 ±     598.659  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5       967.218 ±     146.029    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.133 ±       0.185  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.034 ±       0.046    B/op
[info] IntBenchmark.readCirce:·gc.count                                                         thrpt    5        56.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                          thrpt    5        44.000                    ms
[info] IntBenchmark.readJacksonScala                                                            thrpt    5   8475441.861 ±  222460.705   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      3188.038 ±      83.808  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      3184.538 ±     731.738  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5       591.397 ±     138.863    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.096 ±       0.122  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.018 ±       0.023    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        47.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        40.000                    ms
[info] IntBenchmark.readJsoniterScala                                                           thrpt    5  46248392.469 ±   51443.485   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                              thrpt    5  16973151.849 ±  855055.567   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                               thrpt    5      1121.616 ±      56.648  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                      thrpt    5      1138.505 ±     696.065  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       105.598 ±      65.316    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.054 ±       0.091  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.005 ±       0.009    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                    thrpt    5        17.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                     thrpt    5        12.000                    ms
[info] IntBenchmark.readPlayJson                                                                thrpt    5   7190021.806 ±  283236.553   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      3472.180 ±     135.466  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      3461.385 ±     613.633  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5       757.761 ±     144.024    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.137 ±       0.166  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.030 ±       0.036    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                      thrpt    5        51.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                       thrpt    5        43.000                    ms
[info] IntBenchmark.writeCirce                                                                  thrpt    5  12801589.184 ±  623420.058   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      2472.778 ±     120.849  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       304.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2499.695 ±     677.766  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5       307.409 ±      88.745    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.083 ±       0.113  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.010 ±       0.014    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                        thrpt    5        37.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                         thrpt    5        31.000                    ms
[info] IntBenchmark.writeJacksonScala                                                           thrpt    5  11191279.075 ±  210414.087   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      2730.487 ±      51.061  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       384.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5      2768.834 ±     505.851  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       389.381 ±      69.399    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.112 ±       0.185  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.016 ±       0.026    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        41.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        35.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                          thrpt    5  44313707.644 ± 1644792.820   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       901.056 ±      33.470  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       931.615 ±     569.985  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        33.106 ±      20.729    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.067 ±       0.154  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.002 ±       0.006    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        14.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        11.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5  58832880.751 ± 2878668.337   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                             thrpt    5  13061859.360 ±  293267.972   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                              thrpt    5      2191.159 ±      49.095  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                         thrpt    5       264.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                     thrpt    5      2236.546 ±     711.805  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                thrpt    5       269.499 ±      87.278    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.092 ±       0.072  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.011 ±       0.009    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                   thrpt    5        33.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                    thrpt    5        24.000                    ms
[info] IntBenchmark.writePlayJson                                                               thrpt    5   2229248.005 ±   81284.777   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1926.575 ±      70.920  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      1360.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1884.708 ±     728.596  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      1329.810 ±     481.812    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.087 ±       0.154  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.062 ±       0.109    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                     thrpt    5        28.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                      thrpt    5        24.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    660742.867 ±   16818.377   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2415.031 ±      61.844  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5752.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2366.389 ±      54.674  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      5636.300 ±     166.919    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.108 ±       0.119  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.258 ±       0.280    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        35.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        29.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    634486.721 ±   28010.001   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       738.622 ±      32.575  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5       715.331 ±     563.712  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1775.862 ±    1443.233    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.054 ±       0.072  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.134 ±       0.181    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        11.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        11.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3699811.031 ±   94105.598   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1466.879 ±      37.292  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5      1410.381 ±     580.340  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       599.903 ±     243.074    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.132  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.037 ±       0.056    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        21.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        19.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    229759.736 ±    8475.473   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1598.926 ±      59.058  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1593.489 ±     572.010  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5     10911.322 ±    3735.220    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.087 ±       0.154  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.598 ±       1.054    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        24.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        25.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    887710.151 ±   45170.812   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2130.206 ±     107.607  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3776.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2157.518 ±     689.510  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      3822.832 ±    1105.921    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.079 ±       0.088  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.141 ±       0.161    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        32.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        29.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1506756.735 ±   80547.124   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5       988.096 ±      52.307  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1032.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       980.998 ±      28.592  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1024.684 ±      40.524    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.062 ±       0.080  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.065 ±       0.085    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        15.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        15.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   6929981.912 ±  145956.106   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       775.016 ±      16.563  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       730.077 ±     569.945  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       165.900 ±     132.511    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.054 ±       0.146  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.012 ±       0.033    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        11.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5         9.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    508614.800 ±   15715.915   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1781.387 ±      55.610  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5512.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1733.816 ±     550.794  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5367.823 ±    1881.829    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.083 ±       0.057  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.258 ±       0.183    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        26.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        26.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    643655.826 ±   24203.739   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2293.601 ±      87.223  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5608.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2296.150 ±     564.784  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5612.176 ±    1213.206    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.083 ±       0.150  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.203 ±       0.361    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        27.000                    ms
[info] MapsBenchmark.readJacksonScala                                                           thrpt    5    656394.710 ±   30757.229   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                            thrpt    5       994.387 ±      46.090  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      2384.001 ±       0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5      1045.867 ±     547.474  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2509.822 ±    1402.167    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.075 ±       0.201  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.180 ±       0.488    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                 thrpt    5        16.000                counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                  thrpt    5        15.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   4527310.106 ±  234568.443   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1127.697 ±      58.494  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5      1136.827 ±     711.705  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5       395.396 ±     253.452    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.092 ±       0.217  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.032 ±       0.078    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        17.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        14.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    367033.066 ±    8364.691   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1888.125 ±      42.686  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8096.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1936.425 ±     547.992  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      8302.107 ±    2286.425    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.092 ±       0.091  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.392 ±       0.384    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        29.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        30.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    495805.428 ±   20260.479   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1341.056 ±      54.293  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4256.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      1333.917 ±      37.285  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4233.908 ±     270.648    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.067 ±       0.088  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.211 ±       0.274    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        20.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        16.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3434507.770 ±  184805.073   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       419.000 ±      22.563  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       192.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5       433.534 ±     576.640  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       198.889 ±     269.170    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.373 ±       3.035  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.171 ±       1.388    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5         7.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5        10.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    319945.266 ±   15047.286   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1179.054 ±      55.576  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5800.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5      1184.742 ±     684.847  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5832.564 ±    3494.778    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.067 ±       0.119  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.328 ±       0.583    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        18.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        20.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   2149342.859 ±   87916.974   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3244.950 ±     132.684  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2376.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      3256.432 ±     690.958  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      2384.492 ±     503.512    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.146 ±       0.098  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.107 ±       0.071    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        48.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        38.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    293978.026 ±   20635.242   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       692.014 ±      48.666  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      3704.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       652.824 ±       7.315  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      3495.275 ±     275.656    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.497 ±       3.966  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.614 ±      20.854    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    724011.524 ±   26466.712   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       647.845 ±      23.428  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1408.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       602.317 ±     576.452  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1308.431 ±    1244.782    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.054 ±       0.217  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.117 ±       0.467    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   4108791.889 ±  192469.118   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      2402.047 ±     112.427  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       920.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5      2373.406 ±      34.160  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5       909.129 ±      41.240    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5         0.112 ±       0.108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.043 ±       0.041    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        35.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        27.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   8067574.916 ±  563789.515   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       861.308 ±      59.713  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       168.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5       804.002 ±     705.787  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5       156.770 ±     136.182    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5         0.050 ±       0.146  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5         0.010 ±       0.029    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5        12.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5         8.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    186367.438 ±    3366.052   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1599.344 ±      28.749  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     13504.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1591.045 ±     551.323  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     13430.630 ±    4493.570    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.104 ±       0.188  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.878 ±       1.580    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        24.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        25.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    745281.698 ±   31936.581   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2871.696 ±     123.299  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6064.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2846.878 ±     685.175  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      6011.218 ±    1391.367    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.125 ±       0.170  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.263 ±       0.352    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        42.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        36.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   2770706.873 ±   92396.380   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1788.930 ±      59.877  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1819.269 ±     697.458  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1032.881 ±     376.406    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.174  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.045 ±       0.098    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        22.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    253503.334 ±    8916.620   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1817.063 ±      64.632  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11280.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1866.300 ±     703.654  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     11585.637 ±    4348.189    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.112 ±       0.201  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.697 ±       1.242    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        27.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    846800.388 ±   28153.337   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1954.196 ±      64.284  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3632.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1952.014 ±     621.201  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      3628.448 ±    1176.444    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.096 ±       0.201  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.177 ±       0.369    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        29.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        24.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1534172.229 ±   34729.922   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       881.417 ±      19.993  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       848.688 ±     684.580  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       870.697 ±     707.355    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.050 ±       0.166  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.051 ±       0.171    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        13.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        12.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   4714153.519 ±   87986.491   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       359.454 ±       6.781  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       367.361 ±     651.514  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       122.526 ±     216.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.382 ±       3.082  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.127 ±       1.026    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    471687.079 ±   10044.287   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1632.904 ±      34.732  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5448.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1663.910 ±      71.927  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5551.720 ±     314.787    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.104 ±       0.150  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.347 ±       0.494    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        26.000                    ms
[info] MutableMapsBenchmark.readJacksonScala                                                    thrpt    5    584052.269 ±   23670.834   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       970.796 ±      39.270  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2616.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       979.058 ±      27.320  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2638.347 ±      48.734    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.122  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.191 ±       0.334    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                          thrpt    5        15.000                counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        15.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3289724.693 ±  130554.795   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1555.354 ±      62.706  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5      1613.988 ±     578.727  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       772.164 ±     280.668    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.092 ±       0.091  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.044 ±       0.045    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        19.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    306627.782 ±   13031.923   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1620.916 ±      68.958  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8320.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1595.999 ±     573.343  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8191.008 ±    2879.040    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.083 ±       0.204  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.427 ±       1.050    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        24.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    478583.937 ±    6797.903   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1301.468 ±      18.527  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4280.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1266.553 ±     564.830  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4164.594 ±    1836.689    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.067 ±       0.088  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.219 ±       0.285    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        19.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        16.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   2935603.642 ±  217061.039   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       552.135 ±      40.710  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.017 ±     698.727  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       284.029 ±     372.893    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.394 ±       3.038  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.206 ±       1.586    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    339676.104 ±   12421.278   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1313.968 ±      48.110  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6088.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1320.479 ±      53.243  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      6118.636 ±     338.473    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.156  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.328 ±       0.730    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    715099.090 ±    3965.562   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2115.468 ±      11.764  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4656.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2088.338 ±     607.409  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4596.362 ±    1341.603    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.104 ±       0.150  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.229 ±       0.329    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1465301.357 ±   61836.623   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1110.050 ±      46.767  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1119.534 ±     705.900  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1203.602 ±     799.497    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±       0.088  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.072 ±       0.097    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   5395545.058 ±  163805.720   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       164.549 ±       4.989  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       204.632 ±     440.485  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        59.785 ±     128.708    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.256 ±       2.149  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.075 ±       0.626    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    223017.168 ±    4803.233   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1535.163 ±      33.470  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     10832.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1524.356 ±     700.899  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10761.669 ±    5163.174    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.079 ±       0.154  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.558 ±       1.089    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        23.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    980964.455 ±   72718.752   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1710.524 ±     127.229  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2744.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1677.034 ±      49.335  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2691.012 ±     198.072    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.071 ±       0.091  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.113 ±       0.145    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        25.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        20.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2469224.502 ±  139345.744   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1092.041 ±      61.605  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5      1053.084 ±     552.552  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       671.305 ±     354.872    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.048 ±       0.044    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   7095617.409 ±  371885.111   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       577.116 ±      30.169  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       530.943 ±     699.480  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       117.574 ±     152.698    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.388 ±       2.986  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.088 ±       0.679    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6405519.118 ±  333641.657   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       390.749 ±      20.248  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5       367.885 ±     654.615  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5        90.759 ±     166.602    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5         0.377 ±       3.204  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.094 ±       0.802    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    311885.970 ±    9566.043   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1604.630 ±      47.916  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8096.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1594.881 ±     618.989  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8044.819 ±    3030.220    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.067 ±       0.119  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.336 ±       0.604    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        24.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   3390023.174 ±   67308.192   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3084.600 ±      60.496  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1432.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      3054.377 ±      44.570  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1418.009 ±      41.508    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.112 ±       0.134  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.052 ±       0.063    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        45.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        38.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   3959253.946 ±  111994.716   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2374.862 ±      67.858  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       944.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      2358.483 ±      76.815  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       937.500 ±      24.479    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.100 ±       0.105  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.040 ±       0.041    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        35.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   7488000.892 ±  434163.661   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1408.506 ±      81.946  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       296.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1414.040 ±     560.993  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       297.337 ±     125.182    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.071 ±       0.193  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.015 ±       0.040    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                 thrpt    5   5147591.400 ±   57160.005   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      3192.235 ±      35.489  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      3254.027 ±     704.639  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5       994.932 ±     218.428    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.112 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.034 ±       0.013    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                       thrpt    5        48.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                        thrpt    5        40.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2761504.128 ±  130520.682   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1712.468 ±      80.958  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1678.881 ±      47.283  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5       956.952 ±      44.631    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.092 ±       0.108  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.052 ±       0.063    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        20.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   4782136.746 ±  373470.222   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1264.046 ±      98.508  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       416.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1260.289 ±     595.812  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       414.431 ±     182.634    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.071 ±       0.209  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.023 ±       0.069    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        19.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   9965092.703 ±  187937.303   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       962.577 ±      18.626  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       932.349 ±     574.097  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5       147.254 ±      91.257    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.058 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.009 ±       0.021    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        14.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   7533129.546 ±   10426.584   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   4991740.349 ±  203662.230   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1598.740 ±      65.037  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1610.175 ±     553.757  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5       507.665 ±     176.502    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.075 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.024 ±       0.022    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        20.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5   1390344.683 ±   11487.569   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1894.072 ±      15.437  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2144.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1886.090 ±     700.403  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5      2134.909 ±     789.969    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.092 ±       0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.104 ±       0.138    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        28.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1073703.259 ±    5759.197   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       693.229 ±       3.458  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1016.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5       721.619 ±     563.278  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      1057.572 ±     824.446    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.463 ±       3.671  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.678 ±       5.377    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1810929.884 ±  106628.985   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       340.630 ±      19.787  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       296.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       303.279 ±     166.921  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       263.760 ±     151.194    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.317 ±       2.595  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.272 ±       2.221    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                              thrpt    5   1131611.571 ±   64780.058   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5       701.724 ±      40.185  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5       976.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5       657.998 ±       6.345  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5       915.337 ±      49.988    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.046 ±       0.183  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.064 ±       0.255    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                    thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                     thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1257836.845 ±   57168.436   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       952.867 ±      43.444  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1192.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5       929.737 ±     578.465  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1162.664 ±     713.241    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.204  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.078 ±       0.257    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2409426.615 ±   98897.072   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5      1077.899 ±      43.801  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       704.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5      1056.599 ±     555.480  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       690.652 ±     384.245    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.062 ±       0.127  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.041 ±       0.084    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2573461.968 ±  156204.887   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       601.760 ±      36.650  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       597.288 ±     571.478  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5       365.764 ±     355.783    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.415 ±       3.079  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.251 ±       1.863    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2655424.896 ±   18037.563   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2357734.304 ±   40985.984   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1078.761 ±      18.633  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1064.921 ±     571.608  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5       710.748 ±     380.671    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.047 ±       0.081    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        17.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     11767.482 ±     341.276   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1667.896 ±      47.769  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    223072.196 ±      83.819    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      1670.889 ±    1266.965  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    223311.970 ±  165572.722    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.146 ±       0.428  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        19.452 ±      56.920    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15333.705 ±     471.140   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       242.395 ±       7.455  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     24879.682 ±       2.989    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       269.111 ±     114.719  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5     27639.173 ±   12579.746    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.600 ±       5.034  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        62.253 ±     522.826    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5        17.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     36604.372 ±    3046.728   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       405.253 ±      33.683  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     17424.019 ±       0.061    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       418.999 ±     639.379  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     18007.960 ±   27252.771    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.373 ±       2.969  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        15.820 ±     125.834    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        11.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3575.801 ±     248.468   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1139.428 ±      78.858  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    501264.866 ±      75.267    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1128.390 ±     712.431  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5    495662.697 ±  287374.268    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.046 ±       0.230  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        20.182 ±     100.980    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        51.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     58146.316 ±    2745.762   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       742.622 ±      35.035  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20100.018 ±       0.091    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       712.978 ±     555.866  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     19264.107 ±   13964.241    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.113  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.259 ±       3.108    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     79732.840 ±    3538.979   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       522.870 ±      23.422  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       514.827 ±     655.669  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10174.936 ±   13131.714    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.405 ±       3.174  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         7.961 ±      62.354    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     85833.305 ±    4261.193   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5        12.217 ±       0.605  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       224.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk8.json
[success] Total time: 4357 s, completed Apr 1, 2018 7:29:02 PM
