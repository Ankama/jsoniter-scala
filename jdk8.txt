[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Mar 14, 2018 11:05:38 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:446:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:454:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:943:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.21.3-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.21.3-SNAPSHOT.jar ...
[info] Compiling 47 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigDecimal](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigDecimal](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Duration](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Duration](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZonedDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZonedDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intCodec.decodeValue(in, 0));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:57: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig())
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = JsoniterCodecs.this.intCodec.decodeValue(in, _a);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decodeValue(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.a, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.b, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = JsoniterCodecs.this.intCodec.decodeValue(in, _value);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.value, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decodeValue(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decodeValue(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = JsoniterCodecs.this.intCodec.decodeValue(in, _followers_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = JsoniterCodecs.this.intCodec.decodeValue(in, _friends_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = JsoniterCodecs.this.intCodec.decodeValue(in, _listed_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favourites_count);
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = JsoniterCodecs.this.intCodec.decodeValue(in, _utc_offset);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decodeValue(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = JsoniterCodecs.this.intCodec.decodeValue(in, _statuses_count);
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decodeValue(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.expanded_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.display_url, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.location, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.description, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.followers_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.friends_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.listed_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favourites_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.utc_offset, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.time_zone, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.statuses_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_banner_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_link_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_border_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_fill_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_text_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.translator_type, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.3-SNAPSHOT.jar ...
[info] Compiling 41 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 339 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 490 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401956.218 ops/s
[info] # Warmup Iteration   2: 779277.625 ops/s
[info] # Warmup Iteration   3: 774599.566 ops/s
[info] Iteration   1: 802891.496 ops/s
[info]                  ·gc.alloc.rate:                   2114.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3917.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 799875.002 ops/s
[info]                  ·gc.alloc.rate:                   2106.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3959.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 789058.315 ops/s
[info]                  ·gc.alloc.rate:                   2077.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4035.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 792110.227 ops/s
[info]                  ·gc.alloc.rate:                   2086.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4708.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 790459.530 ops/s
[info]                  ·gc.alloc.rate:                   2082.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4054.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   794878.914 ±(99.9%) 23599.006 ops/s [Average]
[info]   (min, avg, max) = (789058.315, 794878.914, 802891.496), stdev = 6128.587
[info]   CI (99.9%): [771279.907, 818477.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2093.453 ±(99.9%) 61.553 MB/sec [Average]
[info]   (min, avg, max) = (2077.946, 2093.453, 2114.551), stdev = 15.985
[info]   CI (99.9%): [2031.901, 2155.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2088.523 ±(99.9%) 609.158 MB/sec [Average]
[info]   (min, avg, max) = (1998.979, 2088.523, 2370.387), stdev = 158.196
[info]   CI (99.9%): [1479.365, 2697.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4135.044 ±(99.9%) 1251.930 B/op [Average]
[info]   (min, avg, max) = (3917.509, 4135.044, 4708.058), stdev = 325.122
[info]   CI (99.9%): [2883.114, 5386.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.181 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.181, 0.245), stdev = 0.046
[info]   CI (99.9%): [0.006, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.30% complete, ETA 01:09:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 536612.489 ops/s
[info] # Warmup Iteration   2: 1520362.401 ops/s
[info] # Warmup Iteration   3: 1550152.356 ops/s
[info] Iteration   1: 1586433.554 ops/s
[info]                  ·gc.alloc.rate:                   1274.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1293.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1609260.761 ops/s
[info]                  ·gc.alloc.rate:                   1292.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1283.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1581516.698 ops/s
[info]                  ·gc.alloc.rate:                   1270.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1314.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1594487.921 ops/s
[info]                  ·gc.alloc.rate:                   1280.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     984.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1595164.385 ops/s
[info]                  ·gc.alloc.rate:                   1281.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1318.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1593372.664 ±(99.9%) 40642.123 ops/s [Average]
[info]   (min, avg, max) = (1581516.698, 1593372.664, 1609260.761), stdev = 10554.630
[info]   CI (99.9%): [1552730.541, 1634014.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1279.689 ±(99.9%) 32.626 MB/sec [Average]
[info]   (min, avg, max) = (1270.146, 1279.689, 1292.439), stdev = 8.473
[info]   CI (99.9%): [1247.063, 1312.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1254.182 ±(99.9%) 554.823 MB/sec [Average]
[info]   (min, avg, max) = (997.288, 1254.182, 1335.966), stdev = 144.086
[info]   CI (99.9%): [699.359, 1809.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1238.898 ±(99.9%) 550.739 B/op [Average]
[info]   (min, avg, max) = (984.341, 1238.898, 1318.148), stdev = 143.025
[info]   CI (99.9%): [688.159, 1789.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.086 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.086, 0.143), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.61% complete, ETA 01:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2217303.105 ops/s
[info] # Warmup Iteration   2: 3573830.155 ops/s
[info] # Warmup Iteration   3: 3494479.139 ops/s
[info] Iteration   1: 3468095.532 ops/s
[info]                  ·gc.alloc.rate:               229.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116.085 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3526344.126 ops/s
[info]                  ·gc.alloc.rate:               233.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114.171 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 3564946.527 ops/s
[info]                  ·gc.alloc.rate:                   235.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3550267.332 ops/s
[info]                  ·gc.alloc.rate:               234.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113.394 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3496457.661 ops/s
[info]                  ·gc.alloc.rate:      231.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3521222.235 ±(99.9%) 151812.532 ops/s [Average]
[info]   (min, avg, max) = (3468095.532, 3521222.235, 3564946.527), stdev = 39425.233
[info]   CI (99.9%): [3369409.703, 3673034.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   232.704 ±(99.9%) 10.173 MB/sec [Average]
[info]   (min, avg, max) = (229.158, 232.704, 235.688), stdev = 2.642
[info]   CI (99.9%): [222.531, 242.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.662 ±(99.9%) 440.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.662, 255.915), stdev = 114.409
[info]   CI (99.9%): [≈ 0, 645.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91.315 ±(99.9%) 196.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.315, 116.085), stdev = 51.061
[info]   CI (99.9%): [≈ 0, 287.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.91% complete, ETA 01:08:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35705.427 ops/s
[info] # Warmup Iteration   2: 163955.497 ops/s
[info] # Warmup Iteration   3: 168614.514 ops/s
[info] Iteration   1: 171220.952 ops/s
[info]                  ·gc.alloc.rate:                   1452.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              13344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11995.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.765 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 170744.229 ops/s
[info]                  ·gc.alloc.rate:                   1447.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              13344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12108.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.343 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 168812.648 ops/s
[info]                  ·gc.alloc.rate:                   1431.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              13344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15430.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.582 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 171439.313 ops/s
[info]                  ·gc.alloc.rate:                   1453.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              13344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12243.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 170247.865 ops/s
[info]                  ·gc.alloc.rate:                   1443.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              13344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12390.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   170493.001 ±(99.9%) 4025.816 ops/s [Average]
[info]   (min, avg, max) = (168812.648, 170493.001, 171439.313), stdev = 1045.492
[info]   CI (99.9%): [166467.186, 174518.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1445.737 ±(99.9%) 34.400 MB/sec [Average]
[info]   (min, avg, max) = (1431.280, 1445.737, 1453.600), stdev = 8.934
[info]   CI (99.9%): [1411.337, 1480.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13344.003, 13344.003, 13344.003), stdev = 0.001
[info]   CI (99.9%): [13344.002, 13344.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1389.727 ±(99.9%) 573.771 MB/sec [Average]
[info]   (min, avg, max) = (1305.457, 1389.727, 1655.036), stdev = 149.007
[info]   CI (99.9%): [815.955, 1963.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12833.701 ±(99.9%) 5617.803 B/op [Average]
[info]   (min, avg, max) = (11995.587, 12833.701, 15430.099), stdev = 1458.926
[info]   CI (99.9%): [7215.898, 18451.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.730 ±(99.9%) 1.419 B/op [Average]
[info]   (min, avg, max) = (0.382, 0.730, 1.343), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 2.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.21% complete, ETA 01:08:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274735.152 ops/s
[info] # Warmup Iteration   2: 577462.941 ops/s
[info] # Warmup Iteration   3: 590038.569 ops/s
[info] Iteration   1: 588780.773 ops/s
[info]                  ·gc.alloc.rate:                   1948.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4446.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 586670.700 ops/s
[info]                  ·gc.alloc.rate:                   1941.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5388.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 589695.432 ops/s
[info]                  ·gc.alloc.rate:                   1951.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5391.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.278 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 583170.500 ops/s
[info]                  ·gc.alloc.rate:                   1929.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5474.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 589844.207 ops/s
[info]                  ·gc.alloc.rate:                   1951.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4522.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   587632.323 ±(99.9%) 10771.548 ops/s [Average]
[info]   (min, avg, max) = (583170.500, 587632.323, 589844.207), stdev = 2797.337
[info]   CI (99.9%): [576860.774, 598403.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1944.666 ±(99.9%) 35.686 MB/sec [Average]
[info]   (min, avg, max) = (1929.736, 1944.666, 1951.768), stdev = 9.267
[info]   CI (99.9%): [1908.981, 1980.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5208.001, 5208.001, 5208.001), stdev = 0.001
[info]   CI (99.9%): [5208.001, 5208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1883.262 ±(99.9%) 718.207 MB/sec [Average]
[info]   (min, avg, max) = (1663.888, 1883.262, 2028.472), stdev = 186.516
[info]   CI (99.9%): [1165.056, 2601.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5044.725 ±(99.9%) 1976.013 B/op [Average]
[info]   (min, avg, max) = (4446.431, 5044.725, 5474.471), stdev = 513.164
[info]   CI (99.9%): [3068.712, 7020.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.268 ±(99.9%) 0.281 B/op [Average]
[info]   (min, avg, max) = (0.222, 0.268, 0.391), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.52% complete, ETA 01:08:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 717337.819 ops/s
[info] # Warmup Iteration   2: 2006192.225 ops/s
[info] # Warmup Iteration   3: 2097199.412 ops/s
[info] Iteration   1: 2085794.750 ops/s
[info]                  ·gc.alloc.rate:                   742.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2049587.469 ops/s
[info]                  ·gc.alloc.rate:                   729.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     500.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2116753.467 ops/s
[info]                  ·gc.alloc.rate:                   753.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     485.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2110491.576 ops/s
[info]                  ·gc.alloc.rate:               750.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 487.825 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2104626.083 ops/s
[info]                  ·gc.alloc.rate:                   749.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2093450.669 ±(99.9%) 104410.269 ops/s [Average]
[info]   (min, avg, max) = (2049587.469, 2093450.669, 2116753.467), stdev = 27115.015
[info]   CI (99.9%): [1989040.400, 2197860.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   744.947 ±(99.9%) 37.364 MB/sec [Average]
[info]   (min, avg, max) = (729.264, 744.947, 753.321), stdev = 9.703
[info]   CI (99.9%): [707.583, 782.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   560.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (560.000, 560.000, 560.000), stdev = 0.001
[info]   CI (99.9%): [560.000, 560.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   784.008 ±(99.9%) 692.132 MB/sec [Average]
[info]   (min, avg, max) = (651.499, 784.008, 985.147), stdev = 179.744
[info]   CI (99.9%): [91.876, 1476.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   589.335 ±(99.9%) 518.513 B/op [Average]
[info]   (min, avg, max) = (485.146, 589.335, 736.906), stdev = 134.656
[info]   CI (99.9%): [70.822, 1107.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.521 ±(99.9%) 3.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.521, 2.375), stdev = 1.037
[info]   CI (99.9%): [≈ 0, 4.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.393 ±(99.9%) 3.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.792), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 3.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.82% complete, ETA 01:08:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6633468.344 ops/s
[info] # Warmup Iteration   2: 8727485.571 ops/s
[info] # Warmup Iteration   3: 8601181.982 ops/s
[info] Iteration   1: 8723293.177 ops/s
[info]                  ·gc.alloc.rate:                   443.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8739877.999 ops/s
[info]                  ·gc.alloc.rate:                   444.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8799191.178 ops/s
[info]                  ·gc.alloc.rate:                   447.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8743805.267 ops/s
[info]                  ·gc.alloc.rate:               444.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 8597760.403 ops/s
[info]                  ·gc.alloc.rate:               437.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60.726 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   8720785.605 ±(99.9%) 286758.894 ops/s [Average]
[info]   (min, avg, max) = (8597760.403, 8720785.605, 8799191.178), stdev = 74470.374
[info]   CI (99.9%): [8434026.711, 9007544.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   443.289 ±(99.9%) 14.597 MB/sec [Average]
[info]   (min, avg, max) = (437.028, 443.289, 447.281), stdev = 3.791
[info]   CI (99.9%): [428.692, 457.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.076 ±(99.9%) 577.833 MB/sec [Average]
[info]   (min, avg, max) = (331.735, 434.076, 663.524), stdev = 150.061
[info]   CI (99.9%): [≈ 0, 1011.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   78.232 ±(99.9%) 102.338 B/op [Average]
[info]   (min, avg, max) = (59.711, 78.232, 118.677), stdev = 26.577
[info]   CI (99.9%): [≈ 0, 180.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.369 ±(99.9%) 3.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.369, 1.761), stdev = 0.779
[info]   CI (99.9%): [≈ 0, 3.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.317), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.12% complete, ETA 01:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68115.060 ops/s
[info] # Warmup Iteration   2: 308869.010 ops/s
[info] # Warmup Iteration   3: 306400.037 ops/s
[info] Iteration   1: 306268.827 ops/s
[info]                  ·gc.alloc.rate:                   979.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5013.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 311466.619 ops/s
[info]                  ·gc.alloc.rate:                   995.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4939.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 311208.257 ops/s
[info]                  ·gc.alloc.rate:                   994.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4970.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 309601.679 ops/s
[info]                  ·gc.alloc.rate:                   989.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5016.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 312126.837 ops/s
[info]                  ·gc.alloc.rate:                   998.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5009.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   310134.444 ±(99.9%) 9056.022 ops/s [Average]
[info]   (min, avg, max) = (306268.827, 310134.444, 312126.837), stdev = 2351.820
[info]   CI (99.9%): [301078.422, 319190.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   991.620 ±(99.9%) 29.161 MB/sec [Average]
[info]   (min, avg, max) = (979.215, 991.620, 998.229), stdev = 7.573
[info]   CI (99.9%): [962.459, 1020.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5032.001, 5032.001, 5032.002), stdev = 0.001
[info]   CI (99.9%): [5032.001, 5032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   983.341 ±(99.9%) 28.307 MB/sec [Average]
[info]   (min, avg, max) = (975.599, 983.341, 993.819), stdev = 7.351
[info]   CI (99.9%): [955.034, 1011.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4990.088 ±(99.9%) 129.958 B/op [Average]
[info]   (min, avg, max) = (4939.699, 4990.088, 5016.778), stdev = 33.750
[info]   CI (99.9%): [4860.131, 5120.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.338 ±(99.9%) 0.451 B/op [Average]
[info]   (min, avg, max) = (0.210, 0.338, 0.428), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.42% complete, ETA 01:07:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 957354.504 ops/s
[info] # Warmup Iteration   2: 1627270.944 ops/s
[info] # Warmup Iteration   3: 1666889.643 ops/s
[info] Iteration   1: 1670828.975 ops/s
[info]                  ·gc.alloc.rate:                   2581.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2527.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1672711.663 ops/s
[info]                  ·gc.alloc.rate:                   2584.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2223.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1663864.582 ops/s
[info]                  ·gc.alloc.rate:                   2571.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2564.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1663844.453 ops/s
[info]                  ·gc.alloc.rate:                   2571.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2249.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1644116.904 ops/s
[info]                  ·gc.alloc.rate:                   2540.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2604.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1663073.315 ±(99.9%) 43633.687 ops/s [Average]
[info]   (min, avg, max) = (1644116.904, 1663073.315, 1672711.663), stdev = 11331.530
[info]   CI (99.9%): [1619439.629, 1706707.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2569.860 ±(99.9%) 67.424 MB/sec [Average]
[info]   (min, avg, max) = (2540.572, 2569.860, 2584.741), stdev = 17.510
[info]   CI (99.9%): [2502.436, 2637.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2571.377 ±(99.9%) 707.906 MB/sec [Average]
[info]   (min, avg, max) = (2363.155, 2571.377, 2721.165), stdev = 183.841
[info]   CI (99.9%): [1863.472, 3279.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2433.987 ±(99.9%) 702.976 B/op [Average]
[info]   (min, avg, max) = (2223.509, 2433.987, 2604.875), stdev = 182.561
[info]   CI (99.9%): [1731.011, 3136.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.114 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.114, 0.157), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.73% complete, ETA 01:07:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1001073.857 ops/s
[info] # Warmup Iteration   2: 2531246.914 ops/s
[info] # Warmup Iteration   3: 2594923.469 ops/s
[info] Iteration   1: 2608053.658 ops/s
[info]                  ·gc.alloc.rate:                   1829.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1190.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2597963.680 ops/s
[info]                  ·gc.alloc.rate:                   1822.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1005.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2603063.580 ops/s
[info]                  ·gc.alloc.rate:                   1825.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1213.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2596097.448 ops/s
[info]                  ·gc.alloc.rate:                   1821.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1020.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2622271.413 ops/s
[info]                  ·gc.alloc.rate:                   1839.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1217.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2605489.956 ±(99.9%) 40337.273 ops/s [Average]
[info]   (min, avg, max) = (2596097.448, 2605489.956, 2622271.413), stdev = 10475.462
[info]   CI (99.9%): [2565152.683, 2645827.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1827.631 ±(99.9%) 28.269 MB/sec [Average]
[info]   (min, avg, max) = (1821.049, 1827.631, 1839.395), stdev = 7.341
[info]   CI (99.9%): [1799.362, 1855.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1870.130 ±(99.9%) 703.980 MB/sec [Average]
[info]   (min, avg, max) = (1659.733, 1870.130, 2027.736), stdev = 182.821
[info]   CI (99.9%): [1166.150, 2574.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1129.413 ±(99.9%) 412.258 B/op [Average]
[info]   (min, avg, max) = (1005.483, 1129.413, 1217.042), stdev = 107.062
[info]   CI (99.9%): [717.155, 1541.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.055, 0.075), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.03% complete, ETA 01:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7394641.139 ops/s
[info] # Warmup Iteration   2: 9511205.796 ops/s
[info] # Warmup Iteration   3: 9593760.594 ops/s
[info] Iteration   1: 9632057.012 ops/s
[info]                  ·gc.alloc.rate:                   1224.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9373904.179 ops/s
[info]                  ·gc.alloc.rate:                   1191.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9508426.118 ops/s
[info]                  ·gc.alloc.rate:                   1208.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9367663.087 ops/s
[info]                  ·gc.alloc.rate:                   1190.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9647355.387 ops/s
[info]                  ·gc.alloc.rate:                   1225.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9505881.156 ±(99.9%) 518279.860 ops/s [Average]
[info]   (min, avg, max) = (9367663.087, 9505881.156, 9647355.387), stdev = 134595.634
[info]   CI (99.9%): [8987601.296, 10024161.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1208.043 ±(99.9%) 66.222 MB/sec [Average]
[info]   (min, avg, max) = (1190.409, 1208.043, 1225.901), stdev = 17.198
[info]   CI (99.9%): [1141.821, 1274.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.028 ±(99.9%) 701.564 MB/sec [Average]
[info]   (min, avg, max) = (1000.542, 1205.028, 1343.621), stdev = 182.194
[info]   CI (99.9%): [503.464, 1906.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   199.542 ±(99.9%) 117.024 B/op [Average]
[info]   (min, avg, max) = (164.864, 199.542, 225.741), stdev = 30.391
[info]   CI (99.9%): [82.518, 316.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.010, 0.017), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.33% complete, ETA 01:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149597.978 ops/s
[info] # Warmup Iteration   2: 609288.980 ops/s
[info] # Warmup Iteration   3: 615006.299 ops/s
[info] Iteration   1: 614290.268 ops/s
[info]                  ·gc.alloc.rate:                   1561.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4192.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 620269.652 ops/s
[info]                  ·gc.alloc.rate:                   1576.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3345.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 614773.435 ops/s
[info]                  ·gc.alloc.rate:                   1562.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4250.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 612720.651 ops/s
[info]                  ·gc.alloc.rate:                   1557.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4297.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 622633.807 ops/s
[info]                  ·gc.alloc.rate:                   1582.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3400.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   616937.563 ±(99.9%) 16452.660 ops/s [Average]
[info]   (min, avg, max) = (612720.651, 616937.563, 622633.807), stdev = 4272.704
[info]   CI (99.9%): [600484.903, 633390.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1568.103 ±(99.9%) 41.963 MB/sec [Average]
[info]   (min, avg, max) = (1557.249, 1568.103, 1582.723), stdev = 10.898
[info]   CI (99.9%): [1526.141, 1610.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4000.001, 4000.001, 4000.001), stdev = 0.001
[info]   CI (99.9%): [4000.001, 4000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1526.842 ±(99.9%) 687.967 MB/sec [Average]
[info]   (min, avg, max) = (1318.332, 1526.842, 1673.035), stdev = 178.663
[info]   CI (99.9%): [838.875, 2214.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3897.309 ±(99.9%) 1850.558 B/op [Average]
[info]   (min, avg, max) = (3345.126, 3897.309, 4297.415), stdev = 480.584
[info]   CI (99.9%): [2046.751, 5747.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.202 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (0.107, 0.202, 0.317), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.64% complete, ETA 01:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1165911.845 ops/s
[info] # Warmup Iteration   2: 2036893.877 ops/s
[info] # Warmup Iteration   3: 2075317.651 ops/s
[info] Iteration   1: 2108082.645 ops/s
[info]                  ·gc.alloc.rate:                   2047.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1492.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2110584.463 ops/s
[info]                  ·gc.alloc.rate:                   2049.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1500.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2123692.469 ops/s
[info]                  ·gc.alloc.rate:                   2061.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1499.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2125598.450 ops/s
[info]                  ·gc.alloc.rate:                   2064.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1503.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2088362.405 ops/s
[info]                  ·gc.alloc.rate:                   2027.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              1528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1534.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2111264.087 ±(99.9%) 57599.287 ops/s [Average]
[info]   (min, avg, max) = (2088362.405, 2111264.087, 2125598.450), stdev = 14958.352
[info]   CI (99.9%): [2053664.799, 2168863.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2050.079 ±(99.9%) 56.268 MB/sec [Average]
[info]   (min, avg, max) = (2027.505, 2050.079, 2064.165), stdev = 14.613
[info]   CI (99.9%): [1993.812, 2106.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1528.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1528.000, 1528.000, 1528.000), stdev = 0.001
[info]   CI (99.9%): [1528.000, 1528.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2020.831 ±(99.9%) 55.942 MB/sec [Average]
[info]   (min, avg, max) = (2000.040, 2020.831, 2035.787), stdev = 14.528
[info]   CI (99.9%): [1964.889, 2076.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1506.269 ±(99.9%) 62.241 B/op [Average]
[info]   (min, avg, max) = (1492.707, 1506.269, 1534.242), stdev = 16.164
[info]   CI (99.9%): [1444.028, 1568.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.065, 0.093), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.94% complete, ETA 01:06:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2150272.142 ops/s
[info] # Warmup Iteration   2: 5749453.958 ops/s
[info] # Warmup Iteration   3: 5904885.875 ops/s
[info] Iteration   1: 5971305.053 ops/s
[info]                  ·gc.alloc.rate:                   1638.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     431.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6049043.843 ops/s
[info]                  ·gc.alloc.rate:                   1660.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6053422.509 ops/s
[info]                  ·gc.alloc.rate:                   1661.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     432.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5972816.913 ops/s
[info]                  ·gc.alloc.rate:                   1639.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6007189.283 ops/s
[info]                  ·gc.alloc.rate:                   1649.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6010755.520 ±(99.9%) 152755.376 ops/s [Average]
[info]   (min, avg, max) = (5971305.053, 6010755.520, 6053422.509), stdev = 39670.086
[info]   CI (99.9%): [5858000.144, 6163510.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1649.957 ±(99.9%) 41.766 MB/sec [Average]
[info]   (min, avg, max) = (1638.970, 1649.957, 1661.565), stdev = 10.847
[info]   CI (99.9%): [1608.191, 1691.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1662.562 ±(99.9%) 75.961 MB/sec [Average]
[info]   (min, avg, max) = (1635.325, 1662.562, 1684.871), stdev = 19.727
[info]   CI (99.9%): [1586.601, 1738.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   435.314 ±(99.9%) 22.214 B/op [Average]
[info]   (min, avg, max) = (429.750, 435.314, 441.731), stdev = 5.769
[info]   CI (99.9%): [413.100, 457.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.021, 0.027), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.24% complete, ETA 01:06:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16038700.085 ops/s
[info] # Warmup Iteration   2: 22128146.133 ops/s
[info] # Warmup Iteration   3: 22102298.829 ops/s
[info] Iteration   1: 22283517.674 ops/s
[info]                  ·gc.alloc.rate:                   679.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22207898.745 ops/s
[info]                  ·gc.alloc.rate:                   677.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22292198.496 ops/s
[info]                  ·gc.alloc.rate:                   679.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22275235.072 ops/s
[info]                  ·gc.alloc.rate:                   679.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22234431.432 ops/s
[info]                  ·gc.alloc.rate:               678.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47.059 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   22258656.284 ±(99.9%) 138585.689 ops/s [Average]
[info]   (min, avg, max) = (22207898.745, 22258656.284, 22292198.496), stdev = 35990.263
[info]   CI (99.9%): [22120070.595, 22397241.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   678.886 ±(99.9%) 3.846 MB/sec [Average]
[info]   (min, avg, max) = (677.561, 678.886, 679.860), stdev = 0.999
[info]   CI (99.9%): [675.039, 682.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   663.722 ±(99.9%) 2.504 MB/sec [Average]
[info]   (min, avg, max) = (663.138, 663.722, 664.803), stdev = 0.650
[info]   CI (99.9%): [661.217, 666.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46.928 ±(99.9%) 0.379 B/op [Average]
[info]   (min, avg, max) = (46.819, 46.928, 47.059), stdev = 0.098
[info]   CI (99.9%): [46.549, 47.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.55% complete, ETA 01:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18368603.103 ops/s
[info] # Warmup Iteration   2: 27361857.067 ops/s
[info] # Warmup Iteration   3: 27542521.533 ops/s
[info] Iteration   1: 27546980.798 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 27533102.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 27532868.234 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 27462824.619 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 27524037.424 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   27519962.633 ±(99.9%) 126991.553 ops/s [Average]
[info]   (min, avg, max) = (27462824.619, 27519962.633, 27546980.798), stdev = 32979.303
[info]   CI (99.9%): [27392971.080, 27646954.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.85% complete, ETA 01:05:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323919.211 ops/s
[info] # Warmup Iteration   2: 1036131.271 ops/s
[info] # Warmup Iteration   3: 1063214.237 ops/s
[info] Iteration   1: 1056987.379 ops/s
[info]                  ·gc.alloc.rate:                   1606.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2437.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1045826.543 ops/s
[info]                  ·gc.alloc.rate:                   1590.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2483.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1061499.473 ops/s
[info]                  ·gc.alloc.rate:                   1613.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2467.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1033360.955 ops/s
[info]                  ·gc.alloc.rate:                   1571.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2551.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1053757.184 ops/s
[info]                  ·gc.alloc.rate:                   1601.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2011.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1050286.307 ±(99.9%) 42577.202 ops/s [Average]
[info]   (min, avg, max) = (1033360.955, 1050286.307, 1061499.473), stdev = 11057.164
[info]   CI (99.9%): [1007709.105, 1092863.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1596.504 ±(99.9%) 63.598 MB/sec [Average]
[info]   (min, avg, max) = (1571.133, 1596.504, 1613.293), stdev = 16.516
[info]   CI (99.9%): [1532.906, 1660.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2392.000, 2392.000, 2392.000), stdev = 0.001
[info]   CI (99.9%): [2392.000, 2392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1595.043 ±(99.9%) 536.722 MB/sec [Average]
[info]   (min, avg, max) = (1347.053, 1595.043, 1675.713), stdev = 139.385
[info]   CI (99.9%): [1058.321, 2131.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2390.416 ±(99.9%) 830.469 B/op [Average]
[info]   (min, avg, max) = (2011.868, 2390.416, 2551.219), stdev = 215.670
[info]   CI (99.9%): [1559.948, 3220.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.155), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.15% complete, ETA 01:05:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15414.084 ops/s
[info] # Warmup Iteration   2: 19180.745 ops/s
[info] # Warmup Iteration   3: 19117.156 ops/s
[info] Iteration   1: 19214.621 ops/s
[info]                  ·gc.alloc.rate:                   1360.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              111441.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108824.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.410 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 19009.201 ops/s
[info]                  ·gc.alloc.rate:                   1346.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110417.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.341 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19129.237 ops/s
[info]                  ·gc.alloc.rate:                   1354.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              111446.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110184.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 19337.045 ops/s
[info]                  ·gc.alloc.rate:                   1369.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              111432.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109439.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19298.320 ops/s
[info]                  ·gc.alloc.rate:                   1366.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              111432.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109980.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.791 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19197.685 ±(99.9%) 509.562 ops/s [Average]
[info]   (min, avg, max) = (19009.201, 19197.685, 19337.045), stdev = 132.332
[info]   CI (99.9%): [18688.123, 19707.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1359.406 ±(99.9%) 35.570 MB/sec [Average]
[info]   (min, avg, max) = (1346.079, 1359.406, 1369.077), stdev = 9.237
[info]   CI (99.9%): [1323.836, 1394.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   111440.100 ±(99.9%) 29.834 B/op [Average]
[info]   (min, avg, max) = (111432.022, 111440.100, 111448.023), stdev = 7.748
[info]   CI (99.9%): [111410.266, 111469.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1338.999 ±(99.9%) 31.067 MB/sec [Average]
[info]   (min, avg, max) = (1328.609, 1338.999, 1348.588), stdev = 8.068
[info]   CI (99.9%): [1307.932, 1370.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   109769.076 ±(99.9%) 2464.720 B/op [Average]
[info]   (min, avg, max) = (108824.271, 109769.076, 110417.060), stdev = 640.080
[info]   CI (99.9%): [107304.356, 112233.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.169 ±(99.9%) 11.781 B/op [Average]
[info]   (min, avg, max) = (3.410, 7.169, 10.341), stdev = 3.059
[info]   CI (99.9%): [≈ 0, 18.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.45% complete, ETA 01:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20697.375 ops/s
[info] # Warmup Iteration   2: 30354.855 ops/s
[info] # Warmup Iteration   3: 30876.663 ops/s
[info] Iteration   1: 30425.497 ops/s
[info]                  ·gc.alloc.rate:                   817.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              42277.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33837.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 31155.521 ops/s
[info]                  ·gc.alloc.rate:                   836.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49602.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 31151.774 ops/s
[info]                  ·gc.alloc.rate:                   836.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33166.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31036.076 ops/s
[info]                  ·gc.alloc.rate:                   833.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50079.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30946.947 ops/s
[info]                  ·gc.alloc.rate:                   830.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33641.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   30943.163 ±(99.9%) 1163.569 ops/s [Average]
[info]   (min, avg, max) = (30425.497, 30943.163, 31155.521), stdev = 302.175
[info]   CI (99.9%): [29779.594, 32106.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   830.767 ±(99.9%) 30.375 MB/sec [Average]
[info]   (min, avg, max) = (817.291, 830.767, 836.390), stdev = 7.888
[info]   CI (99.9%): [800.392, 861.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42253.827 ±(99.9%) 50.048 B/op [Average]
[info]   (min, avg, max) = (42248.014, 42253.827, 42277.077), stdev = 12.997
[info]   CI (99.9%): [42203.778, 42303.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.344 ±(99.9%) 690.673 MB/sec [Average]
[info]   (min, avg, max) = (654.134, 788.344, 987.611), stdev = 179.366
[info]   CI (99.9%): [97.670, 1479.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40065.350 ±(99.9%) 34380.812 B/op [Average]
[info]   (min, avg, max) = (33166.597, 40065.350, 50079.376), stdev = 8928.588
[info]   CI (99.9%): [5684.539, 74446.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.858 ±(99.9%) 10.526 B/op [Average]
[info]   (min, avg, max) = (2.111, 4.858, 8.413), stdev = 2.734
[info]   CI (99.9%): [≈ 0, 15.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.76% complete, ETA 01:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26846.342 ops/s
[info] # Warmup Iteration   2: 28072.263 ops/s
[info] # Warmup Iteration   3: 28995.216 ops/s
[info] Iteration   1: 28899.007 ops/s
[info]                  ·gc.alloc.rate:                   388.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27863.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 29114.807 ops/s
[info]                  ·gc.alloc.rate:                   391.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17969.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29206.744 ops/s
[info]                  ·gc.alloc.rate:                   392.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17911.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29238.863 ops/s
[info]                  ·gc.alloc.rate:                   392.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17893.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28220.222 ops/s
[info]                  ·gc.alloc.rate:                   379.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18538.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   28935.929 ±(99.9%) 1623.113 ops/s [Average]
[info]   (min, avg, max) = (28220.222, 28935.929, 29238.863), stdev = 421.517
[info]   CI (99.9%): [27312.815, 30559.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   388.776 ±(99.9%) 21.550 MB/sec [Average]
[info]   (min, avg, max) = (379.289, 388.776, 392.823), stdev = 5.596
[info]   CI (99.9%): [367.227, 410.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.016 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (21144.015, 21144.016, 21144.022), stdev = 0.003
[info]   CI (99.9%): [21144.005, 21144.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   368.284 ±(99.9%) 308.540 MB/sec [Average]
[info]   (min, avg, max) = (332.399, 368.284, 511.619), stdev = 80.127
[info]   CI (99.9%): [59.744, 676.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20035.276 ±(99.9%) 16881.927 B/op [Average]
[info]   (min, avg, max) = (17893.421, 20035.276, 27863.344), stdev = 4384.183
[info]   CI (99.9%): [3153.349, 36917.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.347 ±(99.9%) 2.753 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.347, 1.626), stdev = 0.715
[info]   CI (99.9%): [≈ 0, 3.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.776 ±(99.9%) 148.784 B/op [Average]
[info]   (min, avg, max) = (0.314, 18.776, 87.879), stdev = 38.639
[info]   CI (99.9%): [≈ 0, 167.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.06% complete, ETA 01:05:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14993.418 ops/s
[info] # Warmup Iteration   2: 25119.854 ops/s
[info] # Warmup Iteration   3: 25471.337 ops/s
[info] Iteration   1: 25569.475 ops/s
[info]                  ·gc.alloc.rate:                   1323.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80858.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25323.152 ops/s
[info]                  ·gc.alloc.rate:                   1310.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82057.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.881 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25737.480 ops/s
[info]                  ·gc.alloc.rate:                   1332.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81223.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25736.234 ops/s
[info]                  ·gc.alloc.rate:                   1332.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81695.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25541.417 ops/s
[info]                  ·gc.alloc.rate:                   1321.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82667.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.414 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25581.552 ±(99.9%) 657.906 ops/s [Average]
[info]   (min, avg, max) = (25323.152, 25581.552, 25737.480), stdev = 170.856
[info]   CI (99.9%): [24923.645, 26239.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1324.161 ±(99.9%) 34.242 MB/sec [Average]
[info]   (min, avg, max) = (1310.847, 1324.161, 1332.557), stdev = 8.892
[info]   CI (99.9%): [1289.920, 1358.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81456.018 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (81456.017, 81456.018, 81456.025), stdev = 0.003
[info]   CI (99.9%): [81456.005, 81456.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1328.113 ±(99.9%) 43.882 MB/sec [Average]
[info]   (min, avg, max) = (1313.638, 1328.113, 1341.624), stdev = 11.396
[info]   CI (99.9%): [1284.231, 1371.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81700.605 ±(99.9%) 2722.717 B/op [Average]
[info]   (min, avg, max) = (80858.400, 81700.605, 82667.817), stdev = 707.081
[info]   CI (99.9%): [78977.889, 84423.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.608 ±(99.9%) 5.593 B/op [Average]
[info]   (min, avg, max) = (2.563, 4.608, 6.414), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 10.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.36% complete, ETA 01:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18085.579 ops/s
[info] # Warmup Iteration   2: 27723.023 ops/s
[info] # Warmup Iteration   3: 27442.768 ops/s
[info] Iteration   1: 27450.253 ops/s
[info]                  ·gc.alloc.rate:                   1880.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              107792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114463.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.548 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27346.746 ops/s
[info]                  ·gc.alloc.rate:                   1872.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              107764.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96381.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.386 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27880.444 ops/s
[info]                  ·gc.alloc.rate:                   1908.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114032.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.700 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27884.776 ops/s
[info]                  ·gc.alloc.rate:                   1909.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114467.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.525 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 27772.183 ops/s
[info]                  ·gc.alloc.rate:                   1901.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96038.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.359 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27666.880 ±(99.9%) 969.548 ops/s [Average]
[info]   (min, avg, max) = (27346.746, 27666.880, 27884.776), stdev = 251.788
[info]   CI (99.9%): [26697.333, 28636.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1894.501 ±(99.9%) 65.311 MB/sec [Average]
[info]   (min, avg, max) = (1872.572, 1894.501, 1909.160), stdev = 16.961
[info]   CI (99.9%): [1829.190, 1959.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   107762.606 ±(99.9%) 66.889 B/op [Average]
[info]   (min, avg, max) = (107752.015, 107762.606, 107792.016), stdev = 17.371
[info]   CI (99.9%): [107695.717, 107829.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1882.923 ±(99.9%) 698.359 MB/sec [Average]
[info]   (min, avg, max) = (1674.761, 1882.923, 2028.149), stdev = 181.362
[info]   CI (99.9%): [1184.564, 2581.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   107076.730 ±(99.9%) 38206.884 B/op [Average]
[info]   (min, avg, max) = (96038.931, 107076.730, 114467.698), stdev = 9922.206
[info]   CI (99.9%): [68869.846, 145283.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.704 ±(99.9%) 12.010 B/op [Average]
[info]   (min, avg, max) = (2.359, 5.704, 9.548), stdev = 3.119
[info]   CI (99.9%): [≈ 0, 17.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.67% complete, ETA 01:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12481.474 ops/s
[info] # Warmup Iteration   2: 27529.423 ops/s
[info] # Warmup Iteration   3: 27684.497 ops/s
[info] Iteration   1: 27801.464 ops/s
[info]                  ·gc.alloc.rate:                   1630.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92707.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.357 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27686.901 ops/s
[info]                  ·gc.alloc.rate:                   1623.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93925.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.283 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27685.590 ops/s
[info]                  ·gc.alloc.rate:                   1623.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94689.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.734 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27857.497 ops/s
[info]                  ·gc.alloc.rate:                   1633.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94707.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.880 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27870.839 ops/s
[info]                  ·gc.alloc.rate:                   1634.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95111.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.877 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   27780.458 ±(99.9%) 346.011 ops/s [Average]
[info]   (min, avg, max) = (27685.590, 27780.458, 27870.839), stdev = 89.858
[info]   CI (99.9%): [27434.447, 28126.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1629.448 ±(99.9%) 20.340 MB/sec [Average]
[info]   (min, avg, max) = (1623.850, 1629.448, 1634.732), stdev = 5.282
[info]   CI (99.9%): [1609.108, 1649.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   92312.017 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (92312.015, 92312.017, 92312.021), stdev = 0.003
[info]   CI (99.9%): [92312.007, 92312.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1663.285 ±(99.9%) 71.799 MB/sec [Average]
[info]   (min, avg, max) = (1637.747, 1663.285, 1684.305), stdev = 18.646
[info]   CI (99.9%): [1591.486, 1735.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94228.472 ±(99.9%) 3666.313 B/op [Average]
[info]   (min, avg, max) = (92707.739, 94228.472, 95111.365), stdev = 952.130
[info]   CI (99.9%): [90562.159, 97894.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.426 ±(99.9%) 8.275 B/op [Average]
[info]   (min, avg, max) = (2.357, 5.426, 8.283), stdev = 2.149
[info]   CI (99.9%): [≈ 0, 13.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 6.97% complete, ETA 01:04:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23368.549 ops/s
[info] # Warmup Iteration   2: 30048.735 ops/s
[info] # Warmup Iteration   3: 30465.512 ops/s
[info] Iteration   1: 30473.418 ops/s
[info]                  ·gc.alloc.rate:                   1690.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85956.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.300 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30348.365 ops/s
[info]                  ·gc.alloc.rate:                   1683.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86765.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.557 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 30822.735 ops/s
[info]                  ·gc.alloc.rate:                   1710.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85833.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.252 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 30850.488 ops/s
[info]                  ·gc.alloc.rate:                   1711.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86098.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.186 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30819.138 ops/s
[info]                  ·gc.alloc.rate:                   1710.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86423.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30662.829 ±(99.9%) 903.020 ops/s [Average]
[info]   (min, avg, max) = (30348.365, 30662.829, 30850.488), stdev = 234.511
[info]   CI (99.9%): [29759.809, 31565.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1701.357 ±(99.9%) 50.096 MB/sec [Average]
[info]   (min, avg, max) = (1683.949, 1701.357, 1711.752), stdev = 13.010
[info]   CI (99.9%): [1651.261, 1751.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   87328.016 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (87328.014, 87328.016, 87328.020), stdev = 0.003
[info]   CI (99.9%): [87328.005, 87328.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1679.659 ±(99.9%) 43.305 MB/sec [Average]
[info]   (min, avg, max) = (1664.242, 1679.659, 1692.287), stdev = 11.246
[info]   CI (99.9%): [1636.354, 1722.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   86215.402 ±(99.9%) 1456.012 B/op [Average]
[info]   (min, avg, max) = (85833.708, 86215.402, 86765.242), stdev = 378.122
[info]   CI (99.9%): [84759.389, 87671.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.922 ±(99.9%) 6.371 B/op [Average]
[info]   (min, avg, max) = (3.186, 4.922, 7.557), stdev = 1.654
[info]   CI (99.9%): [≈ 0, 11.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.27% complete, ETA 01:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23343.771 ops/s
[info] # Warmup Iteration   2: 30002.755 ops/s
[info] # Warmup Iteration   3: 30403.677 ops/s
[info] Iteration   1: 30527.989 ops/s
[info]                  ·gc.alloc.rate:                   1634.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68616.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.220 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30519.771 ops/s
[info]                  ·gc.alloc.rate:                   1634.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86173.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30635.823 ops/s
[info]                  ·gc.alloc.rate:                   1640.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86291.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.278 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 29897.769 ops/s
[info]                  ·gc.alloc.rate:                   1601.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88772.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.192 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30641.156 ops/s
[info]                  ·gc.alloc.rate:                   1640.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86893.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.277 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30444.502 ±(99.9%) 1197.464 ops/s [Average]
[info]   (min, avg, max) = (29897.769, 30444.502, 30641.156), stdev = 310.978
[info]   CI (99.9%): [29247.038, 31641.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1630.216 ±(99.9%) 63.544 MB/sec [Average]
[info]   (min, avg, max) = (1601.209, 1630.216, 1640.654), stdev = 16.502
[info]   CI (99.9%): [1566.672, 1693.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   84272.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (84272.014, 84272.015, 84272.019), stdev = 0.002
[info]   CI (99.9%): [84272.006, 84272.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1612.028 ±(99.9%) 605.826 MB/sec [Average]
[info]   (min, avg, max) = (1330.928, 1612.028, 1691.696), stdev = 157.331
[info]   CI (99.9%): [1006.202, 2217.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   83349.468 ±(99.9%) 31966.944 B/op [Average]
[info]   (min, avg, max) = (68616.083, 83349.468, 88772.328), stdev = 8301.714
[info]   CI (99.9%): [51382.524, 115316.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   3.867 ±(99.9%) 4.643 B/op [Average]
[info]   (min, avg, max) = (2.192, 3.867, 5.368), stdev = 1.206
[info]   CI (99.9%): [≈ 0, 8.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.58% complete, ETA 01:04:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5084.944 ops/s
[info] # Warmup Iteration   2: 8004.478 ops/s
[info] # Warmup Iteration   3: 8445.619 ops/s
[info] Iteration   1: 8430.075 ops/s
[info]                  ·gc.alloc.rate:                   1192.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245509.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.546 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8320.945 ops/s
[info]                  ·gc.alloc.rate:                   1176.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187299.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.875 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8427.391 ops/s
[info]                  ·gc.alloc.rate:                   1191.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247806.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8437.811 ops/s
[info]                  ·gc.alloc.rate:                   1193.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248726.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.647 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8446.299 ops/s
[info]                  ·gc.alloc.rate:                   1194.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187112.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8412.504 ±(99.9%) 199.119 ops/s [Average]
[info]   (min, avg, max) = (8320.945, 8412.504, 8446.299), stdev = 51.711
[info]   CI (99.9%): [8213.385, 8611.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1189.612 ±(99.9%) 28.195 MB/sec [Average]
[info]   (min, avg, max) = (1176.658, 1189.612, 1194.369), stdev = 7.322
[info]   CI (99.9%): [1161.417, 1217.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   222544.053 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (222544.051, 222544.053, 222544.055), stdev = 0.002
[info]   CI (99.9%): [222544.045, 222544.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1194.048 ±(99.9%) 692.471 MB/sec [Average]
[info]   (min, avg, max) = (990.310, 1194.048, 1333.762), stdev = 179.833
[info]   CI (99.9%): [501.576, 1886.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   223290.949 ±(99.9%) 126923.363 B/op [Average]
[info]   (min, avg, max) = (187112.727, 223290.949, 248726.203), stdev = 32961.594
[info]   CI (99.9%): [96367.586, 350214.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.674 ±(99.9%) 10.445 B/op [Average]
[info]   (min, avg, max) = (7.875, 11.674, 15.546), stdev = 2.712
[info]   CI (99.9%): [1.229, 22.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.88% complete, ETA 01:04:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13594.354 ops/s
[info] # Warmup Iteration   2: 18146.827 ops/s
[info] # Warmup Iteration   3: 18218.700 ops/s
[info] Iteration   1: 18053.478 ops/s
[info]                  ·gc.alloc.rate:                   1557.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144972.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.629 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18174.026 ops/s
[info]                  ·gc.alloc.rate:                   1567.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115748.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18153.016 ops/s
[info]                  ·gc.alloc.rate:                   1565.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145589.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.219 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18172.272 ops/s
[info]                  ·gc.alloc.rate:                   1567.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145964.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18300.898 ops/s
[info]                  ·gc.alloc.rate:                   1578.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              135736.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116285.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.370 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   18170.738 ±(99.9%) 339.092 ops/s [Average]
[info]   (min, avg, max) = (18053.478, 18170.738, 18300.898), stdev = 88.061
[info]   CI (99.9%): [17831.646, 18509.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1567.241 ±(99.9%) 29.188 MB/sec [Average]
[info]   (min, avg, max) = (1557.021, 1567.241, 1578.343), stdev = 7.580
[info]   CI (99.9%): [1538.053, 1596.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   135736.026 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (135736.024, 135736.026, 135736.033), stdev = 0.004
[info]   CI (99.9%): [135736.012, 135736.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1543.381 ±(99.9%) 700.041 MB/sec [Average]
[info]   (min, avg, max) = (1336.871, 1543.381, 1685.358), stdev = 181.798
[info]   CI (99.9%): [843.340, 2243.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133712.056 ±(99.9%) 62218.833 B/op [Average]
[info]   (min, avg, max) = (115748.899, 133712.056, 145964.087), stdev = 16158.033
[info]   CI (99.9%): [71493.223, 195930.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.128 ±(99.9%) 7.903 B/op [Average]
[info]   (min, avg, max) = (3.629, 6.128, 9.014), stdev = 2.052
[info]   CI (99.9%): [≈ 0, 14.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.18% complete, ETA 01:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28194.339 ops/s
[info] # Warmup Iteration   2: 40648.243 ops/s
[info] # Warmup Iteration   3: 41692.685 ops/s
[info] Iteration   1: 41782.006 ops/s
[info]                  ·gc.alloc.rate:                   1153.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49331.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.921 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41754.591 ops/s
[info]                  ·gc.alloc.rate:                   1152.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37198.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.923 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41254.136 ops/s
[info]                  ·gc.alloc.rate:                   1138.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50447.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.177 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41493.929 ops/s
[info]                  ·gc.alloc.rate:                   1145.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37811.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 41675.987 ops/s
[info]                  ·gc.alloc.rate:                   1150.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50464.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.145 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   41592.130 ±(99.9%) 846.620 ops/s [Average]
[info]   (min, avg, max) = (41254.136, 41592.130, 41782.006), stdev = 219.865
[info]   CI (99.9%): [40745.510, 42438.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1148.306 ±(99.9%) 23.709 MB/sec [Average]
[info]   (min, avg, max) = (1138.934, 1148.306, 1153.882), stdev = 6.157
[info]   CI (99.9%): [1124.597, 1172.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43448.132 ±(99.9%) 1.042 B/op [Average]
[info]   (min, avg, max) = (43448.010, 43448.132, 43448.616), stdev = 0.271
[info]   CI (99.9%): [43447.090, 43449.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.527 ±(99.9%) 699.172 MB/sec [Average]
[info]   (min, avg, max) = (986.967, 1190.527, 1336.266), stdev = 181.573
[info]   CI (99.9%): [491.356, 1889.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45050.768 ±(99.9%) 26594.911 B/op [Average]
[info]   (min, avg, max) = (37198.950, 45050.768, 50464.072), stdev = 6906.614
[info]   CI (99.9%): [18455.857, 71645.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.307 ±(99.9%) 2.495 B/op [Average]
[info]   (min, avg, max) = (2.369, 3.307, 3.923), stdev = 0.648
[info]   CI (99.9%): [0.811, 5.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.48% complete, ETA 01:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56385.769 ops/s
[info] # Warmup Iteration   2: 59975.262 ops/s
[info] # Warmup Iteration   3: 60427.578 ops/s
[info] Iteration   1: 62043.560 ops/s
[info]                  ·gc.alloc.rate:                   801.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16864.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 60532.840 ops/s
[info]                  ·gc.alloc.rate:                   782.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25927.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 62163.550 ops/s
[info]                  ·gc.alloc.rate:                   803.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16848.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 62220.186 ops/s
[info]                  ·gc.alloc.rate:               803.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16858.162 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 61918.580 ops/s
[info]                  ·gc.alloc.rate:                   800.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25457.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.116 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   61775.743 ±(99.9%) 2712.491 ops/s [Average]
[info]   (min, avg, max) = (60532.840, 61775.743, 62220.186), stdev = 704.425
[info]   CI (99.9%): [59063.252, 64488.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   798.306 ±(99.9%) 34.815 MB/sec [Average]
[info]   (min, avg, max) = (782.348, 798.306, 803.936), stdev = 9.041
[info]   CI (99.9%): [763.491, 833.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.201 ±(99.9%) 704.114 MB/sec [Average]
[info]   (min, avg, max) = (665.066, 799.201, 1001.538), stdev = 182.856
[info]   CI (99.9%): [95.087, 1503.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20391.290 ±(99.9%) 18645.311 B/op [Average]
[info]   (min, avg, max) = (16848.862, 20391.290, 25927.757), stdev = 4842.128
[info]   CI (99.9%): [1745.979, 39036.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.595 ±(99.9%) 3.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.595, 2.165), stdev = 0.923
[info]   CI (99.9%): [≈ 0, 5.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 8.79% complete, ETA 01:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13604.740 ops/s
[info] # Warmup Iteration   2: 30980.332 ops/s
[info] # Warmup Iteration   3: 31484.470 ops/s
[info] Iteration   1: 31657.008 ops/s
[info]                  ·gc.alloc.rate:                   2147.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98459.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.175 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 30980.260 ops/s
[info]                  ·gc.alloc.rate:                   2101.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2335.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118631.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.345 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 31926.242 ops/s
[info]                  ·gc.alloc.rate:                   2165.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99435.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.079 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 31936.663 ops/s
[info]                  ·gc.alloc.rate:                   2166.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2365.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116574.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.129 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 31920.295 ops/s
[info]                  ·gc.alloc.rate:                   2165.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100292.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.079 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   31684.093 ±(99.9%) 1581.032 ops/s [Average]
[info]   (min, avg, max) = (30980.260, 31684.093, 31936.663), stdev = 410.589
[info]   CI (99.9%): [30103.061, 33265.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2149.358 ±(99.9%) 107.645 MB/sec [Average]
[info]   (min, avg, max) = (2101.499, 2149.358, 2166.456), stdev = 27.955
[info]   CI (99.9%): [2041.713, 2257.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   106760.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (106760.014, 106760.015, 106760.019), stdev = 0.002
[info]   CI (99.9%): [106760.006, 106760.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2146.575 ±(99.9%) 721.593 MB/sec [Average]
[info]   (min, avg, max) = (1980.334, 2146.575, 2365.610), stdev = 187.395
[info]   CI (99.9%): [1424.982, 2868.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106678.491 ±(99.9%) 38582.571 B/op [Average]
[info]   (min, avg, max) = (98459.240, 106678.491, 118631.053), stdev = 10019.771
[info]   CI (99.9%): [68095.920, 145261.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.561 ±(99.9%) 5.539 B/op [Average]
[info]   (min, avg, max) = (3.079, 4.561, 6.345), stdev = 1.438
[info]   CI (99.9%): [≈ 0, 10.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.09% complete, ETA 01:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16433.841 ops/s
[info] # Warmup Iteration   2: 28102.915 ops/s
[info] # Warmup Iteration   3: 28320.145 ops/s
[info] Iteration   1: 28727.899 ops/s
[info]                  ·gc.alloc.rate:                   1674.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90048.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28778.256 ops/s
[info]                  ·gc.alloc.rate:                   1677.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90623.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.554 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28813.824 ops/s
[info]                  ·gc.alloc.rate:                   1679.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91220.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.137 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28818.822 ops/s
[info]                  ·gc.alloc.rate:                   1679.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91713.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.411 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28508.688 ops/s
[info]                  ·gc.alloc.rate:                   1661.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93170.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.597 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   28729.498 ±(99.9%) 495.472 ops/s [Average]
[info]   (min, avg, max) = (28508.688, 28729.498, 28818.822), stdev = 128.673
[info]   CI (99.9%): [28234.025, 29224.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1674.617 ±(99.9%) 29.025 MB/sec [Average]
[info]   (min, avg, max) = (1661.738, 1674.617, 1679.854), stdev = 7.538
[info]   CI (99.9%): [1645.593, 1703.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   91736.016 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (91736.015, 91736.016, 91736.022), stdev = 0.003
[info]   CI (99.9%): [91736.005, 91736.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1667.614 ±(99.9%) 67.793 MB/sec [Average]
[info]   (min, avg, max) = (1643.595, 1667.614, 1687.720), stdev = 17.606
[info]   CI (99.9%): [1599.821, 1735.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   91355.240 ±(99.9%) 4590.302 B/op [Average]
[info]   (min, avg, max) = (90048.421, 91355.240, 93170.389), stdev = 1192.087
[info]   CI (99.9%): [86764.937, 95945.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.968 ±(99.9%) 6.685 B/op [Average]
[info]   (min, avg, max) = (1.137, 2.968, 4.597), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 9.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.39% complete, ETA 01:03:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32554.202 ops/s
[info] # Warmup Iteration   2: 37704.045 ops/s
[info] # Warmup Iteration   3: 37139.937 ops/s
[info] Iteration   1: 38051.111 ops/s
[info]                  ·gc.alloc.rate:                   1629.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68840.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.444 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 37940.519 ops/s
[info]                  ·gc.alloc.rate:                   1624.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69442.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38018.088 ops/s
[info]                  ·gc.alloc.rate:                   1628.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69603.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.447 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 38184.223 ops/s
[info]                  ·gc.alloc.rate:                   1635.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55626.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.574 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 37993.359 ops/s
[info]                  ·gc.alloc.rate:                   1627.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70075.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   38037.460 ±(99.9%) 352.093 ops/s [Average]
[info]   (min, avg, max) = (37940.519, 38037.460, 38184.223), stdev = 91.438
[info]   CI (99.9%): [37685.367, 38389.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1629.124 ±(99.9%) 15.143 MB/sec [Average]
[info]   (min, avg, max) = (1624.933, 1629.124, 1635.439), stdev = 3.933
[info]   CI (99.9%): [1613.981, 1644.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   67408.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67408.011, 67408.012, 67408.012), stdev = 0.001
[info]   CI (99.9%): [67408.010, 67408.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.175 ±(99.9%) 566.552 MB/sec [Average]
[info]   (min, avg, max) = (1349.588, 1612.175, 1691.646), stdev = 147.132
[info]   CI (99.9%): [1045.623, 2178.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   66717.627 ±(99.9%) 23935.850 B/op [Average]
[info]   (min, avg, max) = (55626.063, 66717.627, 70075.230), stdev = 6216.064
[info]   CI (99.9%): [42781.777, 90653.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.619 ±(99.9%) 2.803 B/op [Average]
[info]   (min, avg, max) = (2.574, 3.619, 4.318), stdev = 0.728
[info]   CI (99.9%): [0.816, 6.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.70% complete, ETA 01:03:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31531.112 ops/s
[info] # Warmup Iteration   2: 37842.053 ops/s
[info] # Warmup Iteration   3: 37971.614 ops/s
[info] Iteration   1: 37940.575 ops/s
[info]                  ·gc.alloc.rate:                   1558.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68984.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.181 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 37900.490 ops/s
[info]                  ·gc.alloc.rate:                   1557.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69422.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.187 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 37974.554 ops/s
[info]                  ·gc.alloc.rate:                   1560.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55712.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.451 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37984.842 ops/s
[info]                  ·gc.alloc.rate:                   1560.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69831.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.863 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37503.441 ops/s
[info]                  ·gc.alloc.rate:                   1540.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70952.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   37860.780 ±(99.9%) 779.627 ops/s [Average]
[info]   (min, avg, max) = (37503.441, 37860.780, 37984.842), stdev = 202.467
[info]   CI (99.9%): [37081.153, 38640.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1555.648 ±(99.9%) 32.101 MB/sec [Average]
[info]   (min, avg, max) = (1540.959, 1555.648, 1560.677), stdev = 8.337
[info]   CI (99.9%): [1523.546, 1587.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   64664.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64664.011, 64664.011, 64664.012), stdev = 0.001
[info]   CI (99.9%): [64664.011, 64664.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1611.108 ±(99.9%) 575.292 MB/sec [Average]
[info]   (min, avg, max) = (1344.575, 1611.108, 1690.815), stdev = 149.401
[info]   CI (99.9%): [1035.816, 2186.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   66980.880 ±(99.9%) 24418.140 B/op [Average]
[info]   (min, avg, max) = (55712.761, 66980.880, 70952.487), stdev = 6341.313
[info]   CI (99.9%): [42562.740, 91399.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   3.810 ±(99.9%) 6.916 B/op [Average]
[info]   (min, avg, max) = (0.863, 3.810, 5.187), stdev = 1.796
[info]   CI (99.9%): [≈ 0, 10.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.00% complete, ETA 01:02:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268649.631 ops/s
[info] # Warmup Iteration   2: 324856.270 ops/s
[info] # Warmup Iteration   3: 326290.472 ops/s
[info] Iteration   1: 325972.957 ops/s
[info]                  ·gc.alloc.rate:                   1791.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9661.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 327044.695 ops/s
[info]                  ·gc.alloc.rate:                   1797.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8075.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.501 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 327353.939 ops/s
[info]                  ·gc.alloc.rate:                   1798.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8099.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 326557.003 ops/s
[info]                  ·gc.alloc.rate:                   1795.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9779.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 327860.042 ops/s
[info]                  ·gc.alloc.rate:                   1802.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8138.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.500 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   326957.727 ±(99.9%) 2796.077 ops/s [Average]
[info]   (min, avg, max) = (325972.957, 326957.727, 327860.042), stdev = 726.132
[info]   CI (99.9%): [324161.651, 329753.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1796.962 ±(99.9%) 15.984 MB/sec [Average]
[info]   (min, avg, max) = (1791.115, 1796.962, 1802.190), stdev = 4.151
[info]   CI (99.9%): [1780.978, 1812.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8648.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8648.001, 8648.001, 8648.001), stdev = 0.001
[info]   CI (99.9%): [8648.001, 8648.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1818.042 ±(99.9%) 695.444 MB/sec [Average]
[info]   (min, avg, max) = (1678.719, 1818.042, 2029.839), stdev = 180.605
[info]   CI (99.9%): [1122.598, 2513.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8750.803 ±(99.9%) 3413.354 B/op [Average]
[info]   (min, avg, max) = (8075.340, 8750.803, 9779.222), stdev = 886.437
[info]   CI (99.9%): [5337.449, 12164.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.441 ±(99.9%) 0.345 B/op [Average]
[info]   (min, avg, max) = (0.301, 0.441, 0.503), stdev = 0.090
[info]   CI (99.9%): [0.096, 0.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.30% complete, ETA 01:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460514.146 ops/s
[info] # Warmup Iteration   2: 687476.688 ops/s
[info] # Warmup Iteration   3: 664614.929 ops/s
[info] Iteration   1: 698480.922 ops/s
[info]                  ·gc.alloc.rate:                   578.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 696254.813 ops/s
[info]                  ·gc.alloc.rate:                   576.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1478.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 680926.810 ops/s
[info]                  ·gc.alloc.rate:                   564.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1512.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 687258.693 ops/s
[info]                  ·gc.alloc.rate:                   569.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1499.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 689086.042 ops/s
[info]                  ·gc.alloc.rate:               570.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 748.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   690401.456 ±(99.9%) 27290.429 ops/s [Average]
[info]   (min, avg, max) = (680926.810, 690401.456, 698480.922), stdev = 7087.238
[info]   CI (99.9%): [663111.027, 717691.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   572.020 ±(99.9%) 22.644 MB/sec [Average]
[info]   (min, avg, max) = (564.166, 572.020, 578.699), stdev = 5.881
[info]   CI (99.9%): [549.376, 594.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.478 ±(99.9%) 689.810 MB/sec [Average]
[info]   (min, avg, max) = (326.735, 523.478, 654.839), stdev = 179.142
[info]   CI (99.9%): [≈ 0, 1213.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1194.906 ±(99.9%) 1591.359 B/op [Average]
[info]   (min, avg, max) = (736.241, 1194.906, 1512.019), stdev = 413.271
[info]   CI (99.9%): [≈ 0, 2786.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.458 ±(99.9%) 3.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.146), stdev = 0.944
[info]   CI (99.9%): [≈ 0, 4.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.034 ±(99.9%) 8.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.034, 4.836), stdev = 2.126
[info]   CI (99.9%): [≈ 0, 9.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.61% complete, ETA 01:02:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1646369.462 ops/s
[info] # Warmup Iteration   2: 1730902.164 ops/s
[info] # Warmup Iteration   3: 1731877.560 ops/s
[info] Iteration   1: 1748006.963 ops/s
[info]                  ·gc.alloc.rate:               337.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1745204.040 ops/s
[info]                  ·gc.alloc.rate:                   337.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1745050.246 ops/s
[info]                  ·gc.alloc.rate:                   337.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1739466.044 ops/s
[info]                  ·gc.alloc.rate:                   335.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1718572.435 ops/s
[info]                  ·gc.alloc.rate:                   331.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1739259.946 ±(99.9%) 46102.747 ops/s [Average]
[info]   (min, avg, max) = (1718572.435, 1739259.946, 1748006.963), stdev = 11972.737
[info]   CI (99.9%): [1693157.199, 1785362.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   335.956 ±(99.9%) 8.933 MB/sec [Average]
[info]   (min, avg, max) = (331.948, 335.956, 337.631), stdev = 2.320
[info]   CI (99.9%): [327.023, 344.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   301.776 ±(99.9%) 161.609 MB/sec [Average]
[info]   (min, avg, max) = (255.796, 301.776, 332.464), stdev = 41.969
[info]   CI (99.9%): [140.167, 463.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   273.198 ±(99.9%) 150.220 B/op [Average]
[info]   (min, avg, max) = (230.317, 273.198, 304.418), stdev = 39.012
[info]   CI (99.9%): [122.978, 423.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.338 ±(99.9%) 2.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 1.599), stdev = 0.706
[info]   CI (99.9%): [≈ 0, 3.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.305 ±(99.9%) 2.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.305, 1.442), stdev = 0.636
[info]   CI (99.9%): [≈ 0, 2.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.91% complete, ETA 01:02:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67541.852 ops/s
[info] # Warmup Iteration   2: 105920.237 ops/s
[info] # Warmup Iteration   3: 106487.703 ops/s
[info] Iteration   1: 106825.859 ops/s
[info]                  ·gc.alloc.rate:                   3882.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3717.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54754.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.454 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 105543.779 ops/s
[info]                  ·gc.alloc.rate:                   3835.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60754.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.415 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 106731.416 ops/s
[info]                  ·gc.alloc.rate:                   3877.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3743.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55195.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.535 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 106263.196 ops/s
[info]                  ·gc.alloc.rate:                   3860.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55460.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.850 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 106634.559 ops/s
[info]                  ·gc.alloc.rate:                   3873.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60291.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.844 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   106399.762 ±(99.9%) 2017.495 ops/s [Average]
[info]   (min, avg, max) = (105543.779, 106399.762, 106825.859), stdev = 523.937
[info]   CI (99.9%): [104382.267, 108417.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3865.989 ±(99.9%) 72.243 MB/sec [Average]
[info]   (min, avg, max) = (3835.759, 3865.989, 3882.383), stdev = 18.761
[info]   CI (99.9%): [3793.747, 3938.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3873.319 ±(99.9%) 728.861 MB/sec [Average]
[info]   (min, avg, max) = (3717.979, 3873.319, 4084.776), stdev = 189.283
[info]   CI (99.9%): [3144.457, 4602.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57291.506 ±(99.9%) 11417.869 B/op [Average]
[info]   (min, avg, max) = (54754.825, 57291.506, 60754.766), stdev = 2965.184
[info]   CI (99.9%): [45873.637, 68709.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.229), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.219 ±(99.9%) 2.875 B/op [Average]
[info]   (min, avg, max) = (1.535, 2.219, 3.415), stdev = 0.747
[info]   CI (99.9%): [≈ 0, 5.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   57.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.21% complete, ETA 01:02:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281868.155 ops/s
[info] # Warmup Iteration   2: 369811.277 ops/s
[info] # Warmup Iteration   3: 375543.119 ops/s
[info] Iteration   1: 375557.912 ops/s
[info]                  ·gc.alloc.rate:                   1281.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5544.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 372922.855 ops/s
[info]                  ·gc.alloc.rate:                   1272.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4207.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 374257.641 ops/s
[info]                  ·gc.alloc.rate:                   1276.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5612.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 375648.213 ops/s
[info]                  ·gc.alloc.rate:                   1281.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5615.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 375468.258 ops/s
[info]                  ·gc.alloc.rate:                   1280.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5640.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   374770.976 ±(99.9%) 4537.424 ops/s [Average]
[info]   (min, avg, max) = (372922.855, 374770.976, 375648.213), stdev = 1178.355
[info]   CI (99.9%): [370233.552, 379308.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1278.391 ±(99.9%) 14.788 MB/sec [Average]
[info]   (min, avg, max) = (1272.481, 1278.391, 1281.216), stdev = 3.840
[info]   CI (99.9%): [1263.603, 1293.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1268.215 ±(99.9%) 583.957 MB/sec [Average]
[info]   (min, avg, max) = (997.339, 1268.215, 1345.658), stdev = 151.652
[info]   CI (99.9%): [684.258, 1852.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5323.991 ±(99.9%) 2407.665 B/op [Average]
[info]   (min, avg, max) = (4207.304, 5323.991, 5640.598), stdev = 625.263
[info]   CI (99.9%): [2916.326, 7731.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.280 ±(99.9%) 0.373 B/op [Average]
[info]   (min, avg, max) = (0.175, 0.280, 0.439), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.52% complete, ETA 01:01:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676499.773 ops/s
[info] # Warmup Iteration   2: 894060.679 ops/s
[info] # Warmup Iteration   3: 890945.228 ops/s
[info] Iteration   1: 876310.064 ops/s
[info]                  ·gc.alloc.rate:                   619.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 875007.081 ops/s
[info]                  ·gc.alloc.rate:                   618.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1176.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 876061.673 ops/s
[info]                  ·gc.alloc.rate:                   619.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1175.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 900239.809 ops/s
[info]                  ·gc.alloc.rate:                   636.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1146.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 895339.015 ops/s
[info]                  ·gc.alloc.rate:                   632.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   884591.528 ±(99.9%) 46907.571 ops/s [Average]
[info]   (min, avg, max) = (875007.081, 884591.528, 900239.809), stdev = 12181.747
[info]   CI (99.9%): [837683.957, 931499.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   625.125 ±(99.9%) 32.929 MB/sec [Average]
[info]   (min, avg, max) = (618.513, 625.125, 636.059), stdev = 8.552
[info]   CI (99.9%): [592.196, 658.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.001, 1112.001), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.096 ±(99.9%) 6.165 MB/sec [Average]
[info]   (min, avg, max) = (653.430, 655.096, 657.641), stdev = 1.601
[info]   CI (99.9%): [648.931, 661.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1165.464 ±(99.9%) 53.111 B/op [Average]
[info]   (min, avg, max) = (1146.003, 1165.464, 1176.671), stdev = 13.793
[info]   CI (99.9%): [1112.353, 1218.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.465 ±(99.9%) 3.507 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.465, 2.094), stdev = 0.911
[info]   CI (99.9%): [≈ 0, 3.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.834 ±(99.9%) 6.302 B/op [Average]
[info]   (min, avg, max) = (0.073, 0.834, 3.761), stdev = 1.637
[info]   CI (99.9%): [≈ 0, 7.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 11.82% complete, ETA 01:01:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1987256.890 ops/s
[info] # Warmup Iteration   2: 2056352.826 ops/s
[info] # Warmup Iteration   3: 2148711.703 ops/s
[info] Iteration   1: 2138771.608 ops/s
[info]                  ·gc.alloc.rate:                   989.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2141627.495 ops/s
[info]                  ·gc.alloc.rate:                   990.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2139390.593 ops/s
[info]                  ·gc.alloc.rate:                   989.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     735.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2141608.323 ops/s
[info]                  ·gc.alloc.rate:                   990.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2147563.952 ops/s
[info]                  ·gc.alloc.rate:                   993.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     737.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2141792.394 ±(99.9%) 13375.896 ops/s [Average]
[info]   (min, avg, max) = (2138771.608, 2141792.394, 2147563.952), stdev = 3473.678
[info]   CI (99.9%): [2128416.498, 2155168.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   990.763 ±(99.9%) 6.217 MB/sec [Average]
[info]   (min, avg, max) = (989.257, 990.763, 993.354), stdev = 1.614
[info]   CI (99.9%): [984.546, 996.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.947 ±(99.9%) 16.529 MB/sec [Average]
[info]   (min, avg, max) = (995.200, 999.947, 1005.854), stdev = 4.293
[info]   CI (99.9%): [983.418, 1016.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   734.747 ±(99.9%) 8.878 B/op [Average]
[info]   (min, avg, max) = (732.363, 734.747, 737.161), stdev = 2.306
[info]   CI (99.9%): [725.869, 743.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.061, 0.076), stdev = 0.015
[info]   CI (99.9%): [0.003, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.12% complete, ETA 01:01:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2016926.036 ops/s
[info] # Warmup Iteration   2: 2197362.740 ops/s
[info] # Warmup Iteration   3: 2142258.110 ops/s
[info] Iteration   1: 2205377.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2199195.721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2199093.154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2198290.331 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2193903.464 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2199172.073 ±(99.9%) 15765.580 ops/s [Average]
[info]   (min, avg, max) = (2193903.464, 2199172.073, 2205377.693), stdev = 4094.271
[info]   CI (99.9%): [2183406.492, 2214937.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.42% complete, ETA 01:01:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 392199.026 ops/s
[info] # Warmup Iteration   2: 500044.017 ops/s
[info] # Warmup Iteration   3: 502176.903 ops/s
[info] Iteration   1: 503966.380 ops/s
[info]                  ·gc.alloc.rate:                   589.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2053.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 505624.585 ops/s
[info]                  ·gc.alloc.rate:                   591.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2044.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 501316.272 ops/s
[info]                  ·gc.alloc.rate:               586.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1031.003 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 500850.538 ops/s
[info]                  ·gc.alloc.rate:                   585.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2066.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 495108.756 ops/s
[info]                  ·gc.alloc.rate:                   579.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2094.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   501373.306 ±(99.9%) 15440.859 ops/s [Average]
[info]   (min, avg, max) = (495108.756, 501373.306, 505624.585), stdev = 4009.942
[info]   CI (99.9%): [485932.447, 516814.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   586.187 ±(99.9%) 17.684 MB/sec [Average]
[info]   (min, avg, max) = (579.058, 586.187, 591.124), stdev = 4.592
[info]   CI (99.9%): [568.503, 603.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   591.844 ±(99.9%) 567.111 MB/sec [Average]
[info]   (min, avg, max) = (328.391, 591.844, 659.078), stdev = 147.277
[info]   CI (99.9%): [24.733, 1158.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1857.837 ±(99.9%) 1781.292 B/op [Average]
[info]   (min, avg, max) = (1031.003, 1857.837, 2094.268), stdev = 462.596
[info]   CI (99.9%): [76.545, 3639.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.444 ±(99.9%) 3.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 2.115), stdev = 0.934
[info]   CI (99.9%): [≈ 0, 4.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.386 ±(99.9%) 11.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.386, 6.605), stdev = 2.918
[info]   CI (99.9%): [≈ 0, 12.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 12.73% complete, ETA 01:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148623.710 ops/s
[info] # Warmup Iteration   2: 177937.967 ops/s
[info] # Warmup Iteration   3: 180581.405 ops/s
[info] Iteration   1: 180474.128 ops/s
[info]                  ·gc.alloc.rate:                   2218.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17532.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.545 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 179701.925 ops/s
[info]                  ·gc.alloc.rate:                   2209.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20658.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.459 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 179388.028 ops/s
[info]                  ·gc.alloc.rate:                   2204.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20776.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.731 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 180957.277 ops/s
[info]                  ·gc.alloc.rate:                   2224.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17705.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.905 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 180013.006 ops/s
[info]                  ·gc.alloc.rate:                   2212.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20792.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.092 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   180106.873 ±(99.9%) 2395.146 ops/s [Average]
[info]   (min, avg, max) = (179388.028, 180106.873, 180957.277), stdev = 622.012
[info]   CI (99.9%): [177711.727, 182502.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2213.779 ±(99.9%) 28.962 MB/sec [Average]
[info]   (min, avg, max) = (2204.828, 2213.779, 2224.103), stdev = 7.521
[info]   CI (99.9%): [2184.816, 2242.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19344.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19344.002, 19344.002, 19344.003), stdev = 0.001
[info]   CI (99.9%): [19344.002, 19344.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2230.391 ±(99.9%) 729.990 MB/sec [Average]
[info]   (min, avg, max) = (2010.407, 2230.391, 2378.126), stdev = 189.576
[info]   CI (99.9%): [1500.401, 2960.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19493.244 ±(99.9%) 6594.354 B/op [Average]
[info]   (min, avg, max) = (17532.812, 19493.244, 20792.137), stdev = 1712.533
[info]   CI (99.9%): [12898.890, 26087.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.946 ±(99.9%) 1.352 B/op [Average]
[info]   (min, avg, max) = (0.545, 0.946, 1.459), stdev = 0.351
[info]   CI (99.9%): [≈ 0, 2.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.03% complete, ETA 01:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285341.579 ops/s
[info] # Warmup Iteration   2: 430519.845 ops/s
[info] # Warmup Iteration   3: 430006.013 ops/s
[info] Iteration   1: 428558.385 ops/s
[info]                  ·gc.alloc.rate:                   355.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1878.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 429383.018 ops/s
[info]                  ·gc.alloc.rate:               355.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 937.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 428793.131 ops/s
[info]                  ·gc.alloc.rate:                   355.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1199.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 430860.771 ops/s
[info]                  ·gc.alloc.rate:                   357.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1193.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 428181.002 ops/s
[info]                  ·gc.alloc.rate:               354.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1199.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   429155.261 ±(99.9%) 4037.312 ops/s [Average]
[info]   (min, avg, max) = (428181.002, 429155.261, 430860.771), stdev = 1048.477
[info]   CI (99.9%): [425117.949, 433192.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   355.617 ±(99.9%) 3.301 MB/sec [Average]
[info]   (min, avg, max) = (354.919, 355.617, 357.021), stdev = 0.857
[info]   CI (99.9%): [352.316, 358.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.500 ±(99.9%) 368.354 MB/sec [Average]
[info]   (min, avg, max) = (255.837, 349.500, 511.581), stdev = 95.660
[info]   CI (99.9%): [≈ 0, 717.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1281.820 ±(99.9%) 1356.358 B/op [Average]
[info]   (min, avg, max) = (937.582, 1281.820, 1878.870), stdev = 352.242
[info]   CI (99.9%): [≈ 0, 2638.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.449 ±(99.9%) 3.699 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.449, 2.167), stdev = 0.961
[info]   CI (99.9%): [≈ 0, 4.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.647 ±(99.9%) 13.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.647, 7.954), stdev = 3.527
[info]   CI (99.9%): [≈ 0, 15.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.33% complete, ETA 01:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 940354.243 ops/s
[info] # Warmup Iteration   2: 982856.923 ops/s
[info] # Warmup Iteration   3: 989854.572 ops/s
[info] Iteration   1: 982612.670 ops/s
[info]                  ·gc.alloc.rate:               189.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 409.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 991807.503 ops/s
[info]                  ·gc.alloc.rate:      191.620 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 982759.439 ops/s
[info]                  ·gc.alloc.rate:               189.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 409.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 987275.924 ops/s
[info]                  ·gc.alloc.rate:               190.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 407.782 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 987003.747 ops/s
[info]                  ·gc.alloc.rate:                   190.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   986291.856 ±(99.9%) 14651.677 ops/s [Average]
[info]   (min, avg, max) = (982612.670, 986291.856, 991807.503), stdev = 3804.994
[info]   CI (99.9%): [971640.179, 1000943.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   190.522 ±(99.9%) 2.873 MB/sec [Average]
[info]   (min, avg, max) = (189.823, 190.522, 191.620), stdev = 0.746
[info]   CI (99.9%): [187.649, 193.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.647 ±(99.9%) 440.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.647, 255.837), stdev = 114.401
[info]   CI (99.9%): [≈ 0, 645.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   327.012 ±(99.9%) 703.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 327.012, 409.719), stdev = 182.808
[info]   CI (99.9%): [≈ 0, 1030.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 13.64% complete, ETA 01:00:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50767.515 ops/s
[info] # Warmup Iteration   2: 80506.537 ops/s
[info] # Warmup Iteration   3: 81218.939 ops/s
[info] Iteration   1: 80574.147 ops/s
[info]                  ·gc.alloc.rate:                   3325.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3029.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59165.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.440 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 80670.915 ops/s
[info]                  ·gc.alloc.rate:                   3326.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66072.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.249 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 81106.397 ops/s
[info]                  ·gc.alloc.rate:                   3347.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65913.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.424 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 82035.549 ops/s
[info]                  ·gc.alloc.rate:                   3385.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65293.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.594 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 82397.093 ops/s
[info]                  ·gc.alloc.rate:                   3400.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65019.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.579 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   81356.820 ±(99.9%) 3156.938 ops/s [Average]
[info]   (min, avg, max) = (80574.147, 81356.820, 82397.093), stdev = 819.847
[info]   CI (99.9%): [78199.882, 84513.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3357.083 ±(99.9%) 132.297 MB/sec [Average]
[info]   (min, avg, max) = (3325.490, 3357.083, 3400.454), stdev = 34.357
[info]   CI (99.9%): [3224.786, 3489.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.006), stdev = 0.001
[info]   CI (99.9%): [64952.005, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3323.482 ±(99.9%) 634.149 MB/sec [Average]
[info]   (min, avg, max) = (3029.241, 3323.482, 3403.966), stdev = 164.686
[info]   CI (99.9%): [2689.333, 3957.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64292.853 ±(99.9%) 11161.771 B/op [Average]
[info]   (min, avg, max) = (59165.789, 64292.853, 66072.907), stdev = 2898.677
[info]   CI (99.9%): [53131.082, 75454.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.158, 0.187), stdev = 0.032
[info]   CI (99.9%): [0.037, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.057 ±(99.9%) 2.262 B/op [Average]
[info]   (min, avg, max) = (2.424, 3.057, 3.594), stdev = 0.587
[info]   CI (99.9%): [0.796, 5.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 13.94% complete, ETA 01:00:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202339.382 ops/s
[info] # Warmup Iteration   2: 252127.522 ops/s
[info] # Warmup Iteration   3: 248548.868 ops/s
[info] Iteration   1: 248805.923 ops/s
[info]                  ·gc.alloc.rate:                   1372.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8385.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 249902.903 ops/s
[info]                  ·gc.alloc.rate:                   1378.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8384.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 245492.642 ops/s
[info]                  ·gc.alloc.rate:                   1354.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8575.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 250005.728 ops/s
[info]                  ·gc.alloc.rate:                   1378.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8454.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 250069.496 ops/s
[info]                  ·gc.alloc.rate:                   1379.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8483.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   248855.338 ±(99.9%) 7507.555 ops/s [Average]
[info]   (min, avg, max) = (245492.642, 248855.338, 250069.496), stdev = 1949.688
[info]   CI (99.9%): [241347.783, 256362.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1372.534 ±(99.9%) 41.238 MB/sec [Average]
[info]   (min, avg, max) = (1354.099, 1372.534, 1379.131), stdev = 10.709
[info]   CI (99.9%): [1331.297, 1413.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.002, 8680.002, 8680.002), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1337.181 ±(99.9%) 34.194 MB/sec [Average]
[info]   (min, avg, max) = (1325.585, 1337.181, 1347.949), stdev = 8.880
[info]   CI (99.9%): [1302.987, 1371.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8456.777 ±(99.9%) 305.515 B/op [Average]
[info]   (min, avg, max) = (8384.329, 8456.777, 8575.702), stdev = 79.341
[info]   CI (99.9%): [8151.262, 8762.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.446 ±(99.9%) 0.761 B/op [Average]
[info]   (min, avg, max) = (0.133, 0.446, 0.656), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 1.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 14.24% complete, ETA 01:00:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1123330.939 ops/s
[info] # Warmup Iteration   2: 1599891.147 ops/s
[info] # Warmup Iteration   3: 1649397.754 ops/s
[info] Iteration   1: 1622932.867 ops/s
[info]                  ·gc.alloc.rate:                   833.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1617558.350 ops/s
[info]                  ·gc.alloc.rate:                   830.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1610317.060 ops/s
[info]                  ·gc.alloc.rate:                   826.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     641.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1611196.640 ops/s
[info]                  ·gc.alloc.rate:                   827.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1652620.531 ops/s
[info]                  ·gc.alloc.rate:                   848.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     946.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1622925.090 ±(99.9%) 66893.237 ops/s [Average]
[info]   (min, avg, max) = (1610317.060, 1622925.090, 1652620.531), stdev = 17371.961
[info]   CI (99.9%): [1556031.852, 1689818.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   833.173 ±(99.9%) 34.378 MB/sec [Average]
[info]   (min, avg, max) = (826.699, 833.173, 848.438), stdev = 8.928
[info]   CI (99.9%): [798.794, 867.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   855.129 ±(99.9%) 701.993 MB/sec [Average]
[info]   (min, avg, max) = (654.128, 855.129, 993.591), stdev = 182.305
[info]   CI (99.9%): [153.137, 1557.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   828.854 ±(99.9%) 670.880 B/op [Average]
[info]   (min, avg, max) = (634.376, 828.854, 965.352), stdev = 174.225
[info]   CI (99.9%): [157.974, 1499.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.065, 0.122), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.55% complete, ETA 00:59:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1634728.709 ops/s
[info] # Warmup Iteration   2: 1761809.361 ops/s
[info] # Warmup Iteration   3: 1784246.593 ops/s
[info] Iteration   1: 1802436.725 ops/s
[info]                  ·gc.alloc.rate:                   485.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     513.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1805589.669 ops/s
[info]                  ·gc.alloc.rate:               486.611 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.167 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1781632.500 ops/s
[info]                  ·gc.alloc.rate:                   479.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     586.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1752119.037 ops/s
[info]                  ·gc.alloc.rate:               472.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 297.707 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1768404.647 ops/s
[info]                  ·gc.alloc.rate:               476.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 294.958 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1782036.516 ±(99.9%) 87214.454 ops/s [Average]
[info]   (min, avg, max) = (1752119.037, 1782036.516, 1805589.669), stdev = 22649.317
[info]   CI (99.9%): [1694822.062, 1869250.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   480.134 ±(99.9%) 23.553 MB/sec [Average]
[info]   (min, avg, max) = (472.108, 480.134, 486.611), stdev = 6.117
[info]   CI (99.9%): [456.582, 503.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.155 ±(99.9%) 628.452 MB/sec [Average]
[info]   (min, avg, max) = (331.419, 449.155, 663.485), stdev = 163.207
[info]   CI (99.9%): [≈ 0, 1077.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   396.193 ±(99.9%) 548.360 B/op [Average]
[info]   (min, avg, max) = (289.167, 396.193, 586.100), stdev = 142.407
[info]   CI (99.9%): [≈ 0, 944.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 3.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.792), stdev = 0.793
[info]   CI (99.9%): [≈ 0, 3.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.328 ±(99.9%) 2.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 1.565), stdev = 0.692
[info]   CI (99.9%): [≈ 0, 2.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 14.85% complete, ETA 00:59:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1746412.709 ops/s
[info] # Warmup Iteration   2: 1959460.342 ops/s
[info] # Warmup Iteration   3: 1959913.025 ops/s
[info] Iteration   1: 1960470.243 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1953413.469 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1953625.430 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1957596.286 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1960162.898 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1957053.665 ±(99.9%) 13148.497 ops/s [Average]
[info]   (min, avg, max) = (1953413.469, 1957053.665, 1960470.243), stdev = 3414.623
[info]   CI (99.9%): [1943905.168, 1970202.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 15.15% complete, ETA 00:59:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26192.232 ops/s
[info] # Warmup Iteration   2: 37522.875 ops/s
[info] # Warmup Iteration   3: 37992.385 ops/s
[info] Iteration   1: 38482.849 ops/s
[info]                  ·gc.alloc.rate:                   1685.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              68947.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67688.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.406 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38460.636 ops/s
[info]                  ·gc.alloc.rate:                   1684.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68202.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.815 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38518.422 ops/s
[info]                  ·gc.alloc.rate:                   1687.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68482.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.701 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 37472.046 ops/s
[info]                  ·gc.alloc.rate:                   1641.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70759.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.749 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38561.987 ops/s
[info]                  ·gc.alloc.rate:                   1689.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69002.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.549 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38299.188 ±(99.9%) 1786.599 ops/s [Average]
[info]   (min, avg, max) = (37472.046, 38299.188, 38561.987), stdev = 463.974
[info]   CI (99.9%): [36512.589, 40085.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1677.835 ±(99.9%) 77.548 MB/sec [Average]
[info]   (min, avg, max) = (1641.934, 1677.835, 1689.275), stdev = 20.139
[info]   CI (99.9%): [1600.286, 1755.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68944.749 ±(99.9%) 6.348 B/op [Average]
[info]   (min, avg, max) = (68944.011, 68944.749, 68947.698), stdev = 1.649
[info]   CI (99.9%): [68938.401, 68951.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.725 ±(99.9%) 55.130 MB/sec [Average]
[info]   (min, avg, max) = (1654.976, 1674.725, 1690.707), stdev = 14.317
[info]   CI (99.9%): [1619.594, 1729.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68826.961 ±(99.9%) 4544.111 B/op [Average]
[info]   (min, avg, max) = (67688.294, 68826.961, 70759.365), stdev = 1180.091
[info]   CI (99.9%): [64282.850, 73371.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.244 ±(99.9%) 8.140 B/op [Average]
[info]   (min, avg, max) = (1.701, 3.244, 6.815), stdev = 2.114
[info]   CI (99.9%): [≈ 0, 11.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 15.45% complete, ETA 00:59:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19887.716 ops/s
[info] # Warmup Iteration   2: 25297.096 ops/s
[info] # Warmup Iteration   3: 25589.821 ops/s
[info] Iteration   1: 25521.230 ops/s
[info]                  ·gc.alloc.rate:                   1574.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              97072.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102553.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25191.810 ops/s
[info]                  ·gc.alloc.rate:                   1553.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              97064.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104478.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.104 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25593.778 ops/s
[info]                  ·gc.alloc.rate:                   1578.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              97056.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82619.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25816.442 ops/s
[info]                  ·gc.alloc.rate:                   1592.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              97056.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102782.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.807 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25528.399 ops/s
[info]                  ·gc.alloc.rate:                   1574.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              97056.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104233.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.267 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25530.332 ±(99.9%) 862.253 ops/s [Average]
[info]   (min, avg, max) = (25191.810, 25530.332, 25816.442), stdev = 223.924
[info]   CI (99.9%): [24668.079, 26392.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1574.709 ±(99.9%) 53.174 MB/sec [Average]
[info]   (min, avg, max) = (1553.673, 1574.709, 1592.099), stdev = 13.809
[info]   CI (99.9%): [1521.535, 1627.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   97060.902 ±(99.9%) 27.747 B/op [Average]
[info]   (min, avg, max) = (97056.017, 97060.902, 97072.018), stdev = 7.206
[info]   CI (99.9%): [97033.155, 97088.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611.329 ±(99.9%) 576.962 MB/sec [Average]
[info]   (min, avg, max) = (1344.038, 1611.329, 1691.223), stdev = 149.835
[info]   CI (99.9%): [1034.368, 2188.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   99333.465 ±(99.9%) 36127.413 B/op [Average]
[info]   (min, avg, max) = (82619.547, 99333.465, 104478.887), stdev = 9382.174
[info]   CI (99.9%): [63206.053, 135460.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.687 ±(99.9%) 10.860 B/op [Average]
[info]   (min, avg, max) = (3.807, 6.687, 10.267), stdev = 2.820
[info]   CI (99.9%): [≈ 0, 17.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 15.76% complete, ETA 00:58:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35100.637 ops/s
[info] # Warmup Iteration   2: 57127.304 ops/s
[info] # Warmup Iteration   3: 56909.554 ops/s
[info] Iteration   1: 57665.645 ops/s
[info]                  ·gc.alloc.rate:                   1011.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26781.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.841 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57988.888 ops/s
[info]                  ·gc.alloc.rate:                   1016.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26713.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.955 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58231.536 ops/s
[info]                  ·gc.alloc.rate:                   1020.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26692.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.688 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 58222.481 ops/s
[info]                  ·gc.alloc.rate:                   1020.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26840.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58209.357 ops/s
[info]                  ·gc.alloc.rate:                   1020.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26953.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   58063.581 ±(99.9%) 940.537 ops/s [Average]
[info]   (min, avg, max) = (57665.645, 58063.581, 58231.536), stdev = 244.254
[info]   CI (99.9%): [57123.045, 59004.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1017.785 ±(99.9%) 15.768 MB/sec [Average]
[info]   (min, avg, max) = (1011.096, 1017.785, 1020.622), stdev = 4.095
[info]   CI (99.9%): [1002.016, 1033.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27584.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27584.007, 27584.008, 27584.008), stdev = 0.001
[info]   CI (99.9%): [27584.007, 27584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   988.726 ±(99.9%) 23.842 MB/sec [Average]
[info]   (min, avg, max) = (981.669, 988.726, 996.920), stdev = 6.192
[info]   CI (99.9%): [964.884, 1012.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26796.378 ±(99.9%) 406.459 B/op [Average]
[info]   (min, avg, max) = (26692.433, 26796.378, 26953.760), stdev = 105.556
[info]   CI (99.9%): [26389.919, 27202.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.034 ±(99.9%) 5.255 B/op [Average]
[info]   (min, avg, max) = (0.563, 2.034, 3.955), stdev = 1.365
[info]   CI (99.9%): [≈ 0, 7.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 16.06% complete, ETA 00:58:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62588.936 ops/s
[info] # Warmup Iteration   2: 67577.473 ops/s
[info] # Warmup Iteration   3: 66826.096 ops/s
[info] Iteration   1: 66448.315 ops/s
[info]                  ·gc.alloc.rate:               446.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6058.762 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 66747.730 ops/s
[info]                  ·gc.alloc.rate:                   448.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15691.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 67593.217 ops/s
[info]                  ·gc.alloc.rate:               454.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7739.770 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 65250.789 ops/s
[info]                  ·gc.alloc.rate:                   438.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8017.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 66092.402 ops/s
[info]                  ·gc.alloc.rate:                   444.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15831.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   66426.490 ±(99.9%) 3311.784 ops/s [Average]
[info]   (min, avg, max) = (65250.789, 66426.490, 67593.217), stdev = 860.060
[info]   CI (99.9%): [63114.707, 69738.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   446.781 ±(99.9%) 21.971 MB/sec [Average]
[info]   (min, avg, max) = (438.983, 446.781, 454.559), stdev = 5.706
[info]   CI (99.9%): [424.810, 468.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10584.006, 10584.007, 10584.007), stdev = 0.001
[info]   CI (99.9%): [10584.005, 10584.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.265 ±(99.9%) 765.397 MB/sec [Average]
[info]   (min, avg, max) = (255.797, 450.265, 665.481), stdev = 198.771
[info]   CI (99.9%): [≈ 0, 1215.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10667.868 ±(99.9%) 18137.199 B/op [Average]
[info]   (min, avg, max) = (6058.762, 10667.868, 15831.513), stdev = 4710.173
[info]   CI (99.9%): [≈ 0, 28805.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 2.786 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.646), stdev = 0.724
[info]   CI (99.9%): [≈ 0, 3.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.361 ±(99.9%) 65.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.361, 38.823), stdev = 17.060
[info]   CI (99.9%): [≈ 0, 74.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 16.36% complete, ETA 00:58:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18970.315 ops/s
[info] # Warmup Iteration   2: 33724.674 ops/s
[info] # Warmup Iteration   3: 33567.828 ops/s
[info] Iteration   1: 33830.288 ops/s
[info]                  ·gc.alloc.rate:                   1731.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76870.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.842 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33877.147 ops/s
[info]                  ·gc.alloc.rate:                   1733.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77320.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.835 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34088.090 ops/s
[info]                  ·gc.alloc.rate:                   1744.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77306.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34019.847 ops/s
[info]                  ·gc.alloc.rate:                   1740.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77861.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.889 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34096.546 ops/s
[info]                  ·gc.alloc.rate:                   1745.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93569.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.763 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33982.384 ±(99.9%) 470.891 ops/s [Average]
[info]   (min, avg, max) = (33830.288, 33982.384, 34096.546), stdev = 122.289
[info]   CI (99.9%): [33511.493, 34453.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1739.072 ±(99.9%) 24.051 MB/sec [Average]
[info]   (min, avg, max) = (1731.123, 1739.072, 1745.049), stdev = 6.246
[info]   CI (99.9%): [1715.021, 1763.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80536.014 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (80536.013, 80536.014, 80536.017), stdev = 0.002
[info]   CI (99.9%): [80536.006, 80536.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1740.395 ±(99.9%) 619.471 MB/sec [Average]
[info]   (min, avg, max) = (1652.334, 1740.395, 2027.449), stdev = 160.875
[info]   CI (99.9%): [1120.924, 2359.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80585.581 ±(99.9%) 27980.655 B/op [Average]
[info]   (min, avg, max) = (76870.575, 80585.581, 93569.073), stdev = 7266.487
[info]   CI (99.9%): [52604.926, 108566.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.435 ±(99.9%) 4.230 B/op [Average]
[info]   (min, avg, max) = (2.889, 4.435, 5.763), stdev = 1.099
[info]   CI (99.9%): [0.205, 8.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 16.67% complete, ETA 00:58:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29066.614 ops/s
[info] # Warmup Iteration   2: 39066.316 ops/s
[info] # Warmup Iteration   3: 38997.044 ops/s
[info] Iteration   1: 38759.717 ops/s
[info]                  ·gc.alloc.rate:                   611.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              24826.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26805.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38699.827 ops/s
[info]                  ·gc.alloc.rate:                   610.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26819.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38684.322 ops/s
[info]                  ·gc.alloc.rate:                   610.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26857.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 38906.921 ops/s
[info]                  ·gc.alloc.rate:                   613.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26731.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38836.680 ops/s
[info]                  ·gc.alloc.rate:               612.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13416.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38777.493 ±(99.9%) 361.651 ops/s [Average]
[info]   (min, avg, max) = (38684.322, 38777.493, 38906.921), stdev = 93.920
[info]   CI (99.9%): [38415.842, 39139.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   611.637 ±(99.9%) 5.645 MB/sec [Average]
[info]   (min, avg, max) = (610.168, 611.637, 613.635), stdev = 1.466
[info]   CI (99.9%): [605.992, 617.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24824.511 ±(99.9%) 4.298 B/op [Average]
[info]   (min, avg, max) = (24824.011, 24824.511, 24826.507), stdev = 1.116
[info]   CI (99.9%): [24820.213, 24828.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   594.328 ±(99.9%) 566.672 MB/sec [Average]
[info]   (min, avg, max) = (331.076, 594.328, 660.794), stdev = 147.163
[info]   CI (99.9%): [27.656, 1161.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24126.219 ±(99.9%) 23053.861 B/op [Average]
[info]   (min, avg, max) = (13416.633, 24126.219, 26857.378), stdev = 5987.015
[info]   CI (99.9%): [1072.358, 47180.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.384 ±(99.9%) 3.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 1.797), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 3.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.605 ±(99.9%) 123.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.605, 72.960), stdev = 32.076
[info]   CI (99.9%): [≈ 0, 139.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 16.97% complete, ETA 00:58:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27869.184 ops/s
[info] # Warmup Iteration   2: 41402.393 ops/s
[info] # Warmup Iteration   3: 41087.972 ops/s
[info] Iteration   1: 41299.318 ops/s
[info]                  ·gc.alloc.rate:               415.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19496.583 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 41379.095 ops/s
[info]                  ·gc.alloc.rate:                   416.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12427.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41618.467 ops/s
[info]                  ·gc.alloc.rate:                   418.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12356.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41481.311 ops/s
[info]                  ·gc.alloc.rate:               417.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24819.862 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 41233.094 ops/s
[info]                  ·gc.alloc.rate:                   414.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12497.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41402.257 ±(99.9%) 586.340 ops/s [Average]
[info]   (min, avg, max) = (41233.094, 41402.257, 41618.467), stdev = 152.271
[info]   CI (99.9%): [40815.917, 41988.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   416.301 ±(99.9%) 6.066 MB/sec [Average]
[info]   (min, avg, max) = (414.570, 416.301, 418.529), stdev = 1.575
[info]   CI (99.9%): [410.235, 422.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15824.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15824.010, 15824.011, 15824.011), stdev = 0.001
[info]   CI (99.9%): [15824.009, 15824.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.374 ±(99.9%) 573.739 MB/sec [Average]
[info]   (min, avg, max) = (326.741, 429.374, 654.307), stdev = 148.998
[info]   CI (99.9%): [≈ 0, 1003.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16319.612 ±(99.9%) 21766.344 B/op [Average]
[info]   (min, avg, max) = (12356.490, 16319.612, 24819.862), stdev = 5652.650
[info]   CI (99.9%): [≈ 0, 38085.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.440 ±(99.9%) 3.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.440, 2.094), stdev = 0.925
[info]   CI (99.9%): [≈ 0, 4.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.718 ±(99.9%) 135.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.718, 79.647), stdev = 35.202
[info]   CI (99.9%): [≈ 0, 152.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 17.27% complete, ETA 00:57:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38243.901 ops/s
[info] # Warmup Iteration   2: 44117.918 ops/s
[info] # Warmup Iteration   3: 43910.333 ops/s
[info] Iteration   1: 43645.367 ops/s
[info]                  ·gc.alloc.rate:               428.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9224.375 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 44078.288 ops/s
[info]                  ·gc.alloc.rate:                   432.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11856.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44519.350 ops/s
[info]                  ·gc.alloc.rate:                   436.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23467.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 44538.530 ops/s
[info]                  ·gc.alloc.rate:                   436.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11722.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 44519.205 ops/s
[info]                  ·gc.alloc.rate:               436.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11728.037 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44260.148 ±(99.9%) 1519.445 ops/s [Average]
[info]   (min, avg, max) = (43645.367, 44260.148, 44538.530), stdev = 394.595
[info]   CI (99.9%): [42740.703, 45779.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   434.246 ±(99.9%) 14.585 MB/sec [Average]
[info]   (min, avg, max) = (428.374, 434.246, 436.925), stdev = 3.788
[info]   CI (99.9%): [419.661, 448.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   15440.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15440.010, 15440.010, 15440.010), stdev = 0.001
[info]   CI (99.9%): [15440.009, 15440.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.063 ±(99.9%) 617.472 MB/sec [Average]
[info]   (min, avg, max) = (255.925, 383.063, 663.821), stdev = 160.355
[info]   CI (99.9%): [≈ 0, 1000.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13600.003 ±(99.9%) 21661.958 B/op [Average]
[info]   (min, avg, max) = (9224.375, 13600.003, 23467.849), stdev = 5625.542
[info]   CI (99.9%): [≈ 0, 35261.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 3.001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.771), stdev = 0.779
[info]   CI (99.9%): [≈ 0, 3.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.533 ±(99.9%) 107.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.533, 63.248), stdev = 27.833
[info]   CI (99.9%): [≈ 0, 120.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.58% complete, ETA 00:57:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37698.562 ops/s
[info] # Warmup Iteration   2: 44282.976 ops/s
[info] # Warmup Iteration   3: 44825.679 ops/s
[info] Iteration   1: 44928.421 ops/s
[info]                  ·gc.alloc.rate:               389.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8960.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 44601.367 ops/s
[info]                  ·gc.alloc.rate:                   386.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20732.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 45030.416 ops/s
[info]                  ·gc.alloc.rate:                   390.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11594.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 44984.576 ops/s
[info]                  ·gc.alloc.rate:                   389.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11606.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.457 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 44964.948 ops/s
[info]                  ·gc.alloc.rate:               389.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11611.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44901.946 ±(99.9%) 662.350 ops/s [Average]
[info]   (min, avg, max) = (44601.367, 44901.946, 45030.416), stdev = 172.010
[info]   CI (99.9%): [44239.595, 45564.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   389.160 ±(99.9%) 5.645 MB/sec [Average]
[info]   (min, avg, max) = (386.601, 389.160, 390.261), stdev = 1.466
[info]   CI (99.9%): [383.515, 394.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13640.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13640.010, 13640.010, 13640.010), stdev = 0.001
[info]   CI (99.9%): [13640.009, 13640.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.726 ±(99.9%) 489.977 MB/sec [Average]
[info]   (min, avg, max) = (255.792, 367.726, 587.616), stdev = 127.246
[info]   CI (99.9%): [≈ 0, 857.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   12901.060 ±(99.9%) 17423.951 B/op [Average]
[info]   (min, avg, max) = (8960.592, 12901.060, 20732.230), stdev = 4524.945
[info]   CI (99.9%): [≈ 0, 30325.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 3.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.803), stdev = 0.795
[info]   CI (99.9%): [≈ 0, 3.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   13.449 ±(99.9%) 108.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.449, 63.607), stdev = 28.055
[info]   CI (99.9%): [≈ 0, 121.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 17.88% complete, ETA 00:57:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10784.346 ops/s
[info] # Warmup Iteration   2: 14966.620 ops/s
[info] # Warmup Iteration   3: 15010.702 ops/s
[info] Iteration   1: 15352.629 ops/s
[info]                  ·gc.alloc.rate:                   1096.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              112336.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101893.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.671 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15363.620 ops/s
[info]                  ·gc.alloc.rate:                   1096.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              112346.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102018.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.530 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15335.869 ops/s
[info]                  ·gc.alloc.rate:                   1094.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136720.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.681 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15003.062 ops/s
[info]                  ·gc.alloc.rate:                   1071.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105199.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15240.504 ops/s
[info]                  ·gc.alloc.rate:                   1087.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              112344.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103901.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15259.137 ±(99.9%) 582.284 ops/s [Average]
[info]   (min, avg, max) = (15003.062, 15259.137, 15363.620), stdev = 151.217
[info]   CI (99.9%): [14676.853, 15841.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1089.360 ±(99.9%) 41.762 MB/sec [Average]
[info]   (min, avg, max) = (1071.038, 1089.360, 1096.819), stdev = 10.846
[info]   CI (99.9%): [1047.597, 1131.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112346.147 ±(99.9%) 25.533 B/op [Average]
[info]   (min, avg, max) = (112336.030, 112346.147, 112352.042), stdev = 6.631
[info]   CI (99.9%): [112320.615, 112371.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1066.314 ±(99.9%) 572.608 MB/sec [Average]
[info]   (min, avg, max) = (994.387, 1066.314, 1332.184), stdev = 148.704
[info]   CI (99.9%): [493.706, 1638.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   109946.842 ±(99.9%) 57875.124 B/op [Average]
[info]   (min, avg, max) = (101893.669, 109946.842, 136720.256), stdev = 15029.986
[info]   CI (99.9%): [52071.718, 167821.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.423 ±(99.9%) 18.059 B/op [Average]
[info]   (min, avg, max) = (2.184, 9.423, 15.047), stdev = 4.690
[info]   CI (99.9%): [≈ 0, 27.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 18.18% complete, ETA 00:57:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9839.423 ops/s
[info] # Warmup Iteration   2: 15577.472 ops/s
[info] # Warmup Iteration   3: 15758.137 ops/s
[info] Iteration   1: 15538.015 ops/s
[info]                  ·gc.alloc.rate:                   942.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              95464.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99385.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15823.429 ops/s
[info]                  ·gc.alloc.rate:                   960.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              95486.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65192.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15833.649 ops/s
[info]                  ·gc.alloc.rate:                   960.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98130.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15777.687 ops/s
[info]                  ·gc.alloc.rate:                   957.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98877.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15631.885 ops/s
[info]                  ·gc.alloc.rate:                   948.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              95478.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100303.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15720.933 ±(99.9%) 501.398 ops/s [Average]
[info]   (min, avg, max) = (15538.015, 15720.933, 15833.649), stdev = 130.212
[info]   CI (99.9%): [15219.535, 16222.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   953.816 ±(99.9%) 31.000 MB/sec [Average]
[info]   (min, avg, max) = (942.455, 953.816, 960.709), stdev = 8.051
[info]   CI (99.9%): [922.816, 984.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   95484.168 ±(99.9%) 52.075 B/op [Average]
[info]   (min, avg, max) = (95464.030, 95484.168, 95496.038), stdev = 13.524
[info]   CI (99.9%): [95432.093, 95536.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   922.299 ±(99.9%) 574.601 MB/sec [Average]
[info]   (min, avg, max) = (655.547, 922.299, 996.304), stdev = 149.222
[info]   CI (99.9%): [347.698, 1496.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92377.763 ±(99.9%) 58597.799 B/op [Average]
[info]   (min, avg, max) = (65192.316, 92377.763, 100303.531), stdev = 15217.662
[info]   CI (99.9%): [33779.964, 150975.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.435 ±(99.9%) 12.368 B/op [Average]
[info]   (min, avg, max) = (2.069, 5.435, 10.542), stdev = 3.212
[info]   CI (99.9%): [≈ 0, 17.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 18.48% complete, ETA 00:57:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71054.584 ops/s
[info] # Warmup Iteration   2: 75303.263 ops/s
[info] # Warmup Iteration   3: 75723.635 ops/s
[info] Iteration   1: 75268.870 ops/s
[info]                  ·gc.alloc.rate:               195.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5348.740 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 75510.307 ops/s
[info]                  ·gc.alloc.rate:      196.510 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 72489.030 ops/s
[info]                  ·gc.alloc.rate:               188.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5553.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 75068.711 ops/s
[info]                  ·gc.alloc.rate:                   195.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5363.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 75572.592 ops/s
[info]                  ·gc.alloc.rate:               196.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5327.228 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   74781.902 ±(99.9%) 4995.616 ops/s [Average]
[info]   (min, avg, max) = (72489.030, 74781.902, 75572.592), stdev = 1297.346
[info]   CI (99.9%): [69786.285, 79777.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   194.633 ±(99.9%) 12.958 MB/sec [Average]
[info]   (min, avg, max) = (188.685, 194.633, 196.681), stdev = 3.365
[info]   CI (99.9%): [181.675, 207.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.006, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.658 ±(99.9%) 440.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.658, 255.847), stdev = 114.407
[info]   CI (99.9%): [≈ 0, 645.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4318.604 ±(99.9%) 9302.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4318.604, 5553.990), stdev = 2415.880
[info]   CI (99.9%): [≈ 0, 13621.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.218), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 18.79% complete, ETA 00:56:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7332.199 ops/s
[info] # Warmup Iteration   2: 13571.623 ops/s
[info] # Warmup Iteration   3: 14126.118 ops/s
[info] Iteration   1: 14006.251 ops/s
[info]                  ·gc.alloc.rate:                   1342.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147641.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.356 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13878.855 ops/s
[info]                  ·gc.alloc.rate:                   1329.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149785.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.802 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14109.388 ops/s
[info]                  ·gc.alloc.rate:                   1351.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148199.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.288 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14003.461 ops/s
[info]                  ·gc.alloc.rate:                   1341.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150144.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.679 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14111.596 ops/s
[info]                  ·gc.alloc.rate:                   1352.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187107.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.608 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   14021.910 ±(99.9%) 369.071 ops/s [Average]
[info]   (min, avg, max) = (13878.855, 14021.910, 14111.596), stdev = 95.847
[info]   CI (99.9%): [13652.839, 14390.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1343.679 ±(99.9%) 35.660 MB/sec [Average]
[info]   (min, avg, max) = (1329.841, 1343.679, 1352.470), stdev = 9.261
[info]   CI (99.9%): [1308.019, 1379.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   150800.222 ±(99.9%) 1.614 B/op [Average]
[info]   (min, avg, max) = (150800.031, 150800.222, 150800.971), stdev = 0.419
[info]   CI (99.9%): [150798.608, 150801.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1395.561 ±(99.9%) 608.994 MB/sec [Average]
[info]   (min, avg, max) = (1314.242, 1395.561, 1678.100), stdev = 158.154
[info]   CI (99.9%): [786.567, 2004.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   156575.736 ±(99.9%) 65846.389 B/op [Average]
[info]   (min, avg, max) = (147641.956, 156575.736, 187107.741), stdev = 17100.098
[info]   CI (99.9%): [90729.347, 222422.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.347 ±(99.9%) 11.049 B/op [Average]
[info]   (min, avg, max) = (4.679, 9.347, 11.802), stdev = 2.869
[info]   CI (99.9%): [≈ 0, 20.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 19.09% complete, ETA 00:56:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42561.597 ops/s
[info] # Warmup Iteration   2: 55893.124 ops/s
[info] # Warmup Iteration   3: 54656.324 ops/s
[info] Iteration   1: 56353.402 ops/s
[info]                  ·gc.alloc.rate:                   1397.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37022.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.581 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 56183.349 ops/s
[info]                  ·gc.alloc.rate:                   1393.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37293.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 56415.823 ops/s
[info]                  ·gc.alloc.rate:                   1398.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37317.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.742 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 56426.860 ops/s
[info]                  ·gc.alloc.rate:                   1398.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37455.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.742 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 55858.010 ops/s
[info]                  ·gc.alloc.rate:                   1384.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37980.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.346 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   56247.489 ±(99.9%) 918.392 ops/s [Average]
[info]   (min, avg, max) = (55858.010, 56247.489, 56426.860), stdev = 238.503
[info]   CI (99.9%): [55329.097, 57165.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1394.522 ±(99.9%) 22.721 MB/sec [Average]
[info]   (min, avg, max) = (1384.752, 1394.522, 1398.835), stdev = 5.901
[info]   CI (99.9%): [1371.801, 1417.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39016.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39016.008, 39016.008, 39016.008), stdev = 0.001
[info]   CI (99.9%): [39016.007, 39016.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1337.224 ±(99.9%) 34.054 MB/sec [Average]
[info]   (min, avg, max) = (1325.629, 1337.224, 1348.008), stdev = 8.844
[info]   CI (99.9%): [1303.170, 1371.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37413.868 ±(99.9%) 1361.593 B/op [Average]
[info]   (min, avg, max) = (37022.573, 37413.868, 37980.731), stdev = 353.601
[info]   CI (99.9%): [36052.274, 38775.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.099 ±(99.9%) 4.928 B/op [Average]
[info]   (min, avg, max) = (0.581, 2.099, 4.082), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 7.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 19.39% complete, ETA 00:56:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55552.552 ops/s
[info] # Warmup Iteration   2: 80940.564 ops/s
[info] # Warmup Iteration   3: 80218.582 ops/s
[info] Iteration   1: 79928.241 ops/s
[info]                  ·gc.alloc.rate:                   1210.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25840.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 80802.089 ops/s
[info]                  ·gc.alloc.rate:                   1223.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19261.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 80399.603 ops/s
[info]                  ·gc.alloc.rate:                   1217.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25949.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.815 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 80896.235 ops/s
[info]                  ·gc.alloc.rate:                   1224.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25933.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 80915.056 ops/s
[info]                  ·gc.alloc.rate:                   1225.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19545.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   80588.245 ±(99.9%) 1632.083 ops/s [Average]
[info]   (min, avg, max) = (79928.241, 80588.245, 80915.056), stdev = 423.847
[info]   CI (99.9%): [78956.162, 82220.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1220.282 ±(99.9%) 24.669 MB/sec [Average]
[info]   (min, avg, max) = (1210.301, 1220.282, 1225.232), stdev = 6.407
[info]   CI (99.9%): [1195.613, 1244.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23832.005, 23832.006, 23832.006), stdev = 0.001
[info]   CI (99.9%): [23832.005, 23832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.914 ±(99.9%) 690.113 MB/sec [Average]
[info]   (min, avg, max) = (988.851, 1192.914, 1332.959), stdev = 179.220
[info]   CI (99.9%): [502.801, 1883.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23306.029 ±(99.9%) 13723.652 B/op [Average]
[info]   (min, avg, max) = (19261.889, 23306.029, 25949.364), stdev = 3563.989
[info]   CI (99.9%): [9582.377, 37029.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.893 ±(99.9%) 2.029 B/op [Average]
[info]   (min, avg, max) = (0.405, 0.893, 1.620), stdev = 0.527
[info]   CI (99.9%): [≈ 0, 2.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 19.70% complete, ETA 00:56:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253830.068 ops/s
[info] # Warmup Iteration   2: 280278.825 ops/s
[info] # Warmup Iteration   3: 286132.441 ops/s
[info] Iteration   1: 285052.692 ops/s
[info]                  ·gc.alloc.rate:                   452.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1412.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 285339.097 ops/s
[info]                  ·gc.alloc.rate:                   452.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3659.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.943 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 289011.814 ops/s
[info]                  ·gc.alloc.rate:               458.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1806.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 290178.297 ops/s
[info]                  ·gc.alloc.rate:                   460.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1799.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 289661.106 ops/s
[info]                  ·gc.alloc.rate:                   459.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3605.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   287848.601 ±(99.9%) 9467.504 ops/s [Average]
[info]   (min, avg, max) = (285052.692, 287848.601, 290178.297), stdev = 2458.681
[info]   CI (99.9%): [278381.098, 297316.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   456.529 ±(99.9%) 15.177 MB/sec [Average]
[info]   (min, avg, max) = (452.034, 456.529, 460.171), stdev = 3.942
[info]   CI (99.9%): [441.351, 471.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.001, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.300 ±(99.9%) 762.801 MB/sec [Average]
[info]   (min, avg, max) = (255.786, 449.300, 663.789), stdev = 198.097
[info]   CI (99.9%): [≈ 0, 1212.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2456.569 ±(99.9%) 4178.986 B/op [Average]
[info]   (min, avg, max) = (1412.377, 2456.569, 3659.579), stdev = 1085.269
[info]   CI (99.9%): [≈ 0, 6635.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.390 ±(99.9%) 3.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.803), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 3.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.147 ±(99.9%) 16.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.147, 9.943), stdev = 4.360
[info]   CI (99.9%): [≈ 0, 18.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 20.00% complete, ETA 00:56:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298969.215 ops/s
[info] # Warmup Iteration   2: 326256.624 ops/s
[info] # Warmup Iteration   3: 328814.498 ops/s
[info] Iteration   1: 336260.707 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 336295.047 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 336134.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 336435.025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 336200.370 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   336265.219 ±(99.9%) 434.458 ops/s [Average]
[info]   (min, avg, max) = (336134.947, 336265.219, 336435.025), stdev = 112.827
[info]   CI (99.9%): [335830.761, 336699.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 20.30% complete, ETA 00:55:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51664.676 ops/s
[info] # Warmup Iteration   2: 72604.814 ops/s
[info] # Warmup Iteration   3: 72670.587 ops/s
[info] Iteration   1: 72764.372 ops/s
[info]                  ·gc.alloc.rate:                   1230.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              26616.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28471.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.251 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 72747.230 ops/s
[info]                  ·gc.alloc.rate:                   1230.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              26616.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28622.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.702 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 73645.313 ops/s
[info]                  ·gc.alloc.rate:                   1245.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              26616.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21310.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 72484.578 ops/s
[info]                  ·gc.alloc.rate:                   1225.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              26616.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29000.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 72914.986 ops/s
[info]                  ·gc.alloc.rate:                   1233.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              26616.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28958.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.247 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   72911.296 ±(99.9%) 1688.790 ops/s [Average]
[info]   (min, avg, max) = (72484.578, 72911.296, 73645.313), stdev = 438.573
[info]   CI (99.9%): [71222.506, 74600.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1233.074 ±(99.9%) 28.422 MB/sec [Average]
[info]   (min, avg, max) = (1225.791, 1233.074, 1245.408), stdev = 7.381
[info]   CI (99.9%): [1204.652, 1261.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26616.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26616.006, 26616.006, 26616.006), stdev = 0.001
[info]   CI (99.9%): [26616.005, 26616.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1262.802 ±(99.9%) 573.097 MB/sec [Average]
[info]   (min, avg, max) = (997.159, 1262.802, 1341.599), stdev = 148.832
[info]   CI (99.9%): [689.705, 1835.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27272.708 ±(99.9%) 12862.693 B/op [Average]
[info]   (min, avg, max) = (21310.611, 27272.708, 29000.950), stdev = 3340.401
[info]   CI (99.9%): [14410.014, 40135.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.251 ±(99.9%) 3.273 B/op [Average]
[info]   (min, avg, max) = (0.890, 2.251, 3.164), stdev = 0.850
[info]   CI (99.9%): [≈ 0, 5.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 20.61% complete, ETA 00:55:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20082.650 ops/s
[info] # Warmup Iteration   2: 26881.019 ops/s
[info] # Warmup Iteration   3: 26725.695 ops/s
[info] Iteration   1: 27039.082 ops/s
[info]                  ·gc.alloc.rate:                   600.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38346.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27049.300 ops/s
[info]                  ·gc.alloc.rate:                   600.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              34959.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38293.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27211.135 ops/s
[info]                  ·gc.alloc.rate:               604.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          34960.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      329.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19072.024 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 27190.280 ops/s
[info]                  ·gc.alloc.rate:                   603.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38191.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26739.191 ops/s
[info]                  ·gc.alloc.rate:               594.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38894.234 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27045.798 ±(99.9%) 726.222 ops/s [Average]
[info]   (min, avg, max) = (26739.191, 27045.798, 27211.135), stdev = 188.598
[info]   CI (99.9%): [26319.575, 27772.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   600.790 ±(99.9%) 15.889 MB/sec [Average]
[info]   (min, avg, max) = (594.101, 600.790, 604.431), stdev = 4.126
[info]   CI (99.9%): [584.901, 616.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34959.900 ±(99.9%) 1.001 B/op [Average]
[info]   (min, avg, max) = (34959.435, 34959.900, 34960.017), stdev = 0.260
[info]   CI (99.9%): [34958.899, 34960.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   593.484 ±(99.9%) 567.744 MB/sec [Average]
[info]   (min, avg, max) = (329.740, 593.484, 660.958), stdev = 147.441
[info]   CI (99.9%): [25.740, 1161.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34559.525 ±(99.9%) 33354.580 B/op [Average]
[info]   (min, avg, max) = (19072.024, 34559.525, 38894.234), stdev = 8662.078
[info]   CI (99.9%): [1204.945, 67914.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.383 ±(99.9%) 3.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.813), stdev = 0.800
[info]   CI (99.9%): [≈ 0, 3.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22.314 ±(99.9%) 179.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.314, 105.526), stdev = 46.544
[info]   CI (99.9%): [≈ 0, 201.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 20.91% complete, ETA 00:55:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48209.111 ops/s
[info] # Warmup Iteration   2: 74272.019 ops/s
[info] # Warmup Iteration   3: 71394.051 ops/s
[info] Iteration   1: 74028.303 ops/s
[info]                  ·gc.alloc.rate:                   923.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              19632.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20833.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 73195.572 ops/s
[info]                  ·gc.alloc.rate:                   912.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              19632.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21112.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 72989.347 ops/s
[info]                  ·gc.alloc.rate:                   910.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              19632.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21265.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 72773.700 ops/s
[info]                  ·gc.alloc.rate:                   907.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              19632.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21429.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 73225.452 ops/s
[info]                  ·gc.alloc.rate:                   913.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              19632.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14246.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   73242.475 ±(99.9%) 1830.412 ops/s [Average]
[info]   (min, avg, max) = (72773.700, 73242.475, 74028.303), stdev = 475.352
[info]   CI (99.9%): [71412.063, 75072.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   913.779 ±(99.9%) 23.200 MB/sec [Average]
[info]   (min, avg, max) = (907.763, 913.779, 923.754), stdev = 6.025
[info]   CI (99.9%): [890.579, 936.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   19632.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19632.006, 19632.006, 19632.006), stdev = 0.001
[info]   CI (99.9%): [19632.005, 19632.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   920.510 ±(99.9%) 554.638 MB/sec [Average]
[info]   (min, avg, max) = (662.955, 920.510, 990.884), stdev = 144.038
[info]   CI (99.9%): [365.872, 1475.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19777.455 ±(99.9%) 11936.502 B/op [Average]
[info]   (min, avg, max) = (14246.178, 19777.455, 21429.646), stdev = 3099.872
[info]   CI (99.9%): [7840.954, 31713.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.875 ±(99.9%) 3.259 B/op [Average]
[info]   (min, avg, max) = (0.898, 1.875, 3.098), stdev = 0.846
[info]   CI (99.9%): [≈ 0, 5.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 21.21% complete, ETA 00:55:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108928.482 ops/s
[info] # Warmup Iteration   2: 124271.899 ops/s
[info] # Warmup Iteration   3: 126430.586 ops/s
[info] Iteration   1: 125618.602 ops/s
[info]                  ·gc.alloc.rate:                   490.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7365.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 127986.863 ops/s
[info]                  ·gc.alloc.rate:                   499.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4083.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 126484.990 ops/s
[info]                  ·gc.alloc.rate:                   493.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8255.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 126931.201 ops/s
[info]                  ·gc.alloc.rate:               495.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4113.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 126476.079 ops/s
[info]                  ·gc.alloc.rate:                   493.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8264.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   126699.547 ±(99.9%) 3320.977 ops/s [Average]
[info]   (min, avg, max) = (125618.602, 126699.547, 127986.863), stdev = 862.447
[info]   CI (99.9%): [123378.570, 130020.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   494.602 ±(99.9%) 12.965 MB/sec [Average]
[info]   (min, avg, max) = (490.369, 494.602, 499.620), stdev = 3.367
[info]   CI (99.9%): [481.637, 507.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.855 ±(99.9%) 657.547 MB/sec [Average]
[info]   (min, avg, max) = (331.742, 515.855, 664.140), stdev = 170.763
[info]   CI (99.9%): [≈ 0, 1173.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6416.470 ±(99.9%) 8268.666 B/op [Average]
[info]   (min, avg, max) = (4083.521, 6416.470, 8264.402), stdev = 2147.346
[info]   CI (99.9%): [≈ 0, 14685.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.356 ±(99.9%) 2.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.615), stdev = 0.704
[info]   CI (99.9%): [≈ 0, 3.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.461 ±(99.9%) 33.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.461, 20.237), stdev = 8.829
[info]   CI (99.9%): [≈ 0, 38.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 21.52% complete, ETA 00:55:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9851.924 ops/s
[info] # Warmup Iteration   2: 21126.805 ops/s
[info] # Warmup Iteration   3: 21922.657 ops/s
[info] Iteration   1: 21875.370 ops/s
[info]                  ·gc.alloc.rate:                   1222.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93743.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.493 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21974.541 ops/s
[info]                  ·gc.alloc.rate:                   1227.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93941.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.964 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 22043.705 ops/s
[info]                  ·gc.alloc.rate:                   1231.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70651.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22060.990 ops/s
[info]                  ·gc.alloc.rate:                   1232.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94715.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21987.370 ops/s
[info]                  ·gc.alloc.rate:                   1228.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95606.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.470 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21988.395 ±(99.9%) 280.971 ops/s [Average]
[info]   (min, avg, max) = (21875.370, 21988.395, 22060.990), stdev = 72.967
[info]   CI (99.9%): [21707.424, 22269.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1228.700 ±(99.9%) 15.837 MB/sec [Average]
[info]   (min, avg, max) = (1222.341, 1228.700, 1232.698), stdev = 4.113
[info]   CI (99.9%): [1212.863, 1244.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87944.055 ±(99.9%) 0.279 B/op [Average]
[info]   (min, avg, max) = (87944.020, 87944.055, 87944.184), stdev = 0.073
[info]   CI (99.9%): [87943.775, 87944.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1253.516 ±(99.9%) 570.010 MB/sec [Average]
[info]   (min, avg, max) = (989.716, 1253.516, 1335.674), stdev = 148.030
[info]   CI (99.9%): [683.506, 1823.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   89731.914 ±(99.9%) 41168.618 B/op [Average]
[info]   (min, avg, max) = (70651.773, 89731.914, 95606.861), stdev = 10691.359
[info]   CI (99.9%): [48563.297, 130900.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.363 ±(99.9%) 3.097 B/op [Average]
[info]   (min, avg, max) = (4.470, 5.363, 5.964), stdev = 0.804
[info]   CI (99.9%): [2.266, 8.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 21.82% complete, ETA 00:54:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133565.530 ops/s
[info] # Warmup Iteration   2: 166691.938 ops/s
[info] # Warmup Iteration   3: 167468.738 ops/s
[info] Iteration   1: 165043.207 ops/s
[info]                  ·gc.alloc.rate:                   1079.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12596.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.794 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 164238.044 ops/s
[info]                  ·gc.alloc.rate:                   1074.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9527.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 168253.775 ops/s
[info]                  ·gc.alloc.rate:                   1100.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9331.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 164482.820 ops/s
[info]                  ·gc.alloc.rate:                   1075.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9580.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 164534.328 ops/s
[info]                  ·gc.alloc.rate:                   1076.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12820.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   165310.435 ±(99.9%) 6435.292 ops/s [Average]
[info]   (min, avg, max) = (164238.044, 165310.435, 168253.775), stdev = 1671.225
[info]   CI (99.9%): [158875.142, 171745.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1081.540 ±(99.9%) 42.193 MB/sec [Average]
[info]   (min, avg, max) = (1074.855, 1081.540, 1100.883), stdev = 10.957
[info]   CI (99.9%): [1039.347, 1123.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.931 ±(99.9%) 702.304 MB/sec [Average]
[info]   (min, avg, max) = (994.611, 1130.931, 1340.266), stdev = 182.386
[info]   CI (99.9%): [428.627, 1833.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10771.192 ±(99.9%) 6826.383 B/op [Average]
[info]   (min, avg, max) = (9331.130, 10771.192, 12820.460), stdev = 1772.790
[info]   CI (99.9%): [3944.809, 17597.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.516 ±(99.9%) 0.687 B/op [Average]
[info]   (min, avg, max) = (0.389, 0.516, 0.794), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 1.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 22.12% complete, ETA 00:54:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 385285.964 ops/s
[info] # Warmup Iteration   2: 550607.884 ops/s
[info] # Warmup Iteration   3: 553144.245 ops/s
[info] Iteration   1: 542520.532 ops/s
[info]                  ·gc.alloc.rate:                   548.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     947.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 556952.648 ops/s
[info]                  ·gc.alloc.rate:                   563.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1847.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 544566.523 ops/s
[info]                  ·gc.alloc.rate:                   550.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1890.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 537558.246 ops/s
[info]                  ·gc.alloc.rate:               543.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 957.636 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 556733.633 ops/s
[info]                  ·gc.alloc.rate:                   563.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   547666.316 ±(99.9%) 33718.599 ops/s [Average]
[info]   (min, avg, max) = (537558.246, 547666.316, 556952.648), stdev = 8756.613
[info]   CI (99.9%): [513947.718, 581384.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   554.118 ±(99.9%) 34.113 MB/sec [Average]
[info]   (min, avg, max) = (543.974, 554.118, 563.428), stdev = 8.859
[info]   CI (99.9%): [520.005, 588.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.580 ±(99.9%) 690.943 MB/sec [Average]
[info]   (min, avg, max) = (326.823, 523.580, 655.845), stdev = 179.436
[info]   CI (99.9%): [≈ 0, 1214.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1499.346 ±(99.9%) 1922.436 B/op [Average]
[info]   (min, avg, max) = (947.877, 1499.346, 1890.488), stdev = 499.250
[info]   CI (99.9%): [≈ 0, 3421.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.459 ±(99.9%) 3.643 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.459, 2.151), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.331 ±(99.9%) 10.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.331, 6.239), stdev = 2.745
[info]   CI (99.9%): [≈ 0, 11.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 22.42% complete, ETA 00:54:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 519176.921 ops/s
[info] # Warmup Iteration   2: 565484.100 ops/s
[info] # Warmup Iteration   3: 533762.316 ops/s
[info] Iteration   1: 566564.785 ops/s
[info]                  ·gc.alloc.rate:                   434.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 564897.697 ops/s
[info]                  ·gc.alloc.rate:                   433.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.848 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 568528.327 ops/s
[info]                  ·gc.alloc.rate:                   436.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1834.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 569146.546 ops/s
[info]                  ·gc.alloc.rate:                   436.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     915.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 570352.301 ops/s
[info]                  ·gc.alloc.rate:               437.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 913.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   567897.931 ±(99.9%) 8338.900 ops/s [Average]
[info]   (min, avg, max) = (564897.697, 567897.931, 570352.301), stdev = 2165.586
[info]   CI (99.9%): [559559.031, 576236.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   435.913 ±(99.9%) 6.573 MB/sec [Average]
[info]   (min, avg, max) = (433.575, 435.913, 437.870), stdev = 1.707
[info]   CI (99.9%): [429.339, 442.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   382.527 ±(99.9%) 616.343 MB/sec [Average]
[info]   (min, avg, max) = (255.788, 382.527, 662.810), stdev = 160.062
[info]   CI (99.9%): [≈ 0, 998.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1059.782 ±(99.9%) 1704.008 B/op [Average]
[info]   (min, avg, max) = (710.585, 1059.782, 1834.919), stdev = 442.525
[info]   CI (99.9%): [≈ 0, 2763.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 2.932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.740), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.056 ±(99.9%) 8.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.056, 4.848), stdev = 2.121
[info]   CI (99.9%): [≈ 0, 9.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.73% complete, ETA 00:54:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 551888.347 ops/s
[info] # Warmup Iteration   2: 601993.073 ops/s
[info] # Warmup Iteration   3: 601871.546 ops/s
[info] Iteration   1: 602505.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 602067.197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 602013.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 602108.779 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 602148.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   602168.657 ±(99.9%) 749.846 ops/s [Average]
[info]   (min, avg, max) = (602013.434, 602168.657, 602505.268), stdev = 194.733
[info]   CI (99.9%): [601418.811, 602918.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.03% complete, ETA 00:53:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190806.131 ops/s
[info] # Warmup Iteration   2: 327645.352 ops/s
[info] # Warmup Iteration   3: 333771.198 ops/s
[info] Iteration   1: 334417.261 ops/s
[info]                  ·gc.alloc.rate:                   925.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4599.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 333731.608 ops/s
[info]                  ·gc.alloc.rate:                   923.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4618.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 332455.380 ops/s
[info]                  ·gc.alloc.rate:               919.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      983.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4656.210 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 333295.519 ops/s
[info]                  ·gc.alloc.rate:                   921.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4666.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 333313.478 ops/s
[info]                  ·gc.alloc.rate:               921.689 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3123.402 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   333442.649 ±(99.9%) 2754.219 ops/s [Average]
[info]   (min, avg, max) = (332455.380, 333442.649, 334417.261), stdev = 715.262
[info]   CI (99.9%): [330688.430, 336196.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   922.284 ±(99.9%) 7.678 MB/sec [Average]
[info]   (min, avg, max) = (919.658, 922.284, 925.059), stdev = 1.994
[info]   CI (99.9%): [914.606, 929.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   918.239 ±(99.9%) 552.909 MB/sec [Average]
[info]   (min, avg, max) = (661.490, 918.239, 988.541), stdev = 143.589
[info]   CI (99.9%): [365.330, 1471.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4332.758 ±(99.9%) 2605.386 B/op [Average]
[info]   (min, avg, max) = (3123.402, 4332.758, 4666.828), stdev = 676.610
[info]   CI (99.9%): [1727.373, 6938.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.294 ±(99.9%) 1.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.294, 0.589), stdev = 0.294
[info]   CI (99.9%): [≈ 0, 1.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 23.33% complete, ETA 00:53:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28533.042 ops/s
[info] # Warmup Iteration   2: 35961.622 ops/s
[info] # Warmup Iteration   3: 35224.232 ops/s
[info] Iteration   1: 35901.620 ops/s
[info]                  ·gc.alloc.rate:                   1691.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              74148.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72958.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.563 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 35683.270 ops/s
[info]                  ·gc.alloc.rate:                   1681.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              74144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73863.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.591 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 36158.993 ops/s
[info]                  ·gc.alloc.rate:                   1703.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              74144.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73210.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.624 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36181.097 ops/s
[info]                  ·gc.alloc.rate:                   1704.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              74144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73412.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.622 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35855.606 ops/s
[info]                  ·gc.alloc.rate:                   1689.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              74144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74286.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.914 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   35956.117 ±(99.9%) 815.239 ops/s [Average]
[info]   (min, avg, max) = (35683.270, 35956.117, 36181.097), stdev = 211.715
[info]   CI (99.9%): [35140.879, 36771.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1693.995 ±(99.9%) 38.357 MB/sec [Average]
[info]   (min, avg, max) = (1681.006, 1693.995, 1704.488), stdev = 9.961
[info]   CI (99.9%): [1655.638, 1732.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74144.889 ±(99.9%) 7.550 B/op [Average]
[info]   (min, avg, max) = (74144.012, 74144.889, 74148.396), stdev = 1.961
[info]   CI (99.9%): [74137.339, 74152.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1680.287 ±(99.9%) 41.888 MB/sec [Average]
[info]   (min, avg, max) = (1664.804, 1680.287, 1692.306), stdev = 10.878
[info]   CI (99.9%): [1638.399, 1722.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   73546.219 ±(99.9%) 2041.789 B/op [Average]
[info]   (min, avg, max) = (72958.510, 73546.219, 74286.317), stdev = 530.246
[info]   CI (99.9%): [71504.429, 75588.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.463 ±(99.9%) 5.786 B/op [Average]
[info]   (min, avg, max) = (0.914, 3.463, 4.591), stdev = 1.503
[info]   CI (99.9%): [≈ 0, 9.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 23.64% complete, ETA 00:53:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58362.598 ops/s
[info] # Warmup Iteration   2: 92359.304 ops/s
[info] # Warmup Iteration   3: 93136.497 ops/s
[info] Iteration   1: 94543.663 ops/s
[info]                  ·gc.alloc.rate:                   1103.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16345.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 94922.602 ops/s
[info]                  ·gc.alloc.rate:                   1108.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16335.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 93936.059 ops/s
[info]                  ·gc.alloc.rate:                   1096.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22132.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 94806.362 ops/s
[info]                  ·gc.alloc.rate:                   1106.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16537.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 94384.382 ops/s
[info]                  ·gc.alloc.rate:                   1101.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16678.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.694 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   94518.614 ±(99.9%) 1496.337 ops/s [Average]
[info]   (min, avg, max) = (93936.059, 94518.614, 94922.602), stdev = 388.594
[info]   CI (99.9%): [93022.277, 96014.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1103.236 ±(99.9%) 17.815 MB/sec [Average]
[info]   (min, avg, max) = (1096.283, 1103.236, 1108.095), stdev = 4.626
[info]   CI (99.9%): [1085.421, 1121.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18368.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18368.005, 18368.005, 18368.005), stdev = 0.001
[info]   CI (99.9%): [18368.004, 18368.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1057.033 ±(99.9%) 568.877 MB/sec [Average]
[info]   (min, avg, max) = (982.248, 1057.033, 1320.979), stdev = 147.736
[info]   CI (99.9%): [488.156, 1625.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17606.052 ±(99.9%) 9759.520 B/op [Average]
[info]   (min, avg, max) = (16335.850, 17606.052, 22132.735), stdev = 2534.516
[info]   CI (99.9%): [7846.532, 27365.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.179 ±(99.9%) 3.343 B/op [Average]
[info]   (min, avg, max) = (0.346, 1.179, 2.416), stdev = 0.868
[info]   CI (99.9%): [≈ 0, 4.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 23.94% complete, ETA 00:53:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153812.531 ops/s
[info] # Warmup Iteration   2: 155348.180 ops/s
[info] # Warmup Iteration   3: 159471.241 ops/s
[info] Iteration   1: 160752.812 ops/s
[info]                  ·gc.alloc.rate:      104.588 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 160168.512 ops/s
[info]                  ·gc.alloc.rate:                   104.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2513.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 160583.410 ops/s
[info]                  ·gc.alloc.rate:      104.490 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 160386.884 ops/s
[info]                  ·gc.alloc.rate:      104.351 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 160243.250 ops/s
[info]                  ·gc.alloc.rate:                   104.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2512.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   160426.974 ±(99.9%) 928.970 ops/s [Average]
[info]   (min, avg, max) = (160168.512, 160426.974, 160752.812), stdev = 241.251
[info]   CI (99.9%): [159498.004, 161355.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   104.380 ±(99.9%) 0.608 MB/sec [Average]
[info]   (min, avg, max) = (104.210, 104.380, 104.588), stdev = 0.158
[info]   CI (99.9%): [103.772, 104.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.320 ±(99.9%) 539.502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.320, 255.799), stdev = 140.107
[info]   CI (99.9%): [≈ 0, 641.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1005.191 ±(99.9%) 5300.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1005.191, 2513.566), stdev = 1376.415
[info]   CI (99.9%): [≈ 0, 6305.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.509 ±(99.9%) 4.323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.509, 2.517), stdev = 1.123
[info]   CI (99.9%): [≈ 0, 4.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.999 ±(99.9%) 42.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.999, 24.734), stdev = 11.033
[info]   CI (99.9%): [≈ 0, 47.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 24.24% complete, ETA 00:53:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22240.680 ops/s
[info] # Warmup Iteration   2: 38245.504 ops/s
[info] # Warmup Iteration   3: 38446.306 ops/s
[info] Iteration   1: 38764.678 ops/s
[info]                  ·gc.alloc.rate:                   2032.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80800.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.381 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38674.134 ops/s
[info]                  ·gc.alloc.rate:                   2033.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              82749.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81654.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.083 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 39069.856 ops/s
[info]                  ·gc.alloc.rate:                   2048.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81348.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.031 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38833.541 ops/s
[info]                  ·gc.alloc.rate:                   2042.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              82777.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82193.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.687 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 38504.471 ops/s
[info]                  ·gc.alloc.rate:                   2018.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83129.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.956 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38769.336 ±(99.9%) 802.361 ops/s [Average]
[info]   (min, avg, max) = (38504.471, 38769.336, 39069.856), stdev = 208.371
[info]   CI (99.9%): [37966.975, 39571.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2034.920 ±(99.9%) 43.510 MB/sec [Average]
[info]   (min, avg, max) = (2018.455, 2034.920, 2048.090), stdev = 11.299
[info]   CI (99.9%): [1991.410, 2078.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82607.726 ±(99.9%) 548.199 B/op [Average]
[info]   (min, avg, max) = (82504.011, 82607.726, 82777.411), stdev = 142.365
[info]   CI (99.9%): [82059.528, 83155.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.583 ±(99.9%) 67.384 MB/sec [Average]
[info]   (min, avg, max) = (1990.210, 2015.583, 2033.749), stdev = 17.499
[info]   CI (99.9%): [1948.199, 2082.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81825.020 ±(99.9%) 3413.487 B/op [Average]
[info]   (min, avg, max) = (80800.124, 81825.020, 83129.123), stdev = 886.472
[info]   CI (99.9%): [78411.533, 85238.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.228 ±(99.9%) 6.539 B/op [Average]
[info]   (min, avg, max) = (1.687, 4.228, 5.956), stdev = 1.698
[info]   CI (99.9%): [≈ 0, 10.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 24.55% complete, ETA 00:52:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68647.025 ops/s
[info] # Warmup Iteration   2: 84030.012 ops/s
[info] # Warmup Iteration   3: 85685.568 ops/s
[info] Iteration   1: 86524.541 ops/s
[info]                  ·gc.alloc.rate:                   691.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12002.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 86734.211 ops/s
[info]                  ·gc.alloc.rate:                   693.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11973.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 85771.021 ops/s
[info]                  ·gc.alloc.rate:                   685.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12119.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 85239.010 ops/s
[info]                  ·gc.alloc.rate:               681.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12213.625 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 86773.790 ops/s
[info]                  ·gc.alloc.rate:               693.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12028.086 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   86208.515 ±(99.9%) 2602.467 ops/s [Average]
[info]   (min, avg, max) = (85239.010, 86208.515, 86773.790), stdev = 675.853
[info]   CI (99.9%): [83606.047, 88810.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   689.018 ±(99.9%) 20.910 MB/sec [Average]
[info]   (min, avg, max) = (681.370, 689.018, 693.683), stdev = 5.430
[info]   CI (99.9%): [668.109, 709.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12576.005, 12576.005, 12576.005), stdev = 0.001
[info]   CI (99.9%): [12576.004, 12576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.115 ±(99.9%) 5.780 MB/sec [Average]
[info]   (min, avg, max) = (659.829, 661.115, 663.460), stdev = 1.501
[info]   CI (99.9%): [655.335, 666.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12067.311 ±(99.9%) 379.009 B/op [Average]
[info]   (min, avg, max) = (11973.192, 12067.311, 12213.625), stdev = 98.427
[info]   CI (99.9%): [11688.302, 12446.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.986 ±(99.9%) 4.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.986, 2.651), stdev = 1.091
[info]   CI (99.9%): [≈ 0, 5.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 24.85% complete, ETA 00:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69290.306 ops/s
[info] # Warmup Iteration   2: 98008.207 ops/s
[info] # Warmup Iteration   3: 96264.027 ops/s
[info] Iteration   1: 98241.491 ops/s
[info]                  ·gc.alloc.rate:                   387.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4098.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 96611.383 ops/s
[info]                  ·gc.alloc.rate:                   381.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9489.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 96007.364 ops/s
[info]                  ·gc.alloc.rate:                   378.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5356.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 95970.821 ops/s
[info]                  ·gc.alloc.rate:                   378.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5363.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 92951.085 ops/s
[info]                  ·gc.alloc.rate:               366.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5537.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   95956.429 ±(99.9%) 7378.121 ops/s [Average]
[info]   (min, avg, max) = (92951.085, 95956.429, 98241.491), stdev = 1916.075
[info]   CI (99.9%): [88578.308, 103334.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   378.552 ±(99.9%) 28.837 MB/sec [Average]
[info]   (min, avg, max) = (366.821, 378.552, 387.497), stdev = 7.489
[info]   CI (99.9%): [349.715, 407.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6208.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.004, 6208.005, 6208.005), stdev = 0.001
[info]   CI (99.9%): [6208.004, 6208.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.907 ±(99.9%) 485.562 MB/sec [Average]
[info]   (min, avg, max) = (255.795, 363.907, 582.624), stdev = 126.099
[info]   CI (99.9%): [≈ 0, 849.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5969.269 ±(99.9%) 7897.344 B/op [Average]
[info]   (min, avg, max) = (4098.043, 5969.269, 9489.989), stdev = 2050.915
[info]   CI (99.9%): [≈ 0, 13866.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.441 ±(99.9%) 3.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 2.115), stdev = 0.936
[info]   CI (99.9%): [≈ 0, 4.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.178 ±(99.9%) 58.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.178, 34.452), stdev = 15.252
[info]   CI (99.9%): [≈ 0, 65.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.121
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 25.15% complete, ETA 00:52:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102698.924 ops/s
[info] # Warmup Iteration   2: 109983.799 ops/s
[info] # Warmup Iteration   3: 111246.406 ops/s
[info] Iteration   1: 113608.497 ops/s
[info]                  ·gc.alloc.rate:                   420.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7087.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 114412.507 ops/s
[info]                  ·gc.alloc.rate:                   423.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4563.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.938 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 114455.291 ops/s
[info]                  ·gc.alloc.rate:                   423.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4561.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 109555.876 ops/s
[info]                  ·gc.alloc.rate:                   405.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9531.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 113850.972 ops/s
[info]                  ·gc.alloc.rate:               421.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4581.408 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   113176.629 ±(99.9%) 7918.078 ops/s [Average]
[info]   (min, avg, max) = (109555.876, 113176.629, 114455.291), stdev = 2056.300
[info]   CI (99.9%): [105258.550, 121094.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   418.808 ±(99.9%) 29.284 MB/sec [Average]
[info]   (min, avg, max) = (405.416, 418.808, 423.535), stdev = 7.605
[info]   CI (99.9%): [389.523, 448.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5824.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5824.004, 5824.004), stdev = 0.001
[info]   CI (99.9%): [5824.003, 5824.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   433.997 ±(99.9%) 578.006 MB/sec [Average]
[info]   (min, avg, max) = (331.403, 433.997, 663.472), stdev = 150.106
[info]   CI (99.9%): [≈ 0, 1012.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6065.041 ±(99.9%) 8561.901 B/op [Average]
[info]   (min, avg, max) = (4561.495, 6065.041, 9531.117), stdev = 2223.498
[info]   CI (99.9%): [≈ 0, 14626.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 2.945 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.740), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.134 ±(99.9%) 40.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.134, 23.938), stdev = 10.520
[info]   CI (99.9%): [≈ 0, 45.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 25.45% complete, ETA 00:52:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101706.101 ops/s
[info] # Warmup Iteration   2: 110497.984 ops/s
[info] # Warmup Iteration   3: 112664.619 ops/s
[info] Iteration   1: 111618.663 ops/s
[info]                  ·gc.alloc.rate:                   325.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7213.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 112457.351 ops/s
[info]                  ·gc.alloc.rate:                   327.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3579.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 112239.696 ops/s
[info]                  ·gc.alloc.rate:                   326.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4651.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 112297.998 ops/s
[info]                  ·gc.alloc.rate:                   327.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4649.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.875 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 113290.321 ops/s
[info]                  ·gc.alloc.rate:               330.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4599.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   112380.806 ±(99.9%) 2310.954 ops/s [Average]
[info]   (min, avg, max) = (111618.663, 112380.806, 113290.321), stdev = 600.147
[info]   CI (99.9%): [110069.852, 114691.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   327.342 ±(99.9%) 6.771 MB/sec [Average]
[info]   (min, avg, max) = (325.098, 327.342, 330.000), stdev = 1.758
[info]   CI (99.9%): [320.571, 334.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4584.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4584.004, 4584.004), stdev = 0.001
[info]   CI (99.9%): [4584.004, 4584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   352.414 ±(99.9%) 365.220 MB/sec [Average]
[info]   (min, avg, max) = (255.797, 352.414, 511.609), stdev = 94.846
[info]   CI (99.9%): [≈ 0, 717.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4938.843 ±(99.9%) 5203.372 B/op [Average]
[info]   (min, avg, max) = (3579.871, 4938.843, 7213.874), stdev = 1351.299
[info]   CI (99.9%): [≈ 0, 10142.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.372 ±(99.9%) 3.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.372, 1.786), stdev = 0.791
[info]   CI (99.9%): [≈ 0, 3.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.217 ±(99.9%) 42.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.217, 25.050), stdev = 11.092
[info]   CI (99.9%): [≈ 0, 47.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 25.76% complete, ETA 00:52:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6247.946 ops/s
[info] # Warmup Iteration   2: 9623.724 ops/s
[info] # Warmup Iteration   3: 9710.634 ops/s
[info] Iteration   1: 9816.439 ops/s
[info]                  ·gc.alloc.rate:                   1627.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266629.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.675 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9879.651 ops/s
[info]                  ·gc.alloc.rate:                   1638.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266203.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.898 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9785.942 ops/s
[info]                  ·gc.alloc.rate:                   1622.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215971.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.043 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9740.444 ops/s
[info]                  ·gc.alloc.rate:                   1614.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              260933.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272287.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.726 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9844.257 ops/s
[info]                  ·gc.alloc.rate:                   1632.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              260944.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270291.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.656 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9813.346 ±(99.9%) 205.812 ops/s [Average]
[info]   (min, avg, max) = (9740.444, 9813.346, 9879.651), stdev = 53.449
[info]   CI (99.9%): [9607.534, 10019.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1627.164 ±(99.9%) 34.980 MB/sec [Average]
[info]   (min, avg, max) = (1614.943, 1627.164, 1638.710), stdev = 9.084
[info]   CI (99.9%): [1592.184, 1662.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260932.353 ±(99.9%) 26.808 B/op [Average]
[info]   (min, avg, max) = (260928.044, 260932.353, 260944.044), stdev = 6.962
[info]   CI (99.9%): [260905.545, 260959.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.742 ±(99.9%) 578.036 MB/sec [Average]
[info]   (min, avg, max) = (1342.912, 1610.742, 1690.636), stdev = 150.114
[info]   CI (99.9%): [1032.706, 2188.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   258276.574 ±(99.9%) 91589.013 B/op [Average]
[info]   (min, avg, max) = (215971.518, 258276.574, 272287.517), stdev = 23785.376
[info]   CI (99.9%): [166687.562, 349865.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.125), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.000 ±(99.9%) 22.029 B/op [Average]
[info]   (min, avg, max) = (6.656, 10.000, 19.898), stdev = 5.721
[info]   CI (99.9%): [≈ 0, 32.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 26.06% complete, ETA 00:51:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4919.942 ops/s
[info] # Warmup Iteration   2: 9363.282 ops/s
[info] # Warmup Iteration   3: 9596.792 ops/s
[info] Iteration   1: 9471.371 ops/s
[info]                  ·gc.alloc.rate:                   1456.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272964.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.295 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9625.497 ops/s
[info]                  ·gc.alloc.rate:                   1480.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216315.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9364.305 ops/s
[info]                  ·gc.alloc.rate:                   1440.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279777.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.994 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9549.638 ops/s
[info]                  ·gc.alloc.rate:                   1469.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220891.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.862 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9595.889 ops/s
[info]                  ·gc.alloc.rate:                   1476.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              242137.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220683.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9521.340 ±(99.9%) 405.526 ops/s [Average]
[info]   (min, avg, max) = (9364.305, 9521.340, 9625.497), stdev = 105.314
[info]   CI (99.9%): [9115.814, 9926.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1464.792 ±(99.9%) 62.758 MB/sec [Average]
[info]   (min, avg, max) = (1440.563, 1464.792, 1480.901), stdev = 16.298
[info]   CI (99.9%): [1402.033, 1527.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242110.800 ±(99.9%) 56.516 B/op [Average]
[info]   (min, avg, max) = (242104.045, 242110.800, 242137.049), stdev = 14.677
[info]   CI (99.9%): [242054.284, 242167.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1463.311 ±(99.9%) 670.672 MB/sec [Average]
[info]   (min, avg, max) = (1323.159, 1463.311, 1664.724), stdev = 174.171
[info]   CI (99.9%): [792.640, 2133.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   242126.437 ±(99.9%) 120934.443 B/op [Average]
[info]   (min, avg, max) = (216315.772, 242126.437, 279777.004), stdev = 31406.291
[info]   CI (99.9%): [121191.995, 363060.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.127 ±(99.9%) 23.748 B/op [Average]
[info]   (min, avg, max) = (6.862, 15.127, 23.826), stdev = 6.167
[info]   CI (99.9%): [≈ 0, 38.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 26.36% complete, ETA 00:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109752.014 ops/s
[info] # Warmup Iteration   2: 114432.293 ops/s
[info] # Warmup Iteration   3: 112873.309 ops/s
[info] Iteration   1: 113933.552 ops/s
[info]                  ·gc.alloc.rate:               296.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3533.564 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 115874.647 ops/s
[info]                  ·gc.alloc.rate:               301.554 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3474.413 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 116100.747 ops/s
[info]                  ·gc.alloc.rate:                   302.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3467.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 116294.380 ops/s
[info]                  ·gc.alloc.rate:                   302.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4503.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 115638.961 ops/s
[info]                  ·gc.alloc.rate:                   300.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4528.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   115568.457 ±(99.9%) 3643.865 ops/s [Average]
[info]   (min, avg, max) = (113933.552, 115568.457, 116294.380), stdev = 946.300
[info]   CI (99.9%): [111924.592, 119212.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   300.766 ±(99.9%) 9.480 MB/sec [Average]
[info]   (min, avg, max) = (296.512, 300.766, 302.645), stdev = 2.462
[info]   CI (99.9%): [291.286, 310.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.574 ±(99.9%) 162.267 MB/sec [Average]
[info]   (min, avg, max) = (255.792, 286.574, 332.740), stdev = 42.140
[info]   CI (99.9%): [124.307, 448.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3901.480 ±(99.9%) 2162.311 B/op [Average]
[info]   (min, avg, max) = (3467.621, 3901.480, 4528.595), stdev = 561.545
[info]   CI (99.9%): [1739.169, 6063.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.327 ±(99.9%) 2.659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.327, 1.561), stdev = 0.690
[info]   CI (99.9%): [≈ 0, 2.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.424 ±(99.9%) 35.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.424, 21.131), stdev = 9.344
[info]   CI (99.9%): [≈ 0, 40.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 26.67% complete, ETA 00:51:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2572.768 ops/s
[info] # Warmup Iteration   2: 5289.159 ops/s
[info] # Warmup Iteration   3: 5448.462 ops/s
[info] Iteration   1: 5473.049 ops/s
[info]                  ·gc.alloc.rate:                   1455.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     378130.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.986 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5434.593 ops/s
[info]                  ·gc.alloc.rate:                   1445.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479054.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.112 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5460.388 ops/s
[info]                  ·gc.alloc.rate:                   1452.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     383953.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.998 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5481.068 ops/s
[info]                  ·gc.alloc.rate:                   1458.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384465.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.932 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5455.040 ops/s
[info]                  ·gc.alloc.rate:                   1451.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484985.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.012 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5460.828 ±(99.9%) 68.909 ops/s [Average]
[info]   (min, avg, max) = (5434.593, 5460.828, 5481.068), stdev = 17.895
[info]   CI (99.9%): [5391.919, 5529.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1452.644 ±(99.9%) 18.299 MB/sec [Average]
[info]   (min, avg, max) = (1445.662, 1452.644, 1458.023), stdev = 4.752
[info]   CI (99.9%): [1434.345, 1470.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418664.083 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (418664.079, 418664.083, 418664.085), stdev = 0.003
[info]   CI (99.9%): [418664.070, 418664.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.229 ±(99.9%) 716.586 MB/sec [Average]
[info]   (min, avg, max) = (1314.910, 1464.229, 1681.000), stdev = 186.095
[info]   CI (99.9%): [747.643, 2180.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   422117.805 ±(99.9%) 210936.747 B/op [Average]
[info]   (min, avg, max) = (378130.987, 422117.805, 484985.619), stdev = 54779.603
[info]   CI (99.9%): [211181.058, 633054.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   15.608 ±(99.9%) 26.465 B/op [Average]
[info]   (min, avg, max) = (5.986, 15.608, 24.112), stdev = 6.873
[info]   CI (99.9%): [≈ 0, 42.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 26.97% complete, ETA 00:51:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17336.654 ops/s
[info] # Warmup Iteration   2: 24563.366 ops/s
[info] # Warmup Iteration   3: 24073.720 ops/s
[info] Iteration   1: 24103.609 ops/s
[info]                  ·gc.alloc.rate:                   1775.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108611.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.515 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23955.499 ops/s
[info]                  ·gc.alloc.rate:                   1763.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              115884.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109895.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.471 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 24522.571 ops/s
[info]                  ·gc.alloc.rate:                   1804.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129543.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.336 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24521.840 ops/s
[info]                  ·gc.alloc.rate:                   1804.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108376.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.344 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24627.783 ops/s
[info]                  ·gc.alloc.rate:                   1812.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108254.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.982 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24346.260 ±(99.9%) 1143.490 ops/s [Average]
[info]   (min, avg, max) = (23955.499, 24346.260, 24627.783), stdev = 296.961
[info]   CI (99.9%): [23202.770, 25489.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1792.413 ±(99.9%) 81.916 MB/sec [Average]
[info]   (min, avg, max) = (1763.903, 1792.413, 1812.569), stdev = 21.273
[info]   CI (99.9%): [1710.497, 1874.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115855.223 ±(99.9%) 123.435 B/op [Average]
[info]   (min, avg, max) = (115832.018, 115855.223, 115896.018), stdev = 32.056
[info]   CI (99.9%): [115731.787, 115978.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1747.641 ±(99.9%) 585.210 MB/sec [Average]
[info]   (min, avg, max) = (1664.126, 1747.641, 2018.657), stdev = 151.977
[info]   CI (99.9%): [1162.431, 2332.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112936.134 ±(99.9%) 35837.315 B/op [Average]
[info]   (min, avg, max) = (108254.659, 112936.134, 129543.557), stdev = 9306.837
[info]   CI (99.9%): [77098.818, 148773.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.929 ±(99.9%) 11.980 B/op [Average]
[info]   (min, avg, max) = (1.336, 5.929, 9.515), stdev = 3.111
[info]   CI (99.9%): [≈ 0, 17.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 27.27% complete, ETA 00:51:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17928.170 ops/s
[info] # Warmup Iteration   2: 28445.259 ops/s
[info] # Warmup Iteration   3: 28626.589 ops/s
[info] Iteration   1: 28917.381 ops/s
[info]                  ·gc.alloc.rate:                   1844.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89952.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.798 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28710.190 ops/s
[info]                  ·gc.alloc.rate:                   1831.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109597.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.564 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28963.516 ops/s
[info]                  ·gc.alloc.rate:                   1847.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91163.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.525 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28589.363 ops/s
[info]                  ·gc.alloc.rate:                   1823.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111366.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.584 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 28818.974 ops/s
[info]                  ·gc.alloc.rate:                   1838.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              100392.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92401.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   28799.885 ±(99.9%) 588.119 ops/s [Average]
[info]   (min, avg, max) = (28589.363, 28799.885, 28963.516), stdev = 152.733
[info]   CI (99.9%): [28211.766, 29388.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1837.205 ±(99.9%) 37.482 MB/sec [Average]
[info]   (min, avg, max) = (1823.754, 1837.205, 1847.812), stdev = 9.734
[info]   CI (99.9%): [1799.724, 1874.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100392.016 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (100392.015, 100392.016, 100392.022), stdev = 0.003
[info]   CI (99.9%): [100392.005, 100392.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1809.074 ±(99.9%) 713.823 MB/sec [Average]
[info]   (min, avg, max) = (1652.703, 1809.074, 2023.120), stdev = 185.378
[info]   CI (99.9%): [1095.250, 2522.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   98896.348 ±(99.9%) 40931.771 B/op [Average]
[info]   (min, avg, max) = (89952.528, 98896.348, 111366.509), stdev = 10629.851
[info]   CI (99.9%): [57964.577, 139828.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.549 ±(99.9%) 6.160 B/op [Average]
[info]   (min, avg, max) = (2.274, 4.549, 6.798), stdev = 1.600
[info]   CI (99.9%): [≈ 0, 10.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 27.58% complete, ETA 00:50:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316751.431 ops/s
[info] # Warmup Iteration   2: 337774.206 ops/s
[info] # Warmup Iteration   3: 337458.170 ops/s
[info] Iteration   1: 339692.746 ops/s
[info]                  ·gc.alloc.rate:                   749.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3074.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 339368.991 ops/s
[info]                  ·gc.alloc.rate:                   748.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3076.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 338152.263 ops/s
[info]                  ·gc.alloc.rate:                   745.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3088.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 338459.739 ops/s
[info]                  ·gc.alloc.rate:                   746.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4635.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 338810.033 ops/s
[info]                  ·gc.alloc.rate:                   747.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3094.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   338896.755 ±(99.9%) 2442.490 ops/s [Average]
[info]   (min, avg, max) = (338152.263, 338896.755, 339692.746), stdev = 634.307
[info]   CI (99.9%): [336454.265, 341339.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   747.591 ±(99.9%) 5.323 MB/sec [Average]
[info]   (min, avg, max) = (745.970, 747.591, 749.314), stdev = 1.382
[info]   CI (99.9%): [742.269, 752.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.667 ±(99.9%) 573.028 MB/sec [Average]
[info]   (min, avg, max) = (663.422, 730.667, 996.865), stdev = 148.813
[info]   CI (99.9%): [157.640, 1303.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3393.812 ±(99.9%) 2673.391 B/op [Average]
[info]   (min, avg, max) = (3074.016, 3393.812, 4635.673), stdev = 694.271
[info]   CI (99.9%): [720.421, 6067.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.329 ±(99.9%) 0.621 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.329, 0.483), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.88% complete, ETA 00:50:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349126.371 ops/s
[info] # Warmup Iteration   2: 366528.490 ops/s
[info] # Warmup Iteration   3: 387824.365 ops/s
[info] Iteration   1: 388077.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 387977.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 387883.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 387829.640 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 387776.572 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   387908.899 ±(99.9%) 461.605 ops/s [Average]
[info]   (min, avg, max) = (387776.572, 387908.899, 388077.096), stdev = 119.877
[info]   CI (99.9%): [387447.294, 388370.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 28.18% complete, ETA 00:50:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19324.372 ops/s
[info] # Warmup Iteration   2: 28820.522 ops/s
[info] # Warmup Iteration   3: 28951.155 ops/s
[info] Iteration   1: 28637.628 ops/s
[info]                  ·gc.alloc.rate:                   1878.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109386.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.008 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 29086.574 ops/s
[info]                  ·gc.alloc.rate:                   1907.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108530.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.138 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 29210.134 ops/s
[info]                  ·gc.alloc.rate:                   1915.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90593.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 29060.465 ops/s
[info]                  ·gc.alloc.rate:                   1906.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109782.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.510 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 29133.779 ops/s
[info]                  ·gc.alloc.rate:                   1910.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109827.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.747 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   29025.716 ±(99.9%) 863.633 ops/s [Average]
[info]   (min, avg, max) = (28637.628, 29025.716, 29210.134), stdev = 224.283
[info]   CI (99.9%): [28162.083, 29889.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1903.557 ±(99.9%) 55.429 MB/sec [Average]
[info]   (min, avg, max) = (1878.600, 1903.557, 1915.330), stdev = 14.395
[info]   CI (99.9%): [1848.128, 1958.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103200.016 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (103200.015, 103200.016, 103200.022), stdev = 0.003
[info]   CI (99.9%): [103200.004, 103200.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1947.839 ±(99.9%) 577.288 MB/sec [Average]
[info]   (min, avg, max) = (1681.366, 1947.839, 2033.080), stdev = 149.920
[info]   CI (99.9%): [1370.552, 2525.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105623.929 ±(99.9%) 32415.587 B/op [Average]
[info]   (min, avg, max) = (90593.750, 105623.929, 109827.172), stdev = 8418.225
[info]   CI (99.9%): [73208.341, 138039.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.778 ±(99.9%) 9.273 B/op [Average]
[info]   (min, avg, max) = (4.487, 6.778, 10.138), stdev = 2.408
[info]   CI (99.9%): [≈ 0, 16.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 28.48% complete, ETA 00:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104552.098 ops/s
[info] # Warmup Iteration   2: 124945.773 ops/s
[info] # Warmup Iteration   3: 124753.022 ops/s
[info] Iteration   1: 123508.778 ops/s
[info]                  ·gc.alloc.rate:                   2127.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2343.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29866.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.061 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 127902.941 ops/s
[info]                  ·gc.alloc.rate:                   2202.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24870.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.537 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 127201.339 ops/s
[info]                  ·gc.alloc.rate:                   2190.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29288.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.288 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 126650.011 ops/s
[info]                  ·gc.alloc.rate:                   2181.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25285.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 127427.473 ops/s
[info]                  ·gc.alloc.rate:                   2195.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29373.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.057 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   126538.108 ±(99.9%) 6747.692 ops/s [Average]
[info]   (min, avg, max) = (123508.778, 126538.108, 127902.941), stdev = 1752.354
[info]   CI (99.9%): [119790.417, 133285.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2179.247 ±(99.9%) 116.311 MB/sec [Average]
[info]   (min, avg, max) = (2127.019, 2179.247, 2202.528), stdev = 30.206
[info]   CI (99.9%): [2062.937, 2295.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27104.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27104.003, 27104.004, 27104.004), stdev = 0.001
[info]   CI (99.9%): [27104.003, 27104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2229.109 ±(99.9%) 709.187 MB/sec [Average]
[info]   (min, avg, max) = (2021.010, 2229.109, 2378.837), stdev = 184.174
[info]   CI (99.9%): [1519.922, 2938.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27736.936 ±(99.9%) 9402.650 B/op [Average]
[info]   (min, avg, max) = (24870.266, 27736.936, 29866.548), stdev = 2441.838
[info]   CI (99.9%): [18334.285, 37139.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.167), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.447 ±(99.9%) 1.464 B/op [Average]
[info]   (min, avg, max) = (1.061, 1.447, 2.057), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 2.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 28.79% complete, ETA 00:49:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205660.928 ops/s
[info] # Warmup Iteration   2: 293650.778 ops/s
[info] # Warmup Iteration   3: 293351.780 ops/s
[info] Iteration   1: 298877.799 ops/s
[info]                  ·gc.alloc.rate:                   422.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2694.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 299606.393 ops/s
[info]                  ·gc.alloc.rate:                   423.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1716.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 297837.793 ops/s
[info]                  ·gc.alloc.rate:                   420.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1726.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 297998.629 ops/s
[info]                  ·gc.alloc.rate:                   421.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3447.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 298354.359 ops/s
[info]                  ·gc.alloc.rate:               421.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1725.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   298534.995 ±(99.9%) 2771.272 ops/s [Average]
[info]   (min, avg, max) = (297837.793, 298534.995, 299606.393), stdev = 719.690
[info]   CI (99.9%): [295763.723, 301306.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   421.874 ±(99.9%) 3.945 MB/sec [Average]
[info]   (min, avg, max) = (420.872, 421.874, 423.364), stdev = 1.024
[info]   CI (99.9%): [417.929, 425.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.023 ±(99.9%) 571.931 MB/sec [Average]
[info]   (min, avg, max) = (326.741, 429.023, 652.833), stdev = 148.529
[info]   CI (99.9%): [≈ 0, 1000.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2262.082 ±(99.9%) 3023.107 B/op [Average]
[info]   (min, avg, max) = (1716.453, 2262.082, 3447.932), stdev = 785.091
[info]   CI (99.9%): [≈ 0, 5285.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.457 ±(99.9%) 3.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 2.146), stdev = 0.945
[info]   CI (99.9%): [≈ 0, 4.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.403 ±(99.9%) 19.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.403, 11.274), stdev = 4.961
[info]   CI (99.9%): [≈ 0, 21.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.789
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 29.09% complete, ETA 00:49:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 648088.790 ops/s
[info] # Warmup Iteration   2: 682857.781 ops/s
[info] # Warmup Iteration   3: 684200.883 ops/s
[info] Iteration   1: 687413.522 ops/s
[info]                  ·gc.alloc.rate:                   447.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     585.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 682448.302 ops/s
[info]                  ·gc.alloc.rate:                   444.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1533.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 681491.341 ops/s
[info]                  ·gc.alloc.rate:               443.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 767.656 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 687279.450 ops/s
[info]                  ·gc.alloc.rate:                   447.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 687298.345 ops/s
[info]                  ·gc.alloc.rate:                   447.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1522.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   685186.192 ±(99.9%) 11382.527 ops/s [Average]
[info]   (min, avg, max) = (681491.341, 685186.192, 687413.522), stdev = 2956.006
[info]   CI (99.9%): [673803.665, 696568.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   445.851 ±(99.9%) 7.472 MB/sec [Average]
[info]   (min, avg, max) = (443.392, 445.851, 447.272), stdev = 1.941
[info]   CI (99.9%): [438.379, 453.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.114 ±(99.9%) 764.737 MB/sec [Average]
[info]   (min, avg, max) = (255.798, 450.114, 664.959), stdev = 198.600
[info]   CI (99.9%): [≈ 0, 1214.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1034.030 ±(99.9%) 1758.396 B/op [Average]
[info]   (min, avg, max) = (585.678, 1034.030, 1533.244), stdev = 456.650
[info]   CI (99.9%): [≈ 0, 2792.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.352 ±(99.9%) 2.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.626), stdev = 0.713
[info]   CI (99.9%): [≈ 0, 3.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.812 ±(99.9%) 6.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.749), stdev = 1.644
[info]   CI (99.9%): [≈ 0, 7.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 29.39% complete, ETA 00:49:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41879.868 ops/s
[info] # Warmup Iteration   2: 70466.616 ops/s
[info] # Warmup Iteration   3: 69671.743 ops/s
[info] Iteration   1: 71236.352 ops/s
[info]                  ·gc.alloc.rate:                   3026.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3021.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66750.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.920 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 70744.050 ops/s
[info]                  ·gc.alloc.rate:                   3011.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              67006.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60152.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.316 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 70429.770 ops/s
[info]                  ·gc.alloc.rate:                   2991.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68253.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.791 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 71094.399 ops/s
[info]                  ·gc.alloc.rate:                   3019.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67717.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.226 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 71161.054 ops/s
[info]                  ·gc.alloc.rate:                   3022.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67756.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.683 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70933.125 ±(99.9%) 1304.431 ops/s [Average]
[info]   (min, avg, max) = (70429.770, 70933.125, 71236.352), stdev = 338.757
[info]   CI (99.9%): [69628.694, 72237.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3014.474 ±(99.9%) 53.057 MB/sec [Average]
[info]   (min, avg, max) = (2991.697, 3014.474, 3026.061), stdev = 13.779
[info]   CI (99.9%): [2961.417, 3067.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66886.110 ±(99.9%) 259.206 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66886.110, 67006.527), stdev = 67.315
[info]   CI (99.9%): [66626.905, 67145.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.334 ±(99.9%) 598.716 MB/sec [Average]
[info]   (min, avg, max) = (2703.786, 2980.334, 3063.516), stdev = 155.485
[info]   CI (99.9%): [2381.618, 3579.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66126.059 ±(99.9%) 13027.799 B/op [Average]
[info]   (min, avg, max) = (60152.778, 66126.059, 68253.680), stdev = 3383.278
[info]   CI (99.9%): [53098.260, 79153.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.587 ±(99.9%) 4.086 B/op [Average]
[info]   (min, avg, max) = (0.920, 2.587, 3.683), stdev = 1.061
[info]   CI (99.9%): [≈ 0, 6.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 29.70% complete, ETA 00:49:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170021.582 ops/s
[info] # Warmup Iteration   2: 202391.873 ops/s
[info] # Warmup Iteration   3: 211550.058 ops/s
[info] Iteration   1: 210493.590 ops/s
[info]                  ·gc.alloc.rate:                   1710.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14914.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 213694.919 ops/s
[info]                  ·gc.alloc.rate:                   1736.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12319.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.767 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 210142.143 ops/s
[info]                  ·gc.alloc.rate:                   1708.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12592.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 211952.075 ops/s
[info]                  ·gc.alloc.rate:                   1722.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12529.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.773 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 212753.549 ops/s
[info]                  ·gc.alloc.rate:                   1729.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12521.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   211807.255 ±(99.9%) 5768.913 ops/s [Average]
[info]   (min, avg, max) = (210142.143, 211807.255, 213694.919), stdev = 1498.168
[info]   CI (99.9%): [206038.342, 217576.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1721.670 ±(99.9%) 46.359 MB/sec [Average]
[info]   (min, avg, max) = (1708.676, 1721.670, 1736.996), stdev = 12.039
[info]   CI (99.9%): [1675.310, 1768.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12792.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12792.002, 12792.002, 12792.002), stdev = 0.001
[info]   CI (99.9%): [12792.002, 12792.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.884 ±(99.9%) 536.280 MB/sec [Average]
[info]   (min, avg, max) = (1672.790, 1745.884, 1994.673), stdev = 139.270
[info]   CI (99.9%): [1209.604, 2282.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12975.407 ±(99.9%) 4192.995 B/op [Average]
[info]   (min, avg, max) = (12319.161, 12975.407, 14914.624), stdev = 1088.908
[info]   CI (99.9%): [8782.412, 17168.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.680 ±(99.9%) 0.519 B/op [Average]
[info]   (min, avg, max) = (0.468, 0.680, 0.773), stdev = 0.135
[info]   CI (99.9%): [0.161, 1.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 30.00% complete, ETA 00:49:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608946.022 ops/s
[info] # Warmup Iteration   2: 825458.240 ops/s
[info] # Warmup Iteration   3: 842977.303 ops/s
[info] Iteration   1: 821281.199 ops/s
[info]                  ·gc.alloc.rate:                   647.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 807726.752 ops/s
[info]                  ·gc.alloc.rate:                   636.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1274.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 831657.083 ops/s
[info]                  ·gc.alloc.rate:                   655.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 831448.443 ops/s
[info]                  ·gc.alloc.rate:                   655.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1240.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 805112.392 ops/s
[info]                  ·gc.alloc.rate:                   634.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1285.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   819445.174 ±(99.9%) 48681.727 ops/s [Average]
[info]   (min, avg, max) = (805112.392, 819445.174, 831657.083), stdev = 12642.490
[info]   CI (99.9%): [770763.446, 868126.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   645.680 ±(99.9%) 38.185 MB/sec [Average]
[info]   (min, avg, max) = (634.333, 645.680, 655.313), stdev = 9.917
[info]   CI (99.9%): [607.495, 683.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.016 ±(99.9%) 6.015 MB/sec [Average]
[info]   (min, avg, max) = (653.454, 655.016, 657.487), stdev = 1.562
[info]   CI (99.9%): [649.001, 661.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1258.184 ±(99.9%) 80.540 B/op [Average]
[info]   (min, avg, max) = (1237.945, 1258.184, 1285.262), stdev = 20.916
[info]   CI (99.9%): [1177.644, 1338.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.465 ±(99.9%) 3.598 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.465, 2.136), stdev = 0.934
[info]   CI (99.9%): [≈ 0, 4.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.890 ±(99.9%) 6.894 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.890, 4.093), stdev = 1.790
[info]   CI (99.9%): [≈ 0, 7.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 30.30% complete, ETA 00:48:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 925710.317 ops/s
[info] # Warmup Iteration   2: 1012259.532 ops/s
[info] # Warmup Iteration   3: 1018939.236 ops/s
[info] Iteration   1: 988809.031 ops/s
[info]                  ·gc.alloc.rate:                   537.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.777 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1002767.276 ops/s
[info]                  ·gc.alloc.rate:                   545.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1013395.889 ops/s
[info]                  ·gc.alloc.rate:                   551.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1028.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1017703.890 ops/s
[info]                  ·gc.alloc.rate:               553.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 512.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1021009.839 ops/s
[info]                  ·gc.alloc.rate:               555.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1022.739 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1008737.185 ±(99.9%) 50408.683 ops/s [Average]
[info]   (min, avg, max) = (988809.031, 1008737.185, 1021009.839), stdev = 13090.975
[info]   CI (99.9%): [958328.502, 1059145.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   548.702 ±(99.9%) 27.266 MB/sec [Average]
[info]   (min, avg, max) = (537.956, 548.702, 555.305), stdev = 7.081
[info]   CI (99.9%): [521.436, 575.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.450 ±(99.9%) 698.886 MB/sec [Average]
[info]   (min, avg, max) = (331.416, 530.450, 663.471), stdev = 181.498
[info]   CI (99.9%): [≈ 0, 1229.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   826.499 ±(99.9%) 1076.885 B/op [Average]
[info]   (min, avg, max) = (512.529, 826.499, 1040.328), stdev = 279.664
[info]   CI (99.9%): [≈ 0, 1903.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.378 ±(99.9%) 2.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.745), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.601 ±(99.9%) 4.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.601, 2.777), stdev = 1.218
[info]   CI (99.9%): [≈ 0, 5.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 30.61% complete, ETA 00:48:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964579.350 ops/s
[info] # Warmup Iteration   2: 1054799.254 ops/s
[info] # Warmup Iteration   3: 1059696.855 ops/s
[info] Iteration   1: 1052493.047 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1060401.209 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1060874.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1059205.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1060345.540 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1058663.903 ±(99.9%) 13491.566 ops/s [Average]
[info]   (min, avg, max) = (1052493.047, 1058663.903, 1060874.131), stdev = 3503.717
[info]   CI (99.9%): [1045172.336, 1072155.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 30.91% complete, ETA 00:48:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21110.568 ops/s
[info] # Warmup Iteration   2: 29855.345 ops/s
[info] # Warmup Iteration   3: 29994.922 ops/s
[info] Iteration   1: 30218.766 ops/s
[info]                  ·gc.alloc.rate:                   1668.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              86887.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86178.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30498.002 ops/s
[info]                  ·gc.alloc.rate:                   1683.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86011.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.446 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30344.786 ops/s
[info]                  ·gc.alloc.rate:                   1675.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86929.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30147.030 ops/s
[info]                  ·gc.alloc.rate:                   1664.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87934.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.174 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30455.432 ops/s
[info]                  ·gc.alloc.rate:                   1681.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87321.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30332.803 ±(99.9%) 577.559 ops/s [Average]
[info]   (min, avg, max) = (30147.030, 30332.803, 30498.002), stdev = 149.990
[info]   CI (99.9%): [29755.245, 30910.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1674.813 ±(99.9%) 32.020 MB/sec [Average]
[info]   (min, avg, max) = (1664.456, 1674.813, 1683.970), stdev = 8.315
[info]   CI (99.9%): [1642.793, 1706.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86875.151 ±(99.9%) 27.009 B/op [Average]
[info]   (min, avg, max) = (86872.014, 86875.151, 86887.699), stdev = 7.014
[info]   CI (99.9%): [86848.142, 86902.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.788 ±(99.9%) 54.205 MB/sec [Average]
[info]   (min, avg, max) = (1655.043, 1674.788, 1690.392), stdev = 14.077
[info]   CI (99.9%): [1620.583, 1728.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86875.171 ±(99.9%) 3077.525 B/op [Average]
[info]   (min, avg, max) = (86011.971, 86875.171, 87934.875), stdev = 799.224
[info]   CI (99.9%): [83797.646, 89952.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.532 ±(99.9%) 6.123 B/op [Average]
[info]   (min, avg, max) = (2.174, 4.532, 6.446), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 10.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 31.21% complete, ETA 00:48:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102663.560 ops/s
[info] # Warmup Iteration   2: 131755.319 ops/s
[info] # Warmup Iteration   3: 134458.835 ops/s
[info] Iteration   1: 134787.628 ops/s
[info]                  ·gc.alloc.rate:                   1853.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23304.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.458 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 134800.219 ops/s
[info]                  ·gc.alloc.rate:                   1854.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19553.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.215 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 134398.829 ops/s
[info]                  ·gc.alloc.rate:                   1848.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23656.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.731 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 134318.063 ops/s
[info]                  ·gc.alloc.rate:                   1847.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19798.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.976 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 135092.489 ops/s
[info]                  ·gc.alloc.rate:                   1858.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23685.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.183 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   134679.445 ±(99.9%) 1227.139 ops/s [Average]
[info]   (min, avg, max) = (134318.063, 134679.445, 135092.489), stdev = 318.684
[info]   CI (99.9%): [133452.306, 135906.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1852.670 ±(99.9%) 17.060 MB/sec [Average]
[info]   (min, avg, max) = (1847.478, 1852.670, 1858.162), stdev = 4.430
[info]   CI (99.9%): [1835.610, 1869.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21648.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21648.003, 21648.003, 21648.003), stdev = 0.001
[info]   CI (99.9%): [21648.003, 21648.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1882.843 ±(99.9%) 706.296 MB/sec [Average]
[info]   (min, avg, max) = (1675.421, 1882.843, 2033.028), stdev = 183.423
[info]   CI (99.9%): [1176.547, 2589.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21999.428 ±(99.9%) 8194.912 B/op [Average]
[info]   (min, avg, max) = (19553.321, 21999.428, 23685.233), stdev = 2128.193
[info]   CI (99.9%): [13804.516, 30194.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.313 ±(99.9%) 2.143 B/op [Average]
[info]   (min, avg, max) = (0.731, 1.313, 2.183), stdev = 0.557
[info]   CI (99.9%): [≈ 0, 3.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 31.52% complete, ETA 00:48:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119921.621 ops/s
[info] # Warmup Iteration   2: 184990.594 ops/s
[info] # Warmup Iteration   3: 190741.275 ops/s
[info] Iteration   1: 194965.227 ops/s
[info]                  ·gc.alloc.rate:                   1163.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10556.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 192385.674 ops/s
[info]                  ·gc.alloc.rate:                   1148.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8062.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 192028.459 ops/s
[info]                  ·gc.alloc.rate:                   1145.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10827.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.512 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 192277.419 ops/s
[info]                  ·gc.alloc.rate:                   1147.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8154.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 193743.629 ops/s
[info]                  ·gc.alloc.rate:                   1156.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10849.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   193080.081 ±(99.9%) 4804.227 ops/s [Average]
[info]   (min, avg, max) = (192028.459, 193080.081, 194965.227), stdev = 1247.643
[info]   CI (99.9%): [188275.854, 197884.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1152.326 ±(99.9%) 28.424 MB/sec [Average]
[info]   (min, avg, max) = (1145.967, 1152.326, 1163.497), stdev = 7.381
[info]   CI (99.9%): [1123.903, 1180.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9392.002, 9392.002, 9392.002), stdev = 0.001
[info]   CI (99.9%): [9392.002, 9392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1189.339 ±(99.9%) 697.887 MB/sec [Average]
[info]   (min, avg, max) = (986.059, 1189.339, 1335.624), stdev = 181.239
[info]   CI (99.9%): [491.452, 1887.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9690.112 ±(99.9%) 5578.204 B/op [Average]
[info]   (min, avg, max) = (8062.993, 9690.112, 10849.894), stdev = 1448.642
[info]   CI (99.9%): [4111.908, 15268.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.509 ±(99.9%) 0.655 B/op [Average]
[info]   (min, avg, max) = (0.336, 0.509, 0.681), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 1.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 31.82% complete, ETA 00:47:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224601.236 ops/s
[info] # Warmup Iteration   2: 238177.508 ops/s
[info] # Warmup Iteration   3: 243136.314 ops/s
[info] Iteration   1: 236309.053 ops/s
[info]                  ·gc.alloc.rate:                   1229.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8864.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 237880.561 ops/s
[info]                  ·gc.alloc.rate:                   1238.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6626.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 242583.894 ops/s
[info]                  ·gc.alloc.rate:                   1262.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8686.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 242442.497 ops/s
[info]                  ·gc.alloc.rate:                   1261.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8724.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 237792.566 ops/s
[info]                  ·gc.alloc.rate:                   1237.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8923.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.551 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   239401.714 ±(99.9%) 11200.087 ops/s [Average]
[info]   (min, avg, max) = (236309.053, 239401.714, 242583.894), stdev = 2908.627
[info]   CI (99.9%): [228201.627, 250601.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1246.073 ±(99.9%) 58.391 MB/sec [Average]
[info]   (min, avg, max) = (1229.898, 1246.073, 1262.666), stdev = 15.164
[info]   CI (99.9%): [1187.682, 1304.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8192.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8192.002, 8192.002, 8192.002), stdev = 0.001
[info]   CI (99.9%): [8192.002, 8192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1272.707 ±(99.9%) 584.234 MB/sec [Average]
[info]   (min, avg, max) = (1001.543, 1272.707, 1348.286), stdev = 151.724
[info]   CI (99.9%): [688.473, 1856.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8365.169 ±(99.9%) 3761.405 B/op [Average]
[info]   (min, avg, max) = (6626.487, 8365.169, 8923.676), stdev = 976.825
[info]   CI (99.9%): [4603.764, 12126.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.493 ±(99.9%) 0.888 B/op [Average]
[info]   (min, avg, max) = (0.270, 0.493, 0.826), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 32.12% complete, ETA 00:47:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30498.813 ops/s
[info] # Warmup Iteration   2: 65481.578 ops/s
[info] # Warmup Iteration   3: 65765.453 ops/s
[info] Iteration   1: 67339.114 ops/s
[info]                  ·gc.alloc.rate:                   2798.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62340.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.946 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 67198.878 ops/s
[info]                  ·gc.alloc.rate:                   2793.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63046.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.413 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 67072.671 ops/s
[info]                  ·gc.alloc.rate:                   2787.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3046.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71480.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.442 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 66722.304 ops/s
[info]                  ·gc.alloc.rate:                   2772.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64076.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.964 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 66384.761 ops/s
[info]                  ·gc.alloc.rate:                   2758.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64484.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.455 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66943.545 ±(99.9%) 1490.765 ops/s [Average]
[info]   (min, avg, max) = (66384.761, 66943.545, 67339.114), stdev = 387.147
[info]   CI (99.9%): [65452.780, 68434.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2782.202 ±(99.9%) 62.299 MB/sec [Average]
[info]   (min, avg, max) = (2758.846, 2782.202, 2798.473), stdev = 16.179
[info]   CI (99.9%): [2719.903, 2844.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65408.006, 65408.007, 65408.007), stdev = 0.001
[info]   CI (99.9%): [65408.006, 65408.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2768.464 ±(99.9%) 603.440 MB/sec [Average]
[info]   (min, avg, max) = (2667.224, 2768.464, 3046.225), stdev = 156.712
[info]   CI (99.9%): [2165.024, 3371.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65085.801 ±(99.9%) 14144.240 B/op [Average]
[info]   (min, avg, max) = (62340.356, 65085.801, 71480.674), stdev = 3673.214
[info]   CI (99.9%): [50941.561, 79230.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.644 ±(99.9%) 2.881 B/op [Average]
[info]   (min, avg, max) = (1.946, 2.644, 3.455), stdev = 0.748
[info]   CI (99.9%): [≈ 0, 5.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 10.000), stdev = 1.140
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 32.42% complete, ETA 00:47:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136370.690 ops/s
[info] # Warmup Iteration   2: 165311.033 ops/s
[info] # Warmup Iteration   3: 164204.096 ops/s
[info] Iteration   1: 164775.286 ops/s
[info]                  ·gc.alloc.rate:                   1077.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12617.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 165161.498 ops/s
[info]                  ·gc.alloc.rate:                   1080.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9474.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.992 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 166550.568 ops/s
[info]                  ·gc.alloc.rate:                   1089.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9426.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 166305.955 ops/s
[info]                  ·gc.alloc.rate:                   1087.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9475.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 166313.731 ops/s
[info]                  ·gc.alloc.rate:                   1088.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12683.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   165821.408 ±(99.9%) 3067.670 ops/s [Average]
[info]   (min, avg, max) = (164775.286, 165821.408, 166550.568), stdev = 796.664
[info]   CI (99.9%): [162753.738, 168889.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1084.895 ±(99.9%) 19.880 MB/sec [Average]
[info]   (min, avg, max) = (1077.876, 1084.895, 1089.581), stdev = 5.163
[info]   CI (99.9%): [1065.016, 1104.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.950 ±(99.9%) 702.535 MB/sec [Average]
[info]   (min, avg, max) = (994.656, 1130.950, 1340.414), stdev = 182.446
[info]   CI (99.9%): [428.415, 1833.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10735.263 ±(99.9%) 6732.131 B/op [Average]
[info]   (min, avg, max) = (9426.866, 10735.263, 12683.040), stdev = 1748.313
[info]   CI (99.9%): [4003.132, 17467.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.672 ±(99.9%) 1.155 B/op [Average]
[info]   (min, avg, max) = (0.393, 0.672, 0.992), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 32.73% complete, ETA 00:47:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375057.319 ops/s
[info] # Warmup Iteration   2: 552599.484 ops/s
[info] # Warmup Iteration   3: 553693.928 ops/s
[info] Iteration   1: 570385.985 ops/s
[info]                  ·gc.alloc.rate:                   576.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     899.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 566871.549 ops/s
[info]                  ·gc.alloc.rate:                   573.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1811.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 563480.681 ops/s
[info]                  ·gc.alloc.rate:                   569.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1824.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 570563.547 ops/s
[info]                  ·gc.alloc.rate:                   577.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1804.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 571397.013 ops/s
[info]                  ·gc.alloc.rate:               578.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 901.819 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   568539.755 ±(99.9%) 12777.723 ops/s [Average]
[info]   (min, avg, max) = (563480.681, 568539.755, 571397.013), stdev = 3318.334
[info]   CI (99.9%): [555762.032, 581317.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   575.086 ±(99.9%) 12.967 MB/sec [Average]
[info]   (min, avg, max) = (569.950, 575.086, 578.002), stdev = 3.368
[info]   CI (99.9%): [562.119, 588.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   522.653 ±(99.9%) 688.667 MB/sec [Average]
[info]   (min, avg, max) = (326.060, 522.653, 654.146), stdev = 178.845
[info]   CI (99.9%): [≈ 0, 1211.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1448.388 ±(99.9%) 1925.121 B/op [Average]
[info]   (min, avg, max) = (899.739, 1448.388, 1824.363), stdev = 499.948
[info]   CI (99.9%): [≈ 0, 3373.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.469 ±(99.9%) 3.723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.469, 2.198), stdev = 0.967
[info]   CI (99.9%): [≈ 0, 4.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.294 ±(99.9%) 10.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.294, 6.065), stdev = 2.668
[info]   CI (99.9%): [≈ 0, 11.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 33.03% complete, ETA 00:47:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 495959.425 ops/s
[info] # Warmup Iteration   2: 552142.265 ops/s
[info] # Warmup Iteration   3: 554821.420 ops/s
[info] Iteration   1: 551525.190 ops/s
[info]                  ·gc.alloc.rate:                   423.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1459.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 552441.600 ops/s
[info]                  ·gc.alloc.rate:                   424.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     945.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 552440.948 ops/s
[info]                  ·gc.alloc.rate:                   424.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1888.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 553803.191 ops/s
[info]                  ·gc.alloc.rate:                   425.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 540604.068 ops/s
[info]                  ·gc.alloc.rate:               414.930 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 963.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   550162.999 ±(99.9%) 20813.149 ops/s [Average]
[info]   (min, avg, max) = (540604.068, 550162.999, 553803.191), stdev = 5405.109
[info]   CI (99.9%): [529349.850, 570976.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   422.280 ±(99.9%) 15.989 MB/sec [Average]
[info]   (min, avg, max) = (414.930, 422.280, 425.061), stdev = 4.152
[info]   CI (99.9%): [406.291, 438.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   433.675 ±(99.9%) 577.692 MB/sec [Average]
[info]   (min, avg, max) = (331.070, 433.675, 662.802), stdev = 150.025
[info]   CI (99.9%): [≈ 0, 1011.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1239.626 ±(99.9%) 1635.230 B/op [Average]
[info]   (min, avg, max) = (940.885, 1239.626, 1888.328), stdev = 424.664
[info]   CI (99.9%): [≈ 0, 2874.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.951 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.751), stdev = 0.766
[info]   CI (99.9%): [≈ 0, 3.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.086 ±(99.9%) 8.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.086, 4.987), stdev = 2.183
[info]   CI (99.9%): [≈ 0, 9.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.33% complete, ETA 00:46:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 561299.966 ops/s
[info] # Warmup Iteration   2: 614363.922 ops/s
[info] # Warmup Iteration   3: 615335.235 ops/s
[info] Iteration   1: 616830.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 616943.322 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 616852.920 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 616427.296 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 617043.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   616819.468 ±(99.9%) 904.360 ops/s [Average]
[info]   (min, avg, max) = (616427.296, 616819.468, 617043.664), stdev = 234.859
[info]   CI (99.9%): [615915.108, 617723.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 33.64% complete, ETA 00:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205269.034 ops/s
[info] # Warmup Iteration   2: 345535.590 ops/s
[info] # Warmup Iteration   3: 351225.910 ops/s
[info] Iteration   1: 346268.546 ops/s
[info]                  ·gc.alloc.rate:                   953.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4441.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 350171.502 ops/s
[info]                  ·gc.alloc.rate:                   965.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4405.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 343662.730 ops/s
[info]                  ·gc.alloc.rate:               946.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3004.944 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 351221.470 ops/s
[info]                  ·gc.alloc.rate:                   967.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4428.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 351146.956 ops/s
[info]                  ·gc.alloc.rate:                   967.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4453.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   348494.241 ±(99.9%) 12999.145 ops/s [Average]
[info]   (min, avg, max) = (343662.730, 348494.241, 351221.470), stdev = 3375.837
[info]   CI (99.9%): [335495.096, 361493.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   960.201 ±(99.9%) 35.853 MB/sec [Average]
[info]   (min, avg, max) = (946.891, 960.201, 967.606), stdev = 9.311
[info]   CI (99.9%): [924.347, 996.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   919.189 ±(99.9%) 566.601 MB/sec [Average]
[info]   (min, avg, max) = (656.216, 919.189, 993.589), stdev = 147.144
[info]   CI (99.9%): [352.589, 1485.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4146.863 ±(99.9%) 2459.009 B/op [Average]
[info]   (min, avg, max) = (3004.944, 4146.863, 4453.291), stdev = 638.597
[info]   CI (99.9%): [1687.853, 6605.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.281 ±(99.9%) 0.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.281, 0.468), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 1.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 33.94% complete, ETA 00:46:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6779.492 ops/s
[info] # Warmup Iteration   2: 9190.081 ops/s
[info] # Warmup Iteration   3: 9164.873 ops/s
[info] Iteration   1: 9259.753 ops/s
[info]                  ·gc.alloc.rate:                   1212.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225349.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.614 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9132.788 ops/s
[info]                  ·gc.alloc.rate:                   1196.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171893.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9204.724 ops/s
[info]                  ·gc.alloc.rate:                   1205.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228258.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.797 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9272.789 ops/s
[info]                  ·gc.alloc.rate:                   1214.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              206145.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170560.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9229.476 ops/s
[info]                  ·gc.alloc.rate:                   1208.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              206160.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229230.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.649 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9219.906 ±(99.9%) 213.494 ops/s [Average]
[info]   (min, avg, max) = (9132.788, 9219.906, 9272.789), stdev = 55.444
[info]   CI (99.9%): [9006.412, 9433.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1207.706 ±(99.9%) 27.695 MB/sec [Average]
[info]   (min, avg, max) = (1196.423, 1207.706, 1214.547), stdev = 7.192
[info]   CI (99.9%): [1180.011, 1235.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206147.448 ±(99.9%) 27.172 B/op [Average]
[info]   (min, avg, max) = (206144.047, 206147.448, 206160.047), stdev = 7.056
[info]   CI (99.9%): [206120.276, 206174.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.544 ±(99.9%) 704.525 MB/sec [Average]
[info]   (min, avg, max) = (997.636, 1201.544, 1344.268), stdev = 182.963
[info]   CI (99.9%): [497.020, 1906.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   205058.361 ±(99.9%) 119063.940 B/op [Average]
[info]   (min, avg, max) = (170560.373, 205058.361, 229230.459), stdev = 30920.527
[info]   CI (99.9%): [85994.421, 324122.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.530 ±(99.9%) 22.835 B/op [Average]
[info]   (min, avg, max) = (7.067, 13.530, 21.522), stdev = 5.930
[info]   CI (99.9%): [≈ 0, 36.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 34.24% complete, ETA 00:46:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5971.531 ops/s
[info] # Warmup Iteration   2: 9477.950 ops/s
[info] # Warmup Iteration   3: 9751.612 ops/s
[info] Iteration   1: 9702.400 ops/s
[info]                  ·gc.alloc.rate:                   1162.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212438.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.884 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9527.000 ops/s
[info]                  ·gc.alloc.rate:                   1141.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163025.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9738.146 ops/s
[info]                  ·gc.alloc.rate:                   1166.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213752.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9756.268 ops/s
[info]                  ·gc.alloc.rate:                   1169.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              188600.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160864.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9762.170 ops/s
[info]                  ·gc.alloc.rate:                   1169.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215535.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9697.197 ±(99.9%) 377.194 ops/s [Average]
[info]   (min, avg, max) = (9527.000, 9697.197, 9762.170), stdev = 97.956
[info]   CI (99.9%): [9320.002, 10074.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1162.060 ±(99.9%) 45.410 MB/sec [Average]
[info]   (min, avg, max) = (1141.594, 1162.060, 1169.972), stdev = 11.793
[info]   CI (99.9%): [1116.649, 1207.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   188600.133 ±(99.9%) 53.359 B/op [Average]
[info]   (min, avg, max) = (188592.044, 188600.133, 188624.044), stdev = 13.857
[info]   CI (99.9%): [188546.774, 188653.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.641 ±(99.9%) 699.263 MB/sec [Average]
[info]   (min, avg, max) = (986.830, 1190.641, 1336.897), stdev = 181.596
[info]   CI (99.9%): [491.379, 1889.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   193123.231 ±(99.9%) 109717.434 B/op [Average]
[info]   (min, avg, max) = (160864.754, 193123.231, 215535.849), stdev = 28493.269
[info]   CI (99.9%): [83405.796, 302840.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.113 ±(99.9%) 20.477 B/op [Average]
[info]   (min, avg, max) = (3.439, 10.113, 16.884), stdev = 5.318
[info]   CI (99.9%): [≈ 0, 30.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 34.55% complete, ETA 00:45:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137078.200 ops/s
[info] # Warmup Iteration   2: 145889.386 ops/s
[info] # Warmup Iteration   3: 147313.305 ops/s
[info] Iteration   1: 145766.953 ops/s
[info]                  ·gc.alloc.rate:                   948.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10767.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 144022.214 ops/s
[info]                  ·gc.alloc.rate:                   937.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10912.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.910 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 145786.900 ops/s
[info]                  ·gc.alloc.rate:                   948.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10801.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 145431.696 ops/s
[info]                  ·gc.alloc.rate:                   946.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10864.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 146363.647 ops/s
[info]                  ·gc.alloc.rate:                   952.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10823.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.672 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   145474.282 ±(99.9%) 3381.488 ops/s [Average]
[info]   (min, avg, max) = (144022.214, 145474.282, 146363.647), stdev = 878.162
[info]   CI (99.9%): [142092.794, 148855.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   946.598 ±(99.9%) 22.349 MB/sec [Average]
[info]   (min, avg, max) = (937.029, 946.598, 952.487), stdev = 5.804
[info]   CI (99.9%): [924.249, 968.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.003, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1001.465 ±(99.9%) 14.709 MB/sec [Average]
[info]   (min, avg, max) = (997.594, 1001.465, 1006.762), stdev = 3.820
[info]   CI (99.9%): [986.755, 1016.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10833.751 ±(99.9%) 216.262 B/op [Average]
[info]   (min, avg, max) = (10767.351, 10833.751, 10912.051), stdev = 56.163
[info]   CI (99.9%): [10617.489, 11050.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.586 ±(99.9%) 0.998 B/op [Average]
[info]   (min, avg, max) = (0.225, 0.586, 0.910), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 34.85% complete, ETA 00:45:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4356.730 ops/s
[info] # Warmup Iteration   2: 7471.600 ops/s
[info] # Warmup Iteration   3: 7750.243 ops/s
[info] Iteration   1: 7696.631 ops/s
[info]                  ·gc.alloc.rate:                   1433.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336516.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.257 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7714.448 ops/s
[info]                  ·gc.alloc.rate:                   1436.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270297.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.234 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7724.191 ops/s
[info]                  ·gc.alloc.rate:                   1438.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271440.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.965 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7663.009 ops/s
[info]                  ·gc.alloc.rate:                   1427.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275004.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.551 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7456.548 ops/s
[info]                  ·gc.alloc.rate:                   1388.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354797.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.181 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7650.965 ±(99.9%) 428.012 ops/s [Average]
[info]   (min, avg, max) = (7456.548, 7650.965, 7724.191), stdev = 111.153
[info]   CI (99.9%): [7222.953, 8078.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1424.797 ±(99.9%) 79.712 MB/sec [Average]
[info]   (min, avg, max) = (1388.600, 1424.797, 1438.482), stdev = 20.701
[info]   CI (99.9%): [1345.085, 1504.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293080.057 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (293080.056, 293080.057, 293080.060), stdev = 0.002
[info]   CI (99.9%): [293080.050, 293080.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.586 ±(99.9%) 700.585 MB/sec [Average]
[info]   (min, avg, max) = (1324.961, 1464.586, 1681.016), stdev = 181.940
[info]   CI (99.9%): [764.001, 2165.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   301611.637 ±(99.9%) 156956.719 B/op [Average]
[info]   (min, avg, max) = (270297.779, 301611.637, 354797.739), stdev = 40761.162
[info]   CI (99.9%): [144654.917, 458568.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.838 ±(99.9%) 25.806 B/op [Average]
[info]   (min, avg, max) = (4.257, 12.838, 21.234), stdev = 6.702
[info]   CI (99.9%): [≈ 0, 38.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 35.15% complete, ETA 00:45:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14886.606 ops/s
[info] # Warmup Iteration   2: 19880.105 ops/s
[info] # Warmup Iteration   3: 20097.630 ops/s
[info] Iteration   1: 19881.135 ops/s
[info]                  ·gc.alloc.rate:                   1056.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              83618.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78412.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20028.267 ops/s
[info]                  ·gc.alloc.rate:                   1064.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              83640.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77998.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.272 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19318.217 ops/s
[info]                  ·gc.alloc.rate:                   1026.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              83624.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81212.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20042.888 ops/s
[info]                  ·gc.alloc.rate:                   1064.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104747.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.269 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20071.808 ops/s
[info]                  ·gc.alloc.rate:                   1065.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78767.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   19868.463 ±(99.9%) 1218.049 ops/s [Average]
[info]   (min, avg, max) = (19318.217, 19868.463, 20071.808), stdev = 316.323
[info]   CI (99.9%): [18650.414, 21086.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1055.474 ±(99.9%) 64.013 MB/sec [Average]
[info]   (min, avg, max) = (1026.506, 1055.474, 1065.902), stdev = 16.624
[info]   CI (99.9%): [991.460, 1119.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83607.187 ±(99.9%) 113.483 B/op [Average]
[info]   (min, avg, max) = (83576.022, 83607.187, 83640.022), stdev = 29.471
[info]   CI (99.9%): [83493.705, 83720.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1063.696 ±(99.9%) 582.073 MB/sec [Average]
[info]   (min, avg, max) = (990.534, 1063.696, 1333.932), stdev = 151.163
[info]   CI (99.9%): [481.623, 1645.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   84227.666 ±(99.9%) 44432.999 B/op [Average]
[info]   (min, avg, max) = (77998.015, 84227.666, 104747.752), stdev = 11539.109
[info]   CI (99.9%): [39794.668, 128660.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.620 ±(99.9%) 5.311 B/op [Average]
[info]   (min, avg, max) = (3.269, 4.620, 6.529), stdev = 1.379
[info]   CI (99.9%): [≈ 0, 9.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 35.45% complete, ETA 00:45:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15182.925 ops/s
[info] # Warmup Iteration   2: 21872.109 ops/s
[info] # Warmup Iteration   3: 22299.443 ops/s
[info] Iteration   1: 22509.456 ops/s
[info]                  ·gc.alloc.rate:                   953.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68607.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22599.544 ops/s
[info]                  ·gc.alloc.rate:                   957.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68542.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22616.329 ops/s
[info]                  ·gc.alloc.rate:               958.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45797.847 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 22082.023 ops/s
[info]                  ·gc.alloc.rate:                   936.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70621.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22059.909 ops/s
[info]                  ·gc.alloc.rate:                   934.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71072.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.455 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   22373.452 ±(99.9%) 1075.158 ops/s [Average]
[info]   (min, avg, max) = (22059.909, 22373.452, 22616.329), stdev = 279.215
[info]   CI (99.9%): [21298.295, 23448.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   948.216 ±(99.9%) 45.369 MB/sec [Average]
[info]   (min, avg, max) = (934.877, 948.216, 958.391), stdev = 11.782
[info]   CI (99.9%): [902.847, 993.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (66696.019, 66696.021, 66696.026), stdev = 0.003
[info]   CI (99.9%): [66696.010, 66696.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   922.217 ±(99.9%) 568.989 MB/sec [Average]
[info]   (min, avg, max) = (658.094, 922.217, 996.223), stdev = 147.765
[info]   CI (99.9%): [353.228, 1491.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64928.450 ±(99.9%) 41416.452 B/op [Average]
[info]   (min, avg, max) = (45797.847, 64928.450, 71072.580), stdev = 10755.721
[info]   CI (99.9%): [23511.998, 106344.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.983 ±(99.9%) 11.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.983, 7.278), stdev = 3.017
[info]   CI (99.9%): [≈ 0, 16.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 35.76% complete, ETA 00:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596908.081 ops/s
[info] # Warmup Iteration   2: 685848.183 ops/s
[info] # Warmup Iteration   3: 687969.985 ops/s
[info] Iteration   1: 697973.836 ops/s
[info]                  ·gc.alloc.rate:                   1259.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2995.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 698289.523 ops/s
[info]                  ·gc.alloc.rate:                   1260.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2252.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 696057.046 ops/s
[info]                  ·gc.alloc.rate:                   1255.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3024.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 691055.409 ops/s
[info]                  ·gc.alloc.rate:                   1247.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3058.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 687584.800 ops/s
[info]                  ·gc.alloc.rate:                   1240.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2311.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   694192.123 ±(99.9%) 18067.653 ops/s [Average]
[info]   (min, avg, max) = (687584.800, 694192.123, 698289.523), stdev = 4692.112
[info]   CI (99.9%): [676124.470, 712259.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1252.647 ±(99.9%) 32.473 MB/sec [Average]
[info]   (min, avg, max) = (1240.773, 1252.647, 1260.015), stdev = 8.433
[info]   CI (99.9%): [1220.174, 1285.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1203.578 ±(99.9%) 699.990 MB/sec [Average]
[info]   (min, avg, max) = (999.187, 1203.578, 1342.961), stdev = 181.785
[info]   CI (99.9%): [503.587, 1903.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2728.371 ±(99.9%) 1573.902 B/op [Average]
[info]   (min, avg, max) = (2252.109, 2728.371, 3058.528), stdev = 408.737
[info]   CI (99.9%): [1154.469, 4302.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (0.094, 0.151, 0.235), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 36.06% complete, ETA 00:44:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 746833.373 ops/s
[info] # Warmup Iteration   2: 848703.258 ops/s
[info] # Warmup Iteration   3: 848613.763 ops/s
[info] Iteration   1: 847897.099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 848795.068 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 848910.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 848336.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 845942.335 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   847976.275 ±(99.9%) 4642.979 ops/s [Average]
[info]   (min, avg, max) = (845942.335, 847976.275, 848910.015), stdev = 1205.767
[info]   CI (99.9%): [843333.296, 852619.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 36.36% complete, ETA 00:44:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15670.976 ops/s
[info] # Warmup Iteration   2: 21548.111 ops/s
[info] # Warmup Iteration   3: 21681.298 ops/s
[info] Iteration   1: 21619.915 ops/s
[info]                  ·gc.alloc.rate:                   997.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71770.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21212.455 ops/s
[info]                  ·gc.alloc.rate:                   978.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73320.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21593.381 ops/s
[info]                  ·gc.alloc.rate:                   995.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              72566.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72266.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21593.623 ops/s
[info]                  ·gc.alloc.rate:                   995.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72609.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 21463.111 ops/s
[info]                  ·gc.alloc.rate:                   989.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73293.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   21496.497 ±(99.9%) 655.306 ops/s [Average]
[info]   (min, avg, max) = (21212.455, 21496.497, 21619.915), stdev = 170.181
[info]   CI (99.9%): [20841.191, 22151.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   991.325 ±(99.9%) 30.514 MB/sec [Average]
[info]   (min, avg, max) = (978.192, 991.325, 997.366), stdev = 7.924
[info]   CI (99.9%): [960.811, 1021.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72567.732 ±(99.9%) 30.914 B/op [Average]
[info]   (min, avg, max) = (72560.020, 72567.732, 72576.028), stdev = 8.028
[info]   CI (99.9%): [72536.818, 72598.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   992.429 ±(99.9%) 21.434 MB/sec [Average]
[info]   (min, avg, max) = (986.295, 992.429, 999.574), stdev = 5.566
[info]   CI (99.9%): [970.995, 1013.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72651.932 ±(99.9%) 2572.789 B/op [Average]
[info]   (min, avg, max) = (71770.452, 72651.932, 73320.253), stdev = 668.145
[info]   CI (99.9%): [70079.143, 75224.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.576 ±(99.9%) 9.294 B/op [Average]
[info]   (min, avg, max) = (1.517, 4.576, 7.586), stdev = 2.414
[info]   CI (99.9%): [≈ 0, 13.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 36.67% complete, ETA 00:44:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18272.156 ops/s
[info] # Warmup Iteration   2: 25183.973 ops/s
[info] # Warmup Iteration   3: 25309.935 ops/s
[info] Iteration   1: 25481.095 ops/s
[info]                  ·gc.alloc.rate:                   1427.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82039.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25240.569 ops/s
[info]                  ·gc.alloc.rate:                   1413.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              88137.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83175.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.788 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25055.886 ops/s
[info]                  ·gc.alloc.rate:                   1403.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84183.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.923 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25300.250 ops/s
[info]                  ·gc.alloc.rate:                   1416.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104588.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.770 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25258.766 ops/s
[info]                  ·gc.alloc.rate:                   1414.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84091.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.891 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   25267.313 ±(99.9%) 584.858 ops/s [Average]
[info]   (min, avg, max) = (25055.886, 25267.313, 25481.095), stdev = 151.886
[info]   CI (99.9%): [24682.455, 25852.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1414.932 ±(99.9%) 33.040 MB/sec [Average]
[info]   (min, avg, max) = (1403.025, 1414.932, 1427.059), stdev = 8.581
[info]   CI (99.9%): [1381.892, 1447.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   88133.159 ±(99.9%) 28.428 B/op [Average]
[info]   (min, avg, max) = (88128.017, 88133.159, 88144.017), stdev = 7.383
[info]   CI (99.9%): [88104.731, 88161.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1406.660 ±(99.9%) 592.053 MB/sec [Average]
[info]   (min, avg, max) = (1328.227, 1406.660, 1681.337), stdev = 153.754
[info]   CI (99.9%): [814.607, 1998.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   87615.917 ±(99.9%) 36685.690 B/op [Average]
[info]   (min, avg, max) = (82039.572, 87615.917, 104588.256), stdev = 9527.157
[info]   CI (99.9%): [50930.226, 124301.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.931 ±(99.9%) 10.824 B/op [Average]
[info]   (min, avg, max) = (1.286, 4.931, 7.788), stdev = 2.811
[info]   CI (99.9%): [≈ 0, 15.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 36.97% complete, ETA 00:44:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16288.466 ops/s
[info] # Warmup Iteration   2: 25866.618 ops/s
[info] # Warmup Iteration   3: 26089.090 ops/s
[info] Iteration   1: 25579.831 ops/s
[info]                  ·gc.alloc.rate:                   1185.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              72912.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60453.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 25732.175 ops/s
[info]                  ·gc.alloc.rate:                   1192.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              72901.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80546.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.273 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25959.590 ops/s
[info]                  ·gc.alloc.rate:                   1202.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80327.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.572 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26223.952 ops/s
[info]                  ·gc.alloc.rate:                   1214.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59968.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.997 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26188.620 ops/s
[info]                  ·gc.alloc.rate:                   1212.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80448.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.753 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   25936.834 ±(99.9%) 1081.762 ops/s [Average]
[info]   (min, avg, max) = (25579.831, 25936.834, 26223.952), stdev = 280.930
[info]   CI (99.9%): [24855.071, 27018.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1201.437 ±(99.9%) 48.578 MB/sec [Average]
[info]   (min, avg, max) = (1185.488, 1201.437, 1214.350), stdev = 12.616
[info]   CI (99.9%): [1152.858, 1250.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72890.685 ±(99.9%) 58.092 B/op [Average]
[info]   (min, avg, max) = (72880.016, 72890.685, 72912.018), stdev = 15.086
[info]   CI (99.9%): [72832.592, 72948.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.668 ±(99.9%) 709.598 MB/sec [Average]
[info]   (min, avg, max) = (982.928, 1192.668, 1338.871), stdev = 184.280
[info]   CI (99.9%): [483.069, 1902.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72349.114 ±(99.9%) 42672.158 B/op [Average]
[info]   (min, avg, max) = (59968.888, 72349.114, 80546.868), stdev = 11081.824
[info]   CI (99.9%): [29676.956, 115021.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.800 ±(99.9%) 9.399 B/op [Average]
[info]   (min, avg, max) = (1.273, 4.800, 7.572), stdev = 2.441
[info]   CI (99.9%): [≈ 0, 14.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 37.27% complete, ETA 00:44:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 238899.153 ops/s
[info] # Warmup Iteration   2: 246508.116 ops/s
[info] # Warmup Iteration   3: 251665.978 ops/s
[info] Iteration   1: 249848.675 ops/s
[info]                  ·gc.alloc.rate:                   650.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4190.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 247702.509 ops/s
[info]                  ·gc.alloc.rate:                   644.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4224.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 245714.592 ops/s
[info]                  ·gc.alloc.rate:                   639.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4260.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 251680.419 ops/s
[info]                  ·gc.alloc.rate:                   655.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4163.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 245630.085 ops/s
[info]                  ·gc.alloc.rate:                   639.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4268.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   248115.256 ±(99.9%) 10155.914 ops/s [Average]
[info]   (min, avg, max) = (245630.085, 248115.256, 251680.419), stdev = 2637.459
[info]   CI (99.9%): [237959.342, 258271.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   645.801 ±(99.9%) 26.199 MB/sec [Average]
[info]   (min, avg, max) = (639.452, 645.801, 655.008), stdev = 6.804
[info]   CI (99.9%): [619.603, 672.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.513 ±(99.9%) 2.622 MB/sec [Average]
[info]   (min, avg, max) = (664.800, 665.513, 666.540), stdev = 0.681
[info]   CI (99.9%): [662.891, 668.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4221.397 ±(99.9%) 173.004 B/op [Average]
[info]   (min, avg, max) = (4163.595, 4221.397, 4268.467), stdev = 44.929
[info]   CI (99.9%): [4048.393, 4394.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.316 ±(99.9%) 0.763 B/op [Average]
[info]   (min, avg, max) = (0.133, 0.316, 0.656), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 1.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 37.58% complete, ETA 00:43:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8654.480 ops/s
[info] # Warmup Iteration   2: 15402.783 ops/s
[info] # Warmup Iteration   3: 15772.705 ops/s
[info] Iteration   1: 15666.949 ops/s
[info]                  ·gc.alloc.rate:                   1602.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165483.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.365 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15633.168 ops/s
[info]                  ·gc.alloc.rate:                   1599.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167161.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.479 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15770.835 ops/s
[info]                  ·gc.alloc.rate:                   1613.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166752.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.387 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15504.723 ops/s
[info]                  ·gc.alloc.rate:                   1586.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170559.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.339 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15850.021 ops/s
[info]                  ·gc.alloc.rate:                   1621.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133974.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15685.139 ±(99.9%) 509.799 ops/s [Average]
[info]   (min, avg, max) = (15504.723, 15685.139, 15850.021), stdev = 132.393
[info]   CI (99.9%): [15175.340, 16194.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1604.562 ±(99.9%) 51.296 MB/sec [Average]
[info]   (min, avg, max) = (1586.612, 1604.562, 1621.269), stdev = 13.321
[info]   CI (99.9%): [1553.266, 1655.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160984.047 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (160984.027, 160984.047, 160984.112), stdev = 0.037
[info]   CI (99.9%): [160983.905, 160984.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.826 ±(99.9%) 545.800 MB/sec [Average]
[info]   (min, avg, max) = (1349.252, 1601.826, 1680.983), stdev = 141.743
[info]   CI (99.9%): [1056.025, 2147.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   160786.247 ±(99.9%) 58166.223 B/op [Average]
[info]   (min, avg, max) = (133974.055, 160786.247, 170559.257), stdev = 15105.583
[info]   CI (99.9%): [102620.024, 218952.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.767 ±(99.9%) 6.631 B/op [Average]
[info]   (min, avg, max) = (6.339, 8.767, 10.479), stdev = 1.722
[info]   CI (99.9%): [2.137, 15.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 37.88% complete, ETA 00:43:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33275.730 ops/s
[info] # Warmup Iteration   2: 42723.728 ops/s
[info] # Warmup Iteration   3: 42661.389 ops/s
[info] Iteration   1: 43534.960 ops/s
[info]                  ·gc.alloc.rate:                   1384.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59879.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.258 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 43018.936 ops/s
[info]                  ·gc.alloc.rate:                   1367.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48706.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.808 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 43487.920 ops/s
[info]                  ·gc.alloc.rate:                   1383.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48408.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43616.468 ops/s
[info]                  ·gc.alloc.rate:                   1386.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48459.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43026.432 ops/s
[info]                  ·gc.alloc.rate:                   1368.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49319.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.523 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   43336.943 ±(99.9%) 1118.816 ops/s [Average]
[info]   (min, avg, max) = (43018.936, 43336.943, 43616.468), stdev = 290.553
[info]   CI (99.9%): [42218.127, 44455.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1378.078 ±(99.9%) 36.026 MB/sec [Average]
[info]   (min, avg, max) = (1367.849, 1378.078, 1386.844), stdev = 9.356
[info]   CI (99.9%): [1342.052, 1414.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (50040.010, 50040.010, 50040.011), stdev = 0.001
[info]   CI (99.9%): [50040.009, 50040.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.518 ±(99.9%) 545.838 MB/sec [Average]
[info]   (min, avg, max) = (1331.386, 1403.518, 1656.845), stdev = 141.752
[info]   CI (99.9%): [857.680, 1949.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   50954.642 ±(99.9%) 19262.511 B/op [Average]
[info]   (min, avg, max) = (48408.797, 50954.642, 59879.753), stdev = 5002.413
[info]   CI (99.9%): [31692.130, 70217.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.721 ±(99.9%) 3.333 B/op [Average]
[info]   (min, avg, max) = (1.523, 2.721, 3.808), stdev = 0.866
[info]   CI (99.9%): [≈ 0, 6.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 38.18% complete, ETA 00:43:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80053.904 ops/s
[info] # Warmup Iteration   2: 110031.505 ops/s
[info] # Warmup Iteration   3: 112630.443 ops/s
[info] Iteration   1: 112745.160 ops/s
[info]                  ·gc.alloc.rate:                   1322.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              18456.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18328.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.581 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 113577.122 ops/s
[info]                  ·gc.alloc.rate:                   1332.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              18456.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18304.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.731 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 113560.694 ops/s
[info]                  ·gc.alloc.rate:                   1331.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              18456.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18418.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 112808.743 ops/s
[info]                  ·gc.alloc.rate:                   1323.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              18456.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18653.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 113518.340 ops/s
[info]                  ·gc.alloc.rate:                   1331.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              18456.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18619.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.866 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   113242.012 ±(99.9%) 1639.124 ops/s [Average]
[info]   (min, avg, max) = (112745.160, 113242.012, 113577.122), stdev = 425.675
[info]   CI (99.9%): [111602.887, 114881.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1328.103 ±(99.9%) 18.950 MB/sec [Average]
[info]   (min, avg, max) = (1322.079, 1328.103, 1332.110), stdev = 4.921
[info]   CI (99.9%): [1309.153, 1347.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18456.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18456.004, 18456.004, 18456.004), stdev = 0.001
[info]   CI (99.9%): [18456.003, 18456.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1328.745 ±(99.9%) 46.650 MB/sec [Average]
[info]   (min, avg, max) = (1312.959, 1328.745, 1342.994), stdev = 12.115
[info]   CI (99.9%): [1282.095, 1375.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18464.979 ±(99.9%) 626.148 B/op [Average]
[info]   (min, avg, max) = (18304.734, 18464.979, 18653.206), stdev = 162.609
[info]   CI (99.9%): [17838.830, 19091.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.099 ±(99.9%) 1.643 B/op [Average]
[info]   (min, avg, max) = (0.581, 1.099, 1.731), stdev = 0.427
[info]   CI (99.9%): [≈ 0, 2.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 38.48% complete, ETA 00:43:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 946270.362 ops/s
[info] # Warmup Iteration   2: 1075882.327 ops/s
[info] # Warmup Iteration   3: 1097631.546 ops/s
[info] Iteration   1: 1096722.823 ops/s
[info]                  ·gc.alloc.rate:                   1176.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1905.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1088757.594 ops/s
[info]                  ·gc.alloc.rate:                   1168.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1442.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1091062.098 ops/s
[info]                  ·gc.alloc.rate:                   1170.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1927.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1082734.866 ops/s
[info]                  ·gc.alloc.rate:                   1161.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1462.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1098661.190 ops/s
[info]                  ·gc.alloc.rate:                   1178.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1926.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1091587.714 ±(99.9%) 24585.552 ops/s [Average]
[info]   (min, avg, max) = (1082734.866, 1091587.714, 1098661.190), stdev = 6384.790
[info]   CI (99.9%): [1067002.162, 1116173.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1170.919 ±(99.9%) 25.858 MB/sec [Average]
[info]   (min, avg, max) = (1161.528, 1170.919, 1178.400), stdev = 6.715
[info]   CI (99.9%): [1145.060, 1196.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1202.656 ±(99.9%) 705.010 MB/sec [Average]
[info]   (min, avg, max) = (998.308, 1202.656, 1344.746), stdev = 183.089
[info]   CI (99.9%): [497.646, 1907.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1732.800 ±(99.9%) 986.686 B/op [Average]
[info]   (min, avg, max) = (1442.567, 1732.800, 1927.690), stdev = 256.239
[info]   CI (99.9%): [746.114, 2719.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.108 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.108, 0.150), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 38.79% complete, ETA 00:42:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 639610.197 ops/s
[info] # Warmup Iteration   2: 696712.040 ops/s
[info] # Warmup Iteration   3: 694389.740 ops/s
[info] Iteration   1: 695274.950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 692777.919 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 692412.242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 692579.070 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 692485.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   693105.998 ±(99.9%) 4698.566 ops/s [Average]
[info]   (min, avg, max) = (692412.242, 693105.998, 695274.950), stdev = 1220.203
[info]   CI (99.9%): [688407.432, 697804.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 39.09% complete, ETA 00:42:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35753.483 ops/s
[info] # Warmup Iteration   2: 46076.203 ops/s
[info] # Warmup Iteration   3: 47835.430 ops/s
[info] Iteration   1: 46922.601 ops/s
[info]                  ·gc.alloc.rate:                   1244.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44161.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.396 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 47824.482 ops/s
[info]                  ·gc.alloc.rate:                   1267.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43548.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 47906.296 ops/s
[info]                  ·gc.alloc.rate:                   1270.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43715.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 47910.662 ops/s
[info]                  ·gc.alloc.rate:                   1270.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43929.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.735 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 47297.519 ops/s
[info]                  ·gc.alloc.rate:                   1254.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33493.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.771 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   47572.312 ±(99.9%) 1708.283 ops/s [Average]
[info]   (min, avg, max) = (46922.601, 47572.312, 47910.662), stdev = 443.636
[info]   CI (99.9%): [45864.029, 49280.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1261.377 ±(99.9%) 45.659 MB/sec [Average]
[info]   (min, avg, max) = (1244.028, 1261.377, 1270.658), stdev = 11.857
[info]   CI (99.9%): [1215.719, 1307.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41728.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41728.009, 41728.009, 41728.010), stdev = 0.001
[info]   CI (99.9%): [41728.008, 41728.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1262.966 ±(99.9%) 552.741 MB/sec [Average]
[info]   (min, avg, max) = (1006.575, 1262.966, 1337.697), stdev = 143.545
[info]   CI (99.9%): [710.225, 1815.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41769.743 ±(99.9%) 17836.313 B/op [Average]
[info]   (min, avg, max) = (33493.961, 41769.743, 44161.740), stdev = 4632.034
[info]   CI (99.9%): [23933.430, 59606.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.339 ±(99.9%) 5.133 B/op [Average]
[info]   (min, avg, max) = (0.684, 2.339, 4.110), stdev = 1.333
[info]   CI (99.9%): [≈ 0, 7.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 39.39% complete, ETA 00:42:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11175.864 ops/s
[info] # Warmup Iteration   2: 14581.305 ops/s
[info] # Warmup Iteration   3: 14748.493 ops/s
[info] Iteration   1: 14678.421 ops/s
[info]                  ·gc.alloc.rate:                   1333.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              142912.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142338.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.464 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14911.728 ops/s
[info]                  ·gc.alloc.rate:                   1354.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              142921.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140616.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.986 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14723.558 ops/s
[info]                  ·gc.alloc.rate:                   1337.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143123.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14790.705 ops/s
[info]                  ·gc.alloc.rate:                   1343.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143032.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.430 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14833.892 ops/s
[info]                  ·gc.alloc.rate:                   1347.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              142922.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143051.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.626 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14787.661 ±(99.9%) 352.821 ops/s [Average]
[info]   (min, avg, max) = (14678.421, 14787.661, 14911.728), stdev = 91.627
[info]   CI (99.9%): [14434.840, 15140.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1343.190 ±(99.9%) 32.208 MB/sec [Average]
[info]   (min, avg, max) = (1333.200, 1343.190, 1354.798), stdev = 8.364
[info]   CI (99.9%): [1310.982, 1375.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142922.436 ±(99.9%) 25.259 B/op [Average]
[info]   (min, avg, max) = (142912.032, 142922.436, 142928.029), stdev = 6.560
[info]   CI (99.9%): [142897.177, 142947.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1338.556 ±(99.9%) 31.828 MB/sec [Average]
[info]   (min, avg, max) = (1327.848, 1338.556, 1348.245), stdev = 8.266
[info]   CI (99.9%): [1306.729, 1370.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   142432.582 ±(99.9%) 4097.290 B/op [Average]
[info]   (min, avg, max) = (140616.334, 142432.582, 143123.575), stdev = 1064.053
[info]   CI (99.9%): [138335.292, 146529.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.191 ±(99.9%) 10.941 B/op [Average]
[info]   (min, avg, max) = (4.430, 6.191, 10.986), stdev = 2.841
[info]   CI (99.9%): [≈ 0, 17.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 39.70% complete, ETA 00:42:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9525.496 ops/s
[info] # Warmup Iteration   2: 15510.478 ops/s
[info] # Warmup Iteration   3: 15664.349 ops/s
[info] Iteration   1: 15742.091 ops/s
[info]                  ·gc.alloc.rate:                   1282.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              128176.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131096.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15680.253 ops/s
[info]                  ·gc.alloc.rate:                   1277.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              128198.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132384.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15788.857 ops/s
[info]                  ·gc.alloc.rate:                   1286.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132267.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.150 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15824.930 ops/s
[info]                  ·gc.alloc.rate:                   1289.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132769.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15668.959 ops/s
[info]                  ·gc.alloc.rate:                   1276.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              128189.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134623.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15741.018 ±(99.9%) 259.852 ops/s [Average]
[info]   (min, avg, max) = (15668.959, 15741.018, 15824.930), stdev = 67.483
[info]   CI (99.9%): [15481.166, 16000.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1282.355 ±(99.9%) 21.502 MB/sec [Average]
[info]   (min, avg, max) = (1276.634, 1282.355, 1289.142), stdev = 5.584
[info]   CI (99.9%): [1260.854, 1303.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   128195.962 ±(99.9%) 52.093 B/op [Average]
[info]   (min, avg, max) = (128176.029, 128195.962, 128208.037), stdev = 13.528
[info]   CI (99.9%): [128143.869, 128248.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1326.675 ±(99.9%) 45.757 MB/sec [Average]
[info]   (min, avg, max) = (1311.259, 1326.675, 1340.703), stdev = 11.883
[info]   CI (99.9%): [1280.918, 1372.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   132628.217 ±(99.9%) 4921.476 B/op [Average]
[info]   (min, avg, max) = (131096.974, 132628.217, 134623.068), stdev = 1278.092
[info]   CI (99.9%): [127706.741, 137549.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.079 ±(99.9%) 13.469 B/op [Average]
[info]   (min, avg, max) = (4.150, 7.079, 12.533), stdev = 3.498
[info]   CI (99.9%): [≈ 0, 20.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 40.00% complete, ETA 00:42:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250790.538 ops/s
[info] # Warmup Iteration   2: 261317.169 ops/s
[info] # Warmup Iteration   3: 266092.568 ops/s
[info] Iteration   1: 267008.125 ops/s
[info]                  ·gc.alloc.rate:                   694.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3920.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 267098.175 ops/s
[info]                  ·gc.alloc.rate:                   695.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3917.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 267111.026 ops/s
[info]                  ·gc.alloc.rate:                   695.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3919.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 267229.710 ops/s
[info]                  ·gc.alloc.rate:                   695.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3921.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 266103.514 ops/s
[info]                  ·gc.alloc.rate:                   692.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5917.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   266910.110 ±(99.9%) 1762.572 ops/s [Average]
[info]   (min, avg, max) = (266103.514, 266910.110, 267229.710), stdev = 457.734
[info]   CI (99.9%): [265147.537, 268672.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   694.635 ±(99.9%) 4.534 MB/sec [Average]
[info]   (min, avg, max) = (692.572, 694.635, 695.495), stdev = 1.177
[info]   CI (99.9%): [690.101, 699.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.304 ±(99.9%) 577.565 MB/sec [Average]
[info]   (min, avg, max) = (664.798, 732.304, 1000.616), stdev = 149.992
[info]   CI (99.9%): [154.739, 1309.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4319.310 ±(99.9%) 3440.954 B/op [Average]
[info]   (min, avg, max) = (3917.386, 4319.310, 5917.836), stdev = 893.605
[info]   CI (99.9%): [878.356, 7760.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.491 ±(99.9%) 0.749 B/op [Average]
[info]   (min, avg, max) = (0.245, 0.491, 0.736), stdev = 0.194
[info]   CI (99.9%): [≈ 0, 1.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 40.30% complete, ETA 00:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6215.451 ops/s
[info] # Warmup Iteration   2: 10916.629 ops/s
[info] # Warmup Iteration   3: 10899.899 ops/s
[info] Iteration   1: 11016.437 ops/s
[info]                  ·gc.alloc.rate:                   1513.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188180.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.921 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11040.432 ops/s
[info]                  ·gc.alloc.rate:                   1517.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236219.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.805 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11031.608 ops/s
[info]                  ·gc.alloc.rate:                   1515.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238122.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.940 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11041.788 ops/s
[info]                  ·gc.alloc.rate:                   1517.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              216281.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191219.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.901 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11015.325 ops/s
[info]                  ·gc.alloc.rate:                   1513.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240657.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.949 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11029.118 ±(99.9%) 48.926 ops/s [Average]
[info]   (min, avg, max) = (11015.325, 11029.118, 11041.788), stdev = 12.706
[info]   CI (99.9%): [10980.192, 11078.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1515.777 ±(99.9%) 7.075 MB/sec [Average]
[info]   (min, avg, max) = (1513.878, 1515.777, 1517.770), stdev = 1.837
[info]   CI (99.9%): [1508.701, 1522.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216280.314 ±(99.9%) 2.359 B/op [Average]
[info]   (min, avg, max) = (216280.039, 216280.314, 216281.410), stdev = 0.613
[info]   CI (99.9%): [216277.955, 216282.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1534.008 ±(99.9%) 721.079 MB/sec [Average]
[info]   (min, avg, max) = (1317.191, 1534.008, 1684.560), stdev = 187.262
[info]   CI (99.9%): [812.929, 2255.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   218879.926 ±(99.9%) 102833.544 B/op [Average]
[info]   (min, avg, max) = (188180.329, 218879.926, 240657.567), stdev = 26705.545
[info]   CI (99.9%): [116046.382, 321713.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.503 ±(99.9%) 18.762 B/op [Average]
[info]   (min, avg, max) = (5.940, 9.503, 17.805), stdev = 4.872
[info]   CI (99.9%): [≈ 0, 28.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 40.61% complete, ETA 00:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31711.624 ops/s
[info] # Warmup Iteration   2: 41329.799 ops/s
[info] # Warmup Iteration   3: 41422.304 ops/s
[info] Iteration   1: 42082.764 ops/s
[info]                  ·gc.alloc.rate:                   1598.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62070.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.893 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 42278.557 ops/s
[info]                  ·gc.alloc.rate:                   1605.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62130.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 42012.238 ops/s
[info]                  ·gc.alloc.rate:                   1595.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62862.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.340 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42291.587 ops/s
[info]                  ·gc.alloc.rate:                   1606.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50161.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.549 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41923.342 ops/s
[info]                  ·gc.alloc.rate:                   1592.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63433.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.345 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   42117.698 ±(99.9%) 627.517 ops/s [Average]
[info]   (min, avg, max) = (41923.342, 42117.698, 42291.587), stdev = 162.964
[info]   CI (99.9%): [41490.181, 42745.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1599.430 ±(99.9%) 23.789 MB/sec [Average]
[info]   (min, avg, max) = (1592.060, 1599.430, 1606.068), stdev = 6.178
[info]   CI (99.9%): [1575.642, 1623.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59768.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (59768.010, 59768.010, 59768.011), stdev = 0.001
[info]   CI (99.9%): [59768.009, 59768.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.859 ±(99.9%) 563.296 MB/sec [Average]
[info]   (min, avg, max) = (1347.932, 1608.859, 1689.705), stdev = 146.286
[info]   CI (99.9%): [1045.563, 2172.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   60131.829 ±(99.9%) 21570.027 B/op [Average]
[info]   (min, avg, max) = (50161.790, 60131.829, 63433.734), stdev = 5601.668
[info]   CI (99.9%): [38561.801, 81701.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.490 ±(99.9%) 3.292 B/op [Average]
[info]   (min, avg, max) = (1.549, 2.490, 3.893), stdev = 0.855
[info]   CI (99.9%): [≈ 0, 5.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 40.91% complete, ETA 00:41:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28238.746 ops/s
[info] # Warmup Iteration   2: 40498.445 ops/s
[info] # Warmup Iteration   3: 40938.205 ops/s
[info] Iteration   1: 40984.312 ops/s
[info]                  ·gc.alloc.rate:               1220.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1311.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50354.261 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 41265.303 ops/s
[info]                  ·gc.alloc.rate:                   1229.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37688.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41269.794 ops/s
[info]                  ·gc.alloc.rate:                   1229.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50552.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.175 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41264.855 ops/s
[info]                  ·gc.alloc.rate:                   1228.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50837.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.588 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 41342.874 ops/s
[info]                  ·gc.alloc.rate:                   1231.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51021.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.170 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   41225.428 ±(99.9%) 534.405 ops/s [Average]
[info]   (min, avg, max) = (40984.312, 41225.428, 41342.874), stdev = 138.783
[info]   CI (99.9%): [40691.023, 41759.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1227.990 ±(99.9%) 15.964 MB/sec [Average]
[info]   (min, avg, max) = (1220.871, 1227.990, 1231.773), stdev = 4.146
[info]   CI (99.9%): [1212.025, 1243.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46872.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (46872.010, 46872.011, 46872.011), stdev = 0.001
[info]   CI (99.9%): [46872.009, 46872.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1259.866 ±(99.9%) 585.774 MB/sec [Average]
[info]   (min, avg, max) = (988.422, 1259.866, 1340.817), stdev = 152.124
[info]   CI (99.9%): [674.093, 1845.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   48090.844 ±(99.9%) 22413.208 B/op [Average]
[info]   (min, avg, max) = (37688.678, 48090.844, 51021.401), stdev = 5820.639
[info]   CI (99.9%): [25677.636, 70504.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.222 ±(99.9%) 5.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.222, 3.176), stdev = 1.419
[info]   CI (99.9%): [≈ 0, 7.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 41.21% complete, ETA 00:41:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 985185.328 ops/s
[info] # Warmup Iteration   2: 1068525.334 ops/s
[info] # Warmup Iteration   3: 1101128.024 ops/s
[info] Iteration   1: 1081219.034 ops/s
[info]                  ·gc.alloc.rate:                   983.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1448.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1098423.057 ops/s
[info]                  ·gc.alloc.rate:                   999.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1427.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1100128.854 ops/s
[info]                  ·gc.alloc.rate:                   1000.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1430.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1100616.608 ops/s
[info]                  ·gc.alloc.rate:                   1001.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1433.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1099520.778 ops/s
[info]                  ·gc.alloc.rate:                   1000.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1439.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1095981.666 ±(99.9%) 31933.823 ops/s [Average]
[info]   (min, avg, max) = (1081219.034, 1095981.666, 1100616.608), stdev = 8293.112
[info]   CI (99.9%): [1064047.843, 1127915.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   997.222 ±(99.9%) 29.266 MB/sec [Average]
[info]   (min, avg, max) = (983.691, 997.222, 1001.402), stdev = 7.600
[info]   CI (99.9%): [967.956, 1026.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1000.043 ±(99.9%) 17.199 MB/sec [Average]
[info]   (min, avg, max) = (995.146, 1000.043, 1006.151), stdev = 4.467
[info]   CI (99.9%): [982.844, 1017.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1436.093 ±(99.9%) 32.096 B/op [Average]
[info]   (min, avg, max) = (1427.890, 1436.093, 1448.675), stdev = 8.335
[info]   CI (99.9%): [1403.997, 1468.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.102 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.102, 0.121), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 41.52% complete, ETA 00:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1175812.124 ops/s
[info] # Warmup Iteration   2: 1276589.660 ops/s
[info] # Warmup Iteration   3: 1212121.393 ops/s
[info] Iteration   1: 1278388.963 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1277312.980 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1275820.369 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1278822.296 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1277613.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1277591.622 ±(99.9%) 4459.841 ops/s [Average]
[info]   (min, avg, max) = (1275820.369, 1277591.622, 1278822.296), stdev = 1158.206
[info]   CI (99.9%): [1273131.782, 1282051.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 41.82% complete, ETA 00:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2673.508 ops/s
[info] # Warmup Iteration   2: 3401.646 ops/s
[info] # Warmup Iteration   3: 3625.826 ops/s
[info] Iteration   1: 3547.596 ops/s
[info]                  ·gc.alloc.rate:                   483.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113455.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.612 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3532.807 ops/s
[info]                  ·gc.alloc.rate:                   481.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292853.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 918.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3555.927 ops/s
[info]                  ·gc.alloc.rate:               484.746 MB/sec
[info]                  ·gc.alloc.rate.norm:          214544.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145332.575 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 3646.070 ops/s
[info]                  ·gc.alloc.rate:                   497.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283635.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3578.963 ops/s
[info]                  ·gc.alloc.rate:               487.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          214544.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144545.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3572.272 ±(99.9%) 171.392 ops/s [Average]
[info]   (min, avg, max) = (3532.807, 3572.272, 3646.070), stdev = 44.510
[info]   CI (99.9%): [3400.881, 3743.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   487.041 ±(99.9%) 23.398 MB/sec [Average]
[info]   (min, avg, max) = (481.691, 487.041, 497.141), stdev = 6.076
[info]   CI (99.9%): [463.643, 510.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214544.125 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (214544.118, 214544.125, 214544.131), stdev = 0.006
[info]   CI (99.9%): [214544.103, 214544.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   445.528 ±(99.9%) 753.404 MB/sec [Average]
[info]   (min, avg, max) = (255.801, 445.528, 657.511), stdev = 195.657
[info]   CI (99.9%): [≈ 0, 1198.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   195964.557 ±(99.9%) 328373.509 B/op [Average]
[info]   (min, avg, max) = (113455.391, 195964.557, 292853.569), stdev = 85277.558
[info]   CI (99.9%): [≈ 0, 524338.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.435 ±(99.9%) 3.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.435, 2.063), stdev = 0.911
[info]   CI (99.9%): [≈ 0, 3.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   193.669 ±(99.9%) 1562.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 193.669, 918.807), stdev = 405.804
[info]   CI (99.9%): [≈ 0, 1756.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 42.12% complete, ETA 00:40:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99442.515 ops/s
[info] # Warmup Iteration   2: 118245.427 ops/s
[info] # Warmup Iteration   3: 116239.056 ops/s
[info] Iteration   1: 119310.277 ops/s
[info]                  ·gc.alloc.rate:                   2215.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26512.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.824 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 119190.246 ops/s
[info]                  ·gc.alloc.rate:                   2213.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31139.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.649 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 117443.476 ops/s
[info]                  ·gc.alloc.rate:                   2180.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27197.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.395 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 119004.338 ops/s
[info]                  ·gc.alloc.rate:                   2209.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31403.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 119345.889 ops/s
[info]                  ·gc.alloc.rate:                   2215.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26881.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.098 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   118858.845 ±(99.9%) 3089.687 ops/s [Average]
[info]   (min, avg, max) = (117443.476, 118858.845, 119345.889), stdev = 802.382
[info]   CI (99.9%): [115769.158, 121948.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2206.987 ±(99.9%) 57.443 MB/sec [Average]
[info]   (min, avg, max) = (2180.668, 2206.987, 2215.979), stdev = 14.918
[info]   CI (99.9%): [2149.544, 2264.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29224.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29224.004, 29224.004, 29224.004), stdev = 0.001
[info]   CI (99.9%): [29224.003, 29224.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.069 ±(99.9%) 719.529 MB/sec [Average]
[info]   (min, avg, max) = (2009.823, 2162.069, 2374.452), stdev = 186.859
[info]   CI (99.9%): [1442.541, 2881.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28626.748 ±(99.9%) 9349.102 B/op [Average]
[info]   (min, avg, max) = (26512.301, 28626.748, 31403.011), stdev = 2427.932
[info]   CI (99.9%): [19277.646, 37975.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.048 ±(99.9%) 2.048 B/op [Average]
[info]   (min, avg, max) = (0.275, 1.048, 1.649), stdev = 0.532
[info]   CI (99.9%): [≈ 0, 3.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 42.42% complete, ETA 00:40:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171695.297 ops/s
[info] # Warmup Iteration   2: 250168.781 ops/s
[info] # Warmup Iteration   3: 250404.867 ops/s
[info] Iteration   1: 250274.774 ops/s
[info]                  ·gc.alloc.rate:                   549.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2054.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 251239.274 ops/s
[info]                  ·gc.alloc.rate:                   551.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4091.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 252539.060 ops/s
[info]                  ·gc.alloc.rate:                   554.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4072.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 252614.666 ops/s
[info]                  ·gc.alloc.rate:               554.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2037.786 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 252471.439 ops/s
[info]                  ·gc.alloc.rate:                   554.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4082.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   251827.843 ±(99.9%) 3991.306 ops/s [Average]
[info]   (min, avg, max) = (250274.774, 251827.843, 252614.666), stdev = 1036.529
[info]   CI (99.9%): [247836.537, 255819.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   552.998 ±(99.9%) 8.846 MB/sec [Average]
[info]   (min, avg, max) = (549.570, 552.998, 554.791), stdev = 2.297
[info]   CI (99.9%): [544.152, 561.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.002, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.071 ±(99.9%) 689.438 MB/sec [Average]
[info]   (min, avg, max) = (326.751, 523.071, 654.814), stdev = 179.045
[info]   CI (99.9%): [≈ 0, 1212.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3267.788 ±(99.9%) 4293.881 B/op [Average]
[info]   (min, avg, max) = (2037.786, 3267.788, 4091.631), stdev = 1115.107
[info]   CI (99.9%): [≈ 0, 7561.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.475 ±(99.9%) 3.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 2.188), stdev = 0.958
[info]   CI (99.9%): [≈ 0, 4.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.986 ±(99.9%) 23.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.986, 13.758), stdev = 6.024
[info]   CI (99.9%): [≈ 0, 26.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 42.73% complete, ETA 00:40:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459098.938 ops/s
[info] # Warmup Iteration   2: 472396.848 ops/s
[info] # Warmup Iteration   3: 481849.146 ops/s
[info] Iteration   1: 484726.070 ops/s
[info]                  ·gc.alloc.rate:                   610.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2158.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 485750.342 ops/s
[info]                  ·gc.alloc.rate:                   612.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2154.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 485593.533 ops/s
[info]                  ·gc.alloc.rate:                   612.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2154.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 481932.110 ops/s
[info]                  ·gc.alloc.rate:                   607.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2171.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 485164.350 ops/s
[info]                  ·gc.alloc.rate:                   611.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2160.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   484633.281 ±(99.9%) 6013.936 ops/s [Average]
[info]   (min, avg, max) = (481932.110, 484633.281, 485750.342), stdev = 1561.800
[info]   CI (99.9%): [478619.345, 490647.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   610.934 ±(99.9%) 7.662 MB/sec [Average]
[info]   (min, avg, max) = (607.494, 610.934, 612.326), stdev = 1.990
[info]   CI (99.9%): [603.272, 618.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.092 ±(99.9%) 2.606 MB/sec [Average]
[info]   (min, avg, max) = (664.758, 665.092, 666.302), stdev = 0.677
[info]   CI (99.9%): [662.486, 667.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2159.896 ±(99.9%) 26.446 B/op [Average]
[info]   (min, avg, max) = (2154.091, 2159.896, 2171.095), stdev = 6.868
[info]   CI (99.9%): [2133.450, 2186.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.360 ±(99.9%) 2.613 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.360, 1.573), stdev = 0.678
[info]   CI (99.9%): [≈ 0, 2.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.170 ±(99.9%) 8.484 B/op [Average]
[info]   (min, avg, max) = (0.068, 1.170, 5.109), stdev = 2.203
[info]   CI (99.9%): [≈ 0, 9.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 43.03% complete, ETA 00:40:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42494.776 ops/s
[info] # Warmup Iteration   2: 69104.167 ops/s
[info] # Warmup Iteration   3: 69505.046 ops/s
[info] Iteration   1: 69767.717 ops/s
[info]                  ·gc.alloc.rate:                   3023.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3021.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68125.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.287 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 68993.707 ops/s
[info]                  ·gc.alloc.rate:                   2994.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              68322.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3042.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69417.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.324 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 70053.348 ops/s
[info]                  ·gc.alloc.rate:                   3034.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68633.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.274 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 70019.011 ops/s
[info]                  ·gc.alloc.rate:                   3032.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68773.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.872 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 68993.632 ops/s
[info]                  ·gc.alloc.rate:                   2988.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62119.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.799 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   69565.483 ±(99.9%) 2054.365 ops/s [Average]
[info]   (min, avg, max) = (68993.632, 69565.483, 70053.348), stdev = 533.512
[info]   CI (99.9%): [67511.118, 71619.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3014.673 ±(99.9%) 83.093 MB/sec [Average]
[info]   (min, avg, max) = (2988.346, 3014.673, 3034.184), stdev = 21.579
[info]   CI (99.9%): [2931.581, 3097.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68198.941 ±(99.9%) 266.357 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68198.941, 68322.680), stdev = 69.172
[info]   CI (99.9%): [67932.584, 68465.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.399 ±(99.9%) 556.552 MB/sec [Average]
[info]   (min, avg, max) = (2723.206, 2980.399, 3059.614), stdev = 144.535
[info]   CI (99.9%): [2423.848, 3536.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67413.996 ±(99.9%) 11533.424 B/op [Average]
[info]   (min, avg, max) = (62119.827, 67413.996, 69417.764), stdev = 2995.194
[info]   CI (99.9%): [55880.572, 78947.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.167), stdev = 0.032
[info]   CI (99.9%): [0.016, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.111 ±(99.9%) 2.798 B/op [Average]
[info]   (min, avg, max) = (1.872, 3.111, 3.799), stdev = 0.727
[info]   CI (99.9%): [0.313, 5.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 43.33% complete, ETA 00:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143880.653 ops/s
[info] # Warmup Iteration   2: 177089.371 ops/s
[info] # Warmup Iteration   3: 178251.899 ops/s
[info] Iteration   1: 180518.274 ops/s
[info]                  ·gc.alloc.rate:                   1841.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17406.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.908 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 181319.851 ops/s
[info]                  ·gc.alloc.rate:                   1849.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17451.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.265 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 178528.023 ops/s
[info]                  ·gc.alloc.rate:                   1821.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14849.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.734 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 180216.856 ops/s
[info]                  ·gc.alloc.rate:                   1838.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14755.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 178983.142 ops/s
[info]                  ·gc.alloc.rate:                   1826.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17883.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.732 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   179913.229 ±(99.9%) 4399.144 ops/s [Average]
[info]   (min, avg, max) = (178528.023, 179913.229, 181319.851), stdev = 1142.444
[info]   CI (99.9%): [175514.085, 184312.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1835.473 ±(99.9%) 44.617 MB/sec [Average]
[info]   (min, avg, max) = (1821.200, 1835.473, 1849.768), stdev = 11.587
[info]   CI (99.9%): [1790.857, 1880.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   16056.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16056.002, 16056.003, 16056.003), stdev = 0.001
[info]   CI (99.9%): [16056.002, 16056.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1883.013 ±(99.9%) 691.191 MB/sec [Average]
[info]   (min, avg, max) = (1684.295, 1883.013, 2034.215), stdev = 179.500
[info]   CI (99.9%): [1191.821, 2574.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16469.155 ±(99.9%) 5904.072 B/op [Average]
[info]   (min, avg, max) = (14755.689, 16469.155, 17883.273), stdev = 1533.269
[info]   CI (99.9%): [10565.083, 22373.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.873 ±(99.9%) 0.893 B/op [Average]
[info]   (min, avg, max) = (0.727, 0.873, 1.265), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 1.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 43.64% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 350037.673 ops/s
[info] # Warmup Iteration   2: 479019.112 ops/s
[info] # Warmup Iteration   3: 476416.828 ops/s
[info] Iteration   1: 482079.131 ops/s
[info]                  ·gc.alloc.rate:                   494.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1901.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 484877.444 ops/s
[info]                  ·gc.alloc.rate:               497.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1060.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 484272.299 ops/s
[info]                  ·gc.alloc.rate:                   497.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2125.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 481303.006 ops/s
[info]                  ·gc.alloc.rate:               494.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1069.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 477583.224 ops/s
[info]                  ·gc.alloc.rate:                   490.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2157.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   482023.021 ±(99.9%) 11133.680 ops/s [Average]
[info]   (min, avg, max) = (477583.224, 482023.021, 484877.444), stdev = 2891.381
[info]   CI (99.9%): [470889.341, 493156.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   494.967 ±(99.9%) 11.363 MB/sec [Average]
[info]   (min, avg, max) = (490.384, 494.967, 497.855), stdev = 2.951
[info]   CI (99.9%): [483.604, 506.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.097 ±(99.9%) 650.099 MB/sec [Average]
[info]   (min, avg, max) = (326.748, 509.097, 654.827), stdev = 168.829
[info]   CI (99.9%): [≈ 0, 1159.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1663.184 ±(99.9%) 2136.527 B/op [Average]
[info]   (min, avg, max) = (1060.600, 1663.184, 2157.903), stdev = 554.849
[info]   CI (99.9%): [≈ 0, 3799.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.458 ±(99.9%) 3.549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.105), stdev = 0.922
[info]   CI (99.9%): [≈ 0, 4.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.496 ±(99.9%) 11.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.496, 6.871), stdev = 3.009
[info]   CI (99.9%): [≈ 0, 13.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 43.94% complete, ETA 00:39:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532804.658 ops/s
[info] # Warmup Iteration   2: 572850.203 ops/s
[info] # Warmup Iteration   3: 564984.322 ops/s
[info] Iteration   1: 565062.621 ops/s
[info]                  ·gc.alloc.rate:               442.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 712.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 560000.893 ops/s
[info]                  ·gc.alloc.rate:                   438.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1864.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 564405.310 ops/s
[info]                  ·gc.alloc.rate:               441.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 923.171 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 565814.784 ops/s
[info]                  ·gc.alloc.rate:                   442.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     920.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 564142.063 ops/s
[info]                  ·gc.alloc.rate:                   441.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1847.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   563885.134 ±(99.9%) 8724.481 ops/s [Average]
[info]   (min, avg, max) = (560000.893, 563885.134, 565814.784), stdev = 2265.720
[info]   CI (99.9%): [555160.653, 572609.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   441.397 ±(99.9%) 6.811 MB/sec [Average]
[info]   (min, avg, max) = (438.364, 441.397, 442.912), stdev = 1.769
[info]   CI (99.9%): [434.586, 448.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.704 ±(99.9%) 761.849 MB/sec [Average]
[info]   (min, avg, max) = (255.782, 448.704, 663.473), stdev = 197.850
[info]   CI (99.9%): [≈ 0, 1210.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1253.692 ±(99.9%) 2142.695 B/op [Average]
[info]   (min, avg, max) = (712.473, 1253.692, 1864.658), stdev = 556.451
[info]   CI (99.9%): [≈ 0, 3396.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.389 ±(99.9%) 3.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.838), stdev = 0.811
[info]   CI (99.9%): [≈ 0, 3.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.091 ±(99.9%) 8.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.091, 5.167), stdev = 2.280
[info]   CI (99.9%): [≈ 0, 9.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.24% complete, ETA 00:39:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560630.261 ops/s
[info] # Warmup Iteration   2: 611117.100 ops/s
[info] # Warmup Iteration   3: 642626.556 ops/s
[info] Iteration   1: 642506.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 642074.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 642418.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 644293.393 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 644438.519 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   643146.220 ±(99.9%) 4336.997 ops/s [Average]
[info]   (min, avg, max) = (642074.033, 643146.220, 644438.519), stdev = 1126.304
[info]   CI (99.9%): [638809.223, 647483.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 44.55% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19451.613 ops/s
[info] # Warmup Iteration   2: 26699.716 ops/s
[info] # Warmup Iteration   3: 26831.973 ops/s
[info] Iteration   1: 27035.469 ops/s
[info]                  ·gc.alloc.rate:                   1486.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              86528.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96097.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.424 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27089.314 ops/s
[info]                  ·gc.alloc.rate:                   1489.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              86518.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77212.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.257 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27095.569 ops/s
[info]                  ·gc.alloc.rate:                   1489.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97041.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27153.929 ops/s
[info]                  ·gc.alloc.rate:                   1492.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77838.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.620 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27104.131 ops/s
[info]                  ·gc.alloc.rate:                   1489.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97863.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.626 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27095.682 ±(99.9%) 162.577 ops/s [Average]
[info]   (min, avg, max) = (27035.469, 27095.682, 27153.929), stdev = 42.221
[info]   CI (99.9%): [26933.105, 27258.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1489.658 ±(99.9%) 8.621 MB/sec [Average]
[info]   (min, avg, max) = (1486.601, 1489.658, 1492.889), stdev = 2.239
[info]   CI (99.9%): [1481.037, 1498.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86516.464 ±(99.9%) 26.955 B/op [Average]
[info]   (min, avg, max) = (86512.016, 86516.464, 86528.016), stdev = 7.000
[info]   CI (99.9%): [86489.509, 86543.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1535.931 ±(99.9%) 704.237 MB/sec [Average]
[info]   (min, avg, max) = (1329.007, 1535.931, 1685.315), stdev = 182.888
[info]   CI (99.9%): [831.694, 2240.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   89210.631 ±(99.9%) 41155.346 B/op [Average]
[info]   (min, avg, max) = (77212.163, 89210.631, 97863.999), stdev = 10687.913
[info]   CI (99.9%): [48055.284, 130365.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.869 ±(99.9%) 7.651 B/op [Average]
[info]   (min, avg, max) = (2.418, 3.869, 7.257), stdev = 1.987
[info]   CI (99.9%): [≈ 0, 11.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 44.85% complete, ETA 00:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4697.808 ops/s
[info] # Warmup Iteration   2: 6958.695 ops/s
[info] # Warmup Iteration   3: 7235.014 ops/s
[info] Iteration   1: 7102.504 ops/s
[info]                  ·gc.alloc.rate:                   1123.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220150.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7058.085 ops/s
[info]                  ·gc.alloc.rate:                   1116.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     296197.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.852 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7194.225 ops/s
[info]                  ·gc.alloc.rate:                   1137.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218647.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7201.185 ops/s
[info]                  ·gc.alloc.rate:                   1138.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292314.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.648 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7239.451 ops/s
[info]                  ·gc.alloc.rate:                   1144.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218881.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7159.090 ±(99.9%) 291.154 ops/s [Average]
[info]   (min, avg, max) = (7058.085, 7159.090, 7239.451), stdev = 75.612
[info]   CI (99.9%): [6867.937, 7450.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1132.253 ±(99.9%) 45.283 MB/sec [Average]
[info]   (min, avg, max) = (1116.531, 1132.253, 1144.703), stdev = 11.760
[info]   CI (99.9%): [1086.970, 1177.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248864.062 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (248864.060, 248864.062, 248864.065), stdev = 0.003
[info]   CI (99.9%): [248864.052, 248864.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1133.364 ±(99.9%) 703.277 MB/sec [Average]
[info]   (min, avg, max) = (993.837, 1133.364, 1337.790), stdev = 182.639
[info]   CI (99.9%): [430.087, 1836.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   249238.473 ±(99.9%) 158346.974 B/op [Average]
[info]   (min, avg, max) = (218647.622, 249238.473, 296197.839), stdev = 41122.206
[info]   CI (99.9%): [90891.499, 407585.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.125), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.777 ±(99.9%) 31.223 B/op [Average]
[info]   (min, avg, max) = (9.051, 13.777, 27.852), stdev = 8.108
[info]   CI (99.9%): [≈ 0, 44.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 45.15% complete, ETA 00:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3838.479 ops/s
[info] # Warmup Iteration   2: 6977.814 ops/s
[info] # Warmup Iteration   3: 7219.961 ops/s
[info] Iteration   1: 7253.359 ops/s
[info]                  ·gc.alloc.rate:                   1059.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212894.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7242.335 ops/s
[info]                  ·gc.alloc.rate:                   1058.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285304.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.617 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7250.421 ops/s
[info]                  ·gc.alloc.rate:                   1058.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214934.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7225.686 ops/s
[info]                  ·gc.alloc.rate:                   1055.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216549.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7254.158 ops/s
[info]                  ·gc.alloc.rate:                   1059.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216767.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   7245.192 ±(99.9%) 45.686 ops/s [Average]
[info]   (min, avg, max) = (7225.686, 7245.192, 7254.158), stdev = 11.865
[info]   CI (99.9%): [7199.505, 7290.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1058.221 ±(99.9%) 6.581 MB/sec [Average]
[info]   (min, avg, max) = (1055.279, 1058.221, 1059.404), stdev = 1.709
[info]   CI (99.9%): [1051.641, 1064.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   229848.061 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (229848.060, 229848.061, 229848.064), stdev = 0.002
[info]   CI (99.9%): [229848.052, 229848.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1055.648 ±(99.9%) 555.717 MB/sec [Average]
[info]   (min, avg, max) = (981.168, 1055.648, 1313.543), stdev = 144.318
[info]   CI (99.9%): [499.932, 1611.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   229290.073 ±(99.9%) 120722.476 B/op [Average]
[info]   (min, avg, max) = (212894.893, 229290.073, 285304.155), stdev = 31351.244
[info]   CI (99.9%): [108567.597, 350012.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.277 ±(99.9%) 23.338 B/op [Average]
[info]   (min, avg, max) = (9.037, 16.277, 22.617), stdev = 6.061
[info]   CI (99.9%): [≈ 0, 39.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 45.45% complete, ETA 00:38:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89572.582 ops/s
[info] # Warmup Iteration   2: 97690.797 ops/s
[info] # Warmup Iteration   3: 101716.850 ops/s
[info] Iteration   1: 101787.197 ops/s
[info]                  ·gc.alloc.rate:                   986.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15420.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 99942.190 ops/s
[info]                  ·gc.alloc.rate:                   968.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15725.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.311 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 101382.393 ops/s
[info]                  ·gc.alloc.rate:                   982.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15532.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101451.732 ops/s
[info]                  ·gc.alloc.rate:                   983.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15573.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 101636.428 ops/s
[info]                  ·gc.alloc.rate:                   984.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15575.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   101239.988 ±(99.9%) 2859.604 ops/s [Average]
[info]   (min, avg, max) = (99942.190, 101239.988, 101787.197), stdev = 742.630
[info]   CI (99.9%): [98380.384, 104099.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   980.862 ±(99.9%) 27.696 MB/sec [Average]
[info]   (min, avg, max) = (968.283, 980.862, 986.107), stdev = 7.192
[info]   CI (99.9%): [953.167, 1008.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1001.254 ±(99.9%) 13.998 MB/sec [Average]
[info]   (min, avg, max) = (997.236, 1001.254, 1005.869), stdev = 3.635
[info]   CI (99.9%): [987.256, 1015.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15565.569 ±(99.9%) 421.415 B/op [Average]
[info]   (min, avg, max) = (15420.084, 15565.569, 15725.231), stdev = 109.440
[info]   CI (99.9%): [15144.154, 15986.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.165 ±(99.9%) 1.423 B/op [Average]
[info]   (min, avg, max) = (0.646, 1.165, 1.612), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 2.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 45.76% complete, ETA 00:38:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3424.435 ops/s
[info] # Warmup Iteration   2: 6725.154 ops/s
[info] # Warmup Iteration   3: 6995.802 ops/s
[info] Iteration   1: 6990.083 ops/s
[info]                  ·gc.alloc.rate:                   1276.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221652.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6886.858 ops/s
[info]                  ·gc.alloc.rate:                   1257.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301376.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6918.408 ops/s
[info]                  ·gc.alloc.rate:                   1262.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301692.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7008.816 ops/s
[info]                  ·gc.alloc.rate:                   1279.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299614.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7002.986 ops/s
[info]                  ·gc.alloc.rate:                   1278.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              287248.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301218.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.357 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6961.430 ±(99.9%) 212.704 ops/s [Average]
[info]   (min, avg, max) = (6886.858, 6961.430, 7008.816), stdev = 55.239
[info]   CI (99.9%): [6748.726, 7174.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1270.667 ±(99.9%) 39.005 MB/sec [Average]
[info]   (min, avg, max) = (1257.001, 1270.667, 1279.228), stdev = 10.130
[info]   CI (99.9%): [1231.662, 1309.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   287248.063 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (287248.062, 287248.063, 287248.067), stdev = 0.002
[info]   CI (99.9%): [287248.054, 287248.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1260.892 ±(99.9%) 595.143 MB/sec [Average]
[info]   (min, avg, max) = (984.795, 1260.892, 1340.325), stdev = 154.557
[info]   CI (99.9%): [665.748, 1856.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   285110.962 ±(99.9%) 136633.891 B/op [Average]
[info]   (min, avg, max) = (221652.650, 285110.962, 301692.892), stdev = 35483.388
[info]   CI (99.9%): [148477.070, 421744.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.984 ±(99.9%) 28.089 B/op [Average]
[info]   (min, avg, max) = (9.357, 16.984, 28.539), stdev = 7.295
[info]   CI (99.9%): [≈ 0, 45.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 46.06% complete, ETA 00:37:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12193.241 ops/s
[info] # Warmup Iteration   2: 16176.516 ops/s
[info] # Warmup Iteration   3: 16420.726 ops/s
[info] Iteration   1: 16320.571 ops/s
[info]                  ·gc.alloc.rate:                   962.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95459.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16318.728 ops/s
[info]                  ·gc.alloc.rate:                   962.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              92870.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95657.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16414.129 ops/s
[info]                  ·gc.alloc.rate:                   968.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95423.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16212.382 ops/s
[info]                  ·gc.alloc.rate:                   956.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              92870.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96968.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16432.604 ops/s
[info]                  ·gc.alloc.rate:                   968.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95989.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   16339.683 ±(99.9%) 340.006 ops/s [Average]
[info]   (min, avg, max) = (16212.382, 16339.683, 16432.604), stdev = 88.299
[info]   CI (99.9%): [15999.677, 16679.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   963.912 ±(99.9%) 19.690 MB/sec [Average]
[info]   (min, avg, max) = (956.576, 963.912, 968.999), stdev = 5.113
[info]   CI (99.9%): [944.221, 983.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92845.779 ±(99.9%) 132.733 B/op [Average]
[info]   (min, avg, max) = (92808.026, 92845.779, 92872.026), stdev = 34.470
[info]   CI (99.9%): [92713.046, 92978.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   995.599 ±(99.9%) 19.275 MB/sec [Average]
[info]   (min, avg, max) = (989.909, 995.599, 1002.214), stdev = 5.006
[info]   CI (99.9%): [976.324, 1014.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   95899.725 ±(99.9%) 2456.963 B/op [Average]
[info]   (min, avg, max) = (95423.801, 95899.725, 96968.222), stdev = 638.066
[info]   CI (99.9%): [93442.762, 98356.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.217 ±(99.9%) 8.770 B/op [Average]
[info]   (min, avg, max) = (4.015, 7.217, 9.969), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 15.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 46.36% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12496.922 ops/s
[info] # Warmup Iteration   2: 18526.627 ops/s
[info] # Warmup Iteration   3: 18157.891 ops/s
[info] Iteration   1: 18684.569 ops/s
[info]                  ·gc.alloc.rate:                   876.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82653.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18854.622 ops/s
[info]                  ·gc.alloc.rate:                   884.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54661.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18546.549 ops/s
[info]                  ·gc.alloc.rate:                   869.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83603.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.766 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18671.046 ops/s
[info]                  ·gc.alloc.rate:                   875.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83473.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18800.112 ops/s
[info]                  ·gc.alloc.rate:                   881.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55459.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   18711.380 ±(99.9%) 463.306 ops/s [Average]
[info]   (min, avg, max) = (18546.549, 18711.380, 18854.622), stdev = 120.319
[info]   CI (99.9%): [18248.074, 19174.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   877.599 ±(99.9%) 21.993 MB/sec [Average]
[info]   (min, avg, max) = (869.808, 877.599, 884.523), stdev = 5.712
[info]   CI (99.9%): [855.606, 899.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   73808.025 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (73808.023, 73808.025, 73808.032), stdev = 0.004
[info]   CI (99.9%): [73808.010, 73808.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   854.900 ±(99.9%) 689.574 MB/sec [Average]
[info]   (min, avg, max) = (655.068, 854.900, 990.488), stdev = 179.080
[info]   CI (99.9%): [165.326, 1544.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   71970.462 ±(99.9%) 59467.165 B/op [Average]
[info]   (min, avg, max) = (54661.410, 71970.462, 83603.445), stdev = 15443.434
[info]   CI (99.9%): [12503.298, 131437.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.904 ±(99.9%) 12.086 B/op [Average]
[info]   (min, avg, max) = (1.738, 4.904, 8.774), stdev = 3.139
[info]   CI (99.9%): [≈ 0, 16.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 46.67% complete, ETA 00:37:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429524.186 ops/s
[info] # Warmup Iteration   2: 497708.118 ops/s
[info] # Warmup Iteration   3: 502613.071 ops/s
[info] Iteration   1: 492543.073 ops/s
[info]                  ·gc.alloc.rate:                   1116.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3180.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 500941.964 ops/s
[info]                  ·gc.alloc.rate:                   1135.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4181.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 492915.982 ops/s
[info]                  ·gc.alloc.rate:                   1117.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3198.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 503017.994 ops/s
[info]                  ·gc.alloc.rate:                   1140.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3143.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 502110.689 ops/s
[info]                  ·gc.alloc.rate:                   1138.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4213.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   498305.940 ±(99.9%) 19812.159 ops/s [Average]
[info]   (min, avg, max) = (492543.073, 498305.940, 503017.994), stdev = 5145.155
[info]   CI (99.9%): [478493.782, 518118.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1129.656 ±(99.9%) 44.897 MB/sec [Average]
[info]   (min, avg, max) = (1116.595, 1129.656, 1140.325), stdev = 11.660
[info]   CI (99.9%): [1084.759, 1174.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1135.363 ±(99.9%) 711.301 MB/sec [Average]
[info]   (min, avg, max) = (995.226, 1135.363, 1344.271), stdev = 184.723
[info]   CI (99.9%): [424.062, 1846.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3583.497 ±(99.9%) 2160.773 B/op [Average]
[info]   (min, avg, max) = (3143.000, 3583.497, 4213.723), stdev = 561.146
[info]   CI (99.9%): [1422.724, 5744.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.208), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.289 ±(99.9%) 0.844 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.289, 0.654), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 1.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 46.97% complete, ETA 00:37:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 387206.775 ops/s
[info] # Warmup Iteration   2: 417226.395 ops/s
[info] # Warmup Iteration   3: 417677.087 ops/s
[info] Iteration   1: 417164.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 417253.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 417504.800 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 417287.281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 417744.442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   417390.743 ±(99.9%) 901.286 ops/s [Average]
[info]   (min, avg, max) = (417164.060, 417390.743, 417744.442), stdev = 234.061
[info]   CI (99.9%): [416489.457, 418292.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 47.27% complete, ETA 00:37:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12559.000 ops/s
[info] # Warmup Iteration   2: 18113.575 ops/s
[info] # Warmup Iteration   3: 17933.625 ops/s
[info] Iteration   1: 17922.522 ops/s
[info]                  ·gc.alloc.rate:                   907.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86518.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18394.390 ops/s
[info]                  ·gc.alloc.rate:                   931.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84408.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.905 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18240.402 ops/s
[info]                  ·gc.alloc.rate:               923.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      990.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85436.759 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 18022.406 ops/s
[info]                  ·gc.alloc.rate:                   912.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              79678.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86818.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17948.800 ops/s
[info]                  ·gc.alloc.rate:               908.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          79672.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58351.572 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18105.704 ±(99.9%) 785.842 ops/s [Average]
[info]   (min, avg, max) = (17922.522, 18105.704, 18394.390), stdev = 204.081
[info]   CI (99.9%): [17319.862, 18891.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   916.725 ±(99.9%) 39.896 MB/sec [Average]
[info]   (min, avg, max) = (907.603, 916.725, 931.413), stdev = 10.361
[info]   CI (99.9%): [876.829, 956.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79682.941 ±(99.9%) 28.270 B/op [Average]
[info]   (min, avg, max) = (79672.024, 79682.941, 79688.032), stdev = 7.342
[info]   CI (99.9%): [79654.672, 79711.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   924.365 ±(99.9%) 557.406 MB/sec [Average]
[info]   (min, avg, max) = (665.489, 924.365, 994.181), stdev = 144.757
[info]   CI (99.9%): [366.959, 1481.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80306.790 ±(99.9%) 47402.161 B/op [Average]
[info]   (min, avg, max) = (58351.572, 80306.790, 86818.986), stdev = 12310.191
[info]   CI (99.9%): [32904.629, 127708.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.698 ±(99.9%) 16.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.698, 8.905), stdev = 4.339
[info]   CI (99.9%): [≈ 0, 21.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 47.58% complete, ETA 00:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8587.729 ops/s
[info] # Warmup Iteration   2: 11559.141 ops/s
[info] # Warmup Iteration   3: 11789.221 ops/s
[info] Iteration   1: 11851.481 ops/s
[info]                  ·gc.alloc.rate:                   1221.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175942.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.529 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11843.318 ops/s
[info]                  ·gc.alloc.rate:                   1220.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132421.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.831 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11836.572 ops/s
[info]                  ·gc.alloc.rate:                   1220.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              162256.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177493.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.536 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11843.483 ops/s
[info]                  ·gc.alloc.rate:                   1221.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178096.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11666.417 ops/s
[info]                  ·gc.alloc.rate:                   1202.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136047.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11808.254 ±(99.9%) 305.991 ops/s [Average]
[info]   (min, avg, max) = (11666.417, 11808.254, 11851.481), stdev = 79.465
[info]   CI (99.9%): [11502.263, 12114.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1217.513 ±(99.9%) 31.684 MB/sec [Average]
[info]   (min, avg, max) = (1202.810, 1217.513, 1221.840), stdev = 8.228
[info]   CI (99.9%): [1185.829, 1249.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   162256.069 ±(99.9%) 30.807 B/op [Average]
[info]   (min, avg, max) = (162248.036, 162256.069, 162264.039), stdev = 8.000
[info]   CI (99.9%): [162225.263, 162286.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.144 ±(99.9%) 698.881 MB/sec [Average]
[info]   (min, avg, max) = (996.464, 1201.144, 1340.292), stdev = 181.497
[info]   CI (99.9%): [502.263, 1900.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   160000.474 ±(99.9%) 90754.395 B/op [Average]
[info]   (min, avg, max) = (132421.889, 160000.474, 178096.819), stdev = 23568.628
[info]   CI (99.9%): [69246.079, 250754.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.230 ±(99.9%) 24.845 B/op [Average]
[info]   (min, avg, max) = (5.529, 12.230, 19.657), stdev = 6.452
[info]   CI (99.9%): [≈ 0, 37.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 47.88% complete, ETA 00:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7490.926 ops/s
[info] # Warmup Iteration   2: 12332.148 ops/s
[info] # Warmup Iteration   3: 12470.070 ops/s
[info] Iteration   1: 12406.444 ops/s
[info]                  ·gc.alloc.rate:                   1151.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166142.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.486 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12454.366 ops/s
[info]                  ·gc.alloc.rate:                   1155.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124706.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12520.792 ops/s
[info]                  ·gc.alloc.rate:                   1162.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              146069.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166236.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.466 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12551.401 ops/s
[info]                  ·gc.alloc.rate:                   1165.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125037.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12536.806 ops/s
[info]                  ·gc.alloc.rate:                   1163.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167752.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.227 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12493.962 ±(99.9%) 236.446 ops/s [Average]
[info]   (min, avg, max) = (12406.444, 12493.962, 12551.401), stdev = 61.404
[info]   CI (99.9%): [12257.516, 12730.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1159.542 ±(99.9%) 22.626 MB/sec [Average]
[info]   (min, avg, max) = (1151.181, 1159.542, 1165.013), stdev = 5.876
[info]   CI (99.9%): [1136.916, 1182.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   146065.089 ±(99.9%) 62.272 B/op [Average]
[info]   (min, avg, max) = (146048.035, 146065.089, 146080.034), stdev = 16.172
[info]   CI (99.9%): [146002.817, 146127.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.498 ±(99.9%) 698.779 MB/sec [Average]
[info]   (min, avg, max) = (986.840, 1190.498, 1336.305), stdev = 181.471
[info]   CI (99.9%): [491.719, 1889.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   149975.018 ±(99.9%) 88276.909 B/op [Average]
[info]   (min, avg, max) = (124706.217, 149975.018, 167752.090), stdev = 22925.233
[info]   CI (99.9%): [61698.109, 238251.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.976 ±(99.9%) 20.885 B/op [Average]
[info]   (min, avg, max) = (5.227, 9.976, 18.486), stdev = 5.424
[info]   CI (99.9%): [≈ 0, 30.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 48.18% complete, ETA 00:36:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158029.377 ops/s
[info] # Warmup Iteration   2: 166148.074 ops/s
[info] # Warmup Iteration   3: 168034.859 ops/s
[info] Iteration   1: 167714.852 ops/s
[info]                  ·gc.alloc.rate:                   970.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9358.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 167716.367 ops/s
[info]                  ·gc.alloc.rate:                   970.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6244.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 167271.596 ops/s
[info]                  ·gc.alloc.rate:                   967.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9407.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 167669.301 ops/s
[info]                  ·gc.alloc.rate:                   969.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9413.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 164068.461 ops/s
[info]                  ·gc.alloc.rate:                   949.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9645.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   166888.116 ±(99.9%) 6111.874 ops/s [Average]
[info]   (min, avg, max) = (164068.461, 166888.116, 167716.367), stdev = 1587.234
[info]   CI (99.9%): [160776.241, 172999.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   965.432 ±(99.9%) 35.630 MB/sec [Average]
[info]   (min, avg, max) = (949.011, 965.432, 970.437), stdev = 9.253
[info]   CI (99.9%): [929.802, 1001.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.003, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   934.265 ±(99.9%) 578.507 MB/sec [Average]
[info]   (min, avg, max) = (665.568, 934.265, 1005.506), stdev = 150.236
[info]   CI (99.9%): [355.757, 1512.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8814.130 ±(99.9%) 5547.173 B/op [Average]
[info]   (min, avg, max) = (6244.873, 8814.130, 9645.964), stdev = 1440.583
[info]   CI (99.9%): [3266.956, 14361.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.589 ±(99.9%) 1.189 B/op [Average]
[info]   (min, avg, max) = (0.196, 0.589, 0.977), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 48.48% complete, ETA 00:36:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4756.253 ops/s
[info] # Warmup Iteration   2: 10335.745 ops/s
[info] # Warmup Iteration   3: 11032.052 ops/s
[info] Iteration   1: 10975.179 ops/s
[info]                  ·gc.alloc.rate:                   1409.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234083.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.985 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11004.072 ops/s
[info]                  ·gc.alloc.rate:                   1413.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188164.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.886 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11038.226 ops/s
[info]                  ·gc.alloc.rate:                   1417.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189009.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.904 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10880.820 ops/s
[info]                  ·gc.alloc.rate:                   1396.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192892.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11017.434 ops/s
[info]                  ·gc.alloc.rate:                   1414.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239497.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.894 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10983.146 ±(99.9%) 237.224 ops/s [Average]
[info]   (min, avg, max) = (10880.820, 10983.146, 11038.226), stdev = 61.606
[info]   CI (99.9%): [10745.922, 11220.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1410.167 ±(99.9%) 31.026 MB/sec [Average]
[info]   (min, avg, max) = (1396.798, 1410.167, 1417.532), stdev = 8.057
[info]   CI (99.9%): [1379.140, 1441.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202040.125 ±(99.9%) 0.729 B/op [Average]
[info]   (min, avg, max) = (202040.039, 202040.125, 202040.463), stdev = 0.189
[info]   CI (99.9%): [202039.396, 202040.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1456.965 ±(99.9%) 697.660 MB/sec [Average]
[info]   (min, avg, max) = (1315.985, 1456.965, 1676.562), stdev = 181.180
[info]   CI (99.9%): [759.306, 2154.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   208729.587 ±(99.9%) 99151.734 B/op [Average]
[info]   (min, avg, max) = (188164.419, 208729.587, 239497.803), stdev = 25749.390
[info]   CI (99.9%): [109577.853, 307881.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.938 ±(99.9%) 18.068 B/op [Average]
[info]   (min, avg, max) = (2.985, 8.938, 14.886), stdev = 4.692
[info]   CI (99.9%): [≈ 0, 27.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 48.79% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20535.534 ops/s
[info] # Warmup Iteration   2: 26536.573 ops/s
[info] # Warmup Iteration   3: 27273.165 ops/s
[info] Iteration   1: 26865.584 ops/s
[info]                  ·gc.alloc.rate:                   1179.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              69120.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58028.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.659 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26817.783 ops/s
[info]                  ·gc.alloc.rate:                   1177.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              69075.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77796.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.330 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27249.308 ops/s
[info]                  ·gc.alloc.rate:                   1195.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76945.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27312.865 ops/s
[info]                  ·gc.alloc.rate:                   1198.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57806.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27307.310 ops/s
[info]                  ·gc.alloc.rate:                   1198.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77402.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.799 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27110.570 ±(99.9%) 952.248 ops/s [Average]
[info]   (min, avg, max) = (26817.783, 27110.570, 27312.865), stdev = 247.296
[info]   CI (99.9%): [26158.323, 28062.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1189.817 ±(99.9%) 40.335 MB/sec [Average]
[info]   (min, avg, max) = (1177.034, 1189.817, 1198.399), stdev = 10.475
[info]   CI (99.9%): [1149.482, 1230.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   69072.798 ±(99.9%) 106.927 B/op [Average]
[info]   (min, avg, max) = (69056.016, 69072.798, 69120.017), stdev = 27.769
[info]   CI (99.9%): [68965.871, 69179.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1198.908 ±(99.9%) 710.826 MB/sec [Average]
[info]   (min, avg, max) = (990.550, 1198.908, 1342.937), stdev = 184.599
[info]   CI (99.9%): [488.082, 1909.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69595.936 ±(99.9%) 41068.569 B/op [Average]
[info]   (min, avg, max) = (57806.408, 69595.936, 77796.818), stdev = 10665.377
[info]   CI (99.9%): [28527.367, 110664.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.878 ±(99.9%) 9.063 B/op [Average]
[info]   (min, avg, max) = (1.200, 3.878, 7.330), stdev = 2.354
[info]   CI (99.9%): [≈ 0, 12.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 49.09% complete, ETA 00:35:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57460.760 ops/s
[info] # Warmup Iteration   2: 94063.429 ops/s
[info] # Warmup Iteration   3: 96012.229 ops/s
[info] Iteration   1: 95963.988 ops/s
[info]                  ·gc.alloc.rate:                   1774.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32486.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.707 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 96081.864 ops/s
[info]                  ·gc.alloc.rate:                   1777.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27269.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.046 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 96260.851 ops/s
[info]                  ·gc.alloc.rate:                   1779.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27408.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 93566.958 ops/s
[info]                  ·gc.alloc.rate:                   1729.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28320.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 95706.893 ops/s
[info]                  ·gc.alloc.rate:                   1769.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33367.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.369 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   95516.111 ±(99.9%) 4266.620 ops/s [Average]
[info]   (min, avg, max) = (93566.958, 95516.111, 96260.851), stdev = 1108.028
[info]   CI (99.9%): [91249.491, 99782.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1765.965 ±(99.9%) 79.314 MB/sec [Average]
[info]   (min, avg, max) = (1729.763, 1765.965, 1779.594), stdev = 20.598
[info]   CI (99.9%): [1686.651, 1845.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29096.004, 29096.005, 29096.005), stdev = 0.001
[info]   CI (99.9%): [29096.004, 29096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1807.083 ±(99.9%) 698.925 MB/sec [Average]
[info]   (min, avg, max) = (1665.555, 1807.083, 2029.035), stdev = 181.508
[info]   CI (99.9%): [1108.159, 2506.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29770.474 ±(99.9%) 11267.415 B/op [Average]
[info]   (min, avg, max) = (27269.611, 29770.474, 33367.068), stdev = 2926.112
[info]   CI (99.9%): [18503.059, 41037.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.505 ±(99.9%) 1.962 B/op [Average]
[info]   (min, avg, max) = (0.700, 1.505, 2.046), stdev = 0.509
[info]   CI (99.9%): [≈ 0, 3.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 49.39% complete, ETA 00:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604251.915 ops/s
[info] # Warmup Iteration   2: 653798.539 ops/s
[info] # Warmup Iteration   3: 657992.681 ops/s
[info] Iteration   1: 660284.926 ops/s
[info]                  ·gc.alloc.rate:                   906.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2370.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 660872.182 ops/s
[info]                  ·gc.alloc.rate:                   907.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1580.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 658715.246 ops/s
[info]                  ·gc.alloc.rate:                   904.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2381.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 661083.296 ops/s
[info]                  ·gc.alloc.rate:                   907.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2379.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 661769.198 ops/s
[info]                  ·gc.alloc.rate:                   908.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2385.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   660544.970 ±(99.9%) 4437.068 ops/s [Average]
[info]   (min, avg, max) = (658715.246, 660544.970, 661769.198), stdev = 1152.293
[info]   CI (99.9%): [656107.901, 664982.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   906.558 ±(99.9%) 6.205 MB/sec [Average]
[info]   (min, avg, max) = (904.001, 906.558, 908.217), stdev = 1.611
[info]   CI (99.9%): [900.353, 912.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   931.468 ±(99.9%) 576.735 MB/sec [Average]
[info]   (min, avg, max) = (663.598, 931.468, 1002.863), stdev = 149.776
[info]   CI (99.9%): [354.733, 1508.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2219.456 ±(99.9%) 1376.478 B/op [Average]
[info]   (min, avg, max) = (1580.072, 2219.456, 2385.097), stdev = 357.467
[info]   CI (99.9%): [842.978, 3595.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.129 ±(99.9%) 0.218 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.129, 0.198), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 49.70% complete, ETA 00:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 699004.819 ops/s
[info] # Warmup Iteration   2: 758384.130 ops/s
[info] # Warmup Iteration   3: 759969.258 ops/s
[info] Iteration   1: 760164.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 756553.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 756965.036 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 758062.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 759861.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   758321.241 ±(99.9%) 6328.005 ops/s [Average]
[info]   (min, avg, max) = (756553.062, 758321.241, 760164.685), stdev = 1643.363
[info]   CI (99.9%): [751993.236, 764649.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 50.00% complete, ETA 00:35:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43116.458 ops/s
[info] # Warmup Iteration   2: 80996.446 ops/s
[info] # Warmup Iteration   3: 80152.031 ops/s
[info] Iteration   1: 81330.757 ops/s
[info]                  ·gc.alloc.rate:                   1804.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31821.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 80352.018 ops/s
[info]                  ·gc.alloc.rate:                   1783.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39013.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 81124.205 ops/s
[info]                  ·gc.alloc.rate:                   1800.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32463.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.615 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 81519.903 ops/s
[info]                  ·gc.alloc.rate:                   1809.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39000.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.206 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 81450.876 ops/s
[info]                  ·gc.alloc.rate:                   1806.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32650.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.609 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   81155.552 ±(99.9%) 1823.793 ops/s [Average]
[info]   (min, avg, max) = (80352.018, 81155.552, 81519.903), stdev = 473.633
[info]   CI (99.9%): [79331.759, 82979.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1800.683 ±(99.9%) 39.621 MB/sec [Average]
[info]   (min, avg, max) = (1783.254, 1800.683, 1809.142), stdev = 10.290
[info]   CI (99.9%): [1761.061, 1840.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34912.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (34912.005, 34912.005, 34912.006), stdev = 0.001
[info]   CI (99.9%): [34912.005, 34912.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1804.354 ±(99.9%) 715.717 MB/sec [Average]
[info]   (min, avg, max) = (1644.359, 1804.354, 2021.020), stdev = 185.869
[info]   CI (99.9%): [1088.637, 2520.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34989.836 ±(99.9%) 14170.837 B/op [Average]
[info]   (min, avg, max) = (31821.321, 34989.836, 39013.504), stdev = 3680.121
[info]   CI (99.9%): [20818.998, 49160.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.374 ±(99.9%) 2.379 B/op [Average]
[info]   (min, avg, max) = (0.403, 1.374, 2.039), stdev = 0.618
[info]   CI (99.9%): [≈ 0, 3.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 50.30% complete, ETA 00:34:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5322.291 ops/s
[info] # Warmup Iteration   2: 21860.940 ops/s
[info] # Warmup Iteration   3: 22128.560 ops/s
[info] Iteration   1: 21874.305 ops/s
[info]                  ·gc.alloc.rate:                   1086.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              78175.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95285.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.489 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22478.332 ops/s
[info]                  ·gc.alloc.rate:                   1116.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69657.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22252.154 ops/s
[info]                  ·gc.alloc.rate:               1105.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          78179.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      997.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70553.674 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22509.080 ops/s
[info]                  ·gc.alloc.rate:                   1117.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93339.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.367 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22181.680 ops/s
[info]                  ·gc.alloc.rate:                   1102.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71367.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   22259.110 ±(99.9%) 990.488 ops/s [Average]
[info]   (min, avg, max) = (21874.305, 22259.110, 22509.080), stdev = 257.227
[info]   CI (99.9%): [21268.622, 23249.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1105.840 ±(99.9%) 49.052 MB/sec [Average]
[info]   (min, avg, max) = (1086.619, 1105.840, 1117.935), stdev = 12.739
[info]   CI (99.9%): [1056.789, 1154.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78174.933 ±(99.9%) 27.132 B/op [Average]
[info]   (min, avg, max) = (78168.019, 78174.933, 78184.021), stdev = 7.046
[info]   CI (99.9%): [78147.801, 78202.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1131.696 ±(99.9%) 696.279 MB/sec [Average]
[info]   (min, avg, max) = (995.016, 1131.696, 1334.909), stdev = 180.822
[info]   CI (99.9%): [435.417, 1827.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80040.745 ±(99.9%) 50291.283 B/op [Average]
[info]   (min, avg, max) = (69657.871, 80040.745, 95285.875), stdev = 13060.486
[info]   CI (99.9%): [29749.462, 130332.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.306 ±(99.9%) 12.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.306, 7.489), stdev = 3.242
[info]   CI (99.9%): [≈ 0, 17.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 50.61% complete, ETA 00:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3336.347 ops/s
[info] # Warmup Iteration   2: 18137.284 ops/s
[info] # Warmup Iteration   3: 19023.408 ops/s
[info] Iteration   1: 19142.354 ops/s
[info]                  ·gc.alloc.rate:                   763.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53726.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19099.685 ops/s
[info]                  ·gc.alloc.rate:                   762.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              62828.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80853.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.146 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19165.392 ops/s
[info]                  ·gc.alloc.rate:                   765.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              62832.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53774.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18867.415 ops/s
[info]                  ·gc.alloc.rate:               753.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          62822.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54759.772 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 19094.107 ops/s
[info]                  ·gc.alloc.rate:                   761.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81396.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   19073.790 ±(99.9%) 458.720 ops/s [Average]
[info]   (min, avg, max) = (18867.415, 19073.790, 19165.392), stdev = 119.128
[info]   CI (99.9%): [18615.071, 19532.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   761.342 ±(99.9%) 18.369 MB/sec [Average]
[info]   (min, avg, max) = (753.081, 761.342, 765.121), stdev = 4.770
[info]   CI (99.9%): [742.972, 779.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   62816.525 ±(99.9%) 59.551 B/op [Average]
[info]   (min, avg, max) = (62800.024, 62816.525, 62832.023), stdev = 15.465
[info]   CI (99.9%): [62756.973, 62876.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   786.774 ±(99.9%) 695.336 MB/sec [Average]
[info]   (min, avg, max) = (653.473, 786.774, 987.558), stdev = 180.577
[info]   CI (99.9%): [91.437, 1482.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64902.339 ±(99.9%) 57052.888 B/op [Average]
[info]   (min, avg, max) = (53726.787, 64902.339, 81396.687), stdev = 14816.454
[info]   CI (99.9%): [7849.451, 121955.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.474 ±(99.9%) 3.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.474, 2.182), stdev = 0.956
[info]   CI (99.9%): [≈ 0, 4.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38.965 ±(99.9%) 302.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.965, 179.390), stdev = 78.569
[info]   CI (99.9%): [≈ 0, 341.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 50.91% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166048.044 ops/s
[info] # Warmup Iteration   2: 176255.470 ops/s
[info] # Warmup Iteration   3: 175332.793 ops/s
[info] Iteration   1: 176408.577 ops/s
[info]                  ·gc.alloc.rate:                   459.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2282.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 177124.769 ops/s
[info]                  ·gc.alloc.rate:                   461.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5913.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 177501.517 ops/s
[info]                  ·gc.alloc.rate:                   461.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2947.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 177449.812 ops/s
[info]                  ·gc.alloc.rate:                   461.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5896.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 177706.318 ops/s
[info]                  ·gc.alloc.rate:               462.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2944.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   177238.199 ±(99.9%) 1958.148 ops/s [Average]
[info]   (min, avg, max) = (176408.577, 177238.199, 177706.318), stdev = 508.525
[info]   CI (99.9%): [175280.050, 179196.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   461.331 ±(99.9%) 4.887 MB/sec [Average]
[info]   (min, avg, max) = (459.226, 461.331, 462.494), stdev = 1.269
[info]   CI (99.9%): [456.444, 466.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.003, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.258 ±(99.9%) 765.389 MB/sec [Average]
[info]   (min, avg, max) = (255.866, 450.258, 665.775), stdev = 198.769
[info]   CI (99.9%): [≈ 0, 1215.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3996.673 ±(99.9%) 6788.150 B/op [Average]
[info]   (min, avg, max) = (2282.162, 3996.673, 5913.390), stdev = 1762.861
[info]   CI (99.9%): [≈ 0, 10784.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.337 ±(99.9%) 2.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 1.593), stdev = 0.702
[info]   CI (99.9%): [≈ 0, 3.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.997 ±(99.9%) 24.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.997, 14.151), stdev = 6.239
[info]   CI (99.9%): [≈ 0, 27.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 51.21% complete, ETA 00:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2313.454 ops/s
[info] # Warmup Iteration   2: 14142.493 ops/s
[info] # Warmup Iteration   3: 15067.881 ops/s
[info] Iteration   1: 14659.292 ops/s
[info]                  ·gc.alloc.rate:                   1100.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140744.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.940 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14667.422 ops/s
[info]                  ·gc.alloc.rate:                   1101.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105822.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15068.227 ops/s
[info]                  ·gc.alloc.rate:                   1131.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103354.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14996.656 ops/s
[info]                  ·gc.alloc.rate:                   1125.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139190.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.739 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14840.766 ops/s
[info]                  ·gc.alloc.rate:                   1114.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106072.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14846.472 ±(99.9%) 717.446 ops/s [Average]
[info]   (min, avg, max) = (14659.292, 14846.472, 15068.227), stdev = 186.318
[info]   CI (99.9%): [14129.026, 15563.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1114.677 ±(99.9%) 54.191 MB/sec [Average]
[info]   (min, avg, max) = (1100.694, 1114.677, 1131.591), stdev = 14.073
[info]   CI (99.9%): [1060.487, 1168.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118136.032 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (118136.029, 118136.032, 118136.042), stdev = 0.006
[info]   CI (99.9%): [118136.010, 118136.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1122.911 ±(99.9%) 689.560 MB/sec [Average]
[info]   (min, avg, max) = (986.274, 1122.911, 1326.475), stdev = 179.077
[info]   CI (99.9%): [433.351, 1812.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   119036.976 ±(99.9%) 73717.522 B/op [Average]
[info]   (min, avg, max) = (103354.764, 119036.976, 140744.617), stdev = 19144.206
[info]   CI (99.9%): [45319.454, 192754.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.082 ±(99.9%) 11.214 B/op [Average]
[info]   (min, avg, max) = (2.174, 7.082, 8.940), stdev = 2.912
[info]   CI (99.9%): [≈ 0, 18.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 51.52% complete, ETA 00:34:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61856.339 ops/s
[info] # Warmup Iteration   2: 80845.825 ops/s
[info] # Warmup Iteration   3: 82621.700 ops/s
[info] Iteration   1: 82403.556 ops/s
[info]                  ·gc.alloc.rate:                   1628.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31700.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 81456.325 ops/s
[info]                  ·gc.alloc.rate:                   1609.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32249.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.816 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81637.320 ops/s
[info]                  ·gc.alloc.rate:                   1613.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32350.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 81697.679 ops/s
[info]                  ·gc.alloc.rate:                   1614.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32480.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.802 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 82455.430 ops/s
[info]                  ·gc.alloc.rate:                   1629.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32277.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.987 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   81930.062 ±(99.9%) 1789.964 ops/s [Average]
[info]   (min, avg, max) = (81456.325, 81930.062, 82455.430), stdev = 464.848
[info]   CI (99.9%): [80140.098, 83720.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1618.999 ±(99.9%) 35.989 MB/sec [Average]
[info]   (min, avg, max) = (1609.444, 1618.999, 1629.250), stdev = 9.346
[info]   CI (99.9%): [1583.010, 1654.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   31096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31096.005, 31096.005, 31096.006), stdev = 0.001
[info]   CI (99.9%): [31096.005, 31096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.037 ±(99.9%) 48.047 MB/sec [Average]
[info]   (min, avg, max) = (1660.490, 1677.037, 1691.142), stdev = 12.478
[info]   CI (99.9%): [1628.990, 1725.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32211.580 ±(99.9%) 1153.163 B/op [Average]
[info]   (min, avg, max) = (31700.425, 32211.580, 32480.857), stdev = 299.473
[info]   CI (99.9%): [31058.417, 33364.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.521 ±(99.9%) 3.355 B/op [Average]
[info]   (min, avg, max) = (0.795, 1.521, 2.816), stdev = 0.871
[info]   CI (99.9%): [≈ 0, 4.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 51.82% complete, ETA 00:33:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105405.039 ops/s
[info] # Warmup Iteration   2: 153395.999 ops/s
[info] # Warmup Iteration   3: 152900.907 ops/s
[info] Iteration   1: 153903.978 ops/s
[info]                  ·gc.alloc.rate:                   1625.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16849.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.490 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 155774.617 ops/s
[info]                  ·gc.alloc.rate:                   1645.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16775.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.052 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 155678.219 ops/s
[info]                  ·gc.alloc.rate:                   1644.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16906.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.842 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 156388.677 ops/s
[info]                  ·gc.alloc.rate:                   1652.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16916.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 156221.676 ops/s
[info]                  ·gc.alloc.rate:                   1650.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17012.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.839 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   155593.433 ±(99.9%) 3812.613 ops/s [Average]
[info]   (min, avg, max) = (153903.978, 155593.433, 156388.677), stdev = 990.123
[info]   CI (99.9%): [151780.821, 159406.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1643.495 ±(99.9%) 40.546 MB/sec [Average]
[info]   (min, avg, max) = (1625.562, 1643.495, 1652.118), stdev = 10.530
[info]   CI (99.9%): [1602.949, 1684.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16624.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16624.003, 16624.003, 16624.003), stdev = 0.001
[info]   CI (99.9%): [16624.002, 16624.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1670.046 ±(99.9%) 63.068 MB/sec [Average]
[info]   (min, avg, max) = (1647.650, 1670.046, 1688.659), stdev = 16.378
[info]   CI (99.9%): [1606.978, 1733.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16892.374 ±(99.9%) 337.709 B/op [Average]
[info]   (min, avg, max) = (16775.412, 16892.374, 17012.641), stdev = 87.702
[info]   CI (99.9%): [16554.665, 17230.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.928 ±(99.9%) 1.499 B/op [Average]
[info]   (min, avg, max) = (0.419, 0.928, 1.490), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 2.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 52.12% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 390019.699 ops/s
[info] # Warmup Iteration   2: 441868.848 ops/s
[info] # Warmup Iteration   3: 440358.820 ops/s
[info] Iteration   1: 442597.996 ops/s
[info]                  ·gc.alloc.rate:                   490.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2090.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 444915.614 ops/s
[info]                  ·gc.alloc.rate:                   493.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1174.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 441344.379 ops/s
[info]                  ·gc.alloc.rate:                   489.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2365.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 444782.323 ops/s
[info]                  ·gc.alloc.rate:                   493.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 441877.165 ops/s
[info]                  ·gc.alloc.rate:                   489.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2363.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   443103.495 ±(99.9%) 6372.827 ops/s [Average]
[info]   (min, avg, max) = (441344.379, 443103.495, 444915.614), stdev = 1655.003
[info]   CI (99.9%): [436730.668, 449476.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   491.099 ±(99.9%) 7.100 MB/sec [Average]
[info]   (min, avg, max) = (489.118, 491.099, 493.059), stdev = 1.844
[info]   CI (99.9%): [483.998, 498.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.833 ±(99.9%) 657.092 MB/sec [Average]
[info]   (min, avg, max) = (331.873, 515.833, 663.733), stdev = 170.645
[info]   CI (99.9%): [≈ 0, 1172.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1833.658 ±(99.9%) 2357.360 B/op [Average]
[info]   (min, avg, max) = (1173.898, 1833.658, 2365.959), stdev = 612.199
[info]   CI (99.9%): [≈ 0, 4191.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.970 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.381, 1.761), stdev = 0.771
[info]   CI (99.9%): [≈ 0, 3.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.356 ±(99.9%) 10.562 B/op [Average]
[info]   (min, avg, max) = (0.074, 1.356, 6.262), stdev = 2.743
[info]   CI (99.9%): [≈ 0, 11.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 52.42% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467880.698 ops/s
[info] # Warmup Iteration   2: 511520.260 ops/s
[info] # Warmup Iteration   3: 526859.035 ops/s
[info] Iteration   1: 526572.407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 526678.248 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 526528.677 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 526510.345 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 527089.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   526675.933 ±(99.9%) 925.894 ops/s [Average]
[info]   (min, avg, max) = (526510.345, 526675.933, 527089.988), stdev = 240.452
[info]   CI (99.9%): [525750.038, 527601.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 52.73% complete, ETA 00:33:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82477.090 ops/s
[info] # Warmup Iteration   2: 108380.992 ops/s
[info] # Warmup Iteration   3: 108981.068 ops/s
[info] Iteration   1: 107744.297 ops/s
[info]                  ·gc.alloc.rate:                   1541.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24151.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.216 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 107728.640 ops/s
[info]                  ·gc.alloc.rate:                   1540.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19440.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.521 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 108419.527 ops/s
[info]                  ·gc.alloc.rate:                   1550.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24276.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 108770.195 ops/s
[info]                  ·gc.alloc.rate:                   1555.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24328.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 109446.939 ops/s
[info]                  ·gc.alloc.rate:                   1564.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19421.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   108421.920 ±(99.9%) 2797.867 ops/s [Average]
[info]   (min, avg, max) = (107728.640, 108421.920, 109446.939), stdev = 726.597
[info]   CI (99.9%): [105624.052, 111219.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1550.489 ±(99.9%) 39.287 MB/sec [Average]
[info]   (min, avg, max) = (1540.645, 1550.489, 1564.939), stdev = 10.203
[info]   CI (99.9%): [1511.202, 1589.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   22504.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22504.004, 22504.004, 22504.004), stdev = 0.001
[info]   CI (99.9%): [22504.003, 22504.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1537.893 ±(99.9%) 694.531 MB/sec [Average]
[info]   (min, avg, max) = (1330.922, 1537.893, 1681.407), stdev = 180.368
[info]   CI (99.9%): [843.361, 2232.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   22323.896 ±(99.9%) 10171.597 B/op [Average]
[info]   (min, avg, max) = (19421.622, 22323.896, 24328.999), stdev = 2641.532
[info]   CI (99.9%): [12152.299, 32495.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.209 ±(99.9%) 2.166 B/op [Average]
[info]   (min, avg, max) = (0.301, 1.209, 1.796), stdev = 0.563
[info]   CI (99.9%): [≈ 0, 3.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 53.03% complete, ETA 00:32:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124332.703 ops/s
[info] # Warmup Iteration   2: 148585.836 ops/s
[info] # Warmup Iteration   3: 148504.333 ops/s
[info] Iteration   1: 150785.046 ops/s
[info]                  ·gc.alloc.rate:                   2598.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28079.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.304 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 151294.760 ops/s
[info]                  ·gc.alloc.rate:                   2607.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2365.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24610.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.732 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 149843.194 ops/s
[info]                  ·gc.alloc.rate:                   2581.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28497.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.875 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 149973.098 ops/s
[info]                  ·gc.alloc.rate:                   2584.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28521.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.092 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 150140.919 ops/s
[info]                  ·gc.alloc.rate:                   2587.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24977.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.746 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   150407.403 ±(99.9%) 2364.294 ops/s [Average]
[info]   (min, avg, max) = (149843.194, 150407.403, 151294.760), stdev = 614.000
[info]   CI (99.9%): [148043.109, 152771.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2591.828 ±(99.9%) 40.553 MB/sec [Average]
[info]   (min, avg, max) = (2581.924, 2591.828, 2607.078), stdev = 10.531
[info]   CI (99.9%): [2551.275, 2632.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27120.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27120.003, 27120.003, 27120.003), stdev = 0.001
[info]   CI (99.9%): [27120.003, 27120.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2574.048 ±(99.9%) 703.648 MB/sec [Average]
[info]   (min, avg, max) = (2365.841, 2574.048, 2718.318), stdev = 182.735
[info]   CI (99.9%): [1870.400, 3277.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26937.485 ±(99.9%) 7580.965 B/op [Average]
[info]   (min, avg, max) = (24610.540, 26937.485, 28521.457), stdev = 1968.753
[info]   CI (99.9%): [19356.520, 34518.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.350 ±(99.9%) 1.488 B/op [Average]
[info]   (min, avg, max) = (0.875, 1.350, 1.746), stdev = 0.386
[info]   CI (99.9%): [≈ 0, 2.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 53.33% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245163.019 ops/s
[info] # Warmup Iteration   2: 351490.708 ops/s
[info] # Warmup Iteration   3: 358326.979 ops/s
[info] Iteration   1: 360077.259 ops/s
[info]                  ·gc.alloc.rate:                   367.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1118.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 353106.630 ops/s
[info]                  ·gc.alloc.rate:               360.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1140.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 355463.710 ops/s
[info]                  ·gc.alloc.rate:                   363.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1446.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 357336.518 ops/s
[info]                  ·gc.alloc.rate:               365.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1439.159 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 356940.143 ops/s
[info]                  ·gc.alloc.rate:                   364.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2878.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   356584.852 ±(99.9%) 9863.048 ops/s [Average]
[info]   (min, avg, max) = (353106.630, 356584.852, 360077.259), stdev = 2561.402
[info]   CI (99.9%): [346721.804, 366447.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   364.366 ±(99.9%) 10.114 MB/sec [Average]
[info]   (min, avg, max) = (360.823, 364.366, 367.943), stdev = 2.627
[info]   CI (99.9%): [354.251, 374.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.623 ±(99.9%) 637.345 MB/sec [Average]
[info]   (min, avg, max) = (255.838, 363.623, 652.825), stdev = 165.516
[info]   CI (99.9%): [≈ 0, 1000.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1604.529 ±(99.9%) 2808.315 B/op [Average]
[info]   (min, avg, max) = (1118.115, 1604.529, 2878.525), stdev = 729.310
[info]   CI (99.9%): [≈ 0, 4412.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.460 ±(99.9%) 3.808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 2.229), stdev = 0.989
[info]   CI (99.9%): [≈ 0, 4.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.038 ±(99.9%) 16.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.038, 9.871), stdev = 4.379
[info]   CI (99.9%): [≈ 0, 18.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 53.64% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 845293.870 ops/s
[info] # Warmup Iteration   2: 876415.751 ops/s
[info] # Warmup Iteration   3: 899843.197 ops/s
[info] Iteration   1: 869804.665 ops/s
[info]                  ·gc.alloc.rate:               300.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.857 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 861249.001 ops/s
[info]                  ·gc.alloc.rate:                   297.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     934.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 903840.925 ops/s
[info]                  ·gc.alloc.rate:      312.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 902027.447 ops/s
[info]                  ·gc.alloc.rate:                   311.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     579.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 898752.222 ops/s
[info]                  ·gc.alloc.rate:                   310.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     582.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   887134.852 ±(99.9%) 77163.344 ops/s [Average]
[info]   (min, avg, max) = (861249.001, 887134.852, 903840.925), stdev = 20039.075
[info]   CI (99.9%): [809971.508, 964298.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   306.691 ±(99.9%) 26.799 MB/sec [Average]
[info]   (min, avg, max) = (297.722, 306.691, 312.542), stdev = 6.960
[info]   CI (99.9%): [279.892, 333.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.478 ±(99.9%) 715.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.478, 511.660), stdev = 185.706
[info]   CI (99.9%): [≈ 0, 1001.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   511.970 ±(99.9%) 1295.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 511.970, 934.912), stdev = 336.507
[info]   CI (99.9%): [≈ 0, 1807.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.340 ±(99.9%) 2.659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.340, 1.574), stdev = 0.691
[info]   CI (99.9%): [≈ 0, 2.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.594 ±(99.9%) 4.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.594, 2.746), stdev = 1.204
[info]   CI (99.9%): [≈ 0, 5.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 53.94% complete, ETA 00:32:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45498.647 ops/s
[info] # Warmup Iteration   2: 76427.497 ops/s
[info] # Warmup Iteration   3: 77355.435 ops/s
[info] Iteration   1: 77981.646 ops/s
[info]                  ·gc.alloc.rate:                   3344.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67914.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.681 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 77816.563 ops/s
[info]                  ·gc.alloc.rate:                   3338.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68496.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.105 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 77801.584 ops/s
[info]                  ·gc.alloc.rate:                   3338.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68713.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.106 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 76923.761 ops/s
[info]                  ·gc.alloc.rate:                   3299.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3062.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62656.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.833 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 77174.624 ops/s
[info]                  ·gc.alloc.rate:                   3310.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              67514.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69421.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.670 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   77539.636 ±(99.9%) 1778.411 ops/s [Average]
[info]   (min, avg, max) = (76923.761, 77539.636, 77981.646), stdev = 461.848
[info]   CI (99.9%): [75761.224, 79318.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3326.645 ±(99.9%) 76.820 MB/sec [Average]
[info]   (min, avg, max) = (3299.934, 3326.645, 3344.885), stdev = 19.950
[info]   CI (99.9%): [3249.825, 3403.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67512.409 ±(99.9%) 3.476 B/op [Average]
[info]   (min, avg, max) = (67512.006, 67512.409, 67514.024), stdev = 0.903
[info]   CI (99.9%): [67508.934, 67515.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3323.506 ±(99.9%) 564.590 MB/sec [Average]
[info]   (min, avg, max) = (3062.610, 3323.506, 3404.353), stdev = 146.622
[info]   CI (99.9%): [2758.915, 3888.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67440.685 ±(99.9%) 10505.060 B/op [Average]
[info]   (min, avg, max) = (62656.682, 67440.685, 69421.426), stdev = 2728.131
[info]   CI (99.9%): [56935.625, 77945.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.229), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.879 ±(99.9%) 5.003 B/op [Average]
[info]   (min, avg, max) = (1.681, 2.879, 4.670), stdev = 1.299
[info]   CI (99.9%): [≈ 0, 7.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 54.24% complete, ETA 00:32:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189645.799 ops/s
[info] # Warmup Iteration   2: 235476.703 ops/s
[info] # Warmup Iteration   3: 239362.705 ops/s
[info] Iteration   1: 235625.120 ops/s
[info]                  ·gc.alloc.rate:                   1802.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13339.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 238761.010 ops/s
[info]                  ·gc.alloc.rate:                   1825.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11039.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.823 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 238223.012 ops/s
[info]                  ·gc.alloc.rate:                   1821.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13345.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.550 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 239946.311 ops/s
[info]                  ·gc.alloc.rate:                   1834.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11082.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 239643.976 ops/s
[info]                  ·gc.alloc.rate:                   1832.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13352.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   238439.886 ±(99.9%) 6611.515 ops/s [Average]
[info]   (min, avg, max) = (235625.120, 238439.886, 239946.311), stdev = 1716.989
[info]   CI (99.9%): [231828.371, 245051.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1823.208 ±(99.9%) 49.207 MB/sec [Average]
[info]   (min, avg, max) = (1802.143, 1823.208, 1834.314), stdev = 12.779
[info]   CI (99.9%): [1774.002, 1872.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.002, 12032.002, 12032.002), stdev = 0.001
[info]   CI (99.9%): [12032.002, 12032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1883.328 ±(99.9%) 708.313 MB/sec [Average]
[info]   (min, avg, max) = (1675.126, 1883.328, 2033.109), stdev = 183.947
[info]   CI (99.9%): [1175.015, 2591.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12432.132 ±(99.9%) 4819.553 B/op [Average]
[info]   (min, avg, max) = (11039.399, 12432.132, 13352.640), stdev = 1251.623
[info]   CI (99.9%): [7612.579, 17251.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.605 ±(99.9%) 0.610 B/op [Average]
[info]   (min, avg, max) = (0.410, 0.605, 0.823), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 1.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 54.55% complete, ETA 00:31:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 884035.732 ops/s
[info] # Warmup Iteration   2: 1215898.428 ops/s
[info] # Warmup Iteration   3: 1230393.562 ops/s
[info] Iteration   1: 1248561.642 ops/s
[info]                  ·gc.alloc.rate:                   818.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1242082.797 ops/s
[info]                  ·gc.alloc.rate:                   814.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1244.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1236955.202 ops/s
[info]                  ·gc.alloc.rate:                   811.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1244682.998 ops/s
[info]                  ·gc.alloc.rate:                   816.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1249.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1245940.981 ops/s
[info]                  ·gc.alloc.rate:                   816.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1243644.724 ±(99.9%) 16973.022 ops/s [Average]
[info]   (min, avg, max) = (1236955.202, 1243644.724, 1248561.642), stdev = 4407.840
[info]   CI (99.9%): [1226671.702, 1260617.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   815.534 ±(99.9%) 10.952 MB/sec [Average]
[info]   (min, avg, max) = (811.119, 815.534, 818.661), stdev = 2.844
[info]   CI (99.9%): [804.582, 826.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.540 ±(99.9%) 691.703 MB/sec [Average]
[info]   (min, avg, max) = (654.144, 788.540, 988.269), stdev = 179.633
[info]   CI (99.9%): [96.837, 1480.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   997.865 ±(99.9%) 875.684 B/op [Average]
[info]   (min, avg, max) = (824.612, 997.865, 1249.638), stdev = 227.412
[info]   CI (99.9%): [122.181, 1873.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.079, 0.106), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 54.85% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1157635.470 ops/s
[info] # Warmup Iteration   2: 1225062.309 ops/s
[info] # Warmup Iteration   3: 1262479.313 ops/s
[info] Iteration   1: 1265295.566 ops/s
[info]                  ·gc.alloc.rate:                   520.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     412.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.178 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1267522.525 ops/s
[info]                  ·gc.alloc.rate:                   521.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     823.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1266814.644 ops/s
[info]                  ·gc.alloc.rate:                   521.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1255947.821 ops/s
[info]                  ·gc.alloc.rate:                   517.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1250736.617 ops/s
[info]                  ·gc.alloc.rate:               514.982 MB/sec
[info]                  ·gc.alloc.rate.norm:          648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 417.430 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1261263.435 ±(99.9%) 28900.350 ops/s [Average]
[info]   (min, avg, max) = (1250736.617, 1261263.435, 1267522.525), stdev = 7505.329
[info]   CI (99.9%): [1232363.084, 1290163.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519.321 ±(99.9%) 11.938 MB/sec [Average]
[info]   (min, avg, max) = (514.982, 519.321, 521.973), stdev = 3.100
[info]   CI (99.9%): [507.384, 531.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   464.070 ±(99.9%) 698.878 MB/sec [Average]
[info]   (min, avg, max) = (331.074, 464.070, 662.963), stdev = 181.496
[info]   CI (99.9%): [≈ 0, 1162.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   579.002 ±(99.9%) 871.146 B/op [Average]
[info]   (min, avg, max) = (411.327, 579.002, 830.568), stdev = 226.234
[info]   CI (99.9%): [≈ 0, 1450.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 2.962 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.751), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 3.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.467 ±(99.9%) 3.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 2.178), stdev = 0.957
[info]   CI (99.9%): [≈ 0, 4.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.15% complete, ETA 00:31:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1267679.977 ops/s
[info] # Warmup Iteration   2: 1378318.128 ops/s
[info] # Warmup Iteration   3: 1375894.884 ops/s
[info] Iteration   1: 1381069.869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1379730.475 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1373730.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1352698.836 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1342835.024 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1366012.981 ±(99.9%) 66386.678 ops/s [Average]
[info]   (min, avg, max) = (1342835.024, 1366012.981, 1381069.869), stdev = 17240.409
[info]   CI (99.9%): [1299626.303, 1432399.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 55.45% complete, ETA 00:31:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23851.140 ops/s
[info] # Warmup Iteration   2: 33170.484 ops/s
[info] # Warmup Iteration   3: 33331.504 ops/s
[info] Iteration   1: 33531.394 ops/s
[info]                  ·gc.alloc.rate:                   1697.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              79641.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77663.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.885 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33763.897 ops/s
[info]                  ·gc.alloc.rate:                   1708.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77690.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.852 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33939.704 ops/s
[info]                  ·gc.alloc.rate:                   1717.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77720.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.896 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33939.370 ops/s
[info]                  ·gc.alloc.rate:                   1717.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78108.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.896 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33923.682 ops/s
[info]                  ·gc.alloc.rate:                   1716.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78390.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.897 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   33819.609 ±(99.9%) 682.793 ops/s [Average]
[info]   (min, avg, max) = (33531.394, 33819.609, 33939.704), stdev = 177.319
[info]   CI (99.9%): [33136.816, 34502.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1711.458 ±(99.9%) 33.462 MB/sec [Average]
[info]   (min, avg, max) = (1697.281, 1711.458, 1717.569), stdev = 8.690
[info]   CI (99.9%): [1677.996, 1744.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79633.944 ±(99.9%) 16.623 B/op [Average]
[info]   (min, avg, max) = (79632.013, 79633.944, 79641.666), stdev = 4.317
[info]   CI (99.9%): [79617.321, 79650.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.525 ±(99.9%) 53.002 MB/sec [Average]
[info]   (min, avg, max) = (1655.114, 1674.525, 1689.622), stdev = 13.764
[info]   CI (99.9%): [1621.524, 1727.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77914.682 ±(99.9%) 1240.882 B/op [Average]
[info]   (min, avg, max) = (77663.033, 77914.682, 78390.552), stdev = 322.253
[info]   CI (99.9%): [76673.800, 79155.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.685 ±(99.9%) 4.159 B/op [Average]
[info]   (min, avg, max) = (2.896, 3.685, 4.885), stdev = 1.080
[info]   CI (99.9%): [≈ 0, 7.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 55.76% complete, ETA 00:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14342.743 ops/s
[info] # Warmup Iteration   2: 17488.745 ops/s
[info] # Warmup Iteration   3: 17883.602 ops/s
[info] Iteration   1: 17755.826 ops/s
[info]                  ·gc.alloc.rate:                   1863.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              165165.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147877.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.916 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17722.104 ops/s
[info]                  ·gc.alloc.rate:                   1860.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178903.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.942 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17968.837 ops/s
[info]                  ·gc.alloc.rate:                   1885.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177261.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.117 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17915.689 ops/s
[info]                  ·gc.alloc.rate:                   1880.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              165175.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148663.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.829 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17687.223 ops/s
[info]                  ·gc.alloc.rate:                   1856.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181055.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.409 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17809.936 ±(99.9%) 479.919 ops/s [Average]
[info]   (min, avg, max) = (17687.223, 17809.936, 17968.837), stdev = 124.634
[info]   CI (99.9%): [17330.016, 18289.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1869.446 ±(99.9%) 49.265 MB/sec [Average]
[info]   (min, avg, max) = (1856.885, 1869.446, 1885.821), stdev = 12.794
[info]   CI (99.9%): [1820.181, 1918.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165173.749 ±(99.9%) 17.767 B/op [Average]
[info]   (min, avg, max) = (165165.524, 165173.749, 165176.033), stdev = 4.614
[info]   CI (99.9%): [165155.982, 165191.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887.074 ±(99.9%) 727.811 MB/sec [Average]
[info]   (min, avg, max) = (1668.421, 1887.074, 2035.402), stdev = 189.010
[info]   CI (99.9%): [1159.264, 2614.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   166752.607 ±(99.9%) 65181.415 B/op [Average]
[info]   (min, avg, max) = (147877.617, 166752.607, 181055.703), stdev = 16927.407
[info]   CI (99.9%): [101571.192, 231934.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.100, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.843 ±(99.9%) 17.721 B/op [Average]
[info]   (min, avg, max) = (1.829, 8.843, 12.942), stdev = 4.602
[info]   CI (99.9%): [≈ 0, 26.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 56.06% complete, ETA 00:30:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65244.155 ops/s
[info] # Warmup Iteration   2: 94125.882 ops/s
[info] # Warmup Iteration   3: 97073.033 ops/s
[info] Iteration   1: 97551.423 ops/s
[info]                  ·gc.alloc.rate:                   1280.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21155.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 98445.769 ops/s
[info]                  ·gc.alloc.rate:                   1292.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21075.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.666 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 96523.443 ops/s
[info]                  ·gc.alloc.rate:                   1266.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21636.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 97231.372 ops/s
[info]                  ·gc.alloc.rate:                   1276.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21592.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 97402.754 ops/s
[info]                  ·gc.alloc.rate:                   1278.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21673.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97430.952 ±(99.9%) 2659.850 ops/s [Average]
[info]   (min, avg, max) = (96523.443, 97430.952, 98445.769), stdev = 690.755
[info]   CI (99.9%): [94771.102, 100090.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1278.826 ±(99.9%) 35.326 MB/sec [Average]
[info]   (min, avg, max) = (1266.820, 1278.826, 1292.290), stdev = 9.174
[info]   CI (99.9%): [1243.500, 1314.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.005, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1326.472 ±(99.9%) 45.495 MB/sec [Average]
[info]   (min, avg, max) = (1311.624, 1326.472, 1341.292), stdev = 11.815
[info]   CI (99.9%): [1280.976, 1371.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21426.895 ±(99.9%) 1104.435 B/op [Average]
[info]   (min, avg, max) = (21075.888, 21426.895, 21673.556), stdev = 286.818
[info]   CI (99.9%): [20322.460, 22531.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.078 ±(99.9%) 1.107 B/op [Average]
[info]   (min, avg, max) = (0.666, 1.078, 1.358), stdev = 0.288
[info]   CI (99.9%): [≈ 0, 2.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 56.36% complete, ETA 00:30:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260371.193 ops/s
[info] # Warmup Iteration   2: 271649.305 ops/s
[info] # Warmup Iteration   3: 277149.011 ops/s
[info] Iteration   1: 277608.965 ops/s
[info]                  ·gc.alloc.rate:                   903.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5653.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 275772.987 ops/s
[info]                  ·gc.alloc.rate:                   897.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3794.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 264686.093 ops/s
[info]                  ·gc.alloc.rate:                   861.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5943.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 278790.134 ops/s
[info]                  ·gc.alloc.rate:                   907.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5653.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 274310.595 ops/s
[info]                  ·gc.alloc.rate:               892.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3841.134 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   274233.755 ±(99.9%) 21584.708 ops/s [Average]
[info]   (min, avg, max) = (264686.093, 274233.755, 278790.134), stdev = 5605.480
[info]   CI (99.9%): [252649.047, 295818.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   892.214 ±(99.9%) 70.261 MB/sec [Average]
[info]   (min, avg, max) = (861.091, 892.214, 907.002), stdev = 18.247
[info]   CI (99.9%): [821.952, 962.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   866.591 ±(99.9%) 700.596 MB/sec [Average]
[info]   (min, avg, max) = (664.989, 866.591, 1001.582), stdev = 181.943
[info]   CI (99.9%): [165.994, 1567.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4977.266 ±(99.9%) 4102.089 B/op [Average]
[info]   (min, avg, max) = (3794.161, 4977.266, 5943.505), stdev = 1065.300
[info]   CI (99.9%): [875.177, 9079.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 0.742 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 0.470), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 1.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 56.67% complete, ETA 00:30:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10122.378 ops/s
[info] # Warmup Iteration   2: 16745.244 ops/s
[info] # Warmup Iteration   3: 16841.237 ops/s
[info] Iteration   1: 16896.268 ops/s
[info]                  ·gc.alloc.rate:                   2153.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185641.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.817 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16705.219 ops/s
[info]                  ·gc.alloc.rate:                   2130.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              200641.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2344.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220880.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.806 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16868.994 ops/s
[info]                  ·gc.alloc.rate:                   2150.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188652.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.711 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16573.343 ops/s
[info]                  ·gc.alloc.rate:                   2113.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224767.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.899 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16938.401 ops/s
[info]                  ·gc.alloc.rate:                   2159.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189142.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.737 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16796.445 ±(99.9%) 588.644 ops/s [Average]
[info]   (min, avg, max) = (16573.343, 16796.445, 16938.401), stdev = 152.869
[info]   CI (99.9%): [16207.801, 17385.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2141.487 ±(99.9%) 73.824 MB/sec [Average]
[info]   (min, avg, max) = (2113.542, 2141.487, 2159.392), stdev = 19.172
[info]   CI (99.9%): [2067.663, 2215.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200640.295 ±(99.9%) 2.294 B/op [Average]
[info]   (min, avg, max) = (200640.025, 200640.295, 200641.360), stdev = 0.596
[info]   CI (99.9%): [200638.000, 200642.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2152.640 ±(99.9%) 718.975 MB/sec [Average]
[info]   (min, avg, max) = (1992.957, 2152.640, 2367.696), stdev = 186.715
[info]   CI (99.9%): [1433.665, 2871.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   201816.736 ±(99.9%) 74211.014 B/op [Average]
[info]   (min, avg, max) = (185641.384, 201816.736, 224767.074), stdev = 19272.365
[info]   CI (99.9%): [127605.721, 276027.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.194 ±(99.9%) 6.341 B/op [Average]
[info]   (min, avg, max) = (5.817, 8.194, 9.806), stdev = 1.647
[info]   CI (99.9%): [1.853, 14.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 56.97% complete, ETA 00:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15568.922 ops/s
[info] # Warmup Iteration   2: 20662.907 ops/s
[info] # Warmup Iteration   3: 20588.739 ops/s
[info] Iteration   1: 20828.837 ops/s
[info]                  ·gc.alloc.rate:                   1685.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              127383.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125478.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.146 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20653.274 ops/s
[info]                  ·gc.alloc.rate:                   1671.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127315.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.518 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20409.858 ops/s
[info]                  ·gc.alloc.rate:                   1651.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              127375.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129498.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.816 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 20791.269 ops/s
[info]                  ·gc.alloc.rate:                   1682.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127680.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 20726.497 ops/s
[info]                  ·gc.alloc.rate:                   1677.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128429.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.484 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   20681.947 ±(99.9%) 639.623 ops/s [Average]
[info]   (min, avg, max) = (20409.858, 20681.947, 20828.837), stdev = 166.108
[info]   CI (99.9%): [20042.324, 21321.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1673.929 ±(99.9%) 51.524 MB/sec [Average]
[info]   (min, avg, max) = (1651.975, 1673.929, 1685.993), stdev = 13.381
[info]   CI (99.9%): [1622.405, 1725.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.927 ±(99.9%) 70.208 B/op [Average]
[info]   (min, avg, max) = (127352.021, 127370.927, 127392.021), stdev = 18.233
[info]   CI (99.9%): [127300.719, 127441.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.901 ±(99.9%) 47.841 MB/sec [Average]
[info]   (min, avg, max) = (1660.788, 1677.901, 1691.836), stdev = 12.424
[info]   CI (99.9%): [1630.060, 1725.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127680.600 ±(99.9%) 5726.805 B/op [Average]
[info]   (min, avg, max) = (125478.806, 127680.600, 129498.853), stdev = 1487.233
[info]   CI (99.9%): [121953.795, 133407.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.653 ±(99.9%) 10.895 B/op [Average]
[info]   (min, avg, max) = (3.146, 6.653, 9.518), stdev = 2.829
[info]   CI (99.9%): [≈ 0, 17.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 57.27% complete, ETA 00:30:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58613.727 ops/s
[info] # Warmup Iteration   2: 87636.940 ops/s
[info] # Warmup Iteration   3: 88067.543 ops/s
[info] Iteration   1: 88269.745 ops/s
[info]                  ·gc.alloc.rate:                   1209.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23351.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 87709.619 ops/s
[info]                  ·gc.alloc.rate:                   1201.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17709.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 88105.687 ops/s
[info]                  ·gc.alloc.rate:                   1207.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23643.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 88690.429 ops/s
[info]                  ·gc.alloc.rate:                   1214.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17725.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88559.466 ops/s
[info]                  ·gc.alloc.rate:                   1213.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23771.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.480 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   88266.989 ±(99.9%) 1493.251 ops/s [Average]
[info]   (min, avg, max) = (87709.619, 88266.989, 88690.429), stdev = 387.793
[info]   CI (99.9%): [86773.738, 89760.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1209.350 ±(99.9%) 19.683 MB/sec [Average]
[info]   (min, avg, max) = (1201.911, 1209.350, 1214.960), stdev = 5.112
[info]   CI (99.9%): [1189.667, 1229.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.006 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.006, 21560.027), stdev = 0.016
[info]   CI (99.9%): [21559.943, 21560.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.525 ±(99.9%) 698.840 MB/sec [Average]
[info]   (min, avg, max) = (987.238, 1191.525, 1337.605), stdev = 181.487
[info]   CI (99.9%): [492.685, 1890.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21240.313 ±(99.9%) 12397.360 B/op [Average]
[info]   (min, avg, max) = (17709.161, 21240.313, 23771.811), stdev = 3219.555
[info]   CI (99.9%): [8842.953, 33637.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.114 ±(99.9%) 1.433 B/op [Average]
[info]   (min, avg, max) = (0.742, 1.114, 1.494), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 2.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 57.58% complete, ETA 00:29:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314720.329 ops/s
[info] # Warmup Iteration   2: 337279.077 ops/s
[info] # Warmup Iteration   3: 334203.786 ops/s
[info] Iteration   1: 334108.169 ops/s
[info]                  ·gc.alloc.rate:                   1064.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6250.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 329080.514 ops/s
[info]                  ·gc.alloc.rate:                   1049.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4771.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 330239.952 ops/s
[info]                  ·gc.alloc.rate:                   1052.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4763.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 331935.805 ops/s
[info]                  ·gc.alloc.rate:                   1058.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4759.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 334103.980 ops/s
[info]                  ·gc.alloc.rate:                   1065.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4741.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   331893.684 ±(99.9%) 8704.474 ops/s [Average]
[info]   (min, avg, max) = (329080.514, 331893.684, 334108.169), stdev = 2260.524
[info]   CI (99.9%): [323189.210, 340598.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1057.937 ±(99.9%) 27.609 MB/sec [Average]
[info]   (min, avg, max) = (1049.119, 1057.937, 1065.119), stdev = 7.170
[info]   CI (99.9%): [1030.328, 1085.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.001), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1067.082 ±(99.9%) 559.572 MB/sec [Average]
[info]   (min, avg, max) = (997.895, 1067.082, 1326.959), stdev = 145.319
[info]   CI (99.9%): [507.510, 1626.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5057.472 ±(99.9%) 2569.367 B/op [Average]
[info]   (min, avg, max) = (4741.550, 5057.472, 6250.938), stdev = 667.257
[info]   CI (99.9%): [2488.105, 7626.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.336 ±(99.9%) 0.581 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.336, 0.498), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 57.88% complete, ETA 00:29:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359495.720 ops/s
[info] # Warmup Iteration   2: 386171.263 ops/s
[info] # Warmup Iteration   3: 398020.735 ops/s
[info] Iteration   1: 398159.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 391519.309 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 398516.077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 398578.073 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 397158.881 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   396786.270 ±(99.9%) 11546.623 ops/s [Average]
[info]   (min, avg, max) = (391519.309, 396786.270, 398578.073), stdev = 2998.621
[info]   CI (99.9%): [385239.647, 408332.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 58.18% complete, ETA 00:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18158.572 ops/s
[info] # Warmup Iteration   2: 25513.955 ops/s
[info] # Warmup Iteration   3: 25695.765 ops/s
[info] Iteration   1: 25928.302 ops/s
[info]                  ·gc.alloc.rate:                   1768.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120655.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.054 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25935.669 ops/s
[info]                  ·gc.alloc.rate:                   1768.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101239.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.106 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25700.416 ops/s
[info]                  ·gc.alloc.rate:                   1752.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102760.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.099 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25926.400 ops/s
[info]                  ·gc.alloc.rate:                   1767.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122852.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.055 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 25756.107 ops/s
[info]                  ·gc.alloc.rate:                   1755.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              107287.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103347.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.176 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   25849.379 ±(99.9%) 432.648 ops/s [Average]
[info]   (min, avg, max) = (25700.416, 25849.379, 25935.669), stdev = 112.357
[info]   CI (99.9%): [25416.730, 26282.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1762.423 ±(99.9%) 30.442 MB/sec [Average]
[info]   (min, avg, max) = (1752.004, 1762.423, 1768.772), stdev = 7.906
[info]   CI (99.9%): [1731.981, 1792.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107288.213 ±(99.9%) 1.703 B/op [Average]
[info]   (min, avg, max) = (107287.939, 107288.213, 107288.998), stdev = 0.442
[info]   CI (99.9%): [107286.510, 107289.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1810.133 ±(99.9%) 691.237 MB/sec [Average]
[info]   (min, avg, max) = (1669.043, 1810.133, 2023.734), stdev = 179.512
[info]   CI (99.9%): [1118.896, 2501.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110171.199 ±(99.9%) 40932.286 B/op [Average]
[info]   (min, avg, max) = (101239.730, 110171.199, 122852.830), stdev = 10629.985
[info]   CI (99.9%): [69238.914, 151103.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.167), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.098 ±(99.9%) 10.697 B/op [Average]
[info]   (min, avg, max) = (5.054, 7.098, 10.176), stdev = 2.778
[info]   CI (99.9%): [≈ 0, 17.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 58.48% complete, ETA 00:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54095.834 ops/s
[info] # Warmup Iteration   2: 71353.081 ops/s
[info] # Warmup Iteration   3: 72637.022 ops/s
[info] Iteration   1: 72849.746 ops/s
[info]                  ·gc.alloc.rate:                   1565.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              33824.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35756.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.899 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 72567.612 ops/s
[info]                  ·gc.alloc.rate:                   1559.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              33824.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28871.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 73017.959 ops/s
[info]                  ·gc.alloc.rate:                   1569.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              33824.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36067.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.897 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72812.088 ops/s
[info]                  ·gc.alloc.rate:                   1565.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              33824.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36356.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.800 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 72871.802 ops/s
[info]                  ·gc.alloc.rate:                   1566.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              33824.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29169.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.798 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   72823.842 ±(99.9%) 628.152 ops/s [Average]
[info]   (min, avg, max) = (72567.612, 72823.842, 73017.959), stdev = 163.129
[info]   CI (99.9%): [72195.690, 73451.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1565.288 ±(99.9%) 13.725 MB/sec [Average]
[info]   (min, avg, max) = (1559.658, 1565.288, 1569.379), stdev = 3.564
[info]   CI (99.9%): [1551.562, 1579.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33824.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33824.006, 33824.006, 33824.006), stdev = 0.001
[info]   CI (99.9%): [33824.005, 33824.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1538.642 ±(99.9%) 695.433 MB/sec [Average]
[info]   (min, avg, max) = (1331.292, 1538.642, 1682.253), stdev = 180.602
[info]   CI (99.9%): [843.209, 2234.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33244.401 ±(99.9%) 14875.048 B/op [Average]
[info]   (min, avg, max) = (28871.487, 33244.401, 36356.893), stdev = 3863.003
[info]   CI (99.9%): [18369.353, 48119.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.350 ±(99.9%) 1.734 B/op [Average]
[info]   (min, avg, max) = (0.897, 1.350, 1.800), stdev = 0.450
[info]   CI (99.9%): [≈ 0, 3.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 58.79% complete, ETA 00:28:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60396.804 ops/s
[info] # Warmup Iteration   2: 91756.924 ops/s
[info] # Warmup Iteration   3: 93202.263 ops/s
[info] Iteration   1: 93764.864 ops/s
[info]                  ·gc.alloc.rate:                   1169.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              19626.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21904.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.398 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 94227.938 ops/s
[info]                  ·gc.alloc.rate:                   1173.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21919.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.739 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 94476.419 ops/s
[info]                  ·gc.alloc.rate:                   1177.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16484.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.694 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 92830.338 ops/s
[info]                  ·gc.alloc.rate:                   1156.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22509.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.765 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 92966.371 ops/s
[info]                  ·gc.alloc.rate:                   1158.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16933.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   93653.186 ±(99.9%) 2835.730 ops/s [Average]
[info]   (min, avg, max) = (92830.338, 93653.186, 94476.419), stdev = 736.430
[info]   CI (99.9%): [90817.456, 96488.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1166.975 ±(99.9%) 35.567 MB/sec [Average]
[info]   (min, avg, max) = (1156.520, 1166.975, 1177.063), stdev = 9.237
[info]   CI (99.9%): [1131.408, 1202.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   19611.709 ±(99.9%) 31.892 B/op [Average]
[info]   (min, avg, max) = (19608.005, 19611.709, 19626.524), stdev = 8.282
[info]   CI (99.9%): [19579.817, 19643.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1186.913 ±(99.9%) 675.956 MB/sec [Average]
[info]   (min, avg, max) = (989.553, 1186.913, 1327.647), stdev = 175.544
[info]   CI (99.9%): [510.958, 1862.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19950.116 ±(99.9%) 11448.893 B/op [Average]
[info]   (min, avg, max) = (16484.392, 19950.116, 22509.338), stdev = 2973.241
[info]   CI (99.9%): [8501.224, 31399.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.189 ±(99.9%) 2.452 B/op [Average]
[info]   (min, avg, max) = (0.352, 1.189, 1.765), stdev = 0.637
[info]   CI (99.9%): [≈ 0, 3.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 59.09% complete, ETA 00:28:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89603.098 ops/s
[info] # Warmup Iteration   2: 103236.023 ops/s
[info] # Warmup Iteration   3: 100909.934 ops/s
[info] Iteration   1: 102845.551 ops/s
[info]                  ·gc.alloc.rate:                   1203.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20260.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.274 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 103892.562 ops/s
[info]                  ·gc.alloc.rate:                   1215.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20122.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.261 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 103471.863 ops/s
[info]                  ·gc.alloc.rate:                   1210.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15203.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 104223.322 ops/s
[info]                  ·gc.alloc.rate:                   1219.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20218.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.943 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 103401.967 ops/s
[info]                  ·gc.alloc.rate:                   1209.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20460.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   103567.053 ±(99.9%) 2013.342 ops/s [Average]
[info]   (min, avg, max) = (102845.551, 103567.053, 104223.322), stdev = 522.859
[info]   CI (99.9%): [101553.711, 105580.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1211.450 ±(99.9%) 23.104 MB/sec [Average]
[info]   (min, avg, max) = (1203.312, 1211.450, 1219.003), stdev = 6.000
[info]   CI (99.9%): [1188.346, 1234.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18408.004, 18408.004, 18408.004), stdev = 0.001
[info]   CI (99.9%): [18408.004, 18408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1267.125 ±(99.9%) 576.892 MB/sec [Average]
[info]   (min, avg, max) = (999.501, 1267.125, 1344.289), stdev = 149.817
[info]   CI (99.9%): [690.233, 1844.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19253.153 ±(99.9%) 8730.899 B/op [Average]
[info]   (min, avg, max) = (15203.141, 19253.153, 20460.910), stdev = 2267.387
[info]   CI (99.9%): [10522.254, 27984.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.886 ±(99.9%) 1.591 B/op [Average]
[info]   (min, avg, max) = (0.317, 0.886, 1.274), stdev = 0.413
[info]   CI (99.9%): [≈ 0, 2.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 59.39% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27698.808 ops/s
[info] # Warmup Iteration   2: 45709.132 ops/s
[info] # Warmup Iteration   3: 45967.142 ops/s
[info] Iteration   1: 46895.261 ops/s
[info]                  ·gc.alloc.rate:                   2248.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66766.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.493 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 46588.239 ops/s
[info]                  ·gc.alloc.rate:                   2233.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2342.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79122.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.219 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 46492.361 ops/s
[info]                  ·gc.alloc.rate:                   2229.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79873.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.228 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 45709.118 ops/s
[info]                  ·gc.alloc.rate:                   2191.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69911.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.150 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 46627.061 ops/s
[info]                  ·gc.alloc.rate:                   2235.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80180.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.919 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   46462.408 ±(99.9%) 1720.605 ops/s [Average]
[info]   (min, avg, max) = (45709.118, 46462.408, 46895.261), stdev = 446.836
[info]   CI (99.9%): [44741.803, 48183.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2227.503 ±(99.9%) 82.784 MB/sec [Average]
[info]   (min, avg, max) = (2191.203, 2227.503, 2248.172), stdev = 21.499
[info]   CI (99.9%): [2144.719, 2310.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75448.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75448.009, 75448.009, 75448.010), stdev = 0.001
[info]   CI (99.9%): [75448.008, 75448.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2219.561 ±(99.9%) 740.344 MB/sec [Average]
[info]   (min, avg, max) = (1989.499, 2219.561, 2375.904), stdev = 192.265
[info]   CI (99.9%): [1479.218, 2959.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75171.038 ±(99.9%) 24438.762 B/op [Average]
[info]   (min, avg, max) = (66766.992, 75171.038, 80180.594), stdev = 6346.669
[info]   CI (99.9%): [50732.276, 99609.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.802 ±(99.9%) 4.050 B/op [Average]
[info]   (min, avg, max) = (2.150, 3.802, 4.919), stdev = 1.052
[info]   CI (99.9%): [≈ 0, 7.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 59.70% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96106.993 ops/s
[info] # Warmup Iteration   2: 117297.874 ops/s
[info] # Warmup Iteration   3: 120620.517 ops/s
[info] Iteration   1: 118691.540 ops/s
[info]                  ·gc.alloc.rate:                   1113.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13073.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.552 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 120768.661 ops/s
[info]                  ·gc.alloc.rate:                   1133.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12891.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.628 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 120644.352 ops/s
[info]                  ·gc.alloc.rate:                   1132.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17288.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.815 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 120853.383 ops/s
[info]                  ·gc.alloc.rate:                   1134.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13000.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 120071.586 ops/s
[info]                  ·gc.alloc.rate:                   1126.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17532.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.364 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   120205.904 ±(99.9%) 3465.313 ops/s [Average]
[info]   (min, avg, max) = (118691.540, 120205.904, 120853.383), stdev = 899.931
[info]   CI (99.9%): [116740.592, 123671.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1128.070 ±(99.9%) 33.152 MB/sec [Average]
[info]   (min, avg, max) = (1113.630, 1128.070, 1134.431), stdev = 8.610
[info]   CI (99.9%): [1094.918, 1161.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14768.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14768.004, 14768.004, 14768.004), stdev = 0.001
[info]   CI (99.9%): [14768.003, 14768.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1127.400 ±(99.9%) 718.217 MB/sec [Average]
[info]   (min, avg, max) = (985.836, 1127.400, 1337.585), stdev = 186.519
[info]   CI (99.9%): [409.183, 1845.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14757.412 ±(99.9%) 9336.234 B/op [Average]
[info]   (min, avg, max) = (12891.901, 14757.412, 17532.876), stdev = 2424.590
[info]   CI (99.9%): [5421.179, 24093.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.926 ±(99.9%) 2.166 B/op [Average]
[info]   (min, avg, max) = (0.271, 0.926, 1.628), stdev = 0.563
[info]   CI (99.9%): [≈ 0, 3.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 60.00% complete, ETA 00:28:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245108.553 ops/s
[info] # Warmup Iteration   2: 335237.547 ops/s
[info] # Warmup Iteration   3: 341012.106 ops/s
[info] Iteration   1: 339339.901 ops/s
[info]                  ·gc.alloc.rate:                   503.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2698.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 340426.559 ops/s
[info]                  ·gc.alloc.rate:                   505.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1507.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 337450.886 ops/s
[info]                  ·gc.alloc.rate:                   501.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3038.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 341055.738 ops/s
[info]                  ·gc.alloc.rate:                   506.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1503.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 340514.061 ops/s
[info]                  ·gc.alloc.rate:                   505.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3014.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   339757.429 ±(99.9%) 5513.385 ops/s [Average]
[info]   (min, avg, max) = (337450.886, 339757.429, 341055.738), stdev = 1431.809
[info]   CI (99.9%): [334244.044, 345270.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   504.364 ±(99.9%) 7.949 MB/sec [Average]
[info]   (min, avg, max) = (501.056, 504.364, 506.244), stdev = 2.064
[info]   CI (99.9%): [496.415, 512.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2336.001, 2336.001), stdev = 0.001
[info]   CI (99.9%): [2336.001, 2336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507.573 ±(99.9%) 647.834 MB/sec [Average]
[info]   (min, avg, max) = (325.779, 507.573, 652.233), stdev = 168.241
[info]   CI (99.9%): [≈ 0, 1155.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2352.539 ±(99.9%) 3022.189 B/op [Average]
[info]   (min, avg, max) = (1503.271, 2352.539, 3038.648), stdev = 784.853
[info]   CI (99.9%): [≈ 0, 5374.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.546 ±(99.9%) 4.386 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.546, 2.584), stdev = 1.139
[info]   CI (99.9%): [≈ 0, 4.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.531 ±(99.9%) 20.343 B/op [Average]
[info]   (min, avg, max) = (0.097, 2.531, 11.981), stdev = 5.283
[info]   CI (99.9%): [≈ 0, 22.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 60.30% complete, ETA 00:27:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 613268.098 ops/s
[info] # Warmup Iteration   2: 643589.913 ops/s
[info] # Warmup Iteration   3: 649281.406 ops/s
[info] Iteration   1: 666593.378 ops/s
[info]                  ·gc.alloc.rate:                   826.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2340.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 659501.172 ops/s
[info]                  ·gc.alloc.rate:                   817.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1577.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 670356.069 ops/s
[info]                  ·gc.alloc.rate:                   831.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2332.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 655608.192 ops/s
[info]                  ·gc.alloc.rate:                   813.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1594.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 643746.832 ops/s
[info]                  ·gc.alloc.rate:                   798.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1627.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   659161.129 ±(99.9%) 39966.297 ops/s [Average]
[info]   (min, avg, max) = (643746.832, 659161.129, 670356.069), stdev = 10379.120
[info]   CI (99.9%): [619194.832, 699127.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   817.640 ±(99.9%) 49.106 MB/sec [Average]
[info]   (min, avg, max) = (798.799, 817.640, 831.431), stdev = 12.753
[info]   CI (99.9%): [768.534, 866.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   795.227 ±(99.9%) 693.430 MB/sec [Average]
[info]   (min, avg, max) = (661.154, 795.227, 993.586), stdev = 180.082
[info]   CI (99.9%): [101.796, 1488.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1894.469 ±(99.9%) 1555.469 B/op [Average]
[info]   (min, avg, max) = (1577.833, 1894.469, 2340.375), stdev = 403.950
[info]   CI (99.9%): [339.001, 3449.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.160 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (0.049, 0.160, 0.204), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 60.61% complete, ETA 00:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676983.575 ops/s
[info] # Warmup Iteration   2: 729149.823 ops/s
[info] # Warmup Iteration   3: 709820.802 ops/s
[info] Iteration   1: 720962.888 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 728929.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 718544.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 716768.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 717794.934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   720600.138 ±(99.9%) 18893.026 ops/s [Average]
[info]   (min, avg, max) = (716768.326, 720600.138, 728929.891), stdev = 4906.459
[info]   CI (99.9%): [701707.112, 739493.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 60.91% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196969.651 ops/s
[info] # Warmup Iteration   2: 255203.838 ops/s
[info] # Warmup Iteration   3: 237971.580 ops/s
[info] Iteration   1: 245809.293 ops/s
[info]                  ·gc.alloc.rate:                   803.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4188.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 243373.567 ops/s
[info]                  ·gc.alloc.rate:                   795.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6347.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.673 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 245635.768 ops/s
[info]                  ·gc.alloc.rate:                   802.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4200.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 242453.305 ops/s
[info]                  ·gc.alloc.rate:                   792.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6406.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.811 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 244147.715 ops/s
[info]                  ·gc.alloc.rate:                   797.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4255.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   244283.930 ±(99.9%) 5564.381 ops/s [Average]
[info]   (min, avg, max) = (242453.305, 244283.930, 245809.293), stdev = 1445.052
[info]   CI (99.9%): [238719.549, 249848.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   798.419 ±(99.9%) 17.984 MB/sec [Average]
[info]   (min, avg, max) = (792.554, 798.419, 803.338), stdev = 4.670
[info]   CI (99.9%): [780.435, 816.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   787.673 ±(99.9%) 691.262 MB/sec [Average]
[info]   (min, avg, max) = (654.118, 787.673, 987.038), stdev = 179.519
[info]   CI (99.9%): [96.411, 1478.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5079.644 ±(99.9%) 4562.247 B/op [Average]
[info]   (min, avg, max) = (4188.503, 5079.644, 6406.280), stdev = 1184.801
[info]   CI (99.9%): [517.397, 9641.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.537 ±(99.9%) 0.975 B/op [Average]
[info]   (min, avg, max) = (0.133, 0.537, 0.811), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 61.21% complete, ETA 00:27:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100255.815 ops/s
[info] # Warmup Iteration   2: 130694.844 ops/s
[info] # Warmup Iteration   3: 131266.886 ops/s
[info] Iteration   1: 132434.807 ops/s
[info]                  ·gc.alloc.rate:                   1814.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23717.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.237 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 133176.429 ops/s
[info]                  ·gc.alloc.rate:                   1824.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19783.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.476 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 132281.749 ops/s
[info]                  ·gc.alloc.rate:                   1812.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20019.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.238 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 131505.485 ops/s
[info]                  ·gc.alloc.rate:                   1801.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24259.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.997 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 133001.297 ops/s
[info]                  ·gc.alloc.rate:                   1822.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20045.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   132479.954 ±(99.9%) 2545.351 ops/s [Average]
[info]   (min, avg, max) = (131505.485, 132479.954, 133176.429), stdev = 661.020
[info]   CI (99.9%): [129934.602, 135025.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1814.925 ±(99.9%) 35.113 MB/sec [Average]
[info]   (min, avg, max) = (1801.437, 1814.925, 1824.333), stdev = 9.119
[info]   CI (99.9%): [1779.812, 1850.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21560.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21560.003, 21560.003, 21560.004), stdev = 0.001
[info]   CI (99.9%): [21560.003, 21560.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1814.793 ±(99.9%) 693.378 MB/sec [Average]
[info]   (min, avg, max) = (1673.992, 1814.793, 2027.001), stdev = 180.068
[info]   CI (99.9%): [1121.414, 2508.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21565.156 ±(99.9%) 8560.220 B/op [Average]
[info]   (min, avg, max) = (19783.265, 21565.156, 24259.601), stdev = 2223.062
[info]   CI (99.9%): [13004.936, 30125.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.187 ±(99.9%) 0.784 B/op [Average]
[info]   (min, avg, max) = (0.985, 1.187, 1.476), stdev = 0.203
[info]   CI (99.9%): [0.403, 1.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 61.52% complete, ETA 00:27:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126171.315 ops/s
[info] # Warmup Iteration   2: 185451.779 ops/s
[info] # Warmup Iteration   3: 188574.790 ops/s
[info] Iteration   1: 188121.727 ops/s
[info]                  ·gc.alloc.rate:                   1121.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10956.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.697 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 187747.296 ops/s
[info]                  ·gc.alloc.rate:                   1119.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8273.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 188480.905 ops/s
[info]                  ·gc.alloc.rate:                   1123.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8274.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 187351.380 ops/s
[info]                  ·gc.alloc.rate:                   1117.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11164.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 187356.337 ops/s
[info]                  ·gc.alloc.rate:                   1117.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8416.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   187811.529 ±(99.9%) 1893.630 ops/s [Average]
[info]   (min, avg, max) = (187351.380, 187811.529, 188480.905), stdev = 491.770
[info]   CI (99.9%): [185917.899, 189705.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1119.906 ±(99.9%) 11.277 MB/sec [Average]
[info]   (min, avg, max) = (1117.108, 1119.906, 1123.841), stdev = 2.929
[info]   CI (99.9%): [1108.629, 1131.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.002, 9384.002, 9384.002), stdev = 0.001
[info]   CI (99.9%): [9384.002, 9384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.762 ±(99.9%) 688.870 MB/sec [Average]
[info]   (min, avg, max) = (986.985, 1123.762, 1329.177), stdev = 178.897
[info]   CI (99.9%): [434.892, 1812.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9416.845 ±(99.9%) 5788.603 B/op [Average]
[info]   (min, avg, max) = (8273.015, 9416.845, 11164.232), stdev = 1503.282
[info]   CI (99.9%): [3628.243, 15205.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.488 ±(99.9%) 0.734 B/op [Average]
[info]   (min, avg, max) = (0.175, 0.488, 0.697), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 61.82% complete, ETA 00:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 306538.622 ops/s
[info] # Warmup Iteration   2: 322169.415 ops/s
[info] # Warmup Iteration   3: 308280.618 ops/s
[info] Iteration   1: 315736.906 ops/s
[info]                  ·gc.alloc.rate:                   613.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3313.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 316623.116 ops/s
[info]                  ·gc.alloc.rate:                   614.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3304.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 315552.170 ops/s
[info]                  ·gc.alloc.rate:                   612.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3315.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 315886.396 ops/s
[info]                  ·gc.alloc.rate:                   613.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3312.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 316441.326 ops/s
[info]                  ·gc.alloc.rate:                   614.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3313.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   316047.983 ±(99.9%) 1779.447 ops/s [Average]
[info]   (min, avg, max) = (315552.170, 316047.983, 316623.116), stdev = 462.117
[info]   CI (99.9%): [314268.536, 317827.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   613.749 ±(99.9%) 3.893 MB/sec [Average]
[info]   (min, avg, max) = (612.695, 613.749, 614.947), stdev = 1.011
[info]   CI (99.9%): [609.856, 617.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.159 ±(99.9%) 2.710 MB/sec [Average]
[info]   (min, avg, max) = (664.783, 665.159, 666.410), stdev = 0.704
[info]   CI (99.9%): [662.449, 667.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3311.988 ±(99.9%) 16.590 B/op [Average]
[info]   (min, avg, max) = (3304.656, 3311.988, 3315.913), stdev = 4.308
[info]   CI (99.9%): [3295.398, 3328.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.378 ±(99.9%) 2.719 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.378, 1.641), stdev = 0.706
[info]   CI (99.9%): [≈ 0, 3.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.884 ±(99.9%) 13.554 B/op [Average]
[info]   (min, avg, max) = (0.207, 1.884, 8.178), stdev = 3.520
[info]   CI (99.9%): [≈ 0, 15.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 62.12% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29387.189 ops/s
[info] # Warmup Iteration   2: 66825.749 ops/s
[info] # Warmup Iteration   3: 67800.955 ops/s
[info] Iteration   1: 68579.156 ops/s
[info]                  ·gc.alloc.rate:                   2849.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61211.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.344 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 66848.074 ops/s
[info]                  ·gc.alloc.rate:                   2778.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3030.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71344.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.411 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 67812.414 ops/s
[info]                  ·gc.alloc.rate:                   2817.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62864.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.865 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 67959.311 ops/s
[info]                  ·gc.alloc.rate:                   2825.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62913.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.893 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 67618.306 ops/s
[info]                  ·gc.alloc.rate:                   2810.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3060.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71230.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.423 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   67763.452 ±(99.9%) 2408.666 ops/s [Average]
[info]   (min, avg, max) = (66848.074, 67763.452, 68579.156), stdev = 625.523
[info]   CI (99.9%): [65354.787, 70172.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2816.166 ±(99.9%) 99.884 MB/sec [Average]
[info]   (min, avg, max) = (2778.124, 2816.166, 2849.732), stdev = 25.939
[info]   CI (99.9%): [2716.282, 2916.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65400.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65400.006, 65400.007, 65400.007), stdev = 0.001
[info]   CI (99.9%): [65400.006, 65400.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2836.940 ±(99.9%) 738.540 MB/sec [Average]
[info]   (min, avg, max) = (2667.224, 2836.940, 3060.718), stdev = 191.797
[info]   CI (99.9%): [2098.399, 3575.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65912.812 ±(99.9%) 19076.730 B/op [Average]
[info]   (min, avg, max) = (61211.522, 65912.812, 71344.824), stdev = 4954.166
[info]   CI (99.9%): [46836.083, 84989.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.187), stdev = 0.033
[info]   CI (99.9%): [0.019, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.387 ±(99.9%) 3.016 B/op [Average]
[info]   (min, avg, max) = (2.423, 3.387, 4.411), stdev = 0.783
[info]   CI (99.9%): [0.371, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 12.000), stdev = 1.732
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 62.42% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140705.498 ops/s
[info] # Warmup Iteration   2: 172920.588 ops/s
[info] # Warmup Iteration   3: 176543.329 ops/s
[info] Iteration   1: 173845.747 ops/s
[info]                  ·gc.alloc.rate:                   1114.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8970.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 176891.320 ops/s
[info]                  ·gc.alloc.rate:                   1133.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8845.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 176312.942 ops/s
[info]                  ·gc.alloc.rate:                   1130.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11880.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 176917.862 ops/s
[info]                  ·gc.alloc.rate:                   1133.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8915.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 177284.868 ops/s
[info]                  ·gc.alloc.rate:                   1136.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11910.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.739 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   176250.548 ±(99.9%) 5346.947 ops/s [Average]
[info]   (min, avg, max) = (173845.747, 176250.548, 177284.868), stdev = 1388.585
[info]   CI (99.9%): [170903.600, 181597.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1129.754 ±(99.9%) 34.479 MB/sec [Average]
[info]   (min, avg, max) = (1114.251, 1129.754, 1136.550), stdev = 8.954
[info]   CI (99.9%): [1095.275, 1164.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10088.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10088.002, 10088.003, 10088.003), stdev = 0.001
[info]   CI (99.9%): [10088.002, 10088.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1132.035 ±(99.9%) 718.958 MB/sec [Average]
[info]   (min, avg, max) = (990.855, 1132.035, 1341.859), stdev = 186.711
[info]   CI (99.9%): [413.077, 1850.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10104.725 ±(99.9%) 6297.670 B/op [Average]
[info]   (min, avg, max) = (8845.854, 10104.725, 11910.327), stdev = 1635.485
[info]   CI (99.9%): [3807.055, 16402.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.631 ±(99.9%) 1.387 B/op [Average]
[info]   (min, avg, max) = (0.188, 0.631, 1.111), stdev = 0.360
[info]   CI (99.9%): [≈ 0, 2.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 62.73% complete, ETA 00:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384657.112 ops/s
[info] # Warmup Iteration   2: 534753.478 ops/s
[info] # Warmup Iteration   3: 533302.402 ops/s
[info] Iteration   1: 516615.401 ops/s
[info]                  ·gc.alloc.rate:                   509.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1774.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 513653.968 ops/s
[info]                  ·gc.alloc.rate:                   506.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2003.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 538129.987 ops/s
[info]                  ·gc.alloc.rate:                   530.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 537136.852 ops/s
[info]                  ·gc.alloc.rate:                   529.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1916.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 540003.863 ops/s
[info]                  ·gc.alloc.rate:               532.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 955.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   529108.014 ±(99.9%) 49442.579 ops/s [Average]
[info]   (min, avg, max) = (513653.968, 529108.014, 540003.863), stdev = 12840.081
[info]   CI (99.9%): [479665.435, 578550.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   521.754 ±(99.9%) 48.801 MB/sec [Average]
[info]   (min, avg, max) = (506.511, 521.754, 532.546), stdev = 12.673
[info]   CI (99.9%): [472.953, 570.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.064 ±(99.9%) 648.332 MB/sec [Average]
[info]   (min, avg, max) = (327.061, 509.064, 654.140), stdev = 168.370
[info]   CI (99.9%): [≈ 0, 1157.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1521.337 ±(99.9%) 2012.322 B/op [Average]
[info]   (min, avg, max) = (955.215, 1521.337, 2003.405), stdev = 522.594
[info]   CI (99.9%): [≈ 0, 3533.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.460 ±(99.9%) 3.653 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 2.156), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.400 ±(99.9%) 11.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.400, 6.570), stdev = 2.891
[info]   CI (99.9%): [≈ 0, 12.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 63.03% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 913422.225 ops/s
[info] # Warmup Iteration   2: 998574.441 ops/s
[info] # Warmup Iteration   3: 1001994.940 ops/s
[info] Iteration   1: 998005.711 ops/s
[info]                  ·gc.alloc.rate:                   740.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 994623.956 ops/s
[info]                  ·gc.alloc.rate:                   738.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1047.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1010061.376 ops/s
[info]                  ·gc.alloc.rate:                   749.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1033.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 996723.178 ops/s
[info]                  ·gc.alloc.rate:                   739.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1048.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1011569.615 ops/s
[info]                  ·gc.alloc.rate:                   750.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1554.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1002196.767 ±(99.9%) 30719.292 ops/s [Average]
[info]   (min, avg, max) = (994623.956, 1002196.767, 1011569.615), stdev = 7977.703
[info]   CI (99.9%): [971477.475, 1032916.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   743.784 ±(99.9%) 22.686 MB/sec [Average]
[info]   (min, avg, max) = (738.084, 743.784, 750.688), stdev = 5.892
[info]   CI (99.9%): [721.098, 766.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.186 ±(99.9%) 578.341 MB/sec [Average]
[info]   (min, avg, max) = (662.121, 730.186, 998.856), stdev = 150.193
[info]   CI (99.9%): [151.844, 1308.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1145.726 ±(99.9%) 879.407 B/op [Average]
[info]   (min, avg, max) = (1033.783, 1145.726, 1554.125), stdev = 228.379
[info]   CI (99.9%): [266.319, 2025.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.124 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.124, 0.165), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.33% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1039348.517 ops/s
[info] # Warmup Iteration   2: 1128238.605 ops/s
[info] # Warmup Iteration   3: 1131201.412 ops/s
[info] Iteration   1: 1130361.557 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1131776.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1130808.374 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1131065.300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1131161.296 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1131034.598 ±(99.9%) 1992.979 ops/s [Average]
[info]   (min, avg, max) = (1130361.557, 1131034.598, 1131776.460), stdev = 517.570
[info]   CI (99.9%): [1129041.619, 1133027.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 63.64% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190780.461 ops/s
[info] # Warmup Iteration   2: 321187.067 ops/s
[info] # Warmup Iteration   3: 323944.451 ops/s
[info] Iteration   1: 329626.820 ops/s
[info]                  ·gc.alloc.rate:                   899.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4666.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 324633.944 ops/s
[info]                  ·gc.alloc.rate:                   886.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3161.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.606 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 326336.394 ops/s
[info]                  ·gc.alloc.rate:                   891.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4732.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 329395.759 ops/s
[info]                  ·gc.alloc.rate:                   899.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4717.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 328829.536 ops/s
[info]                  ·gc.alloc.rate:                   897.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4744.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   327764.491 ±(99.9%) 8415.091 ops/s [Average]
[info]   (min, avg, max) = (324633.944, 327764.491, 329626.820), stdev = 2185.372
[info]   CI (99.9%): [319349.400, 336179.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   894.879 ±(99.9%) 22.422 MB/sec [Average]
[info]   (min, avg, max) = (886.461, 894.879, 899.720), stdev = 5.823
[info]   CI (99.9%): [872.457, 917.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   918.026 ±(99.9%) 572.119 MB/sec [Average]
[info]   (min, avg, max) = (652.422, 918.026, 991.643), stdev = 148.578
[info]   CI (99.9%): [345.907, 1490.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4404.244 ±(99.9%) 2676.924 B/op [Average]
[info]   (min, avg, max) = (3161.795, 4404.244, 4744.096), stdev = 695.189
[info]   CI (99.9%): [1727.320, 7081.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.440 ±(99.9%) 0.445 B/op [Average]
[info]   (min, avg, max) = (0.301, 0.440, 0.606), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 63.94% complete, ETA 00:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491.757 ops/s
[info] # Warmup Iteration   2: 689.612 ops/s
[info] # Warmup Iteration   3: 693.166 ops/s
[info] Iteration   1: 696.512 ops/s
[info]                  ·gc.alloc.rate:                   1453.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2981746.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 683.087 ops/s
[info]                  ·gc.alloc.rate:                   1432.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              3300110.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3817951.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287.439 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 691.303 ops/s
[info]                  ·gc.alloc.rate:                   1443.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3036627.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 687.834 ops/s
[info]                  ·gc.alloc.rate:                   1435.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3069523.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.256 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 677.514 ops/s
[info]                  ·gc.alloc.rate:                   1414.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3127169.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   687.250 ±(99.9%) 28.208 ops/s [Average]
[info]   (min, avg, max) = (677.514, 687.250, 696.512), stdev = 7.326
[info]   CI (99.9%): [659.042, 715.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1436.147 ±(99.9%) 55.505 MB/sec [Average]
[info]   (min, avg, max) = (1414.854, 1436.147, 1453.936), stdev = 14.415
[info]   CI (99.9%): [1380.641, 1491.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3287952.277 ±(99.9%) 26171.900 B/op [Average]
[info]   (min, avg, max) = (3284912.620, 3287952.277, 3300110.690), stdev = 6796.759
[info]   CI (99.9%): [3261780.377, 3314124.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1400.047 ±(99.9%) 556.282 MB/sec [Average]
[info]   (min, avg, max) = (1319.752, 1400.047, 1657.828), stdev = 144.465
[info]   CI (99.9%): [843.766, 1956.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3206603.623 ±(99.9%) 1331536.438 B/op [Average]
[info]   (min, avg, max) = (2981746.961, 3206603.623, 3817951.064), stdev = 345795.784
[info]   CI (99.9%): [1875067.185, 4538140.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   143.351 ±(99.9%) 346.343 B/op [Average]
[info]   (min, avg, max) = (47.013, 143.351, 287.439), stdev = 89.944
[info]   CI (99.9%): [≈ 0, 489.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 64.24% complete, ETA 00:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 377.649 ops/s
[info] # Warmup Iteration   2: 645.952 ops/s
[info] # Warmup Iteration   3: 665.158 ops/s
[info] Iteration   1: 663.993 ops/s
[info]                  ·gc.alloc.rate:                   1377.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              3262536.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3092116.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.550 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 663.718 ops/s
[info]                  ·gc.alloc.rate:                   1376.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              3262565.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3117302.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.699 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 666.620 ops/s
[info]                  ·gc.alloc.rate:                   1382.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              3262536.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3125290.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.510 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 658.125 ops/s
[info]                  ·gc.alloc.rate:                   1365.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              3262536.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3182324.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.724 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 636.105 ops/s
[info]                  ·gc.alloc.rate:                   1319.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              3262536.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3310339.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.882 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   657.712 ±(99.9%) 48.013 ops/s [Average]
[info]   (min, avg, max) = (636.105, 657.712, 666.620), stdev = 12.469
[info]   CI (99.9%): [609.699, 705.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1364.009 ±(99.9%) 98.894 MB/sec [Average]
[info]   (min, avg, max) = (1319.356, 1364.009, 1382.022), stdev = 25.682
[info]   CI (99.9%): [1265.115, 1462.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3262542.418 ±(99.9%) 49.207 B/op [Average]
[info]   (min, avg, max) = (3262536.678, 3262542.418, 3262565.277), stdev = 12.779
[info]   CI (99.9%): [3262493.211, 3262591.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1322.893 ±(99.9%) 51.312 MB/sec [Average]
[info]   (min, avg, max) = (1305.165, 1322.893, 1338.687), stdev = 13.325
[info]   CI (99.9%): [1271.581, 1374.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3165474.936 ±(99.9%) 336719.201 B/op [Average]
[info]   (min, avg, max) = (3092116.595, 3165474.936, 3310339.617), stdev = 87444.907
[info]   CI (99.9%): [2828755.735, 3502194.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   109.273 ±(99.9%) 205.784 B/op [Average]
[info]   (min, avg, max) = (49.724, 109.273, 196.510), stdev = 53.442
[info]   CI (99.9%): [≈ 0, 315.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 64.55% complete, ETA 00:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20072.335 ops/s
[info] # Warmup Iteration   2: 30301.964 ops/s
[info] # Warmup Iteration   3: 29849.369 ops/s
[info] Iteration   1: 29718.331 ops/s
[info]                  ·gc.alloc.rate:                   536.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          586.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31080.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30315.982 ops/s
[info]                  ·gc.alloc.rate:                   547.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34341.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30303.215 ops/s
[info]                  ·gc.alloc.rate:                   547.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          330.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17160.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30246.841 ops/s
[info]                  ·gc.alloc.rate:               546.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34384.087 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 29534.973 ops/s
[info]                  ·gc.alloc.rate:                   533.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35248.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   30023.868 ±(99.9%) 1421.943 ops/s [Average]
[info]   (min, avg, max) = (29534.973, 30023.868, 30315.982), stdev = 369.274
[info]   CI (99.9%): [28601.925, 31445.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   542.434 ±(99.9%) 25.653 MB/sec [Average]
[info]   (min, avg, max) = (533.620, 542.434, 547.757), stdev = 6.662
[info]   CI (99.9%): [516.781, 568.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28432.016 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (28432.014, 28432.016, 28432.021), stdev = 0.003
[info]   CI (99.9%): [28432.004, 28432.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   580.264 ±(99.9%) 551.945 MB/sec [Average]
[info]   (min, avg, max) = (330.414, 580.264, 661.607), stdev = 143.338
[info]   CI (99.9%): [28.319, 1132.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30442.883 ±(99.9%) 29240.746 B/op [Average]
[info]   (min, avg, max) = (17160.278, 30442.883, 35248.340), stdev = 7593.729
[info]   CI (99.9%): [1202.137, 59683.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.467 ±(99.9%) 3.662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 2.167), stdev = 0.951
[info]   CI (99.9%): [≈ 0, 4.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24.703 ±(99.9%) 193.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.703, 114.755), stdev = 50.371
[info]   CI (99.9%): [≈ 0, 218.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 64.85% complete, ETA 00:24:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362.657 ops/s
[info] # Warmup Iteration   2: 617.147 ops/s
[info] # Warmup Iteration   3: 660.219 ops/s
[info] Iteration   1: 660.934 ops/s
[info]                  ·gc.alloc.rate:                   1408.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              3351088.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3109297.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.997 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 661.116 ops/s
[info]                  ·gc.alloc.rate:                   1408.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              3351112.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3128304.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.994 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 652.675 ops/s
[info]                  ·gc.alloc.rate:                   1389.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              3351072.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3995989.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150.542 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 658.724 ops/s
[info]                  ·gc.alloc.rate:                   1402.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              3351072.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3188689.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.724 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 663.727 ops/s
[info]                  ·gc.alloc.rate:                   1413.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              3351074.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3180469.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.699 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   659.435 ±(99.9%) 16.073 ops/s [Average]
[info]   (min, avg, max) = (652.675, 659.435, 663.727), stdev = 4.174
[info]   CI (99.9%): [643.362, 675.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1404.488 ±(99.9%) 34.717 MB/sec [Average]
[info]   (min, avg, max) = (1389.865, 1404.488, 1413.464), stdev = 9.016
[info]   CI (99.9%): [1369.771, 1439.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3351084.216 ±(99.9%) 66.874 B/op [Average]
[info]   (min, avg, max) = (3351072.656, 3351084.216, 3351112.858), stdev = 17.367
[info]   CI (99.9%): [3351017.342, 3351151.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1390.951 ±(99.9%) 576.068 MB/sec [Average]
[info]   (min, avg, max) = (1306.409, 1390.951, 1657.346), stdev = 149.603
[info]   CI (99.9%): [814.883, 1967.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3320550.172 ±(99.9%) 1459712.451 B/op [Average]
[info]   (min, avg, max) = (3109297.112, 3320550.172, 3995989.856), stdev = 379082.688
[info]   CI (99.9%): [1860837.721, 4780262.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   119.191 ±(99.9%) 218.218 B/op [Average]
[info]   (min, avg, max) = (49.724, 119.191, 197.994), stdev = 56.671
[info]   CI (99.9%): [≈ 0, 337.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 65.15% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9407.276 ops/s
[info] # Warmup Iteration   2: 12982.910 ops/s
[info] # Warmup Iteration   3: 12930.896 ops/s
[info] Iteration   1: 12910.829 ops/s
[info]                  ·gc.alloc.rate:                   1039.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120018.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12985.050 ops/s
[info]                  ·gc.alloc.rate:                   1045.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119657.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13040.648 ops/s
[info]                  ·gc.alloc.rate:                   1050.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              126774.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119616.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13044.978 ops/s
[info]                  ·gc.alloc.rate:                   1050.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120071.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12928.621 ops/s
[info]                  ·gc.alloc.rate:                   1041.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162191.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.127 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   12982.025 ±(99.9%) 238.381 ops/s [Average]
[info]   (min, avg, max) = (12910.829, 12982.025, 13044.978), stdev = 61.907
[info]   CI (99.9%): [12743.645, 13220.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1045.752 ±(99.9%) 19.293 MB/sec [Average]
[info]   (min, avg, max) = (1039.877, 1045.752, 1050.792), stdev = 5.010
[info]   CI (99.9%): [1026.459, 1065.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126750.222 ±(99.9%) 134.244 B/op [Average]
[info]   (min, avg, max) = (126712.033, 126750.222, 126776.033), stdev = 34.863
[info]   CI (99.9%): [126615.978, 126884.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1058.349 ±(99.9%) 590.991 MB/sec [Average]
[info]   (min, avg, max) = (984.944, 1058.349, 1332.810), stdev = 153.479
[info]   CI (99.9%): [467.357, 1649.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128311.128 ±(99.9%) 72935.098 B/op [Average]
[info]   (min, avg, max) = (119616.765, 128311.128, 162191.853), stdev = 18941.013
[info]   CI (99.9%): [55376.030, 201246.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.570 ±(99.9%) 14.679 B/op [Average]
[info]   (min, avg, max) = (2.538, 8.570, 12.561), stdev = 3.812
[info]   CI (99.9%): [≈ 0, 23.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 65.45% complete, ETA 00:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10701.494 ops/s
[info] # Warmup Iteration   2: 15405.090 ops/s
[info] # Warmup Iteration   3: 15422.588 ops/s
[info] Iteration   1: 15475.767 ops/s
[info]                  ·gc.alloc.rate:                   967.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              98399.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99315.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15290.871 ops/s
[info]                  ·gc.alloc.rate:                   956.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100791.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15577.574 ops/s
[info]                  ·gc.alloc.rate:                   973.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99332.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.412 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15546.811 ops/s
[info]                  ·gc.alloc.rate:                   972.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100137.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15566.845 ops/s
[info]                  ·gc.alloc.rate:                   973.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100419.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   15491.574 ±(99.9%) 458.228 ops/s [Average]
[info]   (min, avg, max) = (15290.871, 15491.574, 15577.574), stdev = 119.000
[info]   CI (99.9%): [15033.346, 15949.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   968.604 ±(99.9%) 28.311 MB/sec [Average]
[info]   (min, avg, max) = (956.251, 968.604, 973.970), stdev = 7.352
[info]   CI (99.9%): [940.293, 996.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98400.028 ±(99.9%) 0.350 B/op [Average]
[info]   (min, avg, max) = (98399.904, 98400.028, 98400.156), stdev = 0.091
[info]   CI (99.9%): [98399.678, 98400.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   984.326 ±(99.9%) 26.487 MB/sec [Average]
[info]   (min, avg, max) = (976.503, 984.326, 993.266), stdev = 6.879
[info]   CI (99.9%): [957.840, 1010.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99999.311 ±(99.9%) 2535.955 B/op [Average]
[info]   (min, avg, max) = (99315.959, 99999.311, 100791.651), stdev = 658.580
[info]   CI (99.9%): [97463.356, 102535.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.925 ±(99.9%) 10.620 B/op [Average]
[info]   (min, avg, max) = (2.107, 5.925, 8.468), stdev = 2.758
[info]   CI (99.9%): [≈ 0, 16.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 65.76% complete, ETA 00:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253160.385 ops/s
[info] # Warmup Iteration   2: 278723.390 ops/s
[info] # Warmup Iteration   3: 277542.247 ops/s
[info] Iteration   1: 278016.921 ops/s
[info]                  ·gc.alloc.rate:                   980.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5611.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 275736.595 ops/s
[info]                  ·gc.alloc.rate:                   972.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5665.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.594 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 271802.066 ops/s
[info]                  ·gc.alloc.rate:                   959.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3841.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 275843.514 ops/s
[info]                  ·gc.alloc.rate:                   973.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5695.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 279747.642 ops/s
[info]                  ·gc.alloc.rate:                   987.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5634.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   276229.348 ±(99.9%) 11482.138 ops/s [Average]
[info]   (min, avg, max) = (271802.066, 276229.348, 279747.642), stdev = 2981.875
[info]   CI (99.9%): [264747.209, 287711.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   974.571 ±(99.9%) 40.314 MB/sec [Average]
[info]   (min, avg, max) = (959.230, 974.571, 987.224), stdev = 10.469
[info]   CI (99.9%): [934.257, 1014.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   929.513 ±(99.9%) 572.367 MB/sec [Average]
[info]   (min, avg, max) = (663.729, 929.513, 1001.926), stdev = 148.642
[info]   CI (99.9%): [357.146, 1501.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5289.730 ±(99.9%) 3119.506 B/op [Average]
[info]   (min, avg, max) = (3841.644, 5289.730, 5695.581), stdev = 810.126
[info]   CI (99.9%): [2170.223, 8409.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.404 ±(99.9%) 0.529 B/op [Average]
[info]   (min, avg, max) = (0.236, 0.404, 0.594), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.06% complete, ETA 00:23:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271282.187 ops/s
[info] # Warmup Iteration   2: 291494.329 ops/s
[info] # Warmup Iteration   3: 301636.451 ops/s
[info] Iteration   1: 301151.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 301518.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 301495.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 300394.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 301687.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   301249.569 ±(99.9%) 1987.138 ops/s [Average]
[info]   (min, avg, max) = (300394.692, 301249.569, 301687.384), stdev = 516.053
[info]   CI (99.9%): [299262.431, 303236.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 66.36% complete, ETA 00:23:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10739.573 ops/s
[info] # Warmup Iteration   2: 14946.685 ops/s
[info] # Warmup Iteration   3: 15168.923 ops/s
[info] Iteration   1: 15168.059 ops/s
[info]                  ·gc.alloc.rate:                   1004.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101816.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15196.112 ops/s
[info]                  ·gc.alloc.rate:                   1006.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              104279.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101794.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15251.980 ops/s
[info]                  ·gc.alloc.rate:                   1010.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101764.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15178.824 ops/s
[info]                  ·gc.alloc.rate:                   1005.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137176.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 15280.539 ops/s
[info]                  ·gc.alloc.rate:                   1012.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              104273.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102744.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.720 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15215.103 ±(99.9%) 187.970 ops/s [Average]
[info]   (min, avg, max) = (15168.059, 15215.103, 15280.539), stdev = 48.815
[info]   CI (99.9%): [15027.132, 15403.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1008.109 ±(99.9%) 12.628 MB/sec [Average]
[info]   (min, avg, max) = (1004.881, 1008.109, 1012.398), stdev = 3.279
[info]   CI (99.9%): [995.481, 1020.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   104278.726 ±(99.9%) 11.494 B/op [Average]
[info]   (min, avg, max) = (104273.389, 104278.726, 104280.157), stdev = 2.985
[info]   CI (99.9%): [104267.231, 104290.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1054.164 ±(99.9%) 579.023 MB/sec [Average]
[info]   (min, avg, max) = (981.137, 1054.164, 1322.912), stdev = 150.371
[info]   CI (99.9%): [475.141, 1633.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   109059.150 ±(99.9%) 60544.959 B/op [Average]
[info]   (min, avg, max) = (101764.455, 109059.150, 137176.203), stdev = 15723.334
[info]   CI (99.9%): [48514.191, 169604.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.026 ±(99.9%) 13.567 B/op [Average]
[info]   (min, avg, max) = (2.148, 6.026, 10.720), stdev = 3.523
[info]   CI (99.9%): [≈ 0, 19.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 66.67% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 593126.469 ops/s
[info] # Warmup Iteration   2: 879649.531 ops/s
[info] # Warmup Iteration   3: 899100.317 ops/s
[info] Iteration   1: 889606.187 ops/s
[info]                  ·gc.alloc.rate:                   2899.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3029.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5357.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 897844.083 ops/s
[info]                  ·gc.alloc.rate:                   2926.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3047.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5339.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 891870.052 ops/s
[info]                  ·gc.alloc.rate:                   2905.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4793.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 903851.314 ops/s
[info]                  ·gc.alloc.rate:                   2946.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3062.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5330.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 903614.186 ops/s
[info]                  ·gc.alloc.rate:                   2944.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4743.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   897357.164 ±(99.9%) 25231.815 ops/s [Average]
[info]   (min, avg, max) = (889606.187, 897357.164, 903851.314), stdev = 6552.622
[info]   CI (99.9%): [872125.349, 922588.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2924.501 ±(99.9%) 82.342 MB/sec [Average]
[info]   (min, avg, max) = (2899.557, 2924.501, 2946.120), stdev = 21.384
[info]   CI (99.9%): [2842.159, 3006.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.000, 5128.000, 5128.001), stdev = 0.001
[info]   CI (99.9%): [5128.000, 5128.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2915.828 ±(99.9%) 689.959 MB/sec [Average]
[info]   (min, avg, max) = (2716.595, 2915.828, 3062.239), stdev = 179.180
[info]   CI (99.9%): [2225.868, 3605.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5112.951 ±(99.9%) 1213.180 B/op [Average]
[info]   (min, avg, max) = (4743.239, 5112.951, 5357.700), stdev = 315.059
[info]   CI (99.9%): [3899.771, 6326.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.205 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (0.109, 0.205, 0.294), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 66.97% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 763479.357 ops/s
[info] # Warmup Iteration   2: 1649737.823 ops/s
[info] # Warmup Iteration   3: 1695402.826 ops/s
[info] Iteration   1: 1689949.296 ops/s
[info]                  ·gc.alloc.rate:                   1537.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1525.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1677204.756 ops/s
[info]                  ·gc.alloc.rate:                   1526.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1549.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1692800.929 ops/s
[info]                  ·gc.alloc.rate:                   1540.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1690774.292 ops/s
[info]                  ·gc.alloc.rate:                   1538.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1558.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1689900.162 ops/s
[info]                  ·gc.alloc.rate:                   1537.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1567.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1688125.887 ±(99.9%) 23940.203 ops/s [Average]
[info]   (min, avg, max) = (1677204.756, 1688125.887, 1692800.929), stdev = 6217.195
[info]   CI (99.9%): [1664185.685, 1712066.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1536.196 ±(99.9%) 20.806 MB/sec [Average]
[info]   (min, avg, max) = (1526.720, 1536.196, 1540.328), stdev = 5.403
[info]   CI (99.9%): [1515.390, 1557.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1595.587 ±(99.9%) 573.516 MB/sec [Average]
[info]   (min, avg, max) = (1331.104, 1595.587, 1683.199), stdev = 148.940
[info]   CI (99.9%): [1022.071, 2169.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1487.528 ±(99.9%) 541.591 B/op [Average]
[info]   (min, avg, max) = (1237.490, 1487.528, 1567.231), stdev = 140.649
[info]   CI (99.9%): [945.936, 2029.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.167), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.062, 0.156), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 67.27% complete, ETA 00:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6018160.109 ops/s
[info] # Warmup Iteration   2: 7151178.463 ops/s
[info] # Warmup Iteration   3: 7158977.116 ops/s
[info] Iteration   1: 7184044.678 ops/s
[info]                  ·gc.alloc.rate:                   2155.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7176118.856 ops/s
[info]                  ·gc.alloc.rate:                   2152.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7233621.282 ops/s
[info]                  ·gc.alloc.rate:                   2169.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     515.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7233004.523 ops/s
[info]                  ·gc.alloc.rate:                   2169.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7190130.069 ops/s
[info]                  ·gc.alloc.rate:                   2156.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7203383.881 ±(99.9%) 106933.095 ops/s [Average]
[info]   (min, avg, max) = (7176118.856, 7203383.881, 7233621.282), stdev = 27770.185
[info]   CI (99.9%): [7096450.786, 7310316.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2160.506 ±(99.9%) 31.258 MB/sec [Average]
[info]   (min, avg, max) = (2152.388, 2160.506, 2169.319), stdev = 8.118
[info]   CI (99.9%): [2129.249, 2191.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2163.348 ±(99.9%) 689.789 MB/sec [Average]
[info]   (min, avg, max) = (2023.352, 2163.348, 2369.501), stdev = 179.136
[info]   CI (99.9%): [1473.559, 2853.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   472.597 ±(99.9%) 149.107 B/op [Average]
[info]   (min, avg, max) = (443.104, 472.597, 515.556), stdev = 38.723
[info]   CI (99.9%): [323.490, 621.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.020, 0.027), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 67.58% complete, ETA 00:22:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74777.613 ops/s
[info] # Warmup Iteration   2: 322916.595 ops/s
[info] # Warmup Iteration   3: 332803.784 ops/s
[info] Iteration   1: 333483.823 ops/s
[info]                  ·gc.alloc.rate:                   2028.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9315.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 330925.886 ops/s
[info]                  ·gc.alloc.rate:                   2013.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9485.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.792 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 334132.923 ops/s
[info]                  ·gc.alloc.rate:                   2032.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9471.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.490 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 331701.406 ops/s
[info]                  ·gc.alloc.rate:                   2018.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9595.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 331595.695 ops/s
[info]                  ·gc.alloc.rate:                   2017.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9637.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   332367.947 ±(99.9%) 5265.856 ops/s [Average]
[info]   (min, avg, max) = (330925.886, 332367.947, 334132.923), stdev = 1367.526
[info]   CI (99.9%): [327102.091, 337633.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2022.210 ±(99.9%) 31.955 MB/sec [Average]
[info]   (min, avg, max) = (2013.460, 2022.210, 2032.965), stdev = 8.299
[info]   CI (99.9%): [1990.255, 2054.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9576.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9576.001, 9576.001, 9576.001), stdev = 0.001
[info]   CI (99.9%): [9576.001, 9576.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2006.323 ±(99.9%) 87.452 MB/sec [Average]
[info]   (min, avg, max) = (1973.669, 2006.323, 2030.409), stdev = 22.711
[info]   CI (99.9%): [1918.871, 2093.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9501.014 ±(99.9%) 483.825 B/op [Average]
[info]   (min, avg, max) = (9315.212, 9501.014, 9637.019), stdev = 125.648
[info]   CI (99.9%): [9017.189, 9984.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.167), stdev = 0.023
[info]   CI (99.9%): [0.041, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.611 ±(99.9%) 0.424 B/op [Average]
[info]   (min, avg, max) = (0.490, 0.611, 0.792), stdev = 0.110
[info]   CI (99.9%): [0.187, 1.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 67.88% complete, ETA 00:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 666033.070 ops/s
[info] # Warmup Iteration   2: 1082570.342 ops/s
[info] # Warmup Iteration   3: 1115544.011 ops/s
[info] Iteration   1: 1097427.423 ops/s
[info]                  ·gc.alloc.rate:                   2488.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2345.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3361.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1101535.699 ops/s
[info]                  ·gc.alloc.rate:                   2498.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3854.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1109159.625 ops/s
[info]                  ·gc.alloc.rate:                   2514.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3365.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1103853.961 ops/s
[info]                  ·gc.alloc.rate:                   2502.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3388.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1097775.722 ops/s
[info]                  ·gc.alloc.rate:                   2489.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3899.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1101950.486 ±(99.9%) 18632.274 ops/s [Average]
[info]   (min, avg, max) = (1097427.423, 1101950.486, 1109159.625), stdev = 4838.742
[info]   CI (99.9%): [1083318.212, 1120582.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2498.752 ±(99.9%) 41.037 MB/sec [Average]
[info]   (min, avg, max) = (2488.864, 2498.752, 2514.690), stdev = 10.657
[info]   CI (99.9%): [2457.716, 2539.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3568.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.000, 3568.000, 3568.000), stdev = 0.001
[info]   CI (99.9%): [3568.000, 3568.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2502.659 ±(99.9%) 730.573 MB/sec [Average]
[info]   (min, avg, max) = (2345.125, 2502.659, 2720.695), stdev = 189.728
[info]   CI (99.9%): [1772.085, 3233.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3573.987 ±(99.9%) 1068.262 B/op [Average]
[info]   (min, avg, max) = (3361.938, 3573.987, 3899.550), stdev = 277.424
[info]   CI (99.9%): [2505.725, 4642.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.143, 0.208), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 68.18% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1249540.379 ops/s
[info] # Warmup Iteration   2: 3343486.151 ops/s
[info] # Warmup Iteration   3: 3340040.249 ops/s
[info] Iteration   1: 3383837.397 ops/s
[info]                  ·gc.alloc.rate:                   1961.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     918.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3397046.535 ops/s
[info]                  ·gc.alloc.rate:                   1968.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3369536.923 ops/s
[info]                  ·gc.alloc.rate:                   1952.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     939.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3380138.002 ops/s
[info]                  ·gc.alloc.rate:                   1959.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3380822.775 ops/s
[info]                  ·gc.alloc.rate:                   1960.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     787.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3382276.327 ±(99.9%) 38001.274 ops/s [Average]
[info]   (min, avg, max) = (3369536.923, 3382276.327, 3397046.535), stdev = 9868.810
[info]   CI (99.9%): [3344275.052, 3420277.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1960.354 ±(99.9%) 21.600 MB/sec [Average]
[info]   (min, avg, max) = (1952.665, 1960.354, 1968.418), stdev = 5.609
[info]   CI (99.9%): [1938.754, 1981.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1939.769 ±(99.9%) 535.994 MB/sec [Average]
[info]   (min, avg, max) = (1692.891, 1939.769, 2023.860), stdev = 139.196
[info]   CI (99.9%): [1403.775, 2475.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   902.433 ±(99.9%) 249.883 B/op [Average]
[info]   (min, avg, max) = (787.697, 902.433, 941.989), stdev = 64.894
[info]   CI (99.9%): [652.550, 1152.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.050, 0.058), stdev = 0.008
[info]   CI (99.9%): [0.019, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 68.48% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7820464.023 ops/s
[info] # Warmup Iteration   2: 8819928.498 ops/s
[info] # Warmup Iteration   3: 8433642.606 ops/s
[info] Iteration   1: 8967143.143 ops/s
[info]                  ·gc.alloc.rate:                   547.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9224716.349 ops/s
[info]                  ·gc.alloc.rate:                   562.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9244383.486 ops/s
[info]                  ·gc.alloc.rate:                   564.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 9304497.517 ops/s
[info]                  ·gc.alloc.rate:                   567.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9233788.556 ops/s
[info]                  ·gc.alloc.rate:                   563.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   9194905.810 ±(99.9%) 504767.691 ops/s [Average]
[info]   (min, avg, max) = (8967143.143, 9194905.810, 9304497.517), stdev = 131086.566
[info]   CI (99.9%): [8690138.119, 9699673.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560.969 ±(99.9%) 30.893 MB/sec [Average]
[info]   (min, avg, max) = (547.000, 560.969, 567.546), stdev = 8.023
[info]   CI (99.9%): [530.077, 591.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.514 ±(99.9%) 571.856 MB/sec [Average]
[info]   (min, avg, max) = (331.854, 597.514, 664.450), stdev = 148.509
[info]   CI (99.9%): [25.658, 1169.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   102.336 ±(99.9%) 98.913 B/op [Average]
[info]   (min, avg, max) = (56.479, 102.336, 116.566), stdev = 25.687
[info]   CI (99.9%): [3.422, 201.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 2.945 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.394, 1.761), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.517 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.069, 0.309), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 68.79% complete, ETA 00:21:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146207.018 ops/s
[info] # Warmup Iteration   2: 463105.178 ops/s
[info] # Warmup Iteration   3: 461949.931 ops/s
[info] Iteration   1: 466551.701 ops/s
[info]                  ·gc.alloc.rate:                   1645.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5528.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 467073.682 ops/s
[info]                  ·gc.alloc.rate:                   1648.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5567.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 466406.304 ops/s
[info]                  ·gc.alloc.rate:                   1645.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5620.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 469621.380 ops/s
[info]                  ·gc.alloc.rate:                   1656.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5618.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 467421.961 ops/s
[info]                  ·gc.alloc.rate:                   1648.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4536.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   467415.006 ±(99.9%) 5001.173 ops/s [Average]
[info]   (min, avg, max) = (466406.304, 467415.006, 469621.380), stdev = 1298.789
[info]   CI (99.9%): [462413.833, 472416.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1649.090 ±(99.9%) 17.496 MB/sec [Average]
[info]   (min, avg, max) = (1645.743, 1649.090, 1656.850), stdev = 4.544
[info]   CI (99.9%): [1631.594, 1666.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.001), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1596.378 ±(99.9%) 539.033 MB/sec [Average]
[info]   (min, avg, max) = (1347.284, 1596.378, 1676.844), stdev = 139.985
[info]   CI (99.9%): [1057.346, 2135.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5374.468 ±(99.9%) 1810.020 B/op [Average]
[info]   (min, avg, max) = (4536.440, 5374.468, 5620.791), stdev = 470.057
[info]   CI (99.9%): [3564.447, 7184.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.210 ±(99.9%) 0.506 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.210, 0.421), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 69.09% complete, ETA 00:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1142489.711 ops/s
[info] # Warmup Iteration   2: 2095445.073 ops/s
[info] # Warmup Iteration   3: 2097707.391 ops/s
[info] Iteration   1: 2123753.537 ops/s
[info]                  ·gc.alloc.rate:                   1349.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1633.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1209.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2098322.110 ops/s
[info]                  ·gc.alloc.rate:                   1333.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2126886.303 ops/s
[info]                  ·gc.alloc.rate:                   1351.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     980.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2117048.833 ops/s
[info]                  ·gc.alloc.rate:                   1345.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     990.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2119470.210 ops/s
[info]                  ·gc.alloc.rate:                   1346.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     995.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2117096.199 ±(99.9%) 42977.002 ops/s [Average]
[info]   (min, avg, max) = (2098322.110, 2117096.199, 2126886.303), stdev = 11160.991
[info]   CI (99.9%): [2074119.196, 2160073.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1345.436 ±(99.9%) 27.503 MB/sec [Average]
[info]   (min, avg, max) = (1333.456, 1345.436, 1351.815), stdev = 7.142
[info]   CI (99.9%): [1317.933, 1372.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1389.616 ±(99.9%) 525.478 MB/sec [Average]
[info]   (min, avg, max) = (1315.204, 1389.616, 1633.170), stdev = 136.465
[info]   CI (99.9%): [864.139, 1915.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1032.698 ±(99.9%) 382.157 B/op [Average]
[info]   (min, avg, max) = (980.962, 1032.698, 1209.977), stdev = 99.245
[info]   CI (99.9%): [650.541, 1414.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.053, 0.094), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 69.39% complete, ETA 00:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4877878.894 ops/s
[info] # Warmup Iteration   2: 4969086.752 ops/s
[info] # Warmup Iteration   3: 5212150.371 ops/s
[info] Iteration   1: 5222855.947 ops/s
[info]                  ·gc.alloc.rate:                   690.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5221807.893 ops/s
[info]                  ·gc.alloc.rate:                   690.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5240553.275 ops/s
[info]                  ·gc.alloc.rate:                   692.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5224769.446 ops/s
[info]                  ·gc.alloc.rate:                   690.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5226680.143 ops/s
[info]                  ·gc.alloc.rate:               690.745 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 200.589 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5227333.341 ±(99.9%) 29347.396 ops/s [Average]
[info]   (min, avg, max) = (5221807.893, 5227333.341, 5240553.275), stdev = 7621.426
[info]   CI (99.9%): [5197985.944, 5256680.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   690.909 ±(99.9%) 3.961 MB/sec [Average]
[info]   (min, avg, max) = (690.203, 690.909, 692.712), stdev = 1.029
[info]   CI (99.9%): [686.947, 694.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.085 ±(99.9%) 2.416 MB/sec [Average]
[info]   (min, avg, max) = (664.597, 665.085, 666.133), stdev = 0.627
[info]   CI (99.9%): [662.669, 667.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   200.226 ±(99.9%) 1.507 B/op [Average]
[info]   (min, avg, max) = (199.558, 200.226, 200.589), stdev = 0.391
[info]   CI (99.9%): [198.719, 201.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 69.70% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131218.458 ops/s
[info] # Warmup Iteration   2: 399978.733 ops/s
[info] # Warmup Iteration   3: 407069.606 ops/s
[info] Iteration   1: 405075.265 ops/s
[info]                  ·gc.alloc.rate:                   1839.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7653.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 404318.063 ops/s
[info]                  ·gc.alloc.rate:                   1835.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6455.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.486 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 404113.018 ops/s
[info]                  ·gc.alloc.rate:                   1835.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7811.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 409138.084 ops/s
[info]                  ·gc.alloc.rate:                   1857.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6469.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 404763.285 ops/s
[info]                  ·gc.alloc.rate:                   1837.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7882.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   405481.543 ±(99.9%) 8002.903 ops/s [Average]
[info]   (min, avg, max) = (404113.018, 405481.543, 409138.084), stdev = 2078.329
[info]   CI (99.9%): [397478.640, 413484.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1840.915 ±(99.9%) 35.639 MB/sec [Average]
[info]   (min, avg, max) = (1835.032, 1840.915, 1857.164), stdev = 9.255
[info]   CI (99.9%): [1805.276, 1876.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1868.966 ±(99.9%) 704.350 MB/sec [Average]
[info]   (min, avg, max) = (1658.394, 1868.966, 2027.729), stdev = 182.918
[info]   CI (99.9%): [1164.616, 2573.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7254.396 ±(99.9%) 2802.770 B/op [Average]
[info]   (min, avg, max) = (6455.420, 7254.396, 7882.336), stdev = 727.871
[info]   CI (99.9%): [4451.626, 10057.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 0.609 B/op [Average]
[info]   (min, avg, max) = (0.160, 0.275, 0.486), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 70.00% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1526682.625 ops/s
[info] # Warmup Iteration   2: 2591051.297 ops/s
[info] # Warmup Iteration   3: 2632201.469 ops/s
[info] Iteration   1: 2627110.020 ops/s
[info]                  ·gc.alloc.rate:                   1388.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     782.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2631841.367 ops/s
[info]                  ·gc.alloc.rate:                   1391.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2624374.947 ops/s
[info]                  ·gc.alloc.rate:                   1387.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     994.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2608301.980 ops/s
[info]                  ·gc.alloc.rate:                   1379.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2538252.175 ops/s
[info]                  ·gc.alloc.rate:                   1341.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     832.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2605976.098 ±(99.9%) 149706.775 ops/s [Average]
[info]   (min, avg, max) = (2538252.175, 2605976.098, 2631841.367), stdev = 38878.374
[info]   CI (99.9%): [2456269.323, 2755682.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1377.920 ±(99.9%) 79.540 MB/sec [Average]
[info]   (min, avg, max) = (1341.873, 1377.920, 1391.442), stdev = 20.656
[info]   CI (99.9%): [1298.381, 1457.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1391.916 ±(99.9%) 577.786 MB/sec [Average]
[info]   (min, avg, max) = (1307.112, 1391.916, 1659.089), stdev = 150.049
[info]   CI (99.9%): [814.129, 1969.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   840.388 ±(99.9%) 340.209 B/op [Average]
[info]   (min, avg, max) = (782.986, 840.388, 994.520), stdev = 88.351
[info]   CI (99.9%): [500.179, 1180.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.050, 0.087), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 70.30% complete, ETA 00:20:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5716426.849 ops/s
[info] # Warmup Iteration   2: 6379784.445 ops/s
[info] # Warmup Iteration   3: 6402266.849 ops/s
[info] Iteration   1: 6513424.971 ops/s
[info]                  ·gc.alloc.rate:                   993.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6276659.556 ops/s
[info]                  ·gc.alloc.rate:                   957.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6362511.608 ops/s
[info]                  ·gc.alloc.rate:                   970.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6196727.623 ops/s
[info]                  ·gc.alloc.rate:                   945.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6485121.871 ops/s
[info]                  ·gc.alloc.rate:                   988.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6366889.126 ±(99.9%) 518649.043 ops/s [Average]
[info]   (min, avg, max) = (6196727.623, 6366889.126, 6513424.971), stdev = 134691.509
[info]   CI (99.9%): [5848240.083, 6885538.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   971.161 ±(99.9%) 78.836 MB/sec [Average]
[info]   (min, avg, max) = (945.318, 971.161, 993.657), stdev = 20.473
[info]   CI (99.9%): [892.326, 1049.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   932.204 ±(99.9%) 577.352 MB/sec [Average]
[info]   (min, avg, max) = (664.063, 932.204, 1003.544), stdev = 149.936
[info]   CI (99.9%): [354.852, 1509.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   230.228 ±(99.9%) 138.739 B/op [Average]
[info]   (min, avg, max) = (166.451, 230.228, 254.221), stdev = 36.030
[info]   CI (99.9%): [91.490, 368.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.015, 0.026), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 70.61% complete, ETA 00:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265814.640 ops/s
[info] # Warmup Iteration   2: 643924.915 ops/s
[info] # Warmup Iteration   3: 637545.720 ops/s
[info] Iteration   1: 648240.693 ops/s
[info]                  ·gc.alloc.rate:                   1918.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4795.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 651053.869 ops/s
[info]                  ·gc.alloc.rate:                   1926.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4823.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 647620.270 ops/s
[info]                  ·gc.alloc.rate:                   1916.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4070.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 647709.142 ops/s
[info]                  ·gc.alloc.rate:                   1916.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4912.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 649071.427 ops/s
[info]                  ·gc.alloc.rate:                   1920.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4921.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   648739.080 ±(99.9%) 5455.698 ops/s [Average]
[info]   (min, avg, max) = (647620.270, 648739.080, 651053.869), stdev = 1416.827
[info]   CI (99.9%): [643283.382, 654194.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1919.574 ±(99.9%) 15.829 MB/sec [Average]
[info]   (min, avg, max) = (1916.248, 1919.574, 1926.395), stdev = 4.111
[info]   CI (99.9%): [1903.745, 1935.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.756 ±(99.9%) 574.181 MB/sec [Average]
[info]   (min, avg, max) = (1675.771, 1939.756, 2029.705), stdev = 149.113
[info]   CI (99.9%): [1365.576, 2513.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4704.748 ±(99.9%) 1380.899 B/op [Average]
[info]   (min, avg, max) = (4070.799, 4704.748, 4921.739), stdev = 358.615
[info]   CI (99.9%): [3323.849, 6085.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.212 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.212, 0.302), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.91% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461401.000 ops/s
[info] # Warmup Iteration   2: 825365.979 ops/s
[info] # Warmup Iteration   3: 828336.440 ops/s
[info] Iteration   1: 835815.764 ops/s
[info]                  ·gc.alloc.rate:                   2775.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5057.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 828377.035 ops/s
[info]                  ·gc.alloc.rate:                   2750.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3042.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5778.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 836064.655 ops/s
[info]                  ·gc.alloc.rate:                   2775.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5109.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 831402.489 ops/s
[info]                  ·gc.alloc.rate:                   2760.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5146.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 838158.094 ops/s
[info]                  ·gc.alloc.rate:                   2783.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5113.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   833963.608 ±(99.9%) 15306.942 ops/s [Average]
[info]   (min, avg, max) = (828377.035, 833963.608, 838158.094), stdev = 3975.164
[info]   CI (99.9%): [818656.666, 849270.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2768.902 ±(99.9%) 50.423 MB/sec [Average]
[info]   (min, avg, max) = (2750.694, 2768.902, 2783.119), stdev = 13.095
[info]   CI (99.9%): [2718.479, 2819.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2777.447 ±(99.9%) 573.379 MB/sec [Average]
[info]   (min, avg, max) = (2686.949, 2777.447, 3042.563), stdev = 148.905
[info]   CI (99.9%): [2204.068, 3350.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5241.044 ±(99.9%) 1162.899 B/op [Average]
[info]   (min, avg, max) = (5057.761, 5241.044, 5778.305), stdev = 302.001
[info]   CI (99.9%): [4078.145, 6403.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.220 ±(99.9%) 0.369 B/op [Average]
[info]   (min, avg, max) = (0.118, 0.220, 0.356), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 71.21% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318759.479 ops/s
[info] # Warmup Iteration   2: 973416.853 ops/s
[info] # Warmup Iteration   3: 994254.772 ops/s
[info] Iteration   1: 995327.322 ops/s
[info]                  ·gc.alloc.rate:                   1234.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2064.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 991757.254 ops/s
[info]                  ·gc.alloc.rate:               1230.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      984.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1561.916 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 997365.445 ops/s
[info]                  ·gc.alloc.rate:                   1236.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2083.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 998465.604 ops/s
[info]                  ·gc.alloc.rate:                   1238.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2094.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 986290.603 ops/s
[info]                  ·gc.alloc.rate:                   1223.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1598.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   993841.246 ±(99.9%) 18998.189 ops/s [Average]
[info]   (min, avg, max) = (986290.603, 993841.246, 998465.604), stdev = 4933.769
[info]   CI (99.9%): [974843.057, 1012839.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1232.709 ±(99.9%) 22.674 MB/sec [Average]
[info]   (min, avg, max) = (1223.817, 1232.709, 1238.368), stdev = 5.888
[info]   CI (99.9%): [1210.036, 1255.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.207 ±(99.9%) 686.922 MB/sec [Average]
[info]   (min, avg, max) = (984.242, 1188.207, 1328.986), stdev = 178.391
[info]   CI (99.9%): [501.285, 1875.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1880.601 ±(99.9%) 1058.400 B/op [Average]
[info]   (min, avg, max) = (1561.916, 1880.601, 2094.838), stdev = 274.863
[info]   CI (99.9%): [822.201, 2939.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.105 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.164), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 71.52% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5609992.314 ops/s
[info] # Warmup Iteration   2: 7750533.247 ops/s
[info] # Warmup Iteration   3: 7771932.510 ops/s
[info] Iteration   1: 7692922.254 ops/s
[info]                  ·gc.alloc.rate:                   352.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7633302.546 ops/s
[info]                  ·gc.alloc.rate:               349.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52.745 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7867498.985 ops/s
[info]                  ·gc.alloc.rate:                   359.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7873329.713 ops/s
[info]                  ·gc.alloc.rate:                   360.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7873402.197 ops/s
[info]                  ·gc.alloc.rate:                   360.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7788091.139 ±(99.9%) 446848.199 ops/s [Average]
[info]   (min, avg, max) = (7633302.546, 7788091.139, 7873402.197), stdev = 116045.058
[info]   CI (99.9%): [7341242.940, 8234939.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   356.334 ±(99.9%) 20.366 MB/sec [Average]
[info]   (min, avg, max) = (349.219, 356.334, 360.275), stdev = 5.289
[info]   CI (99.9%): [335.967, 376.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   353.126 ±(99.9%) 364.857 MB/sec [Average]
[info]   (min, avg, max) = (255.825, 353.126, 511.831), stdev = 94.752
[info]   CI (99.9%): [≈ 0, 717.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   71.388 ±(99.9%) 75.228 B/op [Average]
[info]   (min, avg, max) = (52.745, 71.388, 104.670), stdev = 19.536
[info]   CI (99.9%): [≈ 0, 146.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.330 ±(99.9%) 2.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.330, 1.584), stdev = 0.701
[info]   CI (99.9%): [≈ 0, 3.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.317), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.82% complete, ETA 00:19:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40350.124 ops/s
[info] # Warmup Iteration   2: 310997.540 ops/s
[info] # Warmup Iteration   3: 320024.008 ops/s
[info] Iteration   1: 320861.008 ops/s
[info]                  ·gc.alloc.rate:                   1780.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1963.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9632.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.613 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 322091.707 ops/s
[info]                  ·gc.alloc.rate:                   1788.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8074.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 321527.519 ops/s
[info]                  ·gc.alloc.rate:                   1785.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9792.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 320782.005 ops/s
[info]                  ·gc.alloc.rate:                   1780.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8234.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 320612.572 ops/s
[info]                  ·gc.alloc.rate:                   1780.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8276.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   321174.962 ±(99.9%) 2384.589 ops/s [Average]
[info]   (min, avg, max) = (320612.572, 321174.962, 322091.707), stdev = 619.270
[info]   CI (99.9%): [318790.373, 323559.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1783.238 ±(99.9%) 13.799 MB/sec [Average]
[info]   (min, avg, max) = (1780.372, 1783.238, 1788.636), stdev = 3.583
[info]   CI (99.9%): [1769.439, 1797.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8736.001, 8736.001, 8736.001), stdev = 0.001
[info]   CI (99.9%): [8736.001, 8736.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1796.669 ±(99.9%) 656.581 MB/sec [Average]
[info]   (min, avg, max) = (1653.149, 1796.669, 2001.058), stdev = 170.512
[info]   CI (99.9%): [1140.088, 2453.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8801.918 ±(99.9%) 3220.914 B/op [Average]
[info]   (min, avg, max) = (8074.257, 8801.918, 9792.279), stdev = 836.461
[info]   CI (99.9%): [5581.004, 12022.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.428 ±(99.9%) 0.582 B/op [Average]
[info]   (min, avg, max) = (0.204, 0.428, 0.613), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 1.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 72.12% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5398.385 ops/s
[info] # Warmup Iteration   2: 7757.689 ops/s
[info] # Warmup Iteration   3: 7998.734 ops/s
[info] Iteration   1: 8053.068 ops/s
[info]                  ·gc.alloc.rate:                   2072.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     390400.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.789 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8063.235 ops/s
[info]                  ·gc.alloc.rate:                   2074.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     392777.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.252 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8080.058 ops/s
[info]                  ·gc.alloc.rate:                   2079.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     394026.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.436 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8073.148 ops/s
[info]                  ·gc.alloc.rate:                   2077.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     395537.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.873 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8050.715 ops/s
[info]                  ·gc.alloc.rate:                   2071.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     397708.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.140 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8064.044 ±(99.9%) 48.636 ops/s [Average]
[info]   (min, avg, max) = (8050.715, 8064.044, 8080.058), stdev = 12.631
[info]   CI (99.9%): [8015.409, 8112.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2075.161 ±(99.9%) 12.282 MB/sec [Average]
[info]   (min, avg, max) = (2071.799, 2075.161, 2079.232), stdev = 3.189
[info]   CI (99.9%): [2062.880, 2087.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405000.183 ±(99.9%) 1.100 B/op [Average]
[info]   (min, avg, max) = (405000.053, 405000.183, 405000.694), stdev = 0.286
[info]   CI (99.9%): [404999.083, 405001.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2019.261 ±(99.9%) 56.169 MB/sec [Average]
[info]   (min, avg, max) = (1997.677, 2019.261, 2034.496), stdev = 14.587
[info]   CI (99.9%): [1963.091, 2075.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   394090.188 ±(99.9%) 10637.566 B/op [Average]
[info]   (min, avg, max) = (390400.922, 394090.188, 397708.781), stdev = 2762.542
[info]   CI (99.9%): [383452.622, 404727.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.127 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (0.050, 0.127, 0.179), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.698 ±(99.9%) 42.472 B/op [Average]
[info]   (min, avg, max) = (9.789, 24.698, 34.873), stdev = 11.030
[info]   CI (99.9%): [≈ 0, 67.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 72.42% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7483.110 ops/s
[info] # Warmup Iteration   2: 13658.978 ops/s
[info] # Warmup Iteration   3: 13773.755 ops/s
[info] Iteration   1: 13591.084 ops/s
[info]                  ·gc.alloc.rate:                   366.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59239.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13787.871 ops/s
[info]                  ·gc.alloc.rate:               371.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          42440.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29198.926 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 13295.848 ops/s
[info]                  ·gc.alloc.rate:                   358.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38282.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 310.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13519.350 ops/s
[info]                  ·gc.alloc.rate:                   364.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37648.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13492.053 ops/s
[info]                  ·gc.alloc.rate:                   363.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75531.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13537.241 ±(99.9%) 684.363 ops/s [Average]
[info]   (min, avg, max) = (13295.848, 13537.241, 13787.871), stdev = 177.727
[info]   CI (99.9%): [12852.878, 14221.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   365.116 ±(99.9%) 18.557 MB/sec [Average]
[info]   (min, avg, max) = (358.536, 365.116, 371.906), stdev = 4.819
[info]   CI (99.9%): [346.559, 383.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42440.035 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (42440.032, 42440.035, 42440.046), stdev = 0.006
[info]   CI (99.9%): [42440.011, 42440.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   412.418 ±(99.9%) 625.404 MB/sec [Average]
[info]   (min, avg, max) = (255.873, 412.418, 647.690), stdev = 162.416
[info]   CI (99.9%): [≈ 0, 1037.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47980.215 ±(99.9%) 73044.308 B/op [Average]
[info]   (min, avg, max) = (29198.926, 47980.215, 75531.041), stdev = 18969.375
[info]   CI (99.9%): [≈ 0, 121024.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.544 ±(99.9%) 4.484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.544, 2.627), stdev = 1.165
[info]   CI (99.9%): [≈ 0, 5.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   64.375 ±(99.9%) 530.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.375, 310.985), stdev = 137.871
[info]   CI (99.9%): [≈ 0, 595.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.73% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19455.200 ops/s
[info] # Warmup Iteration   2: 23592.306 ops/s
[info] # Warmup Iteration   3: 23591.138 ops/s
[info] Iteration   1: 23634.633 ops/s
[info]                  ·gc.alloc.rate:               442.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17034.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 23586.566 ops/s
[info]                  ·gc.alloc.rate:                   441.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22158.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 23695.059 ops/s
[info]                  ·gc.alloc.rate:                   443.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44090.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23677.100 ops/s
[info]                  ·gc.alloc.rate:               443.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22051.047 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 23695.625 ops/s
[info]                  ·gc.alloc.rate:                   443.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22033.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.383 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23657.796 ±(99.9%) 180.636 ops/s [Average]
[info]   (min, avg, max) = (23586.566, 23657.796, 23695.625), stdev = 46.911
[info]   CI (99.9%): [23477.161, 23838.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   442.650 ±(99.9%) 3.428 MB/sec [Average]
[info]   (min, avg, max) = (441.307, 442.650, 443.364), stdev = 0.890
[info]   CI (99.9%): [439.222, 446.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29448.020 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (29448.018, 29448.020, 29448.026), stdev = 0.004
[info]   CI (99.9%): [29448.006, 29448.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.028 ±(99.9%) 617.580 MB/sec [Average]
[info]   (min, avg, max) = (255.785, 383.028, 663.816), stdev = 160.383
[info]   CI (99.9%): [≈ 0, 1000.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25473.524 ±(99.9%) 40949.275 B/op [Average]
[info]   (min, avg, max) = (17034.148, 25473.524, 44090.720), stdev = 10634.397
[info]   CI (99.9%): [≈ 0, 66422.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.353 ±(99.9%) 2.859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.353, 1.680), stdev = 0.742
[info]   CI (99.9%): [≈ 0, 3.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23.527 ±(99.9%) 190.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.527, 112.103), stdev = 49.545
[info]   CI (99.9%): [≈ 0, 214.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 73.03% complete, ETA 00:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 899.432 ops/s
[info] # Warmup Iteration   2: 2333.229 ops/s
[info] # Warmup Iteration   3: 2350.566 ops/s
[info] Iteration   1: 2363.120 ops/s
[info]                  ·gc.alloc.rate:                   1479.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              985535.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     871151.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.861 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2368.562 ops/s
[info]                  ·gc.alloc.rate:                   1483.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1097485.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2373.581 ops/s
[info]                  ·gc.alloc.rate:               1486.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          985528.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 883011.368 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2367.610 ops/s
[info]                  ·gc.alloc.rate:               1482.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          985528.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1676.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1114333.405 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2370.731 ops/s
[info]                  ·gc.alloc.rate:               1484.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          985528.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 893853.572 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2368.721 ±(99.9%) 14.949 ops/s [Average]
[info]   (min, avg, max) = (2363.120, 2368.721, 2373.581), stdev = 3.882
[info]   CI (99.9%): [2353.772, 2383.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1483.339 ±(99.9%) 9.575 MB/sec [Average]
[info]   (min, avg, max) = (1479.767, 1483.339, 1486.428), stdev = 2.487
[info]   CI (99.9%): [1473.764, 1492.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   985529.582 ±(99.9%) 12.023 B/op [Average]
[info]   (min, avg, max) = (985528.182, 985529.582, 985535.168), stdev = 3.122
[info]   CI (99.9%): [985517.559, 985541.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1462.897 ±(99.9%) 709.797 MB/sec [Average]
[info]   (min, avg, max) = (1308.022, 1462.897, 1676.353), stdev = 184.332
[info]   CI (99.9%): [753.101, 2172.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   971967.252 ±(99.9%) 472397.585 B/op [Average]
[info]   (min, avg, max) = (871151.973, 971967.252, 1114333.405), stdev = 122680.153
[info]   CI (99.9%): [499569.667, 1444364.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.539 ±(99.9%) 29.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.539, 13.861), stdev = 7.584
[info]   CI (99.9%): [≈ 0, 34.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 73.33% complete, ETA 00:18:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6218.966 ops/s
[info] # Warmup Iteration   2: 8405.119 ops/s
[info] # Warmup Iteration   3: 8560.702 ops/s
[info] Iteration   1: 8578.494 ops/s
[info]                  ·gc.alloc.rate:                   1974.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365614.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.912 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8543.343 ops/s
[info]                  ·gc.alloc.rate:                   1967.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369916.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.182 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8578.873 ops/s
[info]                  ·gc.alloc.rate:                   1974.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370624.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.432 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8574.686 ops/s
[info]                  ·gc.alloc.rate:                   1974.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372308.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.433 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8611.147 ops/s
[info]                  ·gc.alloc.rate:                   1982.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              362297.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371743.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.988 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8577.309 ±(99.9%) 92.524 ops/s [Average]
[info]   (min, avg, max) = (8543.343, 8577.309, 8611.147), stdev = 24.028
[info]   CI (99.9%): [8484.785, 8669.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1974.754 ±(99.9%) 20.604 MB/sec [Average]
[info]   (min, avg, max) = (1967.388, 1974.754, 1982.508), stdev = 5.351
[info]   CI (99.9%): [1954.150, 1995.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362277.222 ±(99.9%) 44.517 B/op [Average]
[info]   (min, avg, max) = (362272.050, 362277.222, 362297.903), stdev = 11.561
[info]   CI (99.9%): [362232.706, 362321.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2017.083 ±(99.9%) 63.754 MB/sec [Average]
[info]   (min, avg, max) = (1992.948, 2017.083, 2034.195), stdev = 16.557
[info]   CI (99.9%): [1953.329, 2080.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   370041.399 ±(99.9%) 10185.475 B/op [Average]
[info]   (min, avg, max) = (365614.659, 370041.399, 372308.060), stdev = 2645.135
[info]   CI (99.9%): [359855.924, 380226.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.177 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.177, 0.229), stdev = 0.042
[info]   CI (99.9%): [0.016, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32.389 ±(99.9%) 29.653 B/op [Average]
[info]   (min, avg, max) = (22.912, 32.389, 42.182), stdev = 7.701
[info]   CI (99.9%): [2.736, 62.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.64% complete, ETA 00:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24891.980 ops/s
[info] # Warmup Iteration   2: 41407.079 ops/s
[info] # Warmup Iteration   3: 41075.688 ops/s
[info] Iteration   1: 41574.343 ops/s
[info]                  ·gc.alloc.rate:                   602.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24512.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 40727.434 ops/s
[info]                  ·gc.alloc.rate:               590.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          22807.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      646.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24991.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 41493.868 ops/s
[info]                  ·gc.alloc.rate:                   601.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              22808.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12292.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41625.295 ops/s
[info]                  ·gc.alloc.rate:                   603.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24531.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42102.813 ops/s
[info]                  ·gc.alloc.rate:                   610.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24328.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   41504.751 ±(99.9%) 1907.324 ops/s [Average]
[info]   (min, avg, max) = (40727.434, 41504.751, 42102.813), stdev = 495.326
[info]   CI (99.9%): [39597.426, 43412.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   601.593 ±(99.9%) 27.560 MB/sec [Average]
[info]   (min, avg, max) = (590.424, 601.593, 610.304), stdev = 7.157
[info]   CI (99.9%): [574.033, 629.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.815 ±(99.9%) 0.443 B/op [Average]
[info]   (min, avg, max) = (22807.733, 22807.815, 22808.017), stdev = 0.115
[info]   CI (99.9%): [22807.371, 22808.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   583.714 ±(99.9%) 558.907 MB/sec [Average]
[info]   (min, avg, max) = (324.084, 583.714, 650.988), stdev = 145.146
[info]   CI (99.9%): [24.807, 1142.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22131.157 ±(99.9%) 21199.690 B/op [Average]
[info]   (min, avg, max) = (12292.343, 22131.157, 24991.194), stdev = 5505.492
[info]   CI (99.9%): [931.467, 43330.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.573 ±(99.9%) 4.580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.573, 2.700), stdev = 1.189
[info]   CI (99.9%): [≈ 0, 5.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.700 ±(99.9%) 173.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.700, 102.218), stdev = 45.028
[info]   CI (99.9%): [≈ 0, 195.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 73.94% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57923.328 ops/s
[info] # Warmup Iteration   2: 65505.470 ops/s
[info] # Warmup Iteration   3: 63586.903 ops/s
[info] Iteration   1: 64716.570 ops/s
[info]                  ·gc.alloc.rate:                   487.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14280.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 65048.775 ops/s
[info]                  ·gc.alloc.rate:               490.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8018.361 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 65120.100 ops/s
[info]                  ·gc.alloc.rate:                   490.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16002.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 65787.653 ops/s
[info]                  ·gc.alloc.rate:               495.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7920.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 65586.505 ops/s
[info]                  ·gc.alloc.rate:                   494.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15888.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   65251.920 ±(99.9%) 1660.919 ops/s [Average]
[info]   (min, avg, max) = (64716.570, 65251.920, 65787.653), stdev = 431.336
[info]   CI (99.9%): [63591.001, 66912.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   491.580 ±(99.9%) 12.370 MB/sec [Average]
[info]   (min, avg, max) = (487.643, 491.580, 495.578), stdev = 3.212
[info]   CI (99.9%): [479.210, 503.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11856.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11856.007, 11856.007, 11856.007), stdev = 0.001
[info]   CI (99.9%): [11856.006, 11856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.822 ±(99.9%) 655.962 MB/sec [Average]
[info]   (min, avg, max) = (331.063, 514.822, 662.148), stdev = 170.351
[info]   CI (99.9%): [≈ 0, 1170.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12421.998 ±(99.9%) 15870.641 B/op [Average]
[info]   (min, avg, max) = (7920.216, 12421.998, 16002.649), stdev = 4121.555
[info]   CI (99.9%): [≈ 0, 28292.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.424 ±(99.9%) 3.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.424, 1.914), stdev = 0.834
[info]   CI (99.9%): [≈ 0, 3.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.310 ±(99.9%) 78.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.310, 46.539), stdev = 20.291
[info]   CI (99.9%): [≈ 0, 88.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 74.24% complete, ETA 00:18:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67066.241 ops/s
[info] # Warmup Iteration   2: 78577.362 ops/s
[info] # Warmup Iteration   3: 78707.785 ops/s
[info] Iteration   1: 78696.101 ops/s
[info]                  ·gc.alloc.rate:      1.200 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 78520.923 ops/s
[info]                  ·gc.alloc.rate:      1.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 78552.044 ops/s
[info]                  ·gc.alloc.rate:      1.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78557.947 ops/s
[info]                  ·gc.alloc.rate:      1.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 78708.171 ops/s
[info]                  ·gc.alloc.rate:      1.201 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   78607.037 ±(99.9%) 339.043 ops/s [Average]
[info]   (min, avg, max) = (78520.923, 78607.037, 78708.171), stdev = 88.048
[info]   CI (99.9%): [78267.995, 78946.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.199 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (1.198, 1.199, 1.201), stdev = 0.001
[info]   CI (99.9%): [1.193, 1.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.55% complete, ETA 00:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2405.866 ops/s
[info] # Warmup Iteration   2: 5592.902 ops/s
[info] # Warmup Iteration   3: 5699.519 ops/s
[info] Iteration   1: 5717.396 ops/s
[info]                  ·gc.alloc.rate:                   1783.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              490880.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     540697.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.189 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5716.700 ops/s
[info]                  ·gc.alloc.rate:                   1783.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              490878.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456345.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.461 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5743.908 ops/s
[info]                  ·gc.alloc.rate:                   1791.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              490880.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457679.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.811 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5731.453 ops/s
[info]                  ·gc.alloc.rate:                   1788.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              490879.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553826.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.863 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 5755.228 ops/s
[info]                  ·gc.alloc.rate:                   1795.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              490880.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     461723.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.459 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5732.937 ±(99.9%) 64.567 ops/s [Average]
[info]   (min, avg, max) = (5716.700, 5732.937, 5755.228), stdev = 16.768
[info]   CI (99.9%): [5668.370, 5797.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1788.371 ±(99.9%) 21.138 MB/sec [Average]
[info]   (min, avg, max) = (1783.125, 1788.371, 1795.802), stdev = 5.490
[info]   CI (99.9%): [1767.233, 1809.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   490880.125 ±(99.9%) 3.788 B/op [Average]
[info]   (min, avg, max) = (490878.601, 490880.125, 490880.982), stdev = 0.984
[info]   CI (99.9%): [490876.337, 490883.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1799.765 ±(99.9%) 676.681 MB/sec [Average]
[info]   (min, avg, max) = (1657.681, 1799.765, 2017.395), stdev = 175.732
[info]   CI (99.9%): [1123.084, 2476.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   494054.514 ±(99.9%) 188039.321 B/op [Average]
[info]   (min, avg, max) = (456345.116, 494054.514, 553826.640), stdev = 48833.215
[info]   CI (99.9%): [306015.193, 682093.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.557 ±(99.9%) 24.874 B/op [Average]
[info]   (min, avg, max) = (11.461, 20.557, 28.459), stdev = 6.460
[info]   CI (99.9%): [≈ 0, 45.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 74.85% complete, ETA 00:17:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4403413.874 ops/s
[info] # Warmup Iteration   2: 4426380.840 ops/s
[info] # Warmup Iteration   3: 4515094.764 ops/s
[info] Iteration   1: 4525398.124 ops/s
[info]                  ·gc.alloc.rate:                   1357.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4543205.704 ops/s
[info]                  ·gc.alloc.rate:                   1362.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4512491.125 ops/s
[info]                  ·gc.alloc.rate:                   1353.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4500415.174 ops/s
[info]                  ·gc.alloc.rate:                   1349.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4479109.191 ops/s
[info]                  ·gc.alloc.rate:                   1343.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     474.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   4512123.863 ±(99.9%) 93719.557 ops/s [Average]
[info]   (min, avg, max) = (4479109.191, 4512123.863, 4543205.704), stdev = 24338.671
[info]   CI (99.9%): [4418404.307, 4605843.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1353.321 ±(99.9%) 28.051 MB/sec [Average]
[info]   (min, avg, max) = (1343.616, 1353.321, 1362.750), stdev = 7.285
[info]   CI (99.9%): [1325.270, 1381.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1341.217 ±(99.9%) 29.144 MB/sec [Average]
[info]   (min, avg, max) = (1331.409, 1341.217, 1350.617), stdev = 7.569
[info]   CI (99.9%): [1312.073, 1370.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   467.799 ±(99.9%) 19.221 B/op [Average]
[info]   (min, avg, max) = (462.919, 467.799, 474.460), stdev = 4.992
[info]   CI (99.9%): [448.578, 487.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.023, 0.036), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 75.15% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130860.964 ops/s
[info] # Warmup Iteration   2: 340814.193 ops/s
[info] # Warmup Iteration   3: 352734.907 ops/s
[info] Iteration   1: 354744.878 ops/s
[info]                  ·gc.alloc.rate:                   1906.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7289.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.369 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 352568.915 ops/s
[info]                  ·gc.alloc.rate:                   1894.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8888.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 351032.552 ops/s
[info]                  ·gc.alloc.rate:                   1885.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9005.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.467 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 354139.939 ops/s
[info]                  ·gc.alloc.rate:                   1902.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7482.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 342755.009 ops/s
[info]                  ·gc.alloc.rate:                   1841.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9312.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   351048.259 ±(99.9%) 18697.852 ops/s [Average]
[info]   (min, avg, max) = (342755.009, 351048.259, 354744.878), stdev = 4855.773
[info]   CI (99.9%): [332350.406, 369746.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1886.185 ±(99.9%) 100.504 MB/sec [Average]
[info]   (min, avg, max) = (1841.641, 1886.185, 1906.141), stdev = 26.101
[info]   CI (99.9%): [1785.681, 1986.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8456.001, 8456.001, 8456.001), stdev = 0.001
[info]   CI (99.9%): [8456.001, 8456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1870.948 ±(99.9%) 733.251 MB/sec [Average]
[info]   (min, avg, max) = (1643.193, 1870.948, 2028.178), stdev = 190.423
[info]   CI (99.9%): [1137.697, 2604.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8395.549 ±(99.9%) 3608.189 B/op [Average]
[info]   (min, avg, max) = (7289.515, 8395.549, 9312.498), stdev = 937.035
[info]   CI (99.9%): [4787.360, 12003.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.467 ±(99.9%) 0.442 B/op [Average]
[info]   (min, avg, max) = (0.369, 0.467, 0.650), stdev = 0.115
[info]   CI (99.9%): [0.025, 0.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 75.45% complete, ETA 00:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2788683.489 ops/s
[info] # Warmup Iteration   2: 3183411.165 ops/s
[info] # Warmup Iteration   3: 3247770.304 ops/s
[info] Iteration   1: 3277186.158 ops/s
[info]                  ·gc.alloc.rate:                   483.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3275439.390 ops/s
[info]                  ·gc.alloc.rate:                   482.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3265696.322 ops/s
[info]                  ·gc.alloc.rate:                   481.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 3176226.113 ops/s
[info]                  ·gc.alloc.rate:                   468.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     328.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3284831.370 ops/s
[info]                  ·gc.alloc.rate:               484.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158.627 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3255875.871 ±(99.9%) 173447.956 ops/s [Average]
[info]   (min, avg, max) = (3176226.113, 3255875.871, 3284831.370), stdev = 45043.883
[info]   CI (99.9%): [3082427.915, 3429323.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   480.019 ±(99.9%) 25.495 MB/sec [Average]
[info]   (min, avg, max) = (468.313, 480.019, 484.315), stdev = 6.621
[info]   CI (99.9%): [454.523, 505.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.795 ±(99.9%) 627.553 MB/sec [Average]
[info]   (min, avg, max) = (331.144, 448.795, 662.297), stdev = 162.974
[info]   CI (99.9%): [≈ 0, 1076.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   217.573 ±(99.9%) 314.076 B/op [Average]
[info]   (min, avg, max) = (158.627, 217.573, 328.098), stdev = 81.565
[info]   CI (99.9%): [≈ 0, 531.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.392 ±(99.9%) 3.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.392, 1.792), stdev = 0.784
[info]   CI (99.9%): [≈ 0, 3.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.188 ±(99.9%) 1.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.188, 0.861), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 75.76% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88402.440 ops/s
[info] # Warmup Iteration   2: 332085.037 ops/s
[info] # Warmup Iteration   3: 336234.843 ops/s
[info] Iteration   1: 331538.027 ops/s
[info]                  ·gc.alloc.rate:                   1299.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6188.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 336883.536 ops/s
[info]                  ·gc.alloc.rate:                   1320.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6127.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.486 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 337634.261 ops/s
[info]                  ·gc.alloc.rate:                   1323.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6154.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 337008.376 ops/s
[info]                  ·gc.alloc.rate:                   1320.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6209.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 338367.621 ops/s
[info]                  ·gc.alloc.rate:                   1326.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6221.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   336286.364 ±(99.9%) 10470.120 ops/s [Average]
[info]   (min, avg, max) = (331538.027, 336286.364, 338367.621), stdev = 2719.057
[info]   CI (99.9%): [325816.245, 346756.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1318.182 ±(99.9%) 41.697 MB/sec [Average]
[info]   (min, avg, max) = (1299.274, 1318.182, 1326.422), stdev = 10.829
[info]   CI (99.9%): [1276.485, 1359.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6168.001, 6168.001, 6168.001), stdev = 0.001
[info]   CI (99.9%): [6168.001, 6168.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.839 ±(99.9%) 52.443 MB/sec [Average]
[info]   (min, avg, max) = (1303.654, 1320.839, 1337.973), stdev = 13.619
[info]   CI (99.9%): [1268.396, 1373.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6180.440 ±(99.9%) 150.232 B/op [Average]
[info]   (min, avg, max) = (6127.728, 6180.440, 6221.716), stdev = 39.015
[info]   CI (99.9%): [6030.208, 6330.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.390 ±(99.9%) 0.466 B/op [Average]
[info]   (min, avg, max) = (0.194, 0.390, 0.494), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 12.000), stdev = 3.578
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 76.06% complete, ETA 00:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4316238.658 ops/s
[info] # Warmup Iteration   2: 6313288.882 ops/s
[info] # Warmup Iteration   3: 6414075.528 ops/s
[info] Iteration   1: 6471372.840 ops/s
[info]                  ·gc.alloc.rate:                   4046.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     988.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 6463129.171 ops/s
[info]                  ·gc.alloc.rate:                   4040.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     993.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 6467370.645 ops/s
[info]                  ·gc.alloc.rate:                   4043.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     994.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6496833.260 ops/s
[info]                  ·gc.alloc.rate:                   4062.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     989.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 6477671.835 ops/s
[info]                  ·gc.alloc.rate:                   4051.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     992.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6475275.550 ±(99.9%) 50783.637 ops/s [Average]
[info]   (min, avg, max) = (6463129.171, 6475275.550, 6496833.260), stdev = 13188.349
[info]   CI (99.9%): [6424491.914, 6526059.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4048.775 ±(99.9%) 32.124 MB/sec [Average]
[info]   (min, avg, max) = (4040.824, 4048.775, 4062.024), stdev = 8.342
[info]   CI (99.9%): [4016.651, 4080.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   984.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (984.000, 984.000, 984.000), stdev = 0.001
[info]   CI (99.9%): [984.000, 984.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4080.319 ±(99.9%) 31.085 MB/sec [Average]
[info]   (min, avg, max) = (4066.596, 4080.319, 4085.797), stdev = 8.073
[info]   CI (99.9%): [4049.235, 4111.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   991.669 ±(99.9%) 8.845 B/op [Average]
[info]   (min, avg, max) = (988.902, 991.669, 994.027), stdev = 2.297
[info]   CI (99.9%): [982.823, 1000.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.142, 0.187), stdev = 0.027
[info]   CI (99.9%): [0.037, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.030, 0.034, 0.046), stdev = 0.007
[info]   CI (99.9%): [0.009, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   60.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (12.000, 12.000, 12.000), stdev = 0.001
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 76.36% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3894805.553 ops/s
[info] # Warmup Iteration   2: 8371163.852 ops/s
[info] # Warmup Iteration   3: 8483389.957 ops/s
[info] Iteration   1: 8468217.403 ops/s
[info]                  ·gc.alloc.rate:                   3186.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3020.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8503340.919 ops/s
[info]                  ·gc.alloc.rate:                   3198.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     625.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8469513.528 ops/s
[info]                  ·gc.alloc.rate:                   3186.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8475869.203 ops/s
[info]                  ·gc.alloc.rate:                   3188.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     631.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 8484766.839 ops/s
[info]                  ·gc.alloc.rate:                   3192.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   8480341.578 ±(99.9%) 55561.371 ops/s [Average]
[info]   (min, avg, max) = (8468217.403, 8480341.578, 8503340.919), stdev = 14429.112
[info]   CI (99.9%): [8424780.208, 8535902.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3190.465 ±(99.9%) 19.979 MB/sec [Average]
[info]   (min, avg, max) = (3186.383, 3190.465, 3198.813), stdev = 5.189
[info]   CI (99.9%): [3170.486, 3210.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3184.961 ±(99.9%) 729.738 MB/sec [Average]
[info]   (min, avg, max) = (3020.692, 3184.961, 3400.954), stdev = 189.511
[info]   CI (99.9%): [2455.223, 3914.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   590.955 ±(99.9%) 133.416 B/op [Average]
[info]   (min, avg, max) = (561.216, 590.955, 631.484), stdev = 34.648
[info]   CI (99.9%): [457.540, 724.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.137, 0.208), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.025, 0.039), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 76.67% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36440862.091 ops/s
[info] # Warmup Iteration   2: 45758931.288 ops/s
[info] # Warmup Iteration   3: 47626306.349 ops/s
[info] Iteration   1: 47625357.575 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47601386.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 47624081.541 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47629859.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 46799254.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   47455987.885 ±(99.9%) 1414308.527 ops/s [Average]
[info]   (min, avg, max) = (46799254.727, 47455987.885, 47629859.547), stdev = 367291.433
[info]   CI (99.9%): [46041679.358, 48870296.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 76.97% complete, ETA 00:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13613889.189 ops/s
[info] # Warmup Iteration   2: 16433345.574 ops/s
[info] # Warmup Iteration   3: 17182962.859 ops/s
[info] Iteration   1: 16856657.548 ops/s
[info]                  ·gc.alloc.rate:                   1113.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17147034.811 ops/s
[info]                  ·gc.alloc.rate:                   1133.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17142229.981 ops/s
[info]                  ·gc.alloc.rate:                   1132.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17130154.697 ops/s
[info]                  ·gc.alloc.rate:               1132.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1007.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92.573 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 17142264.603 ops/s
[info]                  ·gc.alloc.rate:                   1132.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   17083668.328 ±(99.9%) 489248.438 ops/s [Average]
[info]   (min, avg, max) = (16856657.548, 17083668.328, 17147034.811), stdev = 127056.266
[info]   CI (99.9%): [16594419.890, 17572916.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1128.970 ±(99.9%) 32.802 MB/sec [Average]
[info]   (min, avg, max) = (1113.753, 1128.970, 1133.316), stdev = 8.519
[info]   CI (99.9%): [1096.168, 1161.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1138.681 ±(99.9%) 696.772 MB/sec [Average]
[info]   (min, avg, max) = (1002.107, 1138.681, 1340.233), stdev = 180.950
[info]   CI (99.9%): [441.909, 1835.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   104.960 ±(99.9%) 66.173 B/op [Average]
[info]   (min, avg, max) = (91.959, 104.960, 124.518), stdev = 17.185
[info]   CI (99.9%): [38.786, 171.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 77.27% complete, ETA 00:15:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4184708.363 ops/s
[info] # Warmup Iteration   2: 7367832.540 ops/s
[info] # Warmup Iteration   3: 7488331.192 ops/s
[info] Iteration   1: 7563483.556 ops/s
[info]                  ·gc.alloc.rate:                   3653.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3711.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     772.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 7429221.371 ops/s
[info]                  ·gc.alloc.rate:                   3588.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 7497501.051 ops/s
[info]                  ·gc.alloc.rate:                   3620.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3740.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     785.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 7471315.608 ops/s
[info]                  ·gc.alloc.rate:                   3607.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     717.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7516892.758 ops/s
[info]                  ·gc.alloc.rate:                   3629.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     784.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7495682.869 ±(99.9%) 193118.454 ops/s [Average]
[info]   (min, avg, max) = (7429221.371, 7495682.869, 7563483.556), stdev = 50152.249
[info]   CI (99.9%): [7302564.415, 7688801.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3619.881 ±(99.9%) 93.527 MB/sec [Average]
[info]   (min, avg, max) = (3588.000, 3619.881, 3653.094), stdev = 24.289
[info]   CI (99.9%): [3526.354, 3713.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3598.806 ±(99.9%) 705.302 MB/sec [Average]
[info]   (min, avg, max) = (3393.168, 3598.806, 3744.472), stdev = 183.165
[info]   CI (99.9%): [2893.504, 4304.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   755.438 ±(99.9%) 133.390 B/op [Average]
[info]   (min, avg, max) = (717.073, 755.438, 785.134), stdev = 34.641
[info]   CI (99.9%): [622.048, 888.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.133, 0.146), stdev = 0.011
[info]   CI (99.9%): [0.089, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.028, 0.031), stdev = 0.002
[info]   CI (99.9%): [0.018, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 77.58% complete, ETA 00:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7801132.730 ops/s
[info] # Warmup Iteration   2: 12344506.911 ops/s
[info] # Warmup Iteration   3: 12525267.579 ops/s
[info] Iteration   1: 12167375.769 ops/s
[info]                  ·gc.alloc.rate:                   2350.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2343.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12216654.009 ops/s
[info]                  ·gc.alloc.rate:                   2360.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12564874.796 ops/s
[info]                  ·gc.alloc.rate:                   2426.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     296.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12288692.860 ops/s
[info]                  ·gc.alloc.rate:                   2373.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12579889.300 ops/s
[info]                  ·gc.alloc.rate:                   2429.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     297.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   12363497.347 ±(99.9%) 753095.549 ops/s [Average]
[info]   (min, avg, max) = (12167375.769, 12363497.347, 12579889.300), stdev = 195576.523
[info]   CI (99.9%): [11610401.798, 13116592.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2388.251 ±(99.9%) 144.855 MB/sec [Average]
[info]   (min, avg, max) = (2350.261, 2388.251, 2429.932), stdev = 37.618
[info]   CI (99.9%): [2243.396, 2533.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2365.552 ±(99.9%) 55.246 MB/sec [Average]
[info]   (min, avg, max) = (2343.911, 2365.552, 2378.929), stdev = 14.347
[info]   CI (99.9%): [2310.306, 2420.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   301.154 ±(99.9%) 13.985 B/op [Average]
[info]   (min, avg, max) = (296.806, 301.154, 304.322), stdev = 3.632
[info]   CI (99.9%): [287.169, 315.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.011, 0.016), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 77.88% complete, ETA 00:15:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4811172.053 ops/s
[info] # Warmup Iteration   2: 11559077.115 ops/s
[info] # Warmup Iteration   3: 11957178.463 ops/s
[info] Iteration   1: 11874603.532 ops/s
[info]                  ·gc.alloc.rate:                   2354.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2323.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11979304.040 ops/s
[info]                  ·gc.alloc.rate:                   2375.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2345.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 11984333.952 ops/s
[info]                  ·gc.alloc.rate:                   2376.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 11939060.500 ops/s
[info]                  ·gc.alloc.rate:                   2367.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11771616.522 ops/s
[info]                  ·gc.alloc.rate:                   2333.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11909783.709 ±(99.9%) 342121.435 ops/s [Average]
[info]   (min, avg, max) = (11771616.522, 11909783.709, 11984333.952), stdev = 88847.850
[info]   CI (99.9%): [11567662.274, 12251905.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2361.381 ±(99.9%) 69.047 MB/sec [Average]
[info]   (min, avg, max) = (2333.593, 2361.381, 2376.698), stdev = 17.931
[info]   CI (99.9%): [2292.333, 2430.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2355.887 ±(99.9%) 83.363 MB/sec [Average]
[info]   (min, avg, max) = (2323.387, 2355.887, 2376.826), stdev = 21.649
[info]   CI (99.9%): [2272.524, 2439.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   311.292 ±(99.9%) 15.722 B/op [Average]
[info]   (min, avg, max) = (307.917, 311.292, 317.780), stdev = 4.083
[info]   CI (99.9%): [295.570, 327.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.014, 0.017), stdev = 0.002
[info]   CI (99.9%): [0.006, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 78.18% complete, ETA 00:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25093535.318 ops/s
[info] # Warmup Iteration   2: 32753504.751 ops/s
[info] # Warmup Iteration   3: 33528155.368 ops/s
[info] Iteration   1: 34641384.511 ops/s
[info]                  ·gc.alloc.rate:                   704.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33762545.826 ops/s
[info]                  ·gc.alloc.rate:                   686.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34616273.466 ops/s
[info]                  ·gc.alloc.rate:                   704.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 34627465.555 ops/s
[info]                  ·gc.alloc.rate:                   704.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34688175.058 ops/s
[info]                  ·gc.alloc.rate:               705.603 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30.195 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   34467168.883 ±(99.9%) 1520414.049 ops/s [Average]
[info]   (min, avg, max) = (33762545.826, 34467168.883, 34688175.058), stdev = 394846.700
[info]   CI (99.9%): [32946754.834, 35987582.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   700.952 ±(99.9%) 31.276 MB/sec [Average]
[info]   (min, avg, max) = (686.462, 700.952, 705.603), stdev = 8.122
[info]   CI (99.9%): [669.676, 732.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   664.234 ±(99.9%) 3.585 MB/sec [Average]
[info]   (min, avg, max) = (663.481, 664.234, 665.797), stdev = 0.931
[info]   CI (99.9%): [660.649, 667.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.327 ±(99.9%) 1.297 B/op [Average]
[info]   (min, avg, max) = (30.159, 30.327, 30.929), stdev = 0.337
[info]   CI (99.9%): [29.030, 31.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 78.48% complete, ETA 00:15:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45694555.059 ops/s
[info] # Warmup Iteration   2: 57309739.670 ops/s
[info] # Warmup Iteration   3: 56252241.424 ops/s
[info] Iteration   1: 58544792.467 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 58623832.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 58530900.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 58601595.925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 58627940.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   58585812.343 ±(99.9%) 173998.542 ops/s [Average]
[info]   (min, avg, max) = (58530900.237, 58585812.343, 58627940.596), stdev = 45186.869
[info]   CI (99.9%): [58411813.801, 58759810.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 78.79% complete, ETA 00:14:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13190348.937 ops/s
[info] # Warmup Iteration   2: 13282567.575 ops/s
[info] # Warmup Iteration   3: 13203674.132 ops/s
[info] Iteration   1: 13150392.457 ops/s
[info]                  ·gc.alloc.rate:                   2205.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13280512.238 ops/s
[info]                  ·gc.alloc.rate:                   2227.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13366904.856 ops/s
[info]                  ·gc.alloc.rate:                   2242.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13310297.740 ops/s
[info]                  ·gc.alloc.rate:                   2232.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13349527.971 ops/s
[info]                  ·gc.alloc.rate:                   2239.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   13291527.052 ±(99.9%) 330340.360 ops/s [Average]
[info]   (min, avg, max) = (13150392.457, 13291527.052, 13366904.856), stdev = 85788.342
[info]   CI (99.9%): [12961186.693, 13621867.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2229.677 ±(99.9%) 56.444 MB/sec [Average]
[info]   (min, avg, max) = (2205.594, 2229.677, 2242.943), stdev = 14.658
[info]   CI (99.9%): [2173.234, 2286.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2236.541 ±(99.9%) 696.866 MB/sec [Average]
[info]   (min, avg, max) = (2035.793, 2236.541, 2378.147), stdev = 180.974
[info]   CI (99.9%): [1539.675, 2933.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   264.900 ±(99.9%) 87.122 B/op [Average]
[info]   (min, avg, max) = (239.618, 264.900, 282.389), stdev = 22.625
[info]   CI (99.9%): [177.777, 352.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.011, 0.017), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 79.09% complete, ETA 00:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1556438.148 ops/s
[info] # Warmup Iteration   2: 2251107.336 ops/s
[info] # Warmup Iteration   3: 2259359.691 ops/s
[info] Iteration   1: 2279174.307 ops/s
[info]                  ·gc.alloc.rate:                   1935.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1149.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2293610.581 ops/s
[info]                  ·gc.alloc.rate:                   1947.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1379.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2286968.797 ops/s
[info]                  ·gc.alloc.rate:                   1941.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1391.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2274548.979 ops/s
[info]                  ·gc.alloc.rate:                   1930.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2293613.497 ops/s
[info]                  ·gc.alloc.rate:                   1946.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1163.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2285583.232 ±(99.9%) 32993.995 ops/s [Average]
[info]   (min, avg, max) = (2274548.979, 2285583.232, 2293613.497), stdev = 8568.436
[info]   CI (99.9%): [2252589.238, 2318577.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1940.507 ±(99.9%) 28.369 MB/sec [Average]
[info]   (min, avg, max) = (1930.710, 1940.507, 1947.808), stdev = 7.367
[info]   CI (99.9%): [1912.138, 1968.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1336.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.000, 1336.000, 1336.000), stdev = 0.001
[info]   CI (99.9%): [1336.000, 1336.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1884.900 ±(99.9%) 719.467 MB/sec [Average]
[info]   (min, avg, max) = (1665.700, 1884.900, 2029.721), stdev = 186.843
[info]   CI (99.9%): [1165.433, 2604.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1297.764 ±(99.9%) 497.492 B/op [Average]
[info]   (min, avg, max) = (1149.773, 1297.764, 1404.513), stdev = 129.197
[info]   CI (99.9%): [800.272, 1795.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (0.043, 0.080, 0.114), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 79.39% complete, ETA 00:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 439232.110 ops/s
[info] # Warmup Iteration   2: 655316.387 ops/s
[info] # Warmup Iteration   3: 650432.622 ops/s
[info] Iteration   1: 665570.919 ops/s
[info]                  ·gc.alloc.rate:                   2425.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2344.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5543.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 659458.788 ops/s
[info]                  ·gc.alloc.rate:                   2404.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6437.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 667332.123 ops/s
[info]                  ·gc.alloc.rate:                   2432.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5590.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 654371.852 ops/s
[info]                  ·gc.alloc.rate:                   2384.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5714.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 664163.242 ops/s
[info]                  ·gc.alloc.rate:                   2420.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5638.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   662179.385 ±(99.9%) 20224.874 ops/s [Average]
[info]   (min, avg, max) = (654371.852, 662179.385, 667332.123), stdev = 5252.336
[info]   CI (99.9%): [641954.510, 682404.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2413.538 ±(99.9%) 73.704 MB/sec [Average]
[info]   (min, avg, max) = (2384.819, 2413.538, 2432.083), stdev = 19.141
[info]   CI (99.9%): [2339.833, 2487.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2433.791 ±(99.9%) 571.111 MB/sec [Average]
[info]   (min, avg, max) = (2344.594, 2433.791, 2697.959), stdev = 148.316
[info]   CI (99.9%): [1862.679, 3004.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5785.116 ±(99.9%) 1424.978 B/op [Average]
[info]   (min, avg, max) = (5543.983, 5785.116, 6437.390), stdev = 370.062
[info]   CI (99.9%): [4360.138, 7210.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.100, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.237 ±(99.9%) 0.433 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.237, 0.345), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 79.70% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286260.336 ops/s
[info] # Warmup Iteration   2: 634948.828 ops/s
[info] # Warmup Iteration   3: 634445.449 ops/s
[info] Iteration   1: 642043.439 ops/s
[info]                  ·gc.alloc.rate:                   747.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1588.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 639195.720 ops/s
[info]                  ·gc.alloc.rate:                   744.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1595.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 640979.975 ops/s
[info]                  ·gc.alloc.rate:                   746.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1594.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 626759.055 ops/s
[info]                  ·gc.alloc.rate:                   729.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2454.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 640763.837 ops/s
[info]                  ·gc.alloc.rate:                   746.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1608.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   637948.405 ±(99.9%) 24402.553 ops/s [Average]
[info]   (min, avg, max) = (626759.055, 637948.405, 642043.439), stdev = 6337.266
[info]   CI (99.9%): [613545.852, 662350.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   742.853 ±(99.9%) 28.517 MB/sec [Average]
[info]   (min, avg, max) = (729.781, 742.853, 747.621), stdev = 7.406
[info]   CI (99.9%): [714.336, 771.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   715.775 ±(99.9%) 563.622 MB/sec [Average]
[info]   (min, avg, max) = (648.063, 715.775, 977.562), stdev = 146.371
[info]   CI (99.9%): [152.152, 1279.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1768.240 ±(99.9%) 1476.458 B/op [Average]
[info]   (min, avg, max) = (1588.039, 1768.240, 2454.017), stdev = 383.431
[info]   CI (99.9%): [291.783, 3244.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 0.384 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.134, 0.308), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.00% complete, ETA 00:14:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3181993.628 ops/s
[info] # Warmup Iteration   2: 3690723.030 ops/s
[info] # Warmup Iteration   3: 3692649.126 ops/s
[info] Iteration   1: 3697842.022 ops/s
[info]                  ·gc.alloc.rate:                   1465.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3657543.366 ops/s
[info]                  ·gc.alloc.rate:                   1450.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3663659.623 ops/s
[info]                  ·gc.alloc.rate:                   1452.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     721.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3683106.912 ops/s
[info]                  ·gc.alloc.rate:                   1460.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     576.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3686743.852 ops/s
[info]                  ·gc.alloc.rate:                   1461.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     577.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3677779.155 ±(99.9%) 64436.985 ops/s [Average]
[info]   (min, avg, max) = (3657543.366, 3677779.155, 3697842.022), stdev = 16734.080
[info]   CI (99.9%): [3613342.170, 3742216.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1458.292 ±(99.9%) 24.704 MB/sec [Average]
[info]   (min, avg, max) = (1450.725, 1458.292, 1465.990), stdev = 6.415
[info]   CI (99.9%): [1433.588, 1482.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1410.289 ±(99.9%) 580.389 MB/sec [Average]
[info]   (min, avg, max) = (1332.880, 1410.289, 1679.555), stdev = 150.725
[info]   CI (99.9%): [829.900, 1990.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   603.581 ±(99.9%) 254.225 B/op [Average]
[info]   (min, avg, max) = (567.342, 603.581, 721.472), stdev = 66.021
[info]   CI (99.9%): [349.355, 857.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.039, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 80.30% complete, ETA 00:13:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50486.722 ops/s
[info] # Warmup Iteration   2: 228088.983 ops/s
[info] # Warmup Iteration   3: 234156.954 ops/s
[info] Iteration   1: 235113.187 ops/s
[info]                  ·gc.alloc.rate:                   1632.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10945.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 235340.622 ops/s
[info]                  ·gc.alloc.rate:                   1634.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11023.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.696 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 233353.475 ops/s
[info]                  ·gc.alloc.rate:                   1620.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11220.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 236229.058 ops/s
[info]                  ·gc.alloc.rate:                   1640.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11155.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 236228.331 ops/s
[info]                  ·gc.alloc.rate:                   1640.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              10928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11212.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   235252.935 ±(99.9%) 4531.417 ops/s [Average]
[info]   (min, avg, max) = (233353.475, 235252.935, 236229.058), stdev = 1176.795
[info]   CI (99.9%): [230721.518, 239784.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1633.702 ±(99.9%) 31.634 MB/sec [Average]
[info]   (min, avg, max) = (1620.548, 1633.702, 1640.628), stdev = 8.215
[info]   CI (99.9%): [1602.068, 1665.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10928.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10928.002, 10928.002, 10928.002), stdev = 0.001
[info]   CI (99.9%): [10928.002, 10928.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1661.150 ±(99.9%) 75.079 MB/sec [Average]
[info]   (min, avg, max) = (1635.082, 1661.150, 1683.322), stdev = 19.498
[info]   CI (99.9%): [1586.071, 1736.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11111.639 ±(99.9%) 469.219 B/op [Average]
[info]   (min, avg, max) = (10945.428, 11111.639, 11220.879), stdev = 121.855
[info]   CI (99.9%): [10642.420, 11580.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.557 ±(99.9%) 0.752 B/op [Average]
[info]   (min, avg, max) = (0.416, 0.557, 0.832), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 1.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.61% complete, ETA 00:13:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 586887.421 ops/s
[info] # Warmup Iteration   2: 874717.175 ops/s
[info] # Warmup Iteration   3: 914932.624 ops/s
[info] Iteration   1: 903895.481 ops/s
[info]                  ·gc.alloc.rate:                   2177.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2336.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4067.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 911843.528 ops/s
[info]                  ·gc.alloc.rate:                   2197.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3480.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 906088.474 ops/s
[info]                  ·gc.alloc.rate:                   2183.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4106.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 915508.797 ops/s
[info]                  ·gc.alloc.rate:                   2206.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3495.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 910923.772 ops/s
[info]                  ·gc.alloc.rate:                   2195.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4107.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   909652.011 ±(99.9%) 17912.583 ops/s [Average]
[info]   (min, avg, max) = (903895.481, 909652.011, 915508.797), stdev = 4651.841
[info]   CI (99.9%): [891739.427, 927564.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2192.146 ±(99.9%) 44.617 MB/sec [Average]
[info]   (min, avg, max) = (2177.787, 2192.146, 2206.551), stdev = 11.587
[info]   CI (99.9%): [2147.529, 2236.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3792.000, 3792.000, 3792.001), stdev = 0.001
[info]   CI (99.9%): [3792.000, 3792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2225.951 ±(99.9%) 707.416 MB/sec [Average]
[info]   (min, avg, max) = (2017.165, 2225.951, 2378.278), stdev = 183.714
[info]   CI (99.9%): [1518.536, 2933.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3851.551 ±(99.9%) 1280.346 B/op [Average]
[info]   (min, avg, max) = (3480.410, 3851.551, 4107.734), stdev = 332.502
[info]   CI (99.9%): [2571.205, 5131.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.167), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.194 ±(99.9%) 0.230 B/op [Average]
[info]   (min, avg, max) = (0.144, 0.194, 0.287), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 80.91% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 697988.937 ops/s
[info] # Warmup Iteration   2: 1519114.277 ops/s
[info] # Warmup Iteration   3: 1573675.908 ops/s
[info] Iteration   1: 1565175.933 ops/s
[info]                  ·gc.alloc.rate:                   1026.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1559667.413 ops/s
[info]                  ·gc.alloc.rate:                   1023.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1555549.567 ops/s
[info]                  ·gc.alloc.rate:                   1019.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     992.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1564507.374 ops/s
[info]                  ·gc.alloc.rate:                   1025.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     993.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1564985.182 ops/s
[info]                  ·gc.alloc.rate:                   1026.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     998.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1561977.094 ±(99.9%) 16374.431 ops/s [Average]
[info]   (min, avg, max) = (1555549.567, 1561977.094, 1565175.933), stdev = 4252.388
[info]   CI (99.9%): [1545602.663, 1578351.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1024.350 ±(99.9%) 10.809 MB/sec [Average]
[info]   (min, avg, max) = (1019.999, 1024.350, 1026.668), stdev = 2.807
[info]   CI (99.9%): [1013.541, 1035.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   982.711 ±(99.9%) 29.048 MB/sec [Average]
[info]   (min, avg, max) = (974.234, 982.711, 992.893), stdev = 7.544
[info]   CI (99.9%): [953.663, 1011.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   990.053 ±(99.9%) 28.723 B/op [Average]
[info]   (min, avg, max) = (979.294, 990.053, 998.551), stdev = 7.459
[info]   CI (99.9%): [961.330, 1018.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.126), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 81.21% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5878289.161 ops/s
[info] # Warmup Iteration   2: 6830687.614 ops/s
[info] # Warmup Iteration   3: 6960393.247 ops/s
[info] Iteration   1: 6978641.649 ops/s
[info]                  ·gc.alloc.rate:                   780.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7032350.796 ops/s
[info]                  ·gc.alloc.rate:                   786.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7076080.342 ops/s
[info]                  ·gc.alloc.rate:                   791.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7104699.084 ops/s
[info]                  ·gc.alloc.rate:               794.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.272 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 7097619.681 ops/s
[info]                  ·gc.alloc.rate:                   793.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   7057878.310 ±(99.9%) 202231.934 ops/s [Average]
[info]   (min, avg, max) = (6978641.649, 7057878.310, 7104699.084), stdev = 52518.991
[info]   CI (99.9%): [6855646.376, 7260110.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   789.326 ±(99.9%) 23.002 MB/sec [Average]
[info]   (min, avg, max) = (780.344, 789.326, 794.792), stdev = 5.974
[info]   CI (99.9%): [766.324, 812.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   796.909 ±(99.9%) 705.476 MB/sec [Average]
[info]   (min, avg, max) = (662.106, 796.909, 999.691), stdev = 183.210
[info]   CI (99.9%): [91.433, 1502.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   177.576 ±(99.9%) 154.565 B/op [Average]
[info]   (min, avg, max) = (147.272, 177.576, 221.647), stdev = 40.140
[info]   CI (99.9%): [23.011, 332.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.52% complete, ETA 00:12:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168121.927 ops/s
[info] # Warmup Iteration   2: 461640.464 ops/s
[info] # Warmup Iteration   3: 469141.955 ops/s
[info] Iteration   1: 471171.095 ops/s
[info]                  ·gc.alloc.rate:                   1650.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5473.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 471866.837 ops/s
[info]                  ·gc.alloc.rate:                   1653.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5511.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 467522.362 ops/s
[info]                  ·gc.alloc.rate:                   1637.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5607.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 469433.895 ops/s
[info]                  ·gc.alloc.rate:                   1644.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5621.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 460309.797 ops/s
[info]                  ·gc.alloc.rate:                   1612.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5762.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.427 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   468060.797 ±(99.9%) 17897.543 ops/s [Average]
[info]   (min, avg, max) = (460309.797, 468060.797, 471866.837), stdev = 4647.935
[info]   CI (99.9%): [450163.254, 485958.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1639.587 ±(99.9%) 63.635 MB/sec [Average]
[info]   (min, avg, max) = (1612.087, 1639.587, 1653.209), stdev = 16.526
[info]   CI (99.9%): [1575.953, 1703.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5512.001, 5512.001, 5512.001), stdev = 0.001
[info]   CI (99.9%): [5512.001, 5512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.097 ±(99.9%) 71.549 MB/sec [Average]
[info]   (min, avg, max) = (1639.039, 1664.097, 1685.342), stdev = 18.581
[info]   CI (99.9%): [1592.548, 1735.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5595.247 ±(99.9%) 433.068 B/op [Average]
[info]   (min, avg, max) = (5473.745, 5595.247, 5762.470), stdev = 112.466
[info]   CI (99.9%): [5162.179, 6028.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.322 ±(99.9%) 0.415 B/op [Average]
[info]   (min, avg, max) = (0.140, 0.322, 0.427), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.82% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413494.211 ops/s
[info] # Warmup Iteration   2: 638276.119 ops/s
[info] # Warmup Iteration   3: 641419.080 ops/s
[info] Iteration   1: 643364.670 ops/s
[info]                  ·gc.alloc.rate:                   2292.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2341.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5728.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 639511.063 ops/s
[info]                  ·gc.alloc.rate:                   2278.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5801.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 639224.982 ops/s
[info]                  ·gc.alloc.rate:                   2278.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5830.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 639601.485 ops/s
[info]                  ·gc.alloc.rate:                   2279.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5009.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 639873.500 ops/s
[info]                  ·gc.alloc.rate:                   2280.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5849.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   640315.140 ±(99.9%) 6624.610 ops/s [Average]
[info]   (min, avg, max) = (639224.982, 640315.140, 643364.670), stdev = 1720.390
[info]   CI (99.9%): [633690.530, 646939.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2281.874 ±(99.9%) 22.826 MB/sec [Average]
[info]   (min, avg, max) = (2278.313, 2281.874, 2292.329), stdev = 5.928
[info]   CI (99.9%): [2259.048, 2304.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.001, 5608.001, 5608.001), stdev = 0.001
[info]   CI (99.9%): [5608.001, 5608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296.496 ±(99.9%) 564.088 MB/sec [Average]
[info]   (min, avg, max) = (2035.645, 2296.496, 2379.160), stdev = 146.492
[info]   CI (99.9%): [1732.408, 2860.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5643.820 ±(99.9%) 1377.970 B/op [Average]
[info]   (min, avg, max) = (5009.040, 5643.820, 5849.554), stdev = 357.854
[info]   CI (99.9%): [4265.850, 7021.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.005, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.276 ±(99.9%) 0.266 B/op [Average]
[info]   (min, avg, max) = (0.204, 0.276, 0.359), stdev = 0.069
[info]   CI (99.9%): [0.010, 0.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 82.12% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64708.898 ops/s
[info] # Warmup Iteration   2: 633141.464 ops/s
[info] # Warmup Iteration   3: 655703.548 ops/s
[info] Iteration   1: 648965.726 ops/s
[info]                  ·gc.alloc.rate:                   982.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          972.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2359.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 659032.397 ops/s
[info]                  ·gc.alloc.rate:                   998.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2326.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 653056.205 ops/s
[info]                  ·gc.alloc.rate:                   989.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2355.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 656297.308 ops/s
[info]                  ·gc.alloc.rate:                   994.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3147.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 657439.381 ops/s
[info]                  ·gc.alloc.rate:                   996.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2373.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   654958.203 ±(99.9%) 15411.703 ops/s [Average]
[info]   (min, avg, max) = (648965.726, 654958.203, 659032.397), stdev = 4002.370
[info]   CI (99.9%): [639546.500, 670369.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   992.159 ±(99.9%) 23.696 MB/sec [Average]
[info]   (min, avg, max) = (982.962, 992.159, 998.381), stdev = 6.154
[info]   CI (99.9%): [968.463, 1015.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2384.001, 2384.001, 2384.001), stdev = 0.001
[info]   CI (99.9%): [2384.001, 2384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1045.787 ±(99.9%) 574.364 MB/sec [Average]
[info]   (min, avg, max) = (972.863, 1045.787, 1312.275), stdev = 149.160
[info]   CI (99.9%): [471.423, 1620.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2512.579 ±(99.9%) 1367.279 B/op [Average]
[info]   (min, avg, max) = (2326.683, 2512.579, 3147.025), stdev = 355.078
[info]   CI (99.9%): [1145.301, 3879.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.160 ±(99.9%) 0.250 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.160, 0.250), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 10.000), stdev = 3.130
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 82.42% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4527314.021 ops/s
[info] # Warmup Iteration   2: 5111540.058 ops/s
[info] # Warmup Iteration   3: 5095376.200 ops/s
[info] Iteration   1: 5080962.854 ops/s
[info]                  ·gc.alloc.rate:                   1265.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     412.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5176076.413 ops/s
[info]                  ·gc.alloc.rate:                   1289.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5066535.404 ops/s
[info]                  ·gc.alloc.rate:                   1262.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5216637.586 ops/s
[info]                  ·gc.alloc.rate:                   1299.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5141040.085 ops/s
[info]                  ·gc.alloc.rate:                   1280.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     412.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5136250.468 ±(99.9%) 243445.107 ops/s [Average]
[info]   (min, avg, max) = (5066535.404, 5136250.468, 5216637.586), stdev = 63221.921
[info]   CI (99.9%): [4892805.361, 5379695.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1279.635 ±(99.9%) 60.386 MB/sec [Average]
[info]   (min, avg, max) = (1262.447, 1279.635, 1299.809), stdev = 15.682
[info]   CI (99.9%): [1219.249, 1340.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1273.101 ±(99.9%) 569.143 MB/sec [Average]
[info]   (min, avg, max) = (1008.941, 1273.101, 1348.459), stdev = 147.805
[info]   CI (99.9%): [703.958, 1842.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   390.359 ±(99.9%) 185.831 B/op [Average]
[info]   (min, avg, max) = (304.279, 390.359, 416.333), stdev = 48.260
[info]   CI (99.9%): [204.528, 576.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.167), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.025, 0.051), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.73% complete, ETA 00:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136880.668 ops/s
[info] # Warmup Iteration   2: 355965.144 ops/s
[info] # Warmup Iteration   3: 362360.132 ops/s
[info] Iteration   1: 363123.028 ops/s
[info]                  ·gc.alloc.rate:                   1888.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7124.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 362328.390 ops/s
[info]                  ·gc.alloc.rate:                   1884.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8648.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 359643.405 ops/s
[info]                  ·gc.alloc.rate:                   1870.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8788.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 359895.711 ops/s
[info]                  ·gc.alloc.rate:                   1871.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7362.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 360775.903 ops/s
[info]                  ·gc.alloc.rate:                   1876.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8847.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.454 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   361153.287 ±(99.9%) 5860.196 ops/s [Average]
[info]   (min, avg, max) = (359643.405, 361153.287, 363123.028), stdev = 1521.874
[info]   CI (99.9%): [355293.092, 367013.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1878.244 ±(99.9%) 29.484 MB/sec [Average]
[info]   (min, avg, max) = (1870.887, 1878.244, 1888.176), stdev = 7.657
[info]   CI (99.9%): [1848.760, 1907.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8184.001, 8184.001, 8184.001), stdev = 0.001
[info]   CI (99.9%): [8184.001, 8184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.282 ±(99.9%) 733.364 MB/sec [Average]
[info]   (min, avg, max) = (1643.673, 1871.282, 2028.631), stdev = 190.452
[info]   CI (99.9%): [1137.917, 2604.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8154.511 ±(99.9%) 3230.467 B/op [Average]
[info]   (min, avg, max) = (7124.243, 8154.511, 8847.547), stdev = 838.942
[info]   CI (99.9%): [4924.044, 11384.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.290 ±(99.9%) 0.572 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.290, 0.454), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 83.03% complete, ETA 00:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245398.351 ops/s
[info] # Warmup Iteration   2: 472357.758 ops/s
[info] # Warmup Iteration   3: 491231.904 ops/s
[info] Iteration   1: 481730.957 ops/s
[info]                  ·gc.alloc.rate:                   1317.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4317.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 485589.916 ops/s
[info]                  ·gc.alloc.rate:                   1328.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4301.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 486877.890 ops/s
[info]                  ·gc.alloc.rate:                   1331.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4312.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 489288.704 ops/s
[info]                  ·gc.alloc.rate:                   1338.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4311.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 489795.745 ops/s
[info]                  ·gc.alloc.rate:                   1340.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4323.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   486656.642 ±(99.9%) 12511.771 ops/s [Average]
[info]   (min, avg, max) = (481730.957, 486656.642, 489795.745), stdev = 3249.267
[info]   CI (99.9%): [474144.871, 499168.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1331.091 ±(99.9%) 34.548 MB/sec [Average]
[info]   (min, avg, max) = (1317.431, 1331.091, 1340.035), stdev = 8.972
[info]   CI (99.9%): [1296.543, 1365.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4304.001, 4304.001, 4304.001), stdev = 0.001
[info]   CI (99.9%): [4304.001, 4304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1333.983 ±(99.9%) 37.476 MB/sec [Average]
[info]   (min, avg, max) = (1321.678, 1333.983, 1346.220), stdev = 9.732
[info]   CI (99.9%): [1296.506, 1371.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4313.344 ±(99.9%) 31.748 B/op [Average]
[info]   (min, avg, max) = (4301.761, 4313.344, 4323.866), stdev = 8.245
[info]   CI (99.9%): [4281.596, 4345.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.228 ±(99.9%) 0.468 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.228, 0.337), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 83.33% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2840464.359 ops/s
[info] # Warmup Iteration   2: 3343179.488 ops/s
[info] # Warmup Iteration   3: 3378992.922 ops/s
[info] Iteration   1: 3408515.753 ops/s
[info]                  ·gc.alloc.rate:                   554.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3404062.407 ops/s
[info]                  ·gc.alloc.rate:                   553.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3321869.566 ops/s
[info]                  ·gc.alloc.rate:                   540.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3359586.429 ops/s
[info]                  ·gc.alloc.rate:               546.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.102 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3401513.054 ops/s
[info]                  ·gc.alloc.rate:                   553.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3379109.442 ±(99.9%) 144679.394 ops/s [Average]
[info]   (min, avg, max) = (3321869.566, 3379109.442, 3408515.753), stdev = 37572.779
[info]   CI (99.9%): [3234430.048, 3523788.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   549.708 ±(99.9%) 23.606 MB/sec [Average]
[info]   (min, avg, max) = (540.336, 549.708, 554.501), stdev = 6.131
[info]   CI (99.9%): [526.101, 573.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.055 ±(99.9%) 698.624 MB/sec [Average]
[info]   (min, avg, max) = (331.159, 530.055, 662.822), stdev = 181.430
[info]   CI (99.9%): [≈ 0, 1228.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   246.968 ±(99.9%) 326.781 B/op [Average]
[info]   (min, avg, max) = (153.026, 246.968, 313.721), stdev = 84.864
[info]   CI (99.9%): [≈ 0, 573.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.392 ±(99.9%) 2.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.392, 1.772), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 3.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.181 ±(99.9%) 1.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.818), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.64% complete, ETA 00:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88105.122 ops/s
[info] # Warmup Iteration   2: 319173.769 ops/s
[info] # Warmup Iteration   3: 333312.138 ops/s
[info] Iteration   1: 334776.124 ops/s
[info]                  ·gc.alloc.rate:                   1218.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6125.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 334138.620 ops/s
[info]                  ·gc.alloc.rate:                   1216.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6170.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 331109.267 ops/s
[info]                  ·gc.alloc.rate:                   1205.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4694.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 326089.123 ops/s
[info]                  ·gc.alloc.rate:                   1187.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6398.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 325907.133 ops/s
[info]                  ·gc.alloc.rate:                   1186.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6440.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   330404.053 ±(99.9%) 16382.242 ops/s [Average]
[info]   (min, avg, max) = (325907.133, 330404.053, 334776.124), stdev = 4254.416
[info]   CI (99.9%): [314021.811, 346786.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1202.675 ±(99.9%) 59.165 MB/sec [Average]
[info]   (min, avg, max) = (1186.358, 1202.675, 1218.573), stdev = 15.365
[info]   CI (99.9%): [1143.510, 1261.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5728.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5728.001, 5728.001, 5728.001), stdev = 0.001
[info]   CI (99.9%): [5728.001, 5728.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1252.160 ±(99.9%) 571.549 MB/sec [Average]
[info]   (min, avg, max) = (987.545, 1252.160, 1333.846), stdev = 148.429
[info]   CI (99.9%): [680.611, 1823.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5965.700 ±(99.9%) 2787.649 B/op [Average]
[info]   (min, avg, max) = (4694.148, 5965.700, 6440.106), stdev = 723.944
[info]   CI (99.9%): [3178.051, 8753.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.357 ±(99.9%) 0.351 B/op [Average]
[info]   (min, avg, max) = (0.294, 0.357, 0.503), stdev = 0.091
[info]   CI (99.9%): [0.007, 0.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.94% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 988447.619 ops/s
[info] # Warmup Iteration   2: 1883268.316 ops/s
[info] # Warmup Iteration   3: 1937842.797 ops/s
[info] Iteration   1: 1932633.235 ops/s
[info]                  ·gc.alloc.rate:                   3125.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2740.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1921056.829 ops/s
[info]                  ·gc.alloc.rate:                   3105.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3048.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2496.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1925734.463 ops/s
[info]                  ·gc.alloc.rate:                   3113.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2498.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1942878.196 ops/s
[info]                  ·gc.alloc.rate:                   3140.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2480.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1931323.521 ops/s
[info]                  ·gc.alloc.rate:                   3122.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2774.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1930725.249 ±(99.9%) 31640.881 ops/s [Average]
[info]   (min, avg, max) = (1921056.829, 1930725.249, 1942878.196), stdev = 8217.036
[info]   CI (99.9%): [1899084.368, 1962366.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3121.408 ±(99.9%) 51.242 MB/sec [Average]
[info]   (min, avg, max) = (3105.629, 3121.408, 3140.845), stdev = 13.307
[info]   CI (99.9%): [3070.167, 3172.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2544.000, 2544.000, 2544.000), stdev = 0.001
[info]   CI (99.9%): [2544.000, 2544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3187.699 ±(99.9%) 697.842 MB/sec [Average]
[info]   (min, avg, max) = (3048.023, 3187.699, 3404.592), stdev = 181.227
[info]   CI (99.9%): [2489.857, 3885.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2597.976 ±(99.9%) 562.626 B/op [Average]
[info]   (min, avg, max) = (2480.105, 2597.976, 2774.006), stdev = 146.112
[info]   CI (99.9%): [2035.351, 3160.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.009, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.095 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.095, 0.119), stdev = 0.023
[info]   CI (99.9%): [0.007, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 84.24% complete, ETA 00:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52839.549 ops/s
[info] # Warmup Iteration   2: 291862.826 ops/s
[info] # Warmup Iteration   3: 296322.544 ops/s
[info] Iteration   1: 303499.437 ops/s
[info]                  ·gc.alloc.rate:                   728.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3375.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 300433.740 ops/s
[info]                  ·gc.alloc.rate:                   720.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3412.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 299461.090 ops/s
[info]                  ·gc.alloc.rate:                   718.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3427.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 299774.933 ops/s
[info]                  ·gc.alloc.rate:                   719.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5149.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 299839.222 ops/s
[info]                  ·gc.alloc.rate:               719.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          3776.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3444.076 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   300601.684 ±(99.9%) 6382.956 ops/s [Average]
[info]   (min, avg, max) = (299461.090, 300601.684, 303499.437), stdev = 1657.633
[info]   CI (99.9%): [294218.728, 306984.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   721.231 ±(99.9%) 15.296 MB/sec [Average]
[info]   (min, avg, max) = (718.468, 721.231, 728.156), stdev = 3.972
[info]   CI (99.9%): [705.935, 736.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3776.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3776.001, 3776.001, 3776.002), stdev = 0.001
[info]   CI (99.9%): [3776.001, 3776.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   718.329 ±(99.9%) 565.249 MB/sec [Average]
[info]   (min, avg, max) = (650.845, 718.329, 980.895), stdev = 146.793
[info]   CI (99.9%): [153.080, 1283.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3761.879 ±(99.9%) 2989.434 B/op [Average]
[info]   (min, avg, max) = (3375.093, 3761.879, 5149.902), stdev = 776.347
[info]   CI (99.9%): [772.445, 6751.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.494 ±(99.9%) 3.984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.494, 2.344), stdev = 1.035
[info]   CI (99.9%): [≈ 0, 4.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.562 ±(99.9%) 20.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.562, 12.155), stdev = 5.364
[info]   CI (99.9%): [≈ 0, 23.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.55% complete, ETA 00:10:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 541719.260 ops/s
[info] # Warmup Iteration   2: 724953.543 ops/s
[info] # Warmup Iteration   3: 735309.582 ops/s
[info] Iteration   1: 737193.020 ops/s
[info]                  ·gc.alloc.rate:                   659.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1420.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 739175.088 ops/s
[info]                  ·gc.alloc.rate:                   661.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1415.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 735874.733 ops/s
[info]                  ·gc.alloc.rate:                   658.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1421.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 716211.034 ops/s
[info]                  ·gc.alloc.rate:                   640.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1462.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 736509.439 ops/s
[info]                  ·gc.alloc.rate:                   658.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1423.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   732992.663 ±(99.9%) 36437.068 ops/s [Average]
[info]   (min, avg, max) = (716211.034, 732992.663, 739175.088), stdev = 9462.591
[info]   CI (99.9%): [696555.595, 769429.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   655.753 ±(99.9%) 32.653 MB/sec [Average]
[info]   (min, avg, max) = (640.726, 655.753, 661.369), stdev = 8.480
[info]   CI (99.9%): [623.100, 688.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1408.001, 1408.001, 1408.001), stdev = 0.001
[info]   CI (99.9%): [1408.001, 1408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.367 ±(99.9%) 2.099 MB/sec [Average]
[info]   (min, avg, max) = (664.776, 665.367, 666.149), stdev = 0.545
[info]   CI (99.9%): [663.267, 667.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1428.838 ±(99.9%) 73.184 B/op [Average]
[info]   (min, avg, max) = (1415.569, 1428.838, 1462.416), stdev = 19.006
[info]   CI (99.9%): [1355.654, 1502.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.368 ±(99.9%) 2.584 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.368, 1.568), stdev = 0.671
[info]   CI (99.9%): [≈ 0, 2.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.786 ±(99.9%) 5.516 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.786, 3.347), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.85% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2972537.432 ops/s
[info] # Warmup Iteration   2: 3966756.127 ops/s
[info] # Warmup Iteration   3: 4025150.573 ops/s
[info] Iteration   1: 4049853.992 ops/s
[info]                  ·gc.alloc.rate:                   2367.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     913.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4040427.750 ops/s
[info]                  ·gc.alloc.rate:                   2362.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     920.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4025501.731 ops/s
[info]                  ·gc.alloc.rate:                   2353.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     927.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4031065.890 ops/s
[info]                  ·gc.alloc.rate:                   2357.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     927.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3983518.647 ops/s
[info]                  ·gc.alloc.rate:                   2328.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4026073.602 ±(99.9%) 98318.233 ops/s [Average]
[info]   (min, avg, max) = (3983518.647, 4026073.602, 4049853.992), stdev = 25532.933
[info]   CI (99.9%): [3927755.369, 4124391.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2354.061 ±(99.9%) 57.815 MB/sec [Average]
[info]   (min, avg, max) = (2328.776, 2354.061, 2367.281), stdev = 15.014
[info]   CI (99.9%): [2296.246, 2411.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2368.683 ±(99.9%) 47.445 MB/sec [Average]
[info]   (min, avg, max) = (2349.832, 2368.683, 2379.772), stdev = 12.321
[info]   CI (99.9%): [2321.238, 2416.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   925.763 ±(99.9%) 38.575 B/op [Average]
[info]   (min, avg, max) = (913.219, 925.763, 940.146), stdev = 10.018
[info]   CI (99.9%): [887.188, 964.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.033, 0.041), stdev = 0.008
[info]   CI (99.9%): [0.001, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 85.15% complete, ETA 00:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5876950.105 ops/s
[info] # Warmup Iteration   2: 7751780.151 ops/s
[info] # Warmup Iteration   3: 7846987.825 ops/s
[info] Iteration   1: 8070685.710 ops/s
[info]                  ·gc.alloc.rate:                   861.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8076767.633 ops/s
[info]                  ·gc.alloc.rate:                   862.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7853147.690 ops/s
[info]                  ·gc.alloc.rate:                   838.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8009191.945 ops/s
[info]                  ·gc.alloc.rate:                   854.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7899971.851 ops/s
[info]                  ·gc.alloc.rate:                   843.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7981952.966 ±(99.9%) 389453.112 ops/s [Average]
[info]   (min, avg, max) = (7853147.690, 7981952.966, 8076767.633), stdev = 101139.736
[info]   CI (99.9%): [7592499.854, 8371406.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   852.102 ±(99.9%) 41.876 MB/sec [Average]
[info]   (min, avg, max) = (838.277, 852.102, 862.145), stdev = 10.875
[info]   CI (99.9%): [810.226, 893.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   866.305 ±(99.9%) 703.567 MB/sec [Average]
[info]   (min, avg, max) = (664.833, 866.305, 1002.924), stdev = 182.714
[info]   CI (99.9%): [162.738, 1569.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   171.025 ±(99.9%) 143.225 B/op [Average]
[info]   (min, avg, max) = (129.551, 171.025, 200.127), stdev = 37.195
[info]   CI (99.9%): [27.799, 314.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.015, 0.021), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.45% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20161.561 ops/s
[info] # Warmup Iteration   2: 181968.070 ops/s
[info] # Warmup Iteration   3: 193305.041 ops/s
[info] Iteration   1: 198306.051 ops/s
[info]                  ·gc.alloc.rate:                   1654.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1631.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12947.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.157 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 198346.624 ops/s
[info]                  ·gc.alloc.rate:                   1654.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13058.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.991 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 194045.344 ops/s
[info]                  ·gc.alloc.rate:                   1618.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13461.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 191155.849 ops/s
[info]                  ·gc.alloc.rate:                   1594.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13769.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.857 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 193133.189 ops/s
[info]                  ·gc.alloc.rate:                   1611.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13699.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   194997.411 ±(99.9%) 12373.648 ops/s [Average]
[info]   (min, avg, max) = (191155.849, 194997.411, 198346.624), stdev = 3213.397
[info]   CI (99.9%): [182623.763, 207371.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1626.653 ±(99.9%) 103.015 MB/sec [Average]
[info]   (min, avg, max) = (1594.541, 1626.653, 1654.603), stdev = 26.753
[info]   CI (99.9%): [1523.638, 1729.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13128.002, 13128.002, 13128.002), stdev = 0.001
[info]   CI (99.9%): [13128.002, 13128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1658.196 ±(99.9%) 77.561 MB/sec [Average]
[info]   (min, avg, max) = (1631.397, 1658.196, 1681.619), stdev = 20.142
[info]   CI (99.9%): [1580.635, 1735.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13387.348 ±(99.9%) 1427.658 B/op [Average]
[info]   (min, avg, max) = (12947.667, 13387.348, 13769.196), stdev = 370.758
[info]   CI (99.9%): [11959.689, 14815.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.905 ±(99.9%) 0.946 B/op [Average]
[info]   (min, avg, max) = (0.509, 0.905, 1.157), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.76% complete, ETA 00:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 496569.690 ops/s
[info] # Warmup Iteration   2: 737442.269 ops/s
[info] # Warmup Iteration   3: 749001.229 ops/s
[info] Iteration   1: 751582.387 ops/s
[info]                  ·gc.alloc.rate:                   2895.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3027.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6339.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 743510.200 ops/s
[info]                  ·gc.alloc.rate:                   2865.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5730.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 741161.072 ops/s
[info]                  ·gc.alloc.rate:                   2855.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6488.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 753611.417 ops/s
[info]                  ·gc.alloc.rate:                   2903.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5681.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 742631.298 ops/s
[info]                  ·gc.alloc.rate:                   2862.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6492.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   746499.275 ±(99.9%) 21851.584 ops/s [Average]
[info]   (min, avg, max) = (741161.072, 746499.275, 753611.417), stdev = 5674.787
[info]   CI (99.9%): [724647.691, 768350.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2876.497 ±(99.9%) 83.222 MB/sec [Average]
[info]   (min, avg, max) = (2855.652, 2876.497, 2903.614), stdev = 21.613
[info]   CI (99.9%): [2793.275, 2959.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.001, 6064.001, 6064.001), stdev = 0.001
[info]   CI (99.9%): [6064.001, 6064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2915.241 ±(99.9%) 708.633 MB/sec [Average]
[info]   (min, avg, max) = (2707.925, 2915.241, 3064.605), stdev = 184.030
[info]   CI (99.9%): [2206.607, 3623.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6146.814 ±(99.9%) 1567.917 B/op [Average]
[info]   (min, avg, max) = (5681.800, 6146.814, 6492.927), stdev = 407.183
[info]   CI (99.9%): [4578.897, 7714.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 0.278 B/op [Average]
[info]   (min, avg, max) = (0.174, 0.272, 0.349), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 86.06% complete, ETA 00:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2330759.021 ops/s
[info] # Warmup Iteration   2: 2762983.810 ops/s
[info] # Warmup Iteration   3: 2790916.015 ops/s
[info] Iteration   1: 2793051.560 ops/s
[info]                  ·gc.alloc.rate:                   1802.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1129.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2770853.418 ops/s
[info]                  ·gc.alloc.rate:                   1789.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2766303.179 ops/s
[info]                  ·gc.alloc.rate:                   1786.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2771147.481 ops/s
[info]                  ·gc.alloc.rate:                   1789.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1152.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2802338.344 ops/s
[info]                  ·gc.alloc.rate:                   1809.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   2780738.797 ±(99.9%) 61376.586 ops/s [Average]
[info]   (min, avg, max) = (2766303.179, 2780738.797, 2802338.344), stdev = 15939.304
[info]   CI (99.9%): [2719362.211, 2842115.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1795.535 ±(99.9%) 38.004 MB/sec [Average]
[info]   (min, avg, max) = (1786.630, 1795.535, 1809.052), stdev = 9.870
[info]   CI (99.9%): [1757.531, 1833.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1819.504 ±(99.9%) 697.116 MB/sec [Average]
[info]   (min, avg, max) = (1680.002, 1819.504, 2030.585), stdev = 181.039
[info]   CI (99.9%): [1122.388, 2516.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1029.556 ±(99.9%) 393.628 B/op [Average]
[info]   (min, avg, max) = (952.348, 1029.556, 1152.787), stdev = 102.224
[info]   CI (99.9%): [635.928, 1423.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.054, 0.070), stdev = 0.013
[info]   CI (99.9%): [0.003, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.36% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66351.025 ops/s
[info] # Warmup Iteration   2: 253753.758 ops/s
[info] # Warmup Iteration   3: 262435.029 ops/s
[info] Iteration   1: 262418.290 ops/s
[info]                  ·gc.alloc.rate:                   1873.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11813.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.874 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 257726.425 ops/s
[info]                  ·gc.alloc.rate:                   1839.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10127.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 259466.134 ops/s
[info]                  ·gc.alloc.rate:                   1851.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12166.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 262653.217 ops/s
[info]                  ·gc.alloc.rate:                   1874.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10073.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 262566.291 ops/s
[info]                  ·gc.alloc.rate:                   1873.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12150.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   260966.071 ±(99.9%) 8666.348 ops/s [Average]
[info]   (min, avg, max) = (257726.425, 260966.071, 262653.217), stdev = 2250.623
[info]   CI (99.9%): [252299.723, 269632.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1862.703 ±(99.9%) 61.711 MB/sec [Average]
[info]   (min, avg, max) = (1839.846, 1862.703, 1874.628), stdev = 16.026
[info]   CI (99.9%): [1800.992, 1924.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11232.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11232.002, 11232.002, 11232.002), stdev = 0.001
[info]   CI (99.9%): [11232.001, 11232.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1868.690 ±(99.9%) 703.183 MB/sec [Average]
[info]   (min, avg, max) = (1658.915, 1868.690, 2027.078), stdev = 182.614
[info]   CI (99.9%): [1165.507, 2571.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11266.209 ±(99.9%) 4134.933 B/op [Average]
[info]   (min, avg, max) = (10073.096, 11266.209, 12166.527), stdev = 1073.829
[info]   CI (99.9%): [7131.276, 15401.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.452 ±(99.9%) 0.997 B/op [Average]
[info]   (min, avg, max) = (0.249, 0.452, 0.874), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.67% complete, ETA 00:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 566906.542 ops/s
[info] # Warmup Iteration   2: 840960.877 ops/s
[info] # Warmup Iteration   3: 844332.818 ops/s
[info] Iteration   1: 838952.206 ops/s
[info]                  ·gc.alloc.rate:                   1936.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3748.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 857205.244 ops/s
[info]                  ·gc.alloc.rate:                   1978.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3693.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 845791.760 ops/s
[info]                  ·gc.alloc.rate:                   1952.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3136.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 843508.759 ops/s
[info]                  ·gc.alloc.rate:                   1946.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3785.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 843888.252 ops/s
[info]                  ·gc.alloc.rate:                   1947.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3795.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   845869.244 ±(99.9%) 26247.479 ops/s [Average]
[info]   (min, avg, max) = (838952.206, 845869.244, 857205.244), stdev = 6816.387
[info]   CI (99.9%): [819621.765, 872116.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1952.307 ±(99.9%) 60.448 MB/sec [Average]
[info]   (min, avg, max) = (1936.324, 1952.307, 1978.290), stdev = 15.698
[info]   CI (99.9%): [1891.859, 2012.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.001, 3632.001, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.000, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1952.199 ±(99.9%) 575.438 MB/sec [Average]
[info]   (min, avg, max) = (1686.135, 1952.199, 2035.352), stdev = 149.439
[info]   CI (99.9%): [1376.761, 2527.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3632.016 ±(99.9%) 1078.421 B/op [Average]
[info]   (min, avg, max) = (3136.135, 3632.016, 3795.556), stdev = 280.063
[info]   CI (99.9%): [2553.595, 4710.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.171 ±(99.9%) 0.292 B/op [Average]
[info]   (min, avg, max) = (0.115, 0.171, 0.272), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.97% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 793798.531 ops/s
[info] # Warmup Iteration   2: 1598889.372 ops/s
[info] # Warmup Iteration   3: 1624603.816 ops/s
[info] Iteration   1: 1642874.990 ops/s
[info]                  ·gc.alloc.rate:                   893.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     621.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1631343.781 ops/s
[info]                  ·gc.alloc.rate:                   887.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     939.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1599936.724 ops/s
[info]                  ·gc.alloc.rate:                   870.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     961.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1612495.186 ops/s
[info]                  ·gc.alloc.rate:                   877.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1588356.252 ops/s
[info]                  ·gc.alloc.rate:                   864.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     652.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1615001.387 ±(99.9%) 85827.042 ops/s [Average]
[info]   (min, avg, max) = (1588356.252, 1615001.387, 1642874.990), stdev = 22289.010
[info]   CI (99.9%): [1529174.345, 1700828.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   878.549 ±(99.9%) 46.467 MB/sec [Average]
[info]   (min, avg, max) = (864.230, 878.549, 893.550), stdev = 12.067
[info]   CI (99.9%): [832.082, 925.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   848.631 ±(99.9%) 684.586 MB/sec [Average]
[info]   (min, avg, max) = (648.823, 848.631, 983.587), stdev = 177.785
[info]   CI (99.9%): [164.045, 1533.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   827.050 ±(99.9%) 669.588 B/op [Average]
[info]   (min, avg, max) = (621.557, 827.050, 961.310), stdev = 173.890
[info]   CI (99.9%): [157.461, 1496.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.125), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.061, 0.121), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.483
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.27% complete, ETA 00:08:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3833722.763 ops/s
[info] # Warmup Iteration   2: 4376673.095 ops/s
[info] # Warmup Iteration   3: 4425244.205 ops/s
[info] Iteration   1: 4272203.786 ops/s
[info]                  ·gc.alloc.rate:                   325.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4387418.149 ops/s
[info]                  ·gc.alloc.rate:               334.564 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91.762 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 4419116.584 ops/s
[info]                  ·gc.alloc.rate:                   336.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.657 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4328001.145 ops/s
[info]                  ·gc.alloc.rate:               330.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 4291961.245 ops/s
[info]                  ·gc.alloc.rate:                   327.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4339740.182 ±(99.9%) 240130.168 ops/s [Average]
[info]   (min, avg, max) = (4272203.786, 4339740.182, 4419116.584), stdev = 62361.042
[info]   CI (99.9%): [4099610.014, 4579870.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   330.934 ±(99.9%) 18.244 MB/sec [Average]
[info]   (min, avg, max) = (325.808, 330.934, 336.940), stdev = 4.738
[info]   CI (99.9%): [312.690, 349.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   352.313 ±(99.9%) 365.514 MB/sec [Average]
[info]   (min, avg, max) = (255.834, 352.313, 511.727), stdev = 94.923
[info]   CI (99.9%): [≈ 0, 717.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   128.037 ±(99.9%) 138.431 B/op [Average]
[info]   (min, avg, max) = (91.762, 128.037, 188.477), stdev = 35.950
[info]   CI (99.9%): [≈ 0, 266.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.382 ±(99.9%) 3.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.844), stdev = 0.817
[info]   CI (99.9%): [≈ 0, 3.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.136 ±(99.9%) 1.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.657), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.58% complete, ETA 00:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185097.273 ops/s
[info] # Warmup Iteration   2: 475018.078 ops/s
[info] # Warmup Iteration   3: 481892.129 ops/s
[info] Iteration   1: 481783.858 ops/s
[info]                  ·gc.alloc.rate:                   1657.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5353.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 482603.279 ops/s
[info]                  ·gc.alloc.rate:                   1660.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5388.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 482527.545 ops/s
[info]                  ·gc.alloc.rate:                   1660.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5433.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 480222.328 ops/s
[info]                  ·gc.alloc.rate:                   1653.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5497.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.273 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 477898.329 ops/s
[info]                  ·gc.alloc.rate:                   1644.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5550.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   481007.068 ±(99.9%) 7639.239 ops/s [Average]
[info]   (min, avg, max) = (477898.329, 481007.068, 482603.279), stdev = 1983.886
[info]   CI (99.9%): [473367.829, 488646.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1655.455 ±(99.9%) 25.939 MB/sec [Average]
[info]   (min, avg, max) = (1644.732, 1655.455, 1660.981), stdev = 6.736
[info]   CI (99.9%): [1629.516, 1681.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5416.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5416.001, 5416.001, 5416.001), stdev = 0.001
[info]   CI (99.9%): [5416.001, 5416.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.127 ±(99.9%) 73.102 MB/sec [Average]
[info]   (min, avg, max) = (1638.609, 1664.127, 1685.585), stdev = 18.984
[info]   CI (99.9%): [1591.025, 1737.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5444.595 ±(99.9%) 308.136 B/op [Average]
[info]   (min, avg, max) = (5353.219, 5444.595, 5550.528), stdev = 80.022
[info]   CI (99.9%): [5136.459, 5752.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.327 ±(99.9%) 0.428 B/op [Average]
[info]   (min, avg, max) = (0.204, 0.327, 0.475), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 87.88% complete, ETA 00:08:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61827.486 ops/s
[info] # Warmup Iteration   2: 572857.999 ops/s
[info] # Warmup Iteration   3: 576578.607 ops/s
[info] Iteration   1: 587884.199 ops/s
[info]                  ·gc.alloc.rate:                   959.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2601.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 593499.805 ops/s
[info]                  ·gc.alloc.rate:                   968.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2582.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 593161.893 ops/s
[info]                  ·gc.alloc.rate:                   967.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2592.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 592832.083 ops/s
[info]                  ·gc.alloc.rate:                   967.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2611.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 584770.472 ops/s
[info]                  ·gc.alloc.rate:                   954.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2661.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   590429.690 ±(99.9%) 15057.975 ops/s [Average]
[info]   (min, avg, max) = (584770.472, 590429.690, 593499.805), stdev = 3910.508
[info]   CI (99.9%): [575371.715, 605487.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   963.507 ±(99.9%) 24.950 MB/sec [Average]
[info]   (min, avg, max) = (954.155, 963.507, 968.703), stdev = 6.479
[info]   CI (99.9%): [938.557, 988.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2568.001, 2568.001, 2568.001), stdev = 0.001
[info]   CI (99.9%): [2568.001, 2568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   979.160 ±(99.9%) 27.396 MB/sec [Average]
[info]   (min, avg, max) = (971.588, 979.160, 988.907), stdev = 7.115
[info]   CI (99.9%): [951.765, 1006.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2609.857 ±(99.9%) 118.366 B/op [Average]
[info]   (min, avg, max) = (2582.569, 2609.857, 2661.533), stdev = 30.739
[info]   CI (99.9%): [2491.491, 2728.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (0.111, 0.189, 0.224), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 88.18% complete, ETA 00:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2763437.477 ops/s
[info] # Warmup Iteration   2: 3317222.493 ops/s
[info] # Warmup Iteration   3: 3348897.872 ops/s
[info] Iteration   1: 3320985.141 ops/s
[info]                  ·gc.alloc.rate:                   1570.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3270847.541 ops/s
[info]                  ·gc.alloc.rate:                   1546.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3325476.611 ops/s
[info]                  ·gc.alloc.rate:                   1571.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3336611.407 ops/s
[info]                  ·gc.alloc.rate:                   1577.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     796.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3351355.018 ops/s
[info]                  ·gc.alloc.rate:                   1584.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3321055.144 ±(99.9%) 117119.684 ops/s [Average]
[info]   (min, avg, max) = (3270847.541, 3321055.144, 3351355.018), stdev = 30415.610
[info]   CI (99.9%): [3203935.460, 3438174.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1570.099 ±(99.9%) 55.281 MB/sec [Average]
[info]   (min, avg, max) = (1546.337, 1570.099, 1584.277), stdev = 14.356
[info]   CI (99.9%): [1514.817, 1625.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.855 ±(99.9%) 578.713 MB/sec [Average]
[info]   (min, avg, max) = (1345.559, 1613.855, 1692.344), stdev = 150.290
[info]   CI (99.9%): [1035.142, 2192.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   764.804 ±(99.9%) 276.255 B/op [Average]
[info]   (min, avg, max) = (636.859, 764.804, 805.826), stdev = 71.743
[info]   CI (99.9%): [488.548, 1041.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.038, 0.070), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.48% complete, ETA 00:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112778.517 ops/s
[info] # Warmup Iteration   2: 308850.488 ops/s
[info] # Warmup Iteration   3: 310022.128 ops/s
[info] Iteration   1: 314560.183 ops/s
[info]                  ·gc.alloc.rate:                   1653.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8194.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 312278.207 ops/s
[info]                  ·gc.alloc.rate:                   1641.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8327.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 314252.262 ops/s
[info]                  ·gc.alloc.rate:                   1651.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8342.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 310381.234 ops/s
[info]                  ·gc.alloc.rate:                   1631.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8502.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 314631.653 ops/s
[info]                  ·gc.alloc.rate:                   1653.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8427.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   313220.708 ±(99.9%) 7152.250 ops/s [Average]
[info]   (min, avg, max) = (310381.234, 313220.708, 314631.653), stdev = 1857.417
[info]   CI (99.9%): [306068.458, 320372.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1646.283 ±(99.9%) 37.176 MB/sec [Average]
[info]   (min, avg, max) = (1631.600, 1646.283, 1653.663), stdev = 9.654
[info]   CI (99.9%): [1609.108, 1683.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8272.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8272.001, 8272.001, 8272.001), stdev = 0.001
[info]   CI (99.9%): [8272.001, 8272.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1663.490 ±(99.9%) 72.766 MB/sec [Average]
[info]   (min, avg, max) = (1637.700, 1663.490, 1684.728), stdev = 18.897
[info]   CI (99.9%): [1590.725, 1736.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8358.786 ±(99.9%) 445.916 B/op [Average]
[info]   (min, avg, max) = (8194.109, 8358.786, 8502.269), stdev = 115.803
[info]   CI (99.9%): [7912.870, 8804.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.356 ±(99.9%) 0.542 B/op [Average]
[info]   (min, avg, max) = (0.208, 0.356, 0.521), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.79% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250209.943 ops/s
[info] # Warmup Iteration   2: 462449.929 ops/s
[info] # Warmup Iteration   3: 481798.274 ops/s
[info] Iteration   1: 473342.845 ops/s
[info]                  ·gc.alloc.rate:                   1278.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4394.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 475858.685 ops/s
[info]                  ·gc.alloc.rate:                   1284.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4389.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 481099.423 ops/s
[info]                  ·gc.alloc.rate:                   1298.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3269.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 483420.847 ops/s
[info]                  ·gc.alloc.rate:                   1304.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4356.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 483259.529 ops/s
[info]                  ·gc.alloc.rate:                   1304.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4378.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   479396.266 ±(99.9%) 17559.651 ops/s [Average]
[info]   (min, avg, max) = (473342.845, 479396.266, 483420.847), stdev = 4560.186
[info]   CI (99.9%): [461836.614, 496955.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1294.028 ±(99.9%) 46.611 MB/sec [Average]
[info]   (min, avg, max) = (1278.168, 1294.028, 1304.755), stdev = 12.105
[info]   CI (99.9%): [1247.417, 1340.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4248.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4248.001, 4248.001, 4248.001), stdev = 0.001
[info]   CI (99.9%): [4248.001, 4248.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1266.311 ±(99.9%) 575.237 MB/sec [Average]
[info]   (min, avg, max) = (999.534, 1266.311, 1344.288), stdev = 149.387
[info]   CI (99.9%): [691.075, 1841.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4157.874 ±(99.9%) 1912.231 B/op [Average]
[info]   (min, avg, max) = (3269.908, 4157.874, 4394.465), stdev = 496.600
[info]   CI (99.9%): [2245.643, 6070.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.232 ±(99.9%) 0.444 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.232, 0.413), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 89.09% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2506417.562 ops/s
[info] # Warmup Iteration   2: 2964711.718 ops/s
[info] # Warmup Iteration   3: 3006897.366 ops/s
[info] Iteration   1: 3026281.725 ops/s
[info]                  ·gc.alloc.rate:                   569.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.972 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3029618.094 ops/s
[info]                  ·gc.alloc.rate:               569.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172.000 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2987860.955 ops/s
[info]                  ·gc.alloc.rate:                   562.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3009480.712 ops/s
[info]                  ·gc.alloc.rate:                   566.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3017545.801 ops/s
[info]                  ·gc.alloc.rate:               567.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   3014157.457 ±(99.9%) 64170.955 ops/s [Average]
[info]   (min, avg, max) = (2987860.955, 3014157.457, 3029618.094), stdev = 16664.993
[info]   CI (99.9%): [2949986.502, 3078328.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   567.015 ±(99.9%) 11.735 MB/sec [Average]
[info]   (min, avg, max) = (562.165, 567.015, 569.814), stdev = 3.048
[info]   CI (99.9%): [555.279, 578.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.263 ±(99.9%) 698.750 MB/sec [Average]
[info]   (min, avg, max) = (331.108, 530.263, 663.058), stdev = 181.463
[info]   CI (99.9%): [≈ 0, 1229.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   277.036 ±(99.9%) 367.470 B/op [Average]
[info]   (min, avg, max) = (172.000, 277.036, 348.807), stdev = 95.431
[info]   CI (99.9%): [≈ 0, 644.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.399 ±(99.9%) 3.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.399, 1.870), stdev = 0.823
[info]   CI (99.9%): [≈ 0, 3.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.208 ±(99.9%) 1.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.208, 0.972), stdev = 0.428
[info]   CI (99.9%): [≈ 0, 1.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 89.39% complete, ETA 00:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97951.882 ops/s
[info] # Warmup Iteration   2: 335956.076 ops/s
[info] # Warmup Iteration   3: 339594.170 ops/s
[info] Iteration   1: 347953.242 ops/s
[info]                  ·gc.alloc.rate:                   1346.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5899.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 347684.198 ops/s
[info]                  ·gc.alloc.rate:                   1344.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5937.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 345562.303 ops/s
[info]                  ·gc.alloc.rate:                   1336.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7525.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 348042.704 ops/s
[info]                  ·gc.alloc.rate:                   1346.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6021.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 343379.429 ops/s
[info]                  ·gc.alloc.rate:                   1328.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6138.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   346524.375 ±(99.9%) 7822.695 ops/s [Average]
[info]   (min, avg, max) = (343379.429, 346524.375, 348042.704), stdev = 2031.529
[info]   CI (99.9%): [338701.680, 354347.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1340.709 ±(99.9%) 29.911 MB/sec [Average]
[info]   (min, avg, max) = (1328.818, 1340.709, 1346.643), stdev = 7.768
[info]   CI (99.9%): [1310.798, 1370.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1388.131 ±(99.9%) 571.661 MB/sec [Average]
[info]   (min, avg, max) = (1304.742, 1388.131, 1652.456), stdev = 148.458
[info]   CI (99.9%): [816.470, 1959.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6304.577 ±(99.9%) 2651.730 B/op [Average]
[info]   (min, avg, max) = (5899.814, 6304.577, 7525.476), stdev = 688.646
[info]   CI (99.9%): [3652.847, 8956.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.396 ±(99.9%) 0.783 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.396, 0.660), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 1.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.70% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237592.102 ops/s
[info] # Warmup Iteration   2: 676590.040 ops/s
[info] # Warmup Iteration   3: 709427.565 ops/s
[info] Iteration   1: 711013.832 ops/s
[info]                  ·gc.alloc.rate:                   2104.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4428.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 715866.609 ops/s
[info]                  ·gc.alloc.rate:                   2118.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4425.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 719849.175 ops/s
[info]                  ·gc.alloc.rate:                   2129.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5162.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 724601.822 ops/s
[info]                  ·gc.alloc.rate:                   2144.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4412.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 717932.330 ops/s
[info]                  ·gc.alloc.rate:                   2124.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4464.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   717852.753 ±(99.9%) 19278.000 ops/s [Average]
[info]   (min, avg, max) = (711013.832, 717852.753, 724601.822), stdev = 5006.435
[info]   CI (99.9%): [698574.753, 737130.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2124.164 ±(99.9%) 56.870 MB/sec [Average]
[info]   (min, avg, max) = (2104.287, 2124.164, 2144.469), stdev = 14.769
[info]   CI (99.9%): [2067.294, 2181.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2089.030 ±(99.9%) 588.253 MB/sec [Average]
[info]   (min, avg, max) = (2001.326, 2089.030, 2361.099), stdev = 152.768
[info]   CI (99.9%): [1500.777, 2677.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4578.647 ±(99.9%) 1258.531 B/op [Average]
[info]   (min, avg, max) = (4412.384, 4578.647, 5162.296), stdev = 326.837
[info]   CI (99.9%): [3320.116, 5837.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.210 ±(99.9%) 0.408 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.210, 0.366), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 90.00% complete, ETA 00:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 418960.619 ops/s
[info] # Warmup Iteration   2: 1456395.293 ops/s
[info] # Warmup Iteration   3: 1436840.011 ops/s
[info] Iteration   1: 1467000.002 ops/s
[info]                  ·gc.alloc.rate:                   1111.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1048.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1462736.656 ops/s
[info]                  ·gc.alloc.rate:                   1107.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1407.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1455921.922 ops/s
[info]                  ·gc.alloc.rate:                   1102.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1067.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1464361.401 ops/s
[info]                  ·gc.alloc.rate:                   1109.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1066.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1462190.252 ops/s
[info]                  ·gc.alloc.rate:                   1107.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1431.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1462442.047 ±(99.9%) 15773.675 ops/s [Average]
[info]   (min, avg, max) = (1455921.922, 1462442.047, 1467000.002), stdev = 4096.373
[info]   CI (99.9%): [1446668.371, 1478215.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1107.725 ±(99.9%) 12.164 MB/sec [Average]
[info]   (min, avg, max) = (1102.659, 1107.725, 1111.181), stdev = 3.159
[info]   CI (99.9%): [1095.561, 1119.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.236 ±(99.9%) 704.877 MB/sec [Average]
[info]   (min, avg, max) = (977.311, 1119.236, 1330.556), stdev = 183.054
[info]   CI (99.9%): [414.359, 1824.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1204.392 ±(99.9%) 758.493 B/op [Average]
[info]   (min, avg, max) = (1048.394, 1204.392, 1431.902), stdev = 196.978
[info]   CI (99.9%): [445.899, 1962.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.072, 0.112), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 90.30% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3989463.406 ops/s
[info] # Warmup Iteration   2: 5400820.781 ops/s
[info] # Warmup Iteration   3: 5521734.238 ops/s
[info] Iteration   1: 5512555.336 ops/s
[info]                  ·gc.alloc.rate:                   168.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5523148.550 ops/s
[info]                  ·gc.alloc.rate:               168.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.892 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5535388.238 ops/s
[info]                  ·gc.alloc.rate:      168.827 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5237613.704 ops/s
[info]                  ·gc.alloc.rate:                   159.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5288305.591 ops/s
[info]                  ·gc.alloc.rate:               161.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   5419402.284 ±(99.9%) 555103.916 ops/s [Average]
[info]   (min, avg, max) = (5237613.704, 5419402.284, 5535388.238), stdev = 144158.724
[info]   CI (99.9%): [4864298.368, 5974506.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   165.308 ±(99.9%) 16.890 MB/sec [Average]
[info]   (min, avg, max) = (159.801, 165.308, 168.827), stdev = 4.386
[info]   CI (99.9%): [148.418, 182.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.676 ±(99.9%) 440.580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.676, 255.896), stdev = 114.417
[info]   CI (99.9%): [≈ 0, 645.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   59.783 ±(99.9%) 128.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.783, 76.865), stdev = 33.468
[info]   CI (99.9%): [≈ 0, 188.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.483 ±(99.9%) 4.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 2.385), stdev = 1.063
[info]   CI (99.9%): [≈ 0, 4.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.138 ±(99.9%) 1.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.681), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.61% complete, ETA 00:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38847.227 ops/s
[info] # Warmup Iteration   2: 218405.968 ops/s
[info] # Warmup Iteration   3: 220258.558 ops/s
[info] Iteration   1: 218624.288 ops/s
[info]                  ·gc.alloc.rate:                   1504.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11751.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.749 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 224184.567 ops/s
[info]                  ·gc.alloc.rate:                   1543.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9236.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 223907.925 ops/s
[info]                  ·gc.alloc.rate:                   1540.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11657.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 224123.428 ops/s
[info]                  ·gc.alloc.rate:                   1542.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11729.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 224074.374 ops/s
[info]                  ·gc.alloc.rate:                   1542.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9437.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   222982.916 ±(99.9%) 9390.618 ops/s [Average]
[info]   (min, avg, max) = (218624.288, 222982.916, 224184.567), stdev = 2438.714
[info]   CI (99.9%): [213592.299, 232373.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1534.894 ±(99.9%) 65.306 MB/sec [Average]
[info]   (min, avg, max) = (1504.603, 1534.894, 1543.606), stdev = 16.960
[info]   CI (99.9%): [1469.588, 1600.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.002, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1524.292 ±(99.9%) 685.773 MB/sec [Average]
[info]   (min, avg, max) = (1316.231, 1524.292, 1670.586), stdev = 178.093
[info]   CI (99.9%): [838.519, 2210.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10762.452 ±(99.9%) 5020.521 B/op [Average]
[info]   (min, avg, max) = (9236.433, 10762.452, 11751.766), stdev = 1303.813
[info]   CI (99.9%): [5741.932, 15782.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.501 ±(99.9%) 0.777 B/op [Average]
[info]   (min, avg, max) = (0.292, 0.501, 0.749), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 1.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.91% complete, ETA 00:06:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 489370.027 ops/s
[info] # Warmup Iteration   2: 963153.897 ops/s
[info] # Warmup Iteration   3: 988610.951 ops/s
[info] Iteration   1: 989056.058 ops/s
[info]                  ·gc.alloc.rate:                   1724.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2641.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 987443.081 ops/s
[info]                  ·gc.alloc.rate:                   1721.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2660.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 992710.403 ops/s
[info]                  ·gc.alloc.rate:                   1730.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2660.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 990701.452 ops/s
[info]                  ·gc.alloc.rate:                   1727.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3215.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 990971.860 ops/s
[info]                  ·gc.alloc.rate:                   1727.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2687.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   990176.571 ±(99.9%) 7714.707 ops/s [Average]
[info]   (min, avg, max) = (987443.081, 990176.571, 992710.403), stdev = 2003.485
[info]   CI (99.9%): [982461.864, 997891.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.592 ±(99.9%) 13.254 MB/sec [Average]
[info]   (min, avg, max) = (1721.955, 1726.592, 1730.772), stdev = 3.442
[info]   CI (99.9%): [1713.338, 1739.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2744.000, 2744.000, 2744.000), stdev = 0.001
[info]   CI (99.9%): [2744.000, 2744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1744.770 ±(99.9%) 603.964 MB/sec [Average]
[info]   (min, avg, max) = (1659.687, 1744.770, 2024.530), stdev = 156.847
[info]   CI (99.9%): [1140.806, 2348.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2772.796 ±(99.9%) 954.154 B/op [Average]
[info]   (min, avg, max) = (2641.045, 2772.796, 3215.079), stdev = 247.791
[info]   CI (99.9%): [1818.642, 3726.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.139 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.139, 0.166), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 91.21% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 840057.579 ops/s
[info] # Warmup Iteration   2: 2416232.503 ops/s
[info] # Warmup Iteration   3: 2490719.547 ops/s
[info] Iteration   1: 2491940.484 ops/s
[info]                  ·gc.alloc.rate:                   1102.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     617.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2449718.069 ops/s
[info]                  ·gc.alloc.rate:                   1083.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     840.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2488105.633 ops/s
[info]                  ·gc.alloc.rate:                   1100.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2509316.751 ops/s
[info]                  ·gc.alloc.rate:                   1109.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     622.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2465011.157 ops/s
[info]                  ·gc.alloc.rate:                   1090.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2480818.419 ±(99.9%) 90429.896 ops/s [Average]
[info]   (min, avg, max) = (2449718.069, 2480818.419, 2509316.751), stdev = 23484.357
[info]   CI (99.9%): [2390388.523, 2571248.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1097.345 ±(99.9%) 39.749 MB/sec [Average]
[info]   (min, avg, max) = (1083.757, 1097.345, 1109.858), stdev = 10.323
[info]   CI (99.9%): [1057.596, 1137.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1053.191 ±(99.9%) 551.698 MB/sec [Average]
[info]   (min, avg, max) = (978.025, 1053.191, 1309.154), stdev = 143.274
[info]   CI (99.9%): [501.493, 1604.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   668.557 ±(99.9%) 371.668 B/op [Average]
[info]   (min, avg, max) = (617.640, 668.557, 840.753), stdev = 96.521
[info]   CI (99.9%): [296.889, 1040.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.053, 0.094), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.52% complete, ETA 00:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4393478.393 ops/s
[info] # Warmup Iteration   2: 6615644.226 ops/s
[info] # Warmup Iteration   3: 6716509.826 ops/s
[info] Iteration   1: 6665894.642 ops/s
[info]                  ·gc.alloc.rate:                   542.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6606775.123 ops/s
[info]                  ·gc.alloc.rate:                   537.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6476916.263 ops/s
[info]                  ·gc.alloc.rate:                   526.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6533928.719 ops/s
[info]                  ·gc.alloc.rate:                   531.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6617724.520 ops/s
[info]                  ·gc.alloc.rate:               538.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6580247.853 ±(99.9%) 287295.514 ops/s [Average]
[info]   (min, avg, max) = (6476916.263, 6580247.853, 6665894.642), stdev = 74609.733
[info]   CI (99.9%): [6292952.340, 6867543.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   535.248 ±(99.9%) 23.173 MB/sec [Average]
[info]   (min, avg, max) = (526.945, 535.248, 542.097), stdev = 6.018
[info]   CI (99.9%): [512.075, 558.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.810 ±(99.9%) 657.751 MB/sec [Average]
[info]   (min, avg, max) = (331.738, 515.810, 664.125), stdev = 170.816
[info]   CI (99.9%): [≈ 0, 1173.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   123.251 ±(99.9%) 156.187 B/op [Average]
[info]   (min, avg, max) = (78.895, 123.251, 159.817), stdev = 40.561
[info]   CI (99.9%): [≈ 0, 279.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.385 ±(99.9%) 2.963 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.761), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.091 ±(99.9%) 0.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.416), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.82% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3973902.278 ops/s
[info] # Warmup Iteration   2: 6471065.636 ops/s
[info] # Warmup Iteration   3: 6388757.550 ops/s
[info] Iteration   1: 6463452.312 ops/s
[info]                  ·gc.alloc.rate:                   394.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6421215.785 ops/s
[info]                  ·gc.alloc.rate:               391.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62.698 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6330010.703 ops/s
[info]                  ·gc.alloc.rate:                   386.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6429897.408 ops/s
[info]                  ·gc.alloc.rate:                   392.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6395754.014 ops/s
[info]                  ·gc.alloc.rate:               390.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81.637 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6408066.045 ±(99.9%) 192160.107 ops/s [Average]
[info]   (min, avg, max) = (6330010.703, 6408066.045, 6463452.312), stdev = 49903.370
[info]   CI (99.9%): [6215905.938, 6600226.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   390.890 ±(99.9%) 11.738 MB/sec [Average]
[info]   (min, avg, max) = (386.097, 390.890, 394.247), stdev = 3.048
[info]   CI (99.9%): [379.152, 402.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.862 ±(99.9%) 654.280 MB/sec [Average]
[info]   (min, avg, max) = (255.802, 367.862, 664.128), stdev = 169.914
[info]   CI (99.9%): [≈ 0, 1022.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   90.591 ±(99.9%) 164.539 B/op [Average]
[info]   (min, avg, max) = (62.288, 90.591, 165.130), stdev = 42.730
[info]   CI (99.9%): [≈ 0, 255.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.383 ±(99.9%) 3.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.880), stdev = 0.837
[info]   CI (99.9%): [≈ 0, 3.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.095 ±(99.9%) 0.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.467), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 92.12% complete, ETA 00:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40100.844 ops/s
[info] # Warmup Iteration   2: 309284.602 ops/s
[info] # Warmup Iteration   3: 311892.456 ops/s
[info] Iteration   1: 315930.933 ops/s
[info]                  ·gc.alloc.rate:                   1625.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1633.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8137.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.519 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 310275.017 ops/s
[info]                  ·gc.alloc.rate:                   1596.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8358.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.634 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 315152.231 ops/s
[info]                  ·gc.alloc.rate:                   1621.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8295.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 317684.215 ops/s
[info]                  ·gc.alloc.rate:                   1634.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8289.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 311305.326 ops/s
[info]                  ·gc.alloc.rate:                   1601.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8507.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   314069.544 ±(99.9%) 12137.497 ops/s [Average]
[info]   (min, avg, max) = (310275.017, 314069.544, 317684.215), stdev = 3152.069
[info]   CI (99.9%): [301932.048, 326207.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1616.016 ±(99.9%) 62.078 MB/sec [Average]
[info]   (min, avg, max) = (1596.797, 1616.016, 1634.533), stdev = 16.121
[info]   CI (99.9%): [1553.938, 1678.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.001), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1660.099 ±(99.9%) 75.858 MB/sec [Average]
[info]   (min, avg, max) = (1633.539, 1660.099, 1682.999), stdev = 19.700
[info]   CI (99.9%): [1584.241, 1735.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8317.570 ±(99.9%) 514.894 B/op [Average]
[info]   (min, avg, max) = (8137.011, 8317.570, 8507.374), stdev = 133.716
[info]   CI (99.9%): [7802.676, 8832.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.459 ±(99.9%) 0.734 B/op [Average]
[info]   (min, avg, max) = (0.210, 0.459, 0.634), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.42% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2338968.248 ops/s
[info] # Warmup Iteration   2: 3356599.259 ops/s
[info] # Warmup Iteration   3: 3380676.257 ops/s
[info] Iteration   1: 3400828.684 ops/s
[info]                  ·gc.alloc.rate:                   3094.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3035.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3397210.408 ops/s
[info]                  ·gc.alloc.rate:                   3090.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3050.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1413.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3405584.498 ops/s
[info]                  ·gc.alloc.rate:                   3098.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1413.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3369975.569 ops/s
[info]                  ·gc.alloc.rate:                   3067.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1430.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3421378.671 ops/s
[info]                  ·gc.alloc.rate:                   3113.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1409.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3398995.566 ±(99.9%) 71861.846 ops/s [Average]
[info]   (min, avg, max) = (3369975.569, 3398995.566, 3421378.671), stdev = 18662.293
[info]   CI (99.9%): [3327133.720, 3470857.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3092.794 ±(99.9%) 63.658 MB/sec [Average]
[info]   (min, avg, max) = (3067.348, 3092.794, 3113.010), stdev = 16.532
[info]   CI (99.9%): [3029.136, 3156.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3054.376 ±(99.9%) 45.942 MB/sec [Average]
[info]   (min, avg, max) = (3035.626, 3054.376, 3064.472), stdev = 11.931
[info]   CI (99.9%): [3008.433, 3100.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1414.247 ±(99.9%) 37.708 B/op [Average]
[info]   (min, avg, max) = (1404.878, 1414.247, 1430.657), stdev = 9.793
[info]   CI (99.9%): [1376.539, 1451.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.050, 0.058), stdev = 0.008
[info]   CI (99.9%): [0.019, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.73% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1795785.401 ops/s
[info] # Warmup Iteration   2: 3849543.654 ops/s
[info] # Warmup Iteration   3: 3963911.218 ops/s
[info] Iteration   1: 3943327.465 ops/s
[info]                  ·gc.alloc.rate:                   2366.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2328.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3966580.254 ops/s
[info]                  ·gc.alloc.rate:                   2379.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3946941.670 ops/s
[info]                  ·gc.alloc.rate:                   2367.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3933409.462 ops/s
[info]                  ·gc.alloc.rate:                   2359.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     949.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3965424.366 ops/s
[info]                  ·gc.alloc.rate:                   2378.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3951136.643 ±(99.9%) 55650.736 ops/s [Average]
[info]   (min, avg, max) = (3933409.462, 3951136.643, 3966580.254), stdev = 14452.319
[info]   CI (99.9%): [3895485.907, 4006787.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2370.195 ±(99.9%) 32.158 MB/sec [Average]
[info]   (min, avg, max) = (2359.804, 2370.195, 2379.121), stdev = 8.351
[info]   CI (99.9%): [2338.037, 2402.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2358.556 ±(99.9%) 76.599 MB/sec [Average]
[info]   (min, avg, max) = (2328.788, 2358.556, 2377.756), stdev = 19.892
[info]   CI (99.9%): [2281.958, 2435.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   939.373 ±(99.9%) 32.550 B/op [Average]
[info]   (min, avg, max) = (929.117, 939.373, 949.292), stdev = 8.453
[info]   CI (99.9%): [906.823, 971.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.040, 0.058), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.03% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5586635.357 ops/s
[info] # Warmup Iteration   2: 7506656.680 ops/s
[info] # Warmup Iteration   3: 7605360.557 ops/s
[info] Iteration   1: 7593300.573 ops/s
[info]                  ·gc.alloc.rate:                   1427.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7509537.700 ops/s
[info]                  ·gc.alloc.rate:                   1412.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7457185.276 ops/s
[info]                  ·gc.alloc.rate:                   1402.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7554314.037 ops/s
[info]                  ·gc.alloc.rate:                   1420.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7618838.699 ops/s
[info]                  ·gc.alloc.rate:                   1432.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7546635.257 ±(99.9%) 249754.264 ops/s [Average]
[info]   (min, avg, max) = (7457185.276, 7546635.257, 7618838.699), stdev = 64860.389
[info]   CI (99.9%): [7296880.993, 7796389.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1419.542 ±(99.9%) 46.000 MB/sec [Average]
[info]   (min, avg, max) = (1402.971, 1419.542, 1432.937), stdev = 11.946
[info]   CI (99.9%): [1373.542, 1465.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1409.944 ±(99.9%) 590.303 MB/sec [Average]
[info]   (min, avg, max) = (1332.885, 1409.944, 1683.896), stdev = 153.300
[info]   CI (99.9%): [819.641, 2000.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   293.999 ±(99.9%) 122.614 B/op [Average]
[info]   (min, avg, max) = (276.292, 293.999, 350.780), stdev = 31.843
[info]   CI (99.9%): [171.385, 416.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.018, 0.026), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 93.33% complete, ETA 00:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2819626.094 ops/s
[info] # Warmup Iteration   2: 4885061.501 ops/s
[info] # Warmup Iteration   3: 4943112.645 ops/s
[info] Iteration   1: 4961842.596 ops/s
[info]                  ·gc.alloc.rate:                   3078.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3024.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4975776.445 ops/s
[info]                  ·gc.alloc.rate:                   3086.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3045.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4961551.896 ops/s
[info]                  ·gc.alloc.rate:                   3076.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 4916774.024 ops/s
[info]                  ·gc.alloc.rate:                   3049.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4913648.268 ops/s
[info]                  ·gc.alloc.rate:                   3047.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4945918.646 ±(99.9%) 110269.782 ops/s [Average]
[info]   (min, avg, max) = (4913648.268, 4945918.646, 4975776.445), stdev = 28636.712
[info]   CI (99.9%): [4835648.864, 5056188.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3067.648 ±(99.9%) 68.881 MB/sec [Average]
[info]   (min, avg, max) = (3047.382, 3067.648, 3086.302), stdev = 17.888
[info]   CI (99.9%): [2998.767, 3136.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3050.234 ±(99.9%) 62.073 MB/sec [Average]
[info]   (min, avg, max) = (3024.270, 3050.234, 3063.954), stdev = 16.120
[info]   CI (99.9%): [2988.161, 3112.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   970.503 ±(99.9%) 38.197 B/op [Average]
[info]   (min, avg, max) = (958.891, 970.503, 981.308), stdev = 9.920
[info]   CI (99.9%): [932.305, 1008.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.167), stdev = 0.023
[info]   CI (99.9%): [0.041, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.041, 0.053), stdev = 0.007
[info]   CI (99.9%): [0.014, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.64% complete, ETA 00:04:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1721628.901 ops/s
[info] # Warmup Iteration   2: 2610413.646 ops/s
[info] # Warmup Iteration   3: 2693485.455 ops/s
[info] Iteration   1: 2704230.424 ops/s
[info]                  ·gc.alloc.rate:                   1677.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2650177.637 ops/s
[info]                  ·gc.alloc.rate:                   1644.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     991.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2691660.355 ops/s
[info]                  ·gc.alloc.rate:                   1669.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2700412.031 ops/s
[info]                  ·gc.alloc.rate:                   1674.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     982.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2689310.411 ops/s
[info]                  ·gc.alloc.rate:                   1668.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     990.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2687158.172 ±(99.9%) 83025.552 ops/s [Average]
[info]   (min, avg, max) = (2650177.637, 2687158.172, 2704230.424), stdev = 21561.472
[info]   CI (99.9%): [2604132.619, 2770183.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1666.734 ±(99.9%) 50.919 MB/sec [Average]
[info]   (min, avg, max) = (1644.047, 1666.734, 1677.229), stdev = 13.224
[info]   CI (99.9%): [1615.815, 1717.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.655 ±(99.9%) 49.146 MB/sec [Average]
[info]   (min, avg, max) = (1660.319, 1677.655, 1692.354), stdev = 12.763
[info]   CI (99.9%): [1628.510, 1726.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   982.439 ±(99.9%) 38.664 B/op [Average]
[info]   (min, avg, max) = (966.160, 982.439, 991.412), stdev = 10.041
[info]   CI (99.9%): [943.775, 1021.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.046 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.046, 0.061), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.94% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2309079.473 ops/s
[info] # Warmup Iteration   2: 4747562.855 ops/s
[info] # Warmup Iteration   3: 4882682.996 ops/s
[info] Iteration   1: 4890495.439 ops/s
[info]                  ·gc.alloc.rate:                   1292.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     422.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4839689.757 ops/s
[info]                  ·gc.alloc.rate:                   1279.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4913319.494 ops/s
[info]                  ·gc.alloc.rate:                   1298.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4885547.245 ops/s
[info]                  ·gc.alloc.rate:                   1291.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4830875.460 ops/s
[info]                  ·gc.alloc.rate:                   1276.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4871985.479 ±(99.9%) 135705.676 ops/s [Average]
[info]   (min, avg, max) = (4830875.460, 4871985.479, 4913319.494), stdev = 35242.333
[info]   CI (99.9%): [4736279.803, 5007691.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1287.859 ±(99.9%) 35.269 MB/sec [Average]
[info]   (min, avg, max) = (1276.876, 1287.859, 1298.662), stdev = 9.159
[info]   CI (99.9%): [1252.590, 1323.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1260.152 ±(99.9%) 572.603 MB/sec [Average]
[info]   (min, avg, max) = (994.880, 1260.152, 1340.278), stdev = 148.703
[info]   CI (99.9%): [687.549, 1832.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   407.253 ±(99.9%) 191.637 B/op [Average]
[info]   (min, avg, max) = (318.690, 407.253, 436.656), stdev = 49.768
[info]   CI (99.9%): [215.616, 598.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.030, 0.034), stdev = 0.006
[info]   CI (99.9%): [0.006, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.24% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6109722.739 ops/s
[info] # Warmup Iteration   2: 8875211.350 ops/s
[info] # Warmup Iteration   3: 8560976.082 ops/s
[info] Iteration   1: 8587712.060 ops/s
[info]                  ·gc.alloc.rate:                   829.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8219180.748 ops/s
[info]                  ·gc.alloc.rate:                   793.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8646768.040 ops/s
[info]                  ·gc.alloc.rate:                   835.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8640156.591 ops/s
[info]                  ·gc.alloc.rate:                   834.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8628910.086 ops/s
[info]                  ·gc.alloc.rate:                   833.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8544545.505 ±(99.9%) 705923.665 ops/s [Average]
[info]   (min, avg, max) = (8219180.748, 8544545.505, 8646768.040), stdev = 183326.134
[info]   CI (99.9%): [7838621.840, 9250469.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   825.263 ±(99.9%) 68.013 MB/sec [Average]
[info]   (min, avg, max) = (793.929, 825.263, 835.074), stdev = 17.663
[info]   CI (99.9%): [757.251, 893.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   797.711 ±(99.9%) 699.626 MB/sec [Average]
[info]   (min, avg, max) = (663.425, 797.711, 998.063), stdev = 181.691
[info]   CI (99.9%): [98.085, 1497.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   147.314 ±(99.9%) 137.117 B/op [Average]
[info]   (min, avg, max) = (120.888, 147.314, 190.573), stdev = 35.609
[info]   CI (99.9%): [10.197, 284.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.017, 0.019), stdev = 0.002
[info]   CI (99.9%): [0.009, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.55% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5249832.925 ops/s
[info] # Warmup Iteration   2: 7575289.992 ops/s
[info] # Warmup Iteration   3: 7538799.741 ops/s
[info] Iteration   1: 7538148.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7537736.069 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7509785.721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7511385.979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7501939.803 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7519799.225 ±(99.9%) 65246.548 ops/s [Average]
[info]   (min, avg, max) = (7501939.803, 7519799.225, 7538148.551), stdev = 16944.321
[info]   CI (99.9%): [7454552.677, 7585045.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.85% complete, ETA 00:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3697020.536 ops/s
[info] # Warmup Iteration   2: 5013738.193 ops/s
[info] # Warmup Iteration   3: 5079138.730 ops/s
[info] Iteration   1: 5075206.532 ops/s
[info]                  ·gc.alloc.rate:                   1625.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     515.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5018109.251 ops/s
[info]                  ·gc.alloc.rate:                   1607.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     523.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5076223.084 ops/s
[info]                  ·gc.alloc.rate:                   1625.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4978184.208 ops/s
[info]                  ·gc.alloc.rate:                   1594.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4964716.835 ops/s
[info]                  ·gc.alloc.rate:                   1590.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   5022487.982 ±(99.9%) 201802.857 ops/s [Average]
[info]   (min, avg, max) = (4964716.835, 5022487.982, 5076223.084), stdev = 52407.561
[info]   CI (99.9%): [4820685.125, 5224290.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1608.613 ±(99.9%) 64.591 MB/sec [Average]
[info]   (min, avg, max) = (1590.340, 1608.613, 1625.827), stdev = 16.774
[info]   CI (99.9%): [1544.023, 1673.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1610.039 ±(99.9%) 555.086 MB/sec [Average]
[info]   (min, avg, max) = (1352.691, 1610.039, 1686.127), stdev = 144.154
[info]   CI (99.9%): [1054.953, 2165.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   504.272 ±(99.9%) 164.605 B/op [Average]
[info]   (min, avg, max) = (428.686, 504.272, 533.036), stdev = 42.747
[info]   CI (99.9%): [339.667, 668.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.031, 0.052), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 95.15% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 929019.926 ops/s
[info] # Warmup Iteration   2: 1386251.677 ops/s
[info] # Warmup Iteration   3: 1395130.083 ops/s
[info] Iteration   1: 1394265.130 ops/s
[info]                  ·gc.alloc.rate:                   1899.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2260.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1389619.516 ops/s
[info]                  ·gc.alloc.rate:                   1892.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2281.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1398402.161 ops/s
[info]                  ·gc.alloc.rate:                   1904.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1898.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1382382.126 ops/s
[info]                  ·gc.alloc.rate:                   1883.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2311.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1364218.483 ops/s
[info]                  ·gc.alloc.rate:                   1858.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1956.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1385777.483 ±(99.9%) 51751.522 ops/s [Average]
[info]   (min, avg, max) = (1364218.483, 1385777.483, 1398402.161), stdev = 13439.706
[info]   CI (99.9%): [1334025.961, 1437529.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1887.938 ±(99.9%) 70.577 MB/sec [Average]
[info]   (min, avg, max) = (1858.617, 1887.938, 1904.976), stdev = 18.329
[info]   CI (99.9%): [1817.361, 1958.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.000, 2144.000, 2144.000), stdev = 0.001
[info]   CI (99.9%): [2144.000, 2144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886.188 ±(99.9%) 685.651 MB/sec [Average]
[info]   (min, avg, max) = (1686.675, 1886.188, 2030.420), stdev = 178.061
[info]   CI (99.9%): [1200.537, 2571.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2141.738 ±(99.9%) 760.511 B/op [Average]
[info]   (min, avg, max) = (1898.308, 2141.738, 2311.699), stdev = 197.502
[info]   CI (99.9%): [1381.226, 2902.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.095 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.095, 0.118), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.45% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 474473.392 ops/s
[info] # Warmup Iteration   2: 1079648.162 ops/s
[info] # Warmup Iteration   3: 1071046.600 ops/s
[info] Iteration   1: 1094381.189 ops/s
[info]                  ·gc.alloc.rate:                   706.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1093984.425 ops/s
[info]                  ·gc.alloc.rate:                   706.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1412.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1094185.897 ops/s
[info]                  ·gc.alloc.rate:                   706.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1094726.325 ops/s
[info]                  ·gc.alloc.rate:               706.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944.268 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1091470.540 ops/s
[info]                  ·gc.alloc.rate:               704.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 949.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1093749.675 ±(99.9%) 5017.860 ops/s [Average]
[info]   (min, avg, max) = (1091470.540, 1093749.675, 1094726.325), stdev = 1303.122
[info]   CI (99.9%): [1088731.816, 1098767.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   706.092 ±(99.9%) 3.321 MB/sec [Average]
[info]   (min, avg, max) = (704.578, 706.092, 706.738), stdev = 0.862
[info]   CI (99.9%): [702.770, 709.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.539 ±(99.9%) 560.122 MB/sec [Average]
[info]   (min, avg, max) = (654.851, 721.539, 981.735), stdev = 145.462
[info]   CI (99.9%): [161.416, 1281.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1038.200 ±(99.9%) 805.103 B/op [Average]
[info]   (min, avg, max) = (941.740, 1038.200, 1412.175), stdev = 209.083
[info]   CI (99.9%): [233.098, 1843.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.463 ±(99.9%) 3.716 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.463, 2.188), stdev = 0.965
[info]   CI (99.9%): [≈ 0, 4.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.665 ±(99.9%) 5.344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 3.146), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 6.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.76% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1363510.753 ops/s
[info] # Warmup Iteration   2: 1802888.198 ops/s
[info] # Warmup Iteration   3: 1841561.789 ops/s
[info] Iteration   1: 1816588.565 ops/s
[info]                  ·gc.alloc.rate:               341.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 443.234 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1842386.967 ops/s
[info]                  ·gc.alloc.rate:               346.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1788777.918 ops/s
[info]                  ·gc.alloc.rate:                   336.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1826592.374 ops/s
[info]                  ·gc.alloc.rate:                   343.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1832187.107 ops/s
[info]                  ·gc.alloc.rate:               344.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 285.547 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1821306.587 ±(99.9%) 78704.979 ops/s [Average]
[info]   (min, avg, max) = (1788777.918, 1821306.587, 1842386.967), stdev = 20439.433
[info]   CI (99.9%): [1742601.607, 1900011.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   342.640 ±(99.9%) 14.834 MB/sec [Average]
[info]   (min, avg, max) = (336.547, 342.640, 346.658), stdev = 3.852
[info]   CI (99.9%): [327.806, 357.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   353.155 ±(99.9%) 364.496 MB/sec [Average]
[info]   (min, avg, max) = (255.911, 353.155, 511.687), stdev = 94.658
[info]   CI (99.9%): [≈ 0, 717.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   305.351 ±(99.9%) 318.993 B/op [Average]
[info]   (min, avg, max) = (218.514, 305.351, 443.234), stdev = 82.841
[info]   CI (99.9%): [≈ 0, 624.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.338 ±(99.9%) 2.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 1.605), stdev = 0.710
[info]   CI (99.9%): [≈ 0, 3.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.297 ±(99.9%) 2.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.297, 1.412), stdev = 0.624
[info]   CI (99.9%): [≈ 0, 2.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 96.06% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 692004.863 ops/s
[info] # Warmup Iteration   2: 1135434.002 ops/s
[info] # Warmup Iteration   3: 1156319.773 ops/s
[info] Iteration   1: 1165086.812 ops/s
[info]                  ·gc.alloc.rate:                   722.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     886.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1168458.678 ops/s
[info]                  ·gc.alloc.rate:                   724.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     884.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1163967.747 ops/s
[info]                  ·gc.alloc.rate:                   721.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     889.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1162802.438 ops/s
[info]                  ·gc.alloc.rate:               721.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 891.724 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1162621.125 ops/s
[info]                  ·gc.alloc.rate:                   721.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1341.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1164587.360 ±(99.9%) 9167.546 ops/s [Average]
[info]   (min, avg, max) = (1162621.125, 1164587.360, 1168458.678), stdev = 2380.783
[info]   CI (99.9%): [1155419.814, 1173754.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   722.222 ±(99.9%) 5.643 MB/sec [Average]
[info]   (min, avg, max) = (721.084, 722.222, 724.652), stdev = 1.466
[info]   CI (99.9%): [716.579, 727.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   724.208 ±(99.9%) 575.246 MB/sec [Average]
[info]   (min, avg, max) = (656.428, 724.208, 991.439), stdev = 149.390
[info]   CI (99.9%): [148.962, 1299.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   978.823 ±(99.9%) 781.442 B/op [Average]
[info]   (min, avg, max) = (884.707, 978.823, 1341.819), stdev = 202.938
[info]   CI (99.9%): [197.381, 1760.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.090 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.141), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.36% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 818088.355 ops/s
[info] # Warmup Iteration   2: 1209449.494 ops/s
[info] # Warmup Iteration   3: 1269046.291 ops/s
[info] Iteration   1: 1275038.738 ops/s
[info]                  ·gc.alloc.rate:                   965.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1223.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1255398.806 ops/s
[info]                  ·gc.alloc.rate:                   951.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1245150.398 ops/s
[info]                  ·gc.alloc.rate:                   943.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1257.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1273400.261 ops/s
[info]                  ·gc.alloc.rate:                   964.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1233.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1239095.544 ops/s
[info]                  ·gc.alloc.rate:                   938.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1272.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1257616.749 ±(99.9%) 62565.829 ops/s [Average]
[info]   (min, avg, max) = (1239095.544, 1257616.749, 1275038.738), stdev = 16248.147
[info]   CI (99.9%): [1195050.920, 1320182.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   952.557 ±(99.9%) 47.300 MB/sec [Average]
[info]   (min, avg, max) = (938.466, 952.557, 965.657), stdev = 12.284
[info]   CI (99.9%): [905.257, 999.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   929.582 ±(99.9%) 576.757 MB/sec [Average]
[info]   (min, avg, max) = (661.738, 929.582, 1001.894), stdev = 149.782
[info]   CI (99.9%): [352.825, 1506.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1163.323 ±(99.9%) 722.874 B/op [Average]
[info]   (min, avg, max) = (829.288, 1163.323, 1272.564), stdev = 187.728
[info]   CI (99.9%): [440.449, 1886.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.073, 0.130), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.67% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1109011.413 ops/s
[info] # Warmup Iteration   2: 2313166.382 ops/s
[info] # Warmup Iteration   3: 2379592.491 ops/s
[info] Iteration   1: 2343539.999 ops/s
[info]                  ·gc.alloc.rate:                   1048.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     659.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2385102.060 ops/s
[info]                  ·gc.alloc.rate:                   1066.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2379617.092 ops/s
[info]                  ·gc.alloc.rate:                   1064.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     873.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2387354.545 ops/s
[info]                  ·gc.alloc.rate:                   1068.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2401113.964 ops/s
[info]                  ·gc.alloc.rate:                   1074.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2379345.532 ±(99.9%) 82884.082 ops/s [Average]
[info]   (min, avg, max) = (2343539.999, 2379345.532, 2401113.964), stdev = 21524.733
[info]   CI (99.9%): [2296461.450, 2462229.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1064.393 ±(99.9%) 37.170 MB/sec [Average]
[info]   (min, avg, max) = (1048.326, 1064.393, 1074.021), stdev = 9.653
[info]   CI (99.9%): [1027.223, 1101.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1056.541 ±(99.9%) 567.605 MB/sec [Average]
[info]   (min, avg, max) = (982.654, 1056.541, 1319.933), stdev = 147.405
[info]   CI (99.9%): [488.936, 1624.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   698.823 ±(99.9%) 375.221 B/op [Average]
[info]   (min, avg, max) = (650.141, 698.823, 873.025), stdev = 97.444
[info]   CI (99.9%): [323.602, 1074.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.041, 0.069), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.97% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1746994.944 ops/s
[info] # Warmup Iteration   2: 2488596.382 ops/s
[info] # Warmup Iteration   3: 2438618.206 ops/s
[info] Iteration   1: 2496572.565 ops/s
[info]                  ·gc.alloc.rate:                   583.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2518163.562 ops/s
[info]                  ·gc.alloc.rate:                   588.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2499546.348 ops/s
[info]                  ·gc.alloc.rate:                   584.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     417.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2496640.563 ops/s
[info]                  ·gc.alloc.rate:                   583.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2511571.251 ops/s
[info]                  ·gc.alloc.rate:                   587.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2504498.858 ±(99.9%) 37819.183 ops/s [Average]
[info]   (min, avg, max) = (2496572.565, 2504498.858, 2518163.562), stdev = 9821.522
[info]   CI (99.9%): [2466679.675, 2542318.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.706 ±(99.9%) 8.697 MB/sec [Average]
[info]   (min, avg, max) = (583.836, 585.706, 588.789), stdev = 2.259
[info]   CI (99.9%): [577.008, 594.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.387 ±(99.9%) 571.701 MB/sec [Average]
[info]   (min, avg, max) = (331.799, 597.387, 664.316), stdev = 148.469
[info]   CI (99.9%): [25.687, 1169.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   375.211 ±(99.9%) 357.526 B/op [Average]
[info]   (min, avg, max) = (209.138, 375.211, 418.264), stdev = 92.848
[info]   CI (99.9%): [17.685, 732.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.402 ±(99.9%) 2.926 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.402, 1.761), stdev = 0.760
[info]   CI (99.9%): [≈ 0, 3.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.253 ±(99.9%) 1.845 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.253, 1.110), stdev = 0.479
[info]   CI (99.9%): [≈ 0, 2.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.27% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1861640.416 ops/s
[info] # Warmup Iteration   2: 2616968.987 ops/s
[info] # Warmup Iteration   3: 2640414.236 ops/s
[info] Iteration   1: 2654036.564 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2652061.302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2653823.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2657375.424 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2652810.099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2654021.344 ±(99.9%) 7843.927 ops/s [Average]
[info]   (min, avg, max) = (2652061.302, 2654021.344, 2657375.424), stdev = 2037.043
[info]   CI (99.9%): [2646177.417, 2661865.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.58% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1802243.389 ops/s
[info] # Warmup Iteration   2: 2272030.412 ops/s
[info] # Warmup Iteration   3: 2317764.126 ops/s
[info] Iteration   1: 2332611.793 ops/s
[info]                  ·gc.alloc.rate:                   1067.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     669.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2345817.476 ops/s
[info]                  ·gc.alloc.rate:                   1073.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     666.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2352170.835 ops/s
[info]                  ·gc.alloc.rate:                   1076.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     890.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2331756.894 ops/s
[info]                  ·gc.alloc.rate:                   1066.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2365950.432 ops/s
[info]                  ·gc.alloc.rate:                   1082.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     668.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2345661.486 ±(99.9%) 55054.428 ops/s [Average]
[info]   (min, avg, max) = (2331756.894, 2345661.486, 2365950.432), stdev = 14297.460
[info]   CI (99.9%): [2290607.058, 2400715.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1073.326 ±(99.9%) 24.979 MB/sec [Average]
[info]   (min, avg, max) = (1066.818, 1073.326, 1082.349), stdev = 6.487
[info]   CI (99.9%): [1048.348, 1098.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1065.024 ±(99.9%) 573.929 MB/sec [Average]
[info]   (min, avg, max) = (992.887, 1065.024, 1331.500), stdev = 149.047
[info]   CI (99.9%): [491.095, 1638.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   714.310 ±(99.9%) 379.615 B/op [Average]
[info]   (min, avg, max) = (666.825, 714.310, 890.546), stdev = 98.585
[info]   CI (99.9%): [334.696, 1093.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.056), stdev = 0.008
[info]   CI (99.9%): [0.021, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.88% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5636.427 ops/s
[info] # Warmup Iteration   2: 10001.499 ops/s
[info] # Warmup Iteration   3: 11258.340 ops/s
[info] Iteration   1: 11871.761 ops/s
[info]                  ·gc.alloc.rate:                   1674.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219181.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.279 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12028.565 ops/s
[info]                  ·gc.alloc.rate:                   1697.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217716.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.065 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12085.185 ops/s
[info]                  ·gc.alloc.rate:                   1704.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              221972.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217990.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.165 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12057.108 ops/s
[info]                  ·gc.alloc.rate:                   1700.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219627.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12065.180 ops/s
[info]                  ·gc.alloc.rate:                   1701.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220263.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.583 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12021.560 ±(99.9%) 331.823 ops/s [Average]
[info]   (min, avg, max) = (11871.761, 12021.560, 12085.185), stdev = 86.173
[info]   CI (99.9%): [11689.737, 12353.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1695.713 ±(99.9%) 46.996 MB/sec [Average]
[info]   (min, avg, max) = (1674.405, 1695.713, 1704.449), stdev = 12.205
[info]   CI (99.9%): [1648.717, 1742.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221985.008 ±(99.9%) 81.308 B/op [Average]
[info]   (min, avg, max) = (221968.039, 221985.008, 222008.038), stdev = 21.115
[info]   CI (99.9%): [221903.701, 222066.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1672.570 ±(99.9%) 54.025 MB/sec [Average]
[info]   (min, avg, max) = (1653.388, 1672.570, 1688.522), stdev = 14.030
[info]   CI (99.9%): [1618.545, 1726.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   218955.868 ±(99.9%) 4165.153 B/op [Average]
[info]   (min, avg, max) = (217716.137, 218955.868, 220263.520), stdev = 1081.677
[info]   CI (99.9%): [214790.715, 223121.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 0.328 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.175, 0.271), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22.883 ±(99.9%) 42.641 B/op [Average]
[info]   (min, avg, max) = (8.279, 22.883, 35.322), stdev = 11.074
[info]   CI (99.9%): [≈ 0, 65.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.18% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5647.421 ops/s
[info] # Warmup Iteration   2: 14788.797 ops/s
[info] # Warmup Iteration   3: 15594.511 ops/s
[info] Iteration   1: 15378.840 ops/s
[info]                  ·gc.alloc.rate:                   243.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26176.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15341.197 ops/s
[info]                  ·gc.alloc.rate:               242.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          24885.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26241.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15446.576 ops/s
[info]                  ·gc.alloc.rate:                   244.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              24896.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26063.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15200.790 ops/s
[info]                  ·gc.alloc.rate:               240.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          24896.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26483.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15251.684 ops/s
[info]                  ·gc.alloc.rate:                   241.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              24891.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          322.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33270.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.409 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15323.817 ±(99.9%) 378.942 ops/s [Average]
[info]   (min, avg, max) = (15200.790, 15323.817, 15446.576), stdev = 98.410
[info]   CI (99.9%): [14944.875, 15702.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   242.355 ±(99.9%) 5.929 MB/sec [Average]
[info]   (min, avg, max) = (240.472, 242.355, 244.347), stdev = 1.540
[info]   CI (99.9%): [236.426, 248.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24889.761 ±(99.9%) 26.728 B/op [Average]
[info]   (min, avg, max) = (24880.028, 24889.761, 24896.031), stdev = 6.941
[info]   CI (99.9%): [24863.033, 24916.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   269.133 ±(99.9%) 114.737 MB/sec [Average]
[info]   (min, avg, max) = (255.783, 269.133, 322.435), stdev = 29.797
[info]   CI (99.9%): [154.396, 383.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27647.213 ±(99.9%) 12119.358 B/op [Average]
[info]   (min, avg, max) = (26063.382, 27647.213, 33270.669), stdev = 3147.359
[info]   CI (99.9%): [15527.854, 39766.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.611 ±(99.9%) 5.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.611, 2.969), stdev = 1.318
[info]   CI (99.9%): [≈ 0, 5.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   63.076 ±(99.9%) 523.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.076, 306.409), stdev = 136.046
[info]   CI (99.9%): [≈ 0, 586.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.48% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18990.040 ops/s
[info] # Warmup Iteration   2: 21651.909 ops/s
[info] # Warmup Iteration   3: 32510.896 ops/s
[info] Iteration   1: 37321.525 ops/s
[info]                  ·gc.alloc.rate:                   408.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10786.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36978.593 ops/s
[info]                  ·gc.alloc.rate:                   404.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21774.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37426.478 ops/s
[info]                  ·gc.alloc.rate:                   409.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13964.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37442.426 ops/s
[info]                  ·gc.alloc.rate:                   409.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13958.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.750 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37226.124 ops/s
[info]                  ·gc.alloc.rate:               407.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          17232.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28051.401 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37279.029 ±(99.9%) 728.847 ops/s [Average]
[info]   (min, avg, max) = (36978.593, 37279.029, 37442.426), stdev = 189.279
[info]   CI (99.9%): [36550.182, 38007.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   408.213 ±(99.9%) 8.086 MB/sec [Average]
[info]   (min, avg, max) = (404.870, 408.213, 409.962), stdev = 2.100
[info]   CI (99.9%): [400.127, 416.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17232.019 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (17232.012, 17232.019, 17232.040), stdev = 0.012
[info]   CI (99.9%): [17231.971, 17232.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   419.061 ±(99.9%) 639.020 MB/sec [Average]
[info]   (min, avg, max) = (255.784, 419.061, 663.654), stdev = 165.951
[info]   CI (99.9%): [≈ 0, 1058.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17707.039 ±(99.9%) 27194.133 B/op [Average]
[info]   (min, avg, max) = (10786.894, 17707.039, 28051.401), stdev = 7062.230
[info]   CI (99.9%): [≈ 0, 44901.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.347 ±(99.9%) 2.868 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.347, 1.679), stdev = 0.745
[info]   CI (99.9%): [≈ 0, 3.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.605 ±(99.9%) 120.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.605, 70.589), stdev = 31.303
[info]   CI (99.9%): [≈ 0, 135.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.79% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 951.529 ops/s
[info] # Warmup Iteration   2: 3002.536 ops/s
[info] # Warmup Iteration   3: 2860.466 ops/s
[info] Iteration   1: 3390.335 ops/s
[info]                  ·gc.alloc.rate:                   1094.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              508131.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     607314.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.326 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3416.765 ops/s
[info]                  ·gc.alloc.rate:                   1103.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              508152.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     455722.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3400.322 ops/s
[info]                  ·gc.alloc.rate:                   1097.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              508152.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460466.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3471.723 ops/s
[info]                  ·gc.alloc.rate:                   1120.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              508152.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     604448.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.435 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3440.412 ops/s
[info]                  ·gc.alloc.rate:                   1110.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              508152.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459685.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3423.911 ±(99.9%) 126.151 ops/s [Average]
[info]   (min, avg, max) = (3390.335, 3423.911, 3471.723), stdev = 32.761
[info]   CI (99.9%): [3297.760, 3550.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1105.575 ±(99.9%) 40.603 MB/sec [Average]
[info]   (min, avg, max) = (1094.835, 1105.575, 1120.998), stdev = 10.545
[info]   CI (99.9%): [1064.972, 1146.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   508148.018 ±(99.9%) 35.391 B/op [Average]
[info]   (min, avg, max) = (508131.577, 508148.018, 508152.136), stdev = 9.191
[info]   CI (99.9%): [508112.627, 508183.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1126.239 ±(99.9%) 685.724 MB/sec [Average]
[info]   (min, avg, max) = (989.455, 1126.239, 1333.430), stdev = 178.080
[info]   CI (99.9%): [440.516, 1811.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   517527.515 ±(99.9%) 310678.078 B/op [Average]
[info]   (min, avg, max) = (455722.542, 517527.515, 607314.439), stdev = 80682.110
[info]   CI (99.9%): [206849.436, 828205.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.126 ±(99.9%) 61.186 B/op [Average]
[info]   (min, avg, max) = (9.435, 21.126, 48.174), stdev = 15.890
[info]   CI (99.9%): [≈ 0, 82.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.09% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24570.877 ops/s
[info] # Warmup Iteration   2: 56557.412 ops/s
[info] # Warmup Iteration   3: 57542.731 ops/s
[info] Iteration   1: 58864.508 ops/s
[info]                  ·gc.alloc.rate:                   751.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17249.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57860.866 ops/s
[info]                  ·gc.alloc.rate:                   738.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17557.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 58199.081 ops/s
[info]                  ·gc.alloc.rate:                   743.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17500.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 57536.649 ops/s
[info]                  ·gc.alloc.rate:                   734.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26630.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.708 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58314.827 ops/s
[info]                  ·gc.alloc.rate:                   744.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17600.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   58155.186 ±(99.9%) 1925.093 ops/s [Average]
[info]   (min, avg, max) = (57536.649, 58155.186, 58864.508), stdev = 499.941
[info]   CI (99.9%): [56230.093, 60080.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   742.707 ±(99.9%) 24.542 MB/sec [Average]
[info]   (min, avg, max) = (734.825, 742.707, 751.748), stdev = 6.373
[info]   CI (99.9%): [718.165, 767.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.002 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (20099.904, 20100.002, 20100.089), stdev = 0.068
[info]   CI (99.9%): [20099.741, 20100.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   712.700 ±(99.9%) 561.657 MB/sec [Average]
[info]   (min, avg, max) = (645.137, 712.700, 973.575), stdev = 145.861
[info]   CI (99.9%): [151.042, 1274.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19307.910 ±(99.9%) 15771.708 B/op [Average]
[info]   (min, avg, max) = (17249.479, 19307.910, 26630.762), stdev = 4095.862
[info]   CI (99.9%): [3536.202, 35079.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.591 ±(99.9%) 3.935 B/op [Average]
[info]   (min, avg, max) = (1.689, 2.591, 3.933), stdev = 1.022
[info]   CI (99.9%): [≈ 0, 6.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.39% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56506.724 ops/s
[info] # Warmup Iteration   2: 78050.637 ops/s
[info] # Warmup Iteration   3: 77430.641 ops/s
[info] Iteration   1: 79458.741 ops/s
[info]                  ·gc.alloc.rate:                   519.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11631.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 79771.552 ops/s
[info]                  ·gc.alloc.rate:                   521.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6538.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 79915.981 ops/s
[info]                  ·gc.alloc.rate:                   522.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13040.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 79535.566 ops/s
[info]                  ·gc.alloc.rate:                   520.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13101.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 79108.815 ops/s
[info]                  ·gc.alloc.rate:               517.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6586.483 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   79558.131 ±(99.9%) 1195.992 ops/s [Average]
[info]   (min, avg, max) = (79108.815, 79558.131, 79915.981), stdev = 310.595
[info]   CI (99.9%): [78362.139, 80754.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   520.075 ±(99.9%) 7.791 MB/sec [Average]
[info]   (min, avg, max) = (517.127, 520.075, 522.383), stdev = 2.023
[info]   CI (99.9%): [512.283, 527.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.005, 10288.006, 10288.006), stdev = 0.001
[info]   CI (99.9%): [10288.005, 10288.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.810 ±(99.9%) 655.956 MB/sec [Average]
[info]   (min, avg, max) = (331.070, 514.810, 662.243), stdev = 170.350
[info]   CI (99.9%): [≈ 0, 1170.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10179.616 ±(99.9%) 12915.100 B/op [Average]
[info]   (min, avg, max) = (6538.486, 10179.616, 13101.928), stdev = 3354.011
[info]   CI (99.9%): [≈ 0, 23094.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.415 ±(99.9%) 3.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 1.887), stdev = 0.824
[info]   CI (99.9%): [≈ 0, 3.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.214 ±(99.9%) 62.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.214, 37.372), stdev = 16.316
[info]   CI (99.9%): [≈ 0, 71.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.70% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66199.923 ops/s
[info] # Warmup Iteration   2: 87387.382 ops/s
[info] # Warmup Iteration   3: 87980.083 ops/s
[info] Iteration   1: 87843.130 ops/s
[info]                  ·gc.alloc.rate:      6.699 MB/sec
[info]                  ·gc.alloc.rate.norm: 120.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87882.443 ops/s
[info]                  ·gc.alloc.rate:      6.701 MB/sec
[info]                  ·gc.alloc.rate.norm: 120.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87896.050 ops/s
[info]                  ·gc.alloc.rate:      6.703 MB/sec
[info]                  ·gc.alloc.rate.norm: 120.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 87839.698 ops/s
[info]                  ·gc.alloc.rate:      6.698 MB/sec
[info]                  ·gc.alloc.rate.norm: 120.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87857.778 ops/s
[info]                  ·gc.alloc.rate:      6.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 120.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   87863.820 ±(99.9%) 94.948 ops/s [Average]
[info]   (min, avg, max) = (87839.698, 87863.820, 87896.050), stdev = 24.658
[info]   CI (99.9%): [87768.871, 87958.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.700 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (6.698, 6.700, 6.703), stdev = 0.002
[info]   CI (99.9%): [6.692, 6.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   120.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.005, 120.005, 120.005), stdev = 0.001
[info]   CI (99.9%): [120.005, 120.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:10:08
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    794878.914 ±   23599.006   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      2093.453 ±      61.553  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      2088.523 ±     609.158  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5      4135.044 ±    1251.930    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.092 ±       0.091  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.181 ±       0.176    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        25.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1593372.664 ±   40642.123   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1279.689 ±      32.626  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1264.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      1254.182 ±     554.823  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1238.898 ±     550.739    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.087 ±       0.132  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.086 ±       0.127    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        19.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        20.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   3521222.235 ±  151812.532   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       232.704 ±      10.173  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5       204.662 ±     440.550  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5        91.315 ±     196.618    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.005 ±       0.044  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.002 ±       0.019    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         8.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    170493.001 ±    4025.816   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1445.737 ±      34.400  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     13344.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      1389.727 ±     573.771  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5     12833.701 ±    5617.803    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.079 ±       0.154  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.730 ±       1.419    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        21.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        21.000                    ms
[info] AdtBenchmark.writeCirce                                                                  thrpt    5    587632.323 ±   10771.548   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1944.666 ±      35.686  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      5208.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      1883.262 ±     718.207  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5044.725 ±    1976.013    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.100 ±       0.105  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.268 ±       0.281    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                        thrpt    5        28.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                         thrpt    5        23.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2093450.669 ±  104410.269   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       744.947 ±      37.364  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       560.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5       784.008 ±     692.132  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       589.335 ±     518.513    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.521 ±       3.994  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.393 ±       3.014    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        12.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        13.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5   8720785.605 ±  286758.894   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       443.289 ±      14.597  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       434.076 ±     577.833  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        78.232 ±     102.338    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.369 ±       3.000  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.066 ±       0.540    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         7.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        10.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    310134.444 ±    9056.022   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       991.620 ±      29.161  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      5032.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5       983.341 ±      28.307  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4990.088 ±     129.958    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.067 ±       0.088  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.338 ±       0.451    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1663073.315 ±   43633.687   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2569.860 ±      67.424  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2571.377 ±     707.906  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      2433.987 ±     702.976    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.121 ±       0.154  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.114 ±       0.146    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        38.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2605489.956 ±   40337.273   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1827.631 ±      28.269  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1870.130 ±     703.980  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1129.413 ±     412.258    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.091  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.055 ±       0.055    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        28.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5   9505881.156 ±  518279.860   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1208.043 ±      66.222  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5      1205.028 ±     701.564  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       199.542 ±     117.024    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.058 ±       0.119  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.010 ±       0.020    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        18.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    616937.563 ±   16452.660   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1568.103 ±      41.963  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4000.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1526.842 ±     687.967  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      3897.309 ±    1850.558    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.079 ±       0.119  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.202 ±       0.300    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        23.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   2111264.087 ±   57599.287   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      2050.079 ±      56.268  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1528.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      2020.831 ±      55.942  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      1506.269 ±      62.241    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.087 ±       0.132  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.065 ±       0.098    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        30.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   6010755.520 ±  152755.376   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1649.957 ±      41.766  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1662.562 ±      75.961  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       435.314 ±      22.214    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±       0.105  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.021 ±       0.027    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  22258656.284 ±  138585.689   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       678.886 ±       3.846  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       663.722 ±       2.504  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5        46.928 ±       0.379    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.222  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.005 ±       0.016    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  27519962.633 ±  126991.553   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1050286.307 ±   42577.202   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1596.504 ±      63.598  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2392.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1595.043 ±     536.722  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2390.416 ±     830.469    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.075 ±       0.091  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.112 ±       0.136    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        24.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     19197.685 ±     509.562   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1359.406 ±      35.570  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    111440.100 ±      29.834    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1338.999 ±      31.067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    109769.076 ±    2464.720    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         7.169 ±      11.781    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     30943.163 ±    1163.569   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       830.767 ±      30.375  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     42253.827 ±      50.048    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       788.344 ±     690.673  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     40065.350 ±   34380.812    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.096 ±       0.209  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         4.858 ±      10.526    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     28935.929 ±    1623.113   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       388.776 ±      21.550  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     21144.016 ±       0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       368.284 ±     308.540  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     20035.276 ±   16881.927    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.347 ±       2.753  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5        18.776 ±     148.784    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     25581.552 ±     657.906   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1324.161 ±      34.242  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     81456.018 ±       0.013    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1328.113 ±      43.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     81700.605 ±    2722.717    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         4.608 ±       5.593    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        19.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     27666.880 ±     969.548   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1894.501 ±      65.311  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    107762.606 ±      66.889    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1882.923 ±     698.359  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5    107076.730 ±   38206.884    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.100 ±       0.208  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         5.704 ±      12.010    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     27780.458 ±     346.011   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1629.448 ±      20.340  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     92312.017 ±       0.010    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1663.285 ±      71.799  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     94228.472 ±    3666.313    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.096 ±       0.146  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         5.426 ±       8.275    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        25.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     30662.829 ±     903.020   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1701.357 ±      50.096  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5     87328.016 ±       0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5      1679.659 ±      43.305  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5     86215.402 ±    1456.012    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.096 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         4.922 ±       6.371    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        25.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     30444.502 ±    1197.464   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1630.216 ±      63.544  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5     84272.015 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5      1612.028 ±     605.826  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5     83349.468 ±   31966.944    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5         3.867 ±       4.643    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      8412.504 ±     199.119   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1189.612 ±      28.195  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    222544.053 ±       0.008    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1194.048 ±     692.471  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5    223290.949 ±  126923.363    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5        11.674 ±      10.445    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5     18170.738 ±     339.092   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1567.241 ±      29.188  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    135736.026 ±       0.014    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1543.381 ±     700.041  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    133712.056 ±   62218.833    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         6.128 ±       7.903    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        23.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        19.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     41592.130 ±     846.620   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1148.306 ±      23.709  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     43448.132 ±       1.042    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1190.527 ±     699.172  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     45050.768 ±   26594.911    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         3.307 ±       2.495    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     61775.743 ±    2712.491   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       798.306 ±      34.815  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       799.201 ±     704.114  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     20391.290 ±   18645.311    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.139  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.595 ±       3.552    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                     thrpt    5     31684.093 ±    1581.032   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2149.358 ±     107.645  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    106760.015 ±       0.009    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2146.575 ±     721.593  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    106678.491 ±   38582.571    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.108  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.561 ±       5.539    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                           thrpt    5        32.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                            thrpt    5        35.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     28729.498 ±     495.472   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1674.617 ±      29.025  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     91736.016 ±       0.012    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1667.614 ±      67.793  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     91355.240 ±    4590.302    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.968 ±       6.685    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        25.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     38037.460 ±     352.093   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1629.124 ±      15.143  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     67408.012 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5      1612.175 ±     566.552  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     66717.627 ±   23935.850    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         3.619 ±       2.803    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        21.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     37860.780 ±     779.627   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1555.648 ±      32.101  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     64664.011 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5      1611.108 ±     575.292  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     66980.880 ±   24418.140    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5         3.810 ±       6.916    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    326957.727 ±    2796.077   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1796.962 ±      15.984  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      8648.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1818.042 ±     695.444  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8750.803 ±    3413.354    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.441 ±       0.345    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        27.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    690401.456 ±   27290.429   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       572.020 ±      22.644  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       523.478 ±     689.810  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1194.906 ±    1591.359    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.458 ±       3.634  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.034 ±       8.186    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1739259.946 ±   46102.747   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       335.956 ±       8.933  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       301.776 ±     161.609  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       273.198 ±     150.220    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.338 ±       2.717  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.305 ±       2.450    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    106399.762 ±    2017.495   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3865.989 ±      72.243  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      3873.319 ±     728.861  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     57291.506 ±   11417.869    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.150 ±       0.192  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.219 ±       2.875    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        57.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        46.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    374770.976 ±    4537.424   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1278.391 ±      14.788  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      5368.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1268.215 ±     583.957  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      5323.991 ±    2407.665    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.280 ±       0.373    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        19.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5    884591.528 ±   46907.571   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       625.125 ±      32.929  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       655.096 ±       6.165  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1165.464 ±      53.111    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.465 ±       3.507  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.834 ±       6.302    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        11.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2141792.394 ±   13375.896   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       990.763 ±       6.217  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       999.947 ±      16.529  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       734.747 ±       8.878    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.061 ±       0.059    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        15.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2199172.073 ±   15765.580   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    501373.306 ±   15440.859   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       586.187 ±      17.684  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5       591.844 ±     567.111  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1857.837 ±    1781.292    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.444 ±       3.597  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.386 ±      11.235    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    180106.873 ±    2395.146   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2213.779 ±      28.962  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     19344.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2230.391 ±     729.990  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     19493.244 ±    6594.354    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.108 ±       0.154  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.946 ±       1.352    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        33.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    429155.261 ±    4037.312   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       355.617 ±       3.301  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       349.500 ±     368.354  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1281.820 ±    1356.358    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.449 ±       3.699  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.647 ±      13.579    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5    986291.856 ±   14651.677   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       190.522 ±       2.873  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       204.647 ±     440.519  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       327.012 ±     703.928    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.005 ±       0.044    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     81356.820 ±    3156.938   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3357.083 ±     132.297  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      3323.482 ±     634.149  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     64292.853 ±   11161.771    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.158 ±       0.121  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.057 ±       2.262    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        49.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        44.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    248855.338 ±    7507.555   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1372.534 ±      41.238  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      8680.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1337.181 ±      34.194  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      8456.777 ±     305.515    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.446 ±       0.761    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        20.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        16.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                  thrpt    5   1622925.090 ±   66893.237   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       833.173 ±      34.378  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       855.129 ±     701.993  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       828.854 ±     670.880    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.065 ±       0.151    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1782036.516 ±   87214.454   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       480.134 ±      23.553  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       449.155 ±     628.452  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       396.193 ±     548.360    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.375 ±       3.053  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.328 ±       2.666    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1957053.665 ±   13148.497   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     38299.188 ±    1786.599   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1677.835 ±      77.548  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     68944.749 ±       6.348    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1674.725 ±      55.130  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     68826.961 ±    4544.111    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.200  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.244 ±       8.140    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        20.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     25530.332 ±     862.253   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1574.709 ±      53.174  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     97060.902 ±      27.747    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1611.329 ±     576.962  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     99333.465 ±   36127.413    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.108 ±       0.174  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         6.687 ±      10.860    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     58063.581 ±     940.537   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1017.785 ±      15.768  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     27584.008 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       988.726 ±      23.842  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     26796.378 ±     406.459    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.193  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.034 ±       5.255    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     66426.490 ±    3311.784   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       446.781 ±      21.971  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10584.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.265 ±     765.397  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     10667.868 ±   18137.199    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.354 ±       2.786  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         8.361 ±      65.690    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     33982.384 ±     470.891   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1739.072 ±      24.051  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80536.014 ±       0.008    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1740.395 ±     619.471  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     80585.581 ±   27980.655    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.435 ±       4.230    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        23.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     38777.493 ±     361.651   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       611.637 ±       5.645  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24824.511 ±       4.298    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5       594.328 ±     566.672  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     24126.219 ±   23053.861    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.384 ±       3.042  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        15.605 ±     123.514    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     41402.257 ±     586.340   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       416.301 ±       6.066  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     15824.011 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       429.374 ±     573.739  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16319.612 ±   21766.344    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.440 ±       3.564  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        16.718 ±     135.551    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     44260.148 ±    1519.445   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       434.246 ±      14.585  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     15440.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       383.063 ±     617.472  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     13600.003 ±   21661.958    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.379 ±       3.001  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        13.533 ±     107.175    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     44901.946 ±     662.350   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       389.160 ±       5.645  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     13640.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5       367.726 ±     489.977  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     12901.060 ±   17423.951    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.381 ±       3.062  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5        13.449 ±     108.030    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     15259.137 ±     582.284   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1089.360 ±      41.762  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    112346.147 ±      25.533    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1066.314 ±     572.608  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    109946.842 ±   57875.124    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.092 ±       0.176  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         9.423 ±      18.059    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        13.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     15720.933 ±     501.398   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       953.816 ±      31.000  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     95484.168 ±      52.075    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       922.299 ±     574.601  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     92377.763 ±   58597.799    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         5.435 ±      12.368    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        14.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     74781.902 ±    4995.616   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       194.633 ±      12.958  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       204.658 ±     440.542  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4318.604 ±    9302.695    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.044 ±       0.375    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     14021.910 ±     369.071   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1343.679 ±      35.660  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    150800.222 ±       1.614    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1395.561 ±     608.994  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    156575.736 ±   65846.389    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         9.347 ±      11.049    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        21.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        20.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     56247.489 ±     918.392   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1394.522 ±      22.721  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     39016.008 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1337.224 ±      34.054  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     37413.868 ±    1361.593    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.176  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         2.099 ±       4.928    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                              thrpt    5     80588.245 ±    1632.083   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1220.282 ±      24.669  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     23832.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1192.914 ±     690.113  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     23306.029 ±   13723.652    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.046 ±       0.105  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.893 ±       2.029    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    287848.601 ±    9467.504   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       456.529 ±      15.177  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       449.300 ±     762.801  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2456.569 ±    4178.986    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.390 ±       3.043  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.147 ±      16.790    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    336265.219 ±     434.458   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     72911.296 ±    1688.790   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1233.074 ±      28.422  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     26616.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1262.802 ±     573.097  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5     27272.708 ±   12862.693    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.104 ±       0.150  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         2.251 ±       3.273    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        19.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     27045.798 ±     726.222   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       600.790 ±      15.889  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     34959.900 ±       1.001    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5       593.484 ±     567.744  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     34559.525 ±   33354.580    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.383 ±       3.079  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        22.314 ±     179.223    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                   thrpt    5     73242.475 ±    1830.412   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       913.779 ±      23.200  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     19632.006 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       920.510 ±     554.638  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     19777.455 ±   11936.502    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.154  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.875 ±       3.259    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    126699.547 ±    3320.977   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       494.602 ±      12.965  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.004 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       515.855 ±     657.547  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      6416.470 ±    8268.666    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.356 ±       2.713  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         4.461 ±      33.996    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     21988.395 ±     280.971   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1228.700 ±      15.837  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     87944.055 ±       0.279    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1253.516 ±     570.010  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     89731.914 ±   41168.618    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.075 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         5.363 ±       3.097    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    165310.435 ±    6435.292   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1081.540 ±      42.193  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1130.931 ±     702.304  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10771.192 ±    6826.383    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.516 ±       0.687    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        17.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                  thrpt    5    547666.316 ±   33718.599   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       554.118 ±      34.113  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       523.580 ±     690.943  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1499.346 ±    1922.436    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.459 ±       3.643  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.331 ±      10.568    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    567897.931 ±    8338.900   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       435.913 ±       6.573  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       382.527 ±     616.343  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1059.782 ±    1704.008    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.379 ±       2.932  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.056 ±       8.169    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         7.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    602168.657 ±     749.846   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    333442.649 ±    2754.219   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       922.284 ±       7.678  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5       918.239 ±     552.909  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      4332.758 ±    2605.386    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.062 ±       0.241  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.294 ±       1.133    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     35956.117 ±     815.239   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1693.995 ±      38.357  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     74144.889 ±       7.550    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1680.287 ±      41.888  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     73546.219 ±    2041.789    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         3.463 ±       5.786    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5     94518.614 ±    1496.337   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1103.236 ±      17.815  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     18368.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1057.033 ±     568.877  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     17606.052 ±    9759.520    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.071 ±       0.201  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.179 ±       3.343    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    160426.974 ±     928.970   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       104.380 ±       0.608  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       102.320 ±     539.502  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1005.191 ±    5300.083    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.509 ±       4.323  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         4.999 ±      42.483    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         4.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     38769.336 ±     802.361   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2034.920 ±      43.510  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     82607.726 ±     548.199    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      2015.583 ±      67.384  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     81825.020 ±    3413.487    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.104 ±       0.160  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         4.228 ±       6.539    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     86208.515 ±    2602.467   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       689.018 ±      20.910  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12576.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5       661.115 ±       5.780  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12067.311 ±     379.009    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.054 ±       0.231  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.986 ±       4.202    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5     95956.429 ±    7378.121   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       378.552 ±      28.837  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      6208.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       363.907 ±     485.562  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5969.269 ±    7897.344    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.441 ±       3.606  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         7.178 ±      58.730    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    113176.629 ±    7918.078   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       418.808 ±      29.284  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5824.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       433.997 ±     578.006  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      6065.041 ±    8561.901    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.373 ±       2.945  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.134 ±      40.510    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    112380.806 ±    2310.954   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       327.342 ±       6.771  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      4584.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5       352.414 ±     365.220  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5      4938.843 ±    5203.372    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5         0.372 ±       3.046  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.217 ±      42.713    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9813.346 ±     205.812   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1627.164 ±      34.980  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    260932.353 ±      26.808    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1610.742 ±     578.036  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    258276.574 ±   91589.013    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.062 ±       0.139  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        10.000 ±      22.029    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5      9521.340 ±     405.526   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1464.792 ±      62.758  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    242110.800 ±      56.516    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1463.311 ±     670.672  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    242126.437 ±  120934.443    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.092 ±       0.146  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        15.127 ±      23.748    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        19.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    115568.457 ±    3643.865   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       300.766 ±       9.480  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       286.574 ±     162.267  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3901.480 ±    2162.311    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.327 ±       2.659  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         4.424 ±      35.980    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5460.828 ±      68.909   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1452.644 ±      18.299  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    418664.083 ±       0.013    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1464.229 ±     716.586  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    422117.805 ±  210936.747    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        15.608 ±      26.465    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     24346.260 ±    1143.490   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1792.413 ±      81.916  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    115855.223 ±     123.435    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1747.641 ±     585.210  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    112936.134 ±   35837.315    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.092 ±       0.185  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.929 ±      11.980    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                               thrpt    5     28799.885 ±     588.119   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5      1837.205 ±      37.482  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5    100392.016 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1809.074 ±     713.823  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     98896.348 ±   40931.771    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.083 ±       0.113  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         4.549 ±       6.160    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        27.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    338896.755 ±    2442.490   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       747.591 ±       5.323  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       730.667 ±     573.028  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3393.812 ±    2673.391    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.071 ±       0.134  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.329 ±       0.621    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    387908.899 ±     461.605   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     29025.716 ±     863.633   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1903.557 ±      55.429  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    103200.016 ±       0.012    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1947.839 ±     577.288  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    105623.929 ±   32415.587    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.125 ±       0.170  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         6.778 ±       9.273    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        29.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    126538.108 ±    6747.692   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2179.247 ±     116.311  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     27104.004 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2229.109 ±     709.187  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     27736.936 ±    9402.650    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.117 ±       0.122  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         1.447 ±       1.464    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        33.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    298534.995 ±    2771.272   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       421.874 ±       3.945  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       429.023 ±     571.931  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2262.082 ±    3023.107    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.457 ±       3.637  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.403 ±      19.104    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    685186.192 ±   11382.527   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       445.851 ±       7.472  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       450.114 ±     764.737  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1034.030 ±    1758.396    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.352 ±       2.745  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.812 ±       6.329    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     70933.125 ±    1304.431   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      3014.474 ±      53.057  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66886.110 ±     259.206    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      2980.334 ±     598.716  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     66126.059 ±   13027.799    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.117 ±       0.185  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         2.587 ±       4.086    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        38.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    211807.255 ±    5768.913   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1721.670 ±      46.359  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     12792.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1745.884 ±     536.280  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     12975.407 ±    4192.995    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.680 ±       0.519    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        26.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    819445.174 ±   48681.727   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       645.680 ±      38.185  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       655.016 ±       6.015  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1258.184 ±      80.540    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.465 ±       3.598  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.890 ±       6.894    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1008737.185 ±   50408.683   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       548.702 ±      27.266  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.450 ±     698.886  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       826.499 ±    1076.885    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.378 ±       2.946  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.601 ±       4.690    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5   1058663.903 ±   13491.566   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     30332.803 ±     577.559   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1674.813 ±      32.020  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     86875.151 ±      27.009    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1674.788 ±      54.205  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     86875.171 ±    3077.525    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.119  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.532 ±       6.123    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                      thrpt    5    134679.445 ±    1227.139   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1852.670 ±      17.060  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     21648.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1882.843 ±     706.296  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5     21999.428 ±    8194.912    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.112 ±       0.185  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.313 ±       2.143    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                            thrpt    5        28.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                             thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    193080.081 ±    4804.227   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1152.326 ±      28.424  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      9392.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1189.339 ±     697.887  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      9690.112 ±    5578.204    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.509 ±       0.655    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        18.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        17.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    239401.714 ±   11200.087   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1246.073 ±      58.391  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      8192.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1272.707 ±     584.234  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      8365.169 ±    3761.405    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.493 ±       0.888    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        19.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        14.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     66943.545 ±    1490.765   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2782.202 ±      62.299  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     65408.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      2768.464 ±     603.440  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     65085.801 ±   14144.240    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.112 ±       0.122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.644 ±       2.881    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        41.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        42.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                     thrpt    5    165821.408 ±    3067.670   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1084.895 ±      19.880  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1130.950 ±     702.535  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     10735.263 ±    6732.131    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.672 ±       1.155    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                           thrpt    5        17.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                            thrpt    5        14.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    568539.755 ±   12777.723   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       575.086 ±      12.967  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       522.653 ±     688.667  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1448.388 ±    1925.121    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.469 ±       3.723  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.294 ±      10.273    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    550162.999 ±   20813.149   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       422.280 ±      15.989  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       433.675 ±     577.692  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      1239.626 ±    1635.230    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.381 ±       2.951  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.086 ±       8.408    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    616819.468 ±     904.360   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    348494.241 ±   12999.145   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       960.201 ±      35.853  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5       919.189 ±     566.601  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4146.863 ±    2459.009    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.062 ±       0.170  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.281 ±       0.762    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5      9219.906 ±     213.494   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1207.706 ±      27.695  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    206147.448 ±      27.172    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1201.544 ±     704.525  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5    205058.361 ±  119063.940    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5        13.530 ±      22.835    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5      9697.197 ±     377.194   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1162.060 ±      45.410  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    188600.133 ±      53.359    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1190.641 ±     699.263  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5    193123.231 ±  109717.434    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5        10.113 ±      20.477    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        17.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    145474.282 ±    3381.488   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       946.598 ±      22.349  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5      1001.465 ±      14.709  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     10833.751 ±     216.262    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.586 ±       0.998    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      7650.965 ±     428.012   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1424.797 ±      79.712  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    293080.057 ±       0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1464.586 ±     700.585  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5    301611.637 ±  156956.719    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5        12.838 ±      25.806    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        22.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     19868.463 ±    1218.049   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1055.474 ±      64.013  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     83607.187 ±     113.483    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1063.696 ±     582.073  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5     84227.666 ±   44432.999    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         4.620 ±       5.311    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                         thrpt    5     22373.452 ±    1075.158   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       948.216 ±      45.369  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5     66696.021 ±       0.011    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       922.217 ±     568.989  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     64928.450 ±   41416.452    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         4.983 ±      11.618    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                               thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                thrpt    5        13.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    694192.123 ±   18067.653   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1252.647 ±      32.473  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1203.578 ±     699.990  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      2728.371 ±    1573.902    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.151 ±       0.197    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    847976.275 ±    4642.979   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     21496.497 ±     655.306   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       991.325 ±      30.514  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     72567.732 ±      30.914    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       992.429 ±      21.434  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5     72651.932 ±    2572.789    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         4.576 ±       9.294    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     25267.313 ±     584.858   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1414.932 ±      33.040  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     88133.159 ±      28.428    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1406.660 ±     592.053  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     87615.917 ±   36685.690    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.931 ±      10.824    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        19.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     25936.834 ±    1081.762   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1201.437 ±      48.578  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     72890.685 ±      58.092    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1192.668 ±     709.598  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     72349.114 ±   42672.158    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         4.800 ±       9.399    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        15.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    248115.256 ±   10155.914   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       645.801 ±      26.199  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       665.513 ±       2.622  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      4221.397 ±     173.004    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.316 ±       0.763    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     15685.139 ±     509.799   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1604.562 ±      51.296  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    160984.047 ±       0.142    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1601.826 ±     545.800  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    160786.247 ±   58166.223    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         8.767 ±       6.631    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        20.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     43336.943 ±    1118.816   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1378.078 ±      36.026  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     50040.010 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1403.518 ±     545.838  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     50954.642 ±   19262.511    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.721 ±       3.333    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                             thrpt    5    113242.012 ±    1639.124   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5      1328.103 ±      18.950  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     18456.004 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1328.745 ±      46.650  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     18464.979 ±     626.148    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.079 ±       0.119  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.099 ±       1.643    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1091587.714 ±   24585.552   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1170.919 ±      25.858  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1202.656 ±     705.010  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1732.800 ±     986.686    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.108 ±       0.131    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        15.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    693105.998 ±    4698.566   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     47572.312 ±    1708.283   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1261.377 ±      45.659  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     41728.009 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1262.966 ±     552.741  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     41769.743 ±   17836.313    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.339 ±       5.133    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        19.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     14787.661 ±     352.821   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1343.190 ±      32.208  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    142922.436 ±      25.259    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1338.556 ±      31.828  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    142432.582 ±    4097.290    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         6.191 ±      10.941    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     15741.018 ±     259.852   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1282.355 ±      21.502  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    128195.962 ±      52.093    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1326.675 ±      45.757  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    132628.217 ±    4921.476    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.071 ±       0.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         7.079 ±      13.469    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    266910.110 ±    1762.572   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       694.635 ±       4.534  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       732.304 ±     577.565  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      4319.310 ±    3440.954    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.491 ±       0.749    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        10.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     11029.118 ±      48.926   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1515.777 ±       7.075  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    216280.314 ±       2.359    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1534.008 ±     721.079  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    218879.926 ±  102833.544    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         9.503 ±      18.762    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        23.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        21.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     42117.698 ±     627.517   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1599.430 ±      23.789  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     59768.010 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1608.859 ±     563.296  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     60131.829 ±   21570.027    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.490 ±       3.292    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        24.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        21.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                             thrpt    5     41225.428 ±     534.405   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5      1227.990 ±      15.964  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     46872.011 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1259.866 ±     585.774  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     48090.844 ±   22413.208    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.222 ±       5.465    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1095981.666 ±   31933.823   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       997.222 ±      29.266  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1000.043 ±      17.199  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1436.093 ±      32.096    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.071 ±       0.072  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.102 ±       0.104    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        13.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1277591.622 ±    4459.841   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5      3572.272 ±     171.392   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       487.041 ±      23.398  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5    214544.125 ±       0.022    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       445.528 ±     753.404  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    195964.557 ±  328373.509    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.435 ±       3.507  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       193.669 ±    1562.607    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    118858.845 ±    3089.687   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2206.987 ±      57.443  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     29224.004 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2162.069 ±     719.529  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     28626.748 ±    9349.102    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.048 ±       2.048    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    251827.843 ±    3991.306   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       552.998 ±       8.846  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       523.071 ±     689.438  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3267.788 ±    4293.881    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.475 ±       3.688  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.986 ±      23.197    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    484633.281 ±    6013.936   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       610.934 ±       7.662  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       665.092 ±       2.606  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      2159.896 ±      26.446    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.360 ±       2.613  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.170 ±       8.484    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     69565.483 ±    2054.365   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3014.673 ±      83.093  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68198.941 ±     266.357    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2980.399 ±     556.552  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     67413.996 ±   11533.424    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.137 ±       0.122  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.111 ±       2.798    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        44.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        37.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    179913.229 ±    4399.144   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1835.473 ±      44.617  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     16056.003 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1883.013 ±     691.191  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     16469.155 ±    5904.072    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.100 ±       0.105  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.873 ±       0.893    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        28.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    482023.021 ±   11133.680   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       494.967 ±      11.363  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       509.097 ±     650.099  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1663.184 ±    2136.527    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.458 ±       3.549  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.496 ±      11.587    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    563885.134 ±    8724.481   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       441.397 ±       6.811  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       448.704 ±     761.849  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1253.692 ±    2142.695    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.389 ±       3.124  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.091 ±       8.780    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    643146.220 ±    4336.997   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     27095.682 ±     162.577   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1489.658 ±       8.621  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     86516.464 ±      26.955    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1535.931 ±     704.237  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     89210.631 ±   41155.346    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.869 ±       7.651    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        20.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      7159.090 ±     291.154   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1132.253 ±      45.283  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    248864.062 ±       0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1133.364 ±     703.277  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    249238.473 ±  158346.974    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.139  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5        13.777 ±      31.223    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                         thrpt    5      7245.192 ±      45.686   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                          thrpt    5      1058.221 ±       6.581  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                     thrpt    5    229848.061 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5      1055.648 ±     555.717  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5    229290.073 ±  120722.476    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.075 ±       0.108  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        16.277 ±      23.338    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                thrpt    5        14.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5    101239.988 ±    2859.604   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       980.862 ±      27.696  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.004 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1001.254 ±      13.998  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     15565.569 ±     421.415    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         1.165 ±       1.423    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      6961.430 ±     212.704   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1270.667 ±      39.005  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    287248.063 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1260.892 ±     595.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    285110.962 ±  136633.891    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5        16.984 ±      28.089    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        19.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     16339.683 ±     340.006   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       963.912 ±      19.690  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     92845.779 ±     132.733    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5       995.599 ±      19.275  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5     95899.725 ±    2456.963    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5         7.217 ±       8.770    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                        thrpt    5     18711.380 ±     463.306   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                         thrpt    5       877.599 ±      21.993  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                    thrpt    5     73808.025 ±       0.015    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                thrpt    5       854.900 ±     689.574  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     71970.462 ±   59467.165    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         4.904 ±      12.086    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                              thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    498305.940 ±   19812.159   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5      1129.656 ±      44.897  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5      1135.363 ±     711.301  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5      3583.497 ±    2160.773    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.092 ±       0.269  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.289 ±       0.844    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        14.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    417390.743 ±     901.286   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     18105.704 ±     785.842   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       916.725 ±      39.896  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     79682.941 ±      28.270    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5       924.365 ±     557.406  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5     80306.790 ±   47402.161    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5         0.054 ±       0.193  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5         4.698 ±      16.707    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        13.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     11808.254 ±     305.991   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1217.513 ±      31.684  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    162256.069 ±      30.807    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1201.144 ±     698.881  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    160000.474 ±   90754.395    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.092 ±       0.185  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        12.230 ±      24.845    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     12493.962 ±     236.446   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1159.542 ±      22.626  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    146065.089 ±      62.272    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1190.498 ±     698.779  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5    149975.018 ±   88276.909    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.079 ±       0.164  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         9.976 ±      20.885    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    166888.116 ±    6111.874   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       965.432 ±      35.630  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.003 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       934.265 ±     578.507  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      8814.130 ±    5547.173    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.589 ±       1.189    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                 thrpt    5     10983.146 ±     237.224   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1410.167 ±      31.026  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5    202040.125 ±       0.729    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1456.965 ±     697.660  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    208729.587 ±   99151.734    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         8.938 ±      18.068    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                       thrpt    5        22.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                        thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     27110.570 ±     952.248   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1189.817 ±      40.335  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     69072.798 ±     106.927    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1198.908 ±     710.826  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     69595.936 ±   41068.569    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         3.878 ±       9.063    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                            thrpt    5     95516.111 ±    4266.620   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1765.965 ±      79.314  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     29096.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1807.083 ±     698.925  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     29770.474 ±   11267.415    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.505 ±       1.962    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        27.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    660544.970 ±    4437.068   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       906.558 ±       6.205  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       931.468 ±     576.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      2219.456 ±    1376.478    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.129 ±       0.218    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    758321.241 ±    6328.005   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                thrpt    5     81155.552 ±    1823.793   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1800.683 ±      39.621  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5     34912.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1804.354 ±     715.717  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5     34989.836 ±   14170.837    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.374 ±       2.379    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                      thrpt    5        27.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                       thrpt    5        28.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     22259.110 ±     990.488   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1105.840 ±      49.052  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     78174.933 ±      27.132    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1131.696 ±     696.279  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     80040.745 ±   50291.283    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.176  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         5.306 ±      12.485    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        17.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        15.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     19073.790 ±     458.720   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       761.342 ±      18.369  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     62816.525 ±      59.551    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       786.774 ±     695.336  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     64902.339 ±   57052.888    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.474 ±       3.680  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        38.965 ±     302.543    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    177238.199 ±    1958.148   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       461.331 ±       4.887  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.258 ±     765.389  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      3996.673 ±    6788.150    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.337 ±       2.705  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.997 ±      24.025    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     14846.472 ±     717.446   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1114.677 ±      54.191  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    118136.032 ±       0.022    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1122.911 ±     689.560  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    119036.976 ±   73717.522    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         7.082 ±      11.214    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        17.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     81930.062 ±    1789.964   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1618.999 ±      35.989  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     31096.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1677.037 ±      48.047  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     32211.580 ±    1153.163    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±       0.174  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.521 ±       3.355    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    155593.433 ±    3812.613   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1643.495 ±      40.546  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     16624.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1670.046 ±      63.068  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16892.374 ±     337.709    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.092 ±       0.146  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.928 ±       1.499    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        25.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        22.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    443103.495 ±    6372.827   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       491.099 ±       7.100  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       515.833 ±     657.092  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1833.658 ±    2357.360    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.381 ±       2.970  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.356 ±      10.562    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    526675.933 ±     925.894   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    108421.920 ±    2797.867   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1550.489 ±      39.287  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     22504.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1537.893 ±     694.531  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     22323.896 ±   10171.597    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.209 ±       2.166    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        23.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        19.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    150407.403 ±    2364.294   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2591.828 ±      40.553  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     27120.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2574.048 ±     703.648  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     26937.485 ±    7580.965    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.129 ±       0.143  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.350 ±       1.488    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        38.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        32.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    356584.852 ±    9863.048   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       364.366 ±      10.114  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       363.623 ±     637.345  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1604.529 ±    2808.315    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.460 ±       3.808  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         2.038 ±      16.863    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    887134.852 ±   77163.344   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       306.691 ±      26.799  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       286.478 ±     715.088  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       511.970 ±    1295.770    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.340 ±       2.659  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.594 ±       4.637    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     77539.636 ±    1778.411   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3326.645 ±      76.820  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67512.409 ±       3.476    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      3323.506 ±     564.590  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     67440.685 ±   10505.060    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.142 ±       0.243  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         2.879 ±       5.003    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        49.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        43.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    238439.886 ±    6611.515   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1823.208 ±      49.207  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12032.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1883.328 ±     708.313  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12432.132 ±    4819.553    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.605 ±       0.610    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        28.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1243644.724 ±   16973.022   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       815.534 ±      10.952  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       788.540 ±     691.703  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       997.865 ±     875.684    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.079 ±       0.101    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1261263.435 ±   28900.350   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       519.321 ±      11.938  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       464.070 ±     698.878  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       579.002 ±     871.146    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.375 ±       2.962  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.467 ±       3.685    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1366012.981 ±   66386.678   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     33819.609 ±     682.793   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1711.458 ±      33.462  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     79633.944 ±      16.623    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1674.525 ±      53.002  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     77914.682 ±    1240.882    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.685 ±       4.159    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        25.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     17809.936 ±     479.919   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1869.446 ±      49.265  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    165173.749 ±      17.767    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1887.074 ±     727.811  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    166752.607 ±   65181.415    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.100 ±       0.200  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         8.843 ±      17.721    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        28.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     97430.952 ±    2659.850   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1278.826 ±      35.326  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     20656.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5      1326.472 ±      45.495  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     21426.895 ±    1104.435    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.078 ±       1.107    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    274233.755 ±   21584.708   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       892.214 ±      70.261  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       866.591 ±     700.596  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4977.266 ±    4102.089    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.261 ±       0.742    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     16796.445 ±     588.644   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2141.487 ±      73.824  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    200640.295 ±       2.294    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2152.640 ±     718.975  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    201816.736 ±   74211.014    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         8.194 ±       6.341    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        32.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     20681.947 ±     639.623   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1673.929 ±      51.524  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5    127370.927 ±      70.208    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1677.901 ±      47.841  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    127680.600 ±    5726.805    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         6.653 ±      10.895    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     88266.989 ±    1493.251   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1209.350 ±      19.683  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.006 ±       0.063    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1191.525 ±     698.840  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     21240.313 ±   12397.360    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.114 ±       1.433    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    331893.684 ±    8704.474   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5      1057.937 ±      27.609  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5      1067.082 ±     559.572  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5057.472 ±    2569.367    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.336 ±       0.581    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        13.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    396786.270 ±   11546.623   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     25849.379 ±     432.648   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1762.423 ±      30.442  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5    107288.213 ±       1.703    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1810.133 ±     691.237  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    110171.199 ±   40932.286    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.117 ±       0.176  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         7.098 ±      10.697    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        27.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     72823.842 ±     628.152   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1565.288 ±      13.725  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     33824.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1538.642 ±     695.433  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     33244.401 ±   14875.048    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         1.350 ±       1.734    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        23.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        20.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     93653.186 ±    2835.730   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1166.975 ±      35.567  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     19611.709 ±      31.892    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1186.913 ±     675.956  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     19950.116 ±   11448.893    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.146  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.189 ±       2.452    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    103567.053 ±    2013.342   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1211.450 ±      23.104  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     18408.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1267.125 ±     576.892  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     19253.153 ±    8730.899    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.886 ±       1.591    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        19.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     46462.408 ±    1720.605   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2227.503 ±      82.784  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     75448.009 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2219.561 ±     740.344  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     75171.038 ±   24438.762    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.112 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.802 ±       4.050    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        33.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    120205.904 ±    3465.313   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1128.070 ±      33.152  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     14768.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1127.400 ±     718.217  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     14757.412 ±    9336.234    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.926 ±       2.166    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    339757.429 ±    5513.385   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       504.364 ±       7.949  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       507.573 ±     647.834  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      2352.539 ±    3022.189    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.546 ±       4.386  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.531 ±      20.343    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    659161.129 ±   39966.297   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       817.640 ±      49.106  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       795.227 ±     693.430  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1894.469 ±    1555.469    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.160 ±       0.252    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    720600.138 ±   18893.026   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    244283.930 ±    5564.381   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       798.419 ±      17.984  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5       787.673 ±     691.262  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      5079.644 ±    4562.247    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.537 ±       0.975    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                    thrpt    5    132479.954 ±    2545.351   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1814.925 ±      35.113  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5     21560.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1814.793 ±     693.378  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     21565.156 ±    8560.220    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.100 ±       0.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.187 ±       0.784    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                          thrpt    5        27.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                           thrpt    5        21.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    187811.529 ±    1893.630   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1119.906 ±      11.277  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      9384.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1123.762 ±     688.870  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      9416.845 ±    5788.603    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.058 ±       0.088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.488 ±       0.734    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    316047.983 ±    1779.447   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       613.749 ±       3.893  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       665.159 ±       2.710  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      3311.988 ±      16.590    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.378 ±       2.719  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.884 ±      13.554    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                 thrpt    5     67763.452 ±    2408.666   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      2816.166 ±      99.884  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     65400.007 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      2836.940 ±     738.540  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     65912.812 ±   19076.730    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.146 ±       0.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         3.387 ±       3.016    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                       thrpt    5        42.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                        thrpt    5        45.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                   thrpt    5    176250.548 ±    5346.947   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1129.754 ±      34.479  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     10088.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1132.035 ±     718.958  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10104.725 ±    6297.670    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.631 ±       1.387    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                         thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                          thrpt    5        15.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    529108.014 ±   49442.579   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       521.754 ±      48.801  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5       509.064 ±     648.332  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1521.337 ±    2012.322    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.460 ±       3.653  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.400 ±      11.134    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5   1002196.767 ±   30719.292   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       743.784 ±      22.686  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       730.186 ±     578.341  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      1145.726 ±     879.407    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.124 ±       0.138    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1131034.598 ±    1992.979   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                thrpt    5    327764.491 ±    8415.091   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5       894.879 ±      22.422  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5      4296.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5       918.026 ±     572.119  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4404.244 ±    2676.924    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.440 ±       0.445    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                      thrpt    5        14.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5       687.250 ±      28.208   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1436.147 ±      55.505  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5   3287952.277 ±   26171.900    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1400.047 ±     556.282  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5   3206603.623 ± 1331536.438    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5       143.351 ±     346.343    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                          thrpt    5       657.712 ±      48.013   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1364.009 ±      98.894  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5   3262542.418 ±      49.207    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1322.893 ±      51.312  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5   3165474.936 ±  336719.201    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.046 ±       0.088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5       109.273 ±     205.784    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        20.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        17.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     30023.868 ±    1421.943   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       542.434 ±      25.653  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     28432.016 ±       0.011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       580.264 ±     551.945  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     30442.883 ±   29240.746    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.467 ±       3.662  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        24.703 ±     193.960    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        11.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5       659.435 ±      16.073   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1404.488 ±      34.717  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5   3351084.216 ±      66.874    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1390.951 ±     576.068  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5   3320550.172 ± 1459712.451    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5       119.191 ±     218.218    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     12982.025 ±     238.381   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1045.752 ±      19.293  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5    126750.222 ±     134.244    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1058.349 ±     590.991  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    128311.128 ±   72935.098    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         8.570 ±      14.679    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                         thrpt    5     15491.574 ±     458.228   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       968.604 ±      28.311  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5     98400.028 ±       0.350    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       984.326 ±      26.487  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     99999.311 ±    2535.955    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         5.925 ±      10.620    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    276229.348 ±   11482.138   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       974.571 ±      40.314  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       929.513 ±     572.367  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      5289.730 ±    3119.506    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.404 ±       0.529    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    301249.569 ±    1987.138   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     15215.103 ±     187.970   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1008.109 ±      12.628  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5    104278.726 ±      11.494    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1054.164 ±     579.023  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    109059.150 ±   60544.959    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         6.026 ±      13.567    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        18.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    897357.164 ±   25231.815   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2924.501 ±      82.342  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5128.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2915.828 ±     689.959  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5112.951 ±    1213.180    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.117 ±       0.166  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.205 ±       0.293    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        43.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        35.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1688125.887 ±   23940.203   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1536.196 ±      20.806  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1432.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5      1595.587 ±     573.516  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1487.528 ±     541.591    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.067 ±       0.223  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.062 ±       0.209    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        24.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        24.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   7203383.881 ±  106933.095   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2160.506 ±      31.258  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5      2163.348 ±     689.789  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       472.597 ±     149.107    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.108  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.020 ±       0.024    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        32.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        25.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    332367.947 ±    5265.856   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      2022.210 ±      31.955  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9576.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5      2006.323 ±      87.452  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      9501.014 ±     483.825    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.129 ±       0.088  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.611 ±       0.424    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        30.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        30.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1101950.486 ±   18632.274   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2498.752 ±      41.037  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3568.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2502.659 ±     730.573  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      3573.987 ±    1068.262    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.100 ±       0.132  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.143 ±       0.188    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        37.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        30.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3382276.327 ±   38001.274   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      1960.354 ±      21.600  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1939.769 ±     535.994  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       902.433 ±     249.883    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.108 ±       0.067  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.050 ±       0.031    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        29.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        28.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5   9194905.810 ±  504767.691   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       560.969 ±      30.893  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       597.514 ±     571.856  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       102.336 ±      98.913    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.394 ±       2.945  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.069 ±       0.517    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         9.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5         9.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    467415.006 ±    5001.173   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1649.090 ±      17.496  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5552.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1596.378 ±     539.033  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      5374.468 ±    1810.020    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.062 ±       0.150  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.210 ±       0.506    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        24.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        26.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2117096.199 ±   42977.002   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1345.436 ±      27.503  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1000.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1389.616 ±     525.478  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1032.698 ±     382.157    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.193  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.053 ±       0.144    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        21.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        20.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5227333.341 ±   29347.396   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       690.909 ±       3.961  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       665.085 ±       2.416  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       200.226 ±       1.507    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.046 ±       0.174  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.014 ±       0.052    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5         9.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    405481.543 ±    8002.903   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1840.915 ±      35.639  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7144.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1868.966 ±     704.350  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      7254.396 ±    2802.770    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.071 ±       0.156  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.275 ±       0.609    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        28.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        29.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2605976.098 ±  149706.775   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1377.920 ±      79.540  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1391.916 ±     577.786  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       840.388 ±     340.209    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.150  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.050 ±       0.089    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        19.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6366889.126 ±  518649.043   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       971.161 ±      78.836  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       932.204 ±     577.352  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       230.228 ±     138.739    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.062 ±       0.098  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.015 ±       0.024    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        14.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        12.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    648739.080 ±    5455.698   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1919.574 ±      15.829  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4656.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1939.756 ±     574.181  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      4704.748 ±    1380.899    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.087 ±       0.132  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.212 ±       0.318    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        29.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    833963.608 ±   15306.942   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2768.902 ±      50.423  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5224.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2777.447 ±     573.379  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5241.044 ±    1162.899    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.117 ±       0.193  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.220 ±       0.369    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        41.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        34.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    993841.246 ±   18998.189   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1232.709 ±      22.674  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1188.207 ±     686.922  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1880.601 ±    1058.400    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.154  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.105 ±       0.244    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        17.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   7788091.139 ±  446848.199   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       356.334 ±      20.366  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       353.126 ±     364.857  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        71.388 ±      75.228    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.330 ±       2.700  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.066 ±       0.540    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    321174.962 ±    2384.589   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1783.238 ±      13.799  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8736.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1796.669 ±     656.581  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      8801.918 ±    3220.914    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.119  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.428 ±       0.582    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        27.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      8064.044 ±      48.636   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2075.161 ±      12.282  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    405000.183 ±       1.100    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2019.261 ±      56.169  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    394090.188 ±   10637.566    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.127 ±       0.218  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        24.698 ±      42.472    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        30.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     13537.241 ±     684.363   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       365.116 ±      18.557  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     42440.035 ±       0.024    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       412.418 ±     625.404  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     47980.215 ±   73044.308    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.544 ±       4.484  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        64.375 ±     530.891    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5        15.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     23657.796 ±     180.636   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       442.650 ±       3.428  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     29448.020 ±       0.014    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       383.028 ±     617.580  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     25473.524 ±   40949.275    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.353 ±       2.859  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        23.527 ±     190.779    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2368.721 ±      14.949   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1483.339 ±       9.575  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    985529.582 ±      12.023    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1462.897 ±     709.797  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    971967.252 ±  472397.585    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.539 ±      29.204    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      8577.309 ±      92.524   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1974.754 ±      20.604  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    362277.222 ±      44.517    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      2017.083 ±      63.754  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    370041.399 ±   10185.475    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.177 ±       0.161  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        32.389 ±      29.653    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        30.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     41504.751 ±    1907.324   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       601.593 ±      27.560  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.815 ±       0.443    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       583.714 ±     558.907  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     22131.157 ±   21199.690    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.573 ±       4.580  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        21.700 ±     173.388    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     65251.920 ±    1660.919   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       491.580 ±      12.370  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11856.007 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       514.822 ±     655.962  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     12421.998 ±   15870.641    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.424 ±       3.213  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        10.310 ±      78.133    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     78607.037 ±     339.043   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.199 ±       0.006  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5732.937 ±      64.567   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1788.371 ±      21.138  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    490880.125 ±       3.788    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1799.765 ±     676.681  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    494054.514 ±  188039.321    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.091  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        20.557 ±      24.874    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        27.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        30.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   4512123.863 ±   93719.557   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1353.321 ±      28.051  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1341.217 ±      29.144  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       467.799 ±      19.221    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.067 ±       0.105  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.023 ±       0.036    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        20.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        17.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    351048.259 ±   18697.852   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1886.185 ±     100.504  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8456.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1870.948 ±     733.251  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      8395.549 ±    3608.189    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.104 ±       0.098  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.467 ±       0.442    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        28.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        31.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3255875.871 ±  173447.956   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       480.019 ±      25.495  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       232.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       448.795 ±     627.553  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       217.573 ±     314.076    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.392 ±       3.018  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.188 ±       1.448    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    336286.364 ±   10470.120   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1318.182 ±      41.697  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6168.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1320.839 ±      52.443  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6180.440 ±     150.232    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.098  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.390 ±       0.466    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        28.000                    ms
[info] IntBenchmark.readCirce                                                                   thrpt    5   6475275.550 ±   50783.637   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      4048.775 ±      32.124  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5       984.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      4080.319 ±      31.085  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5       991.669 ±       8.845    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.142 ±       0.105  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.034 ±       0.025    B/op
[info] IntBenchmark.readCirce:·gc.count                                                         thrpt    5        60.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                          thrpt    5        48.000                    ms
[info] IntBenchmark.readJacksonScala                                                            thrpt    5   8480341.578 ±   55561.371   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      3190.465 ±      19.979  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      3184.961 ±     729.738  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5       590.955 ±     133.416    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.137 ±       0.209  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.025 ±       0.039    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        47.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        41.000                    ms
[info] IntBenchmark.readJsoniterScala                                                           thrpt    5  47455987.885 ± 1414308.527   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                              thrpt    5  17083668.328 ±  489248.438   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                               thrpt    5      1128.970 ±      32.802  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                      thrpt    5      1138.681 ±     696.772  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       104.960 ±      66.173    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.037 ±       0.105  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.003 ±       0.010    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                    thrpt    5        17.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                     thrpt    5        13.000                    ms
[info] IntBenchmark.readPlayJson                                                                thrpt    5   7495682.869 ±  193118.454   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      3619.881 ±      93.527  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      3598.806 ±     705.302  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5       755.438 ±     133.390    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.133 ±       0.044  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.028 ±       0.010    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                      thrpt    5        53.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                       thrpt    5        44.000                    ms
[info] IntBenchmark.writeCirce                                                                  thrpt    5  12363497.347 ±  753095.549   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      2388.251 ±     144.855  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       304.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2365.552 ±      55.246  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5       301.154 ±      13.985    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.083 ±       0.098  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.011 ±       0.013    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                        thrpt    5        35.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                         thrpt    5        28.000                    ms
[info] IntBenchmark.writeJacksonScala                                                           thrpt    5  11909783.709 ±  342121.435   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      2361.381 ±      69.047  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       312.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5      2355.887 ±      83.363  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       311.292 ±      15.722    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.108 ±       0.067  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.014 ±       0.009    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        35.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        30.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                          thrpt    5  34467168.883 ± 1520414.049   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       700.952 ±      31.276  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       664.234 ±       3.585  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        30.327 ±       1.297    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.050 ±       0.166  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.002 ±       0.008    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        10.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5         9.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5  58585812.343 ±  173998.542   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                             thrpt    5  13291527.052 ±  330340.360   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                              thrpt    5      2229.677 ±      56.444  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                         thrpt    5       264.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                     thrpt    5      2236.541 ±     696.866  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                thrpt    5       264.900 ±      87.122    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.096 ±       0.166  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.011 ±       0.020    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                   thrpt    5        33.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                    thrpt    5        22.000                    ms
[info] IntBenchmark.writePlayJson                                                               thrpt    5   2285583.232 ±   32993.995   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1940.507 ±      28.369  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      1336.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1884.900 ±     719.467  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      1297.764 ±     497.492    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.117 ±       0.156  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.080 ±       0.107    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                     thrpt    5        28.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                      thrpt    5        22.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    662179.385 ±   20224.874   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2413.538 ±      73.704  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5736.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2433.791 ±     571.111  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      5785.116 ±    1424.978    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.100 ±       0.183  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.237 ±       0.433    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        36.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        29.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    637948.405 ±   24402.553   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       742.853 ±      28.517  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5       715.775 ±     563.622  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1768.240 ±    1476.458    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.054 ±       0.156  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.134 ±       0.384    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        11.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        11.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3677779.155 ±   64436.985   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1458.292 ±      24.704  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5      1410.289 ±     580.389  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       603.581 ±     254.225    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.156  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.039 ±       0.067    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        21.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        17.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    235252.935 ±    4531.417   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1633.702 ±      31.634  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10928.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1661.150 ±      75.079  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5     11111.639 ±     469.219    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±       0.113  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.557 ±       0.752    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        26.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    909652.011 ±   17912.583   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2192.146 ±      44.617  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3792.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2225.951 ±     707.416  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      3851.551 ±    1280.346    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.112 ±       0.134  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.194 ±       0.230    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        33.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        27.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1561977.094 ±   16374.431   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1024.350 ±      10.809  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1032.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       982.711 ±      29.048  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       990.053 ±      28.723    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.071 ±       0.122  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.071 ±       0.123    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        15.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        14.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   7057878.310 ±  202231.934   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       789.326 ±      23.002  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       796.909 ±     705.476  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       177.576 ±     154.565    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.054 ±       0.166  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.012 ±       0.037    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        12.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        10.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    468060.797 ±   17897.543   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1639.587 ±      63.635  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5512.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1664.097 ±      71.549  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5595.247 ±     433.068    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±       0.122  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.322 ±       0.415    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        25.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        26.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    640315.140 ±    6624.610   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2281.874 ±      22.826  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5608.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2296.496 ±     564.088  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5643.820 ±    1377.970    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.112 ±       0.108  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.276 ±       0.266    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        27.000                    ms
[info] MapsBenchmark.readJacksonScala                                                           thrpt    5    654958.203 ±   15411.703   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                            thrpt    5       992.159 ±      23.696  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      2384.001 ±       0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5      1045.787 ±     574.364  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2512.579 ±    1367.279    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.067 ±       0.105  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.160 ±       0.250    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                 thrpt    5        16.000                counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                  thrpt    5        22.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   5136250.468 ±  243445.107   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1279.635 ±      60.386  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5      1273.101 ±     569.143  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5       390.359 ±     185.831    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±       0.188  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.025 ±       0.057    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        19.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        16.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    361153.287 ±    5860.196   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1878.244 ±      29.484  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8184.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1871.282 ±     733.364  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      8154.511 ±    3230.467    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.067 ±       0.132  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.290 ±       0.572    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        28.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        29.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    486656.642 ±   12511.771   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1331.091 ±      34.548  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4304.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      1333.983 ±      37.476  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4313.344 ±      31.748    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.071 ±       0.146  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.228 ±       0.468    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        20.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        17.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3379109.442 ±  144679.394   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       549.708 ±      23.606  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       256.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5       530.055 ±     698.624  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       246.968 ±     326.781    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.392 ±       2.972  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.181 ±       1.372    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5         8.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5         8.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    330404.053 ±   16382.242   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1202.675 ±      59.165  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5728.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5      1252.160 ±     571.549  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5965.700 ±    2787.649    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.075 ±       0.072  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.357 ±       0.351    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        19.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   1930725.249 ±   31640.881   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3121.408 ±      51.242  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2544.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      3187.699 ±     697.842  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      2597.976 ±     562.626    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.117 ±       0.108  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.095 ±       0.088    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        47.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        36.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    300601.684 ±    6382.956   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       721.231 ±      15.296  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      3776.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       718.329 ±     565.249  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      3761.879 ±    2989.434    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.494 ±       3.984  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.562 ±      20.655    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    732992.663 ±   36437.068   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       655.753 ±      32.653  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1408.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       665.367 ±       2.099  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1428.838 ±      73.184    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.368 ±       2.584  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.786 ±       5.516    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   4026073.602 ±   98318.233   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      2354.061 ±      57.815  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       920.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5      2368.683 ±      47.445  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5       925.763 ±      38.575    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5         0.083 ±       0.080  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.033 ±       0.032    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        35.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        28.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   7981952.966 ±  389453.112   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       852.102 ±      41.876  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       168.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5       866.305 ±     703.567  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5       171.025 ±     143.225    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5         0.075 ±       0.108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5         0.015 ±       0.021    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5        13.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5        11.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    194997.411 ±   12373.648   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1626.653 ±     103.015  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     13128.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1658.196 ±      77.561  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     13387.348 ±    1427.658    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.112 ±       0.122  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.905 ±       0.946    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        25.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        27.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    746499.275 ±   21851.584   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2876.497 ±      83.222  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6064.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2915.241 ±     708.633  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      6146.814 ±    1567.917    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.129 ±       0.132  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.272 ±       0.278    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        43.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        36.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   2780738.797 ±   61376.586   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1795.535 ±      38.004  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1819.504 ±     697.116  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1029.556 ±     393.628    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.096 ±       0.091  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.054 ±       0.051    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        22.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    260966.071 ±    8666.348   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1862.703 ±      61.711  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11232.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1868.690 ±     703.183  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     11266.209 ±    4134.933    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.075 ±       0.166  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.452 ±       0.997    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        28.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    845869.244 ±   26247.479   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1952.307 ±      60.448  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3632.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1952.199 ±     575.438  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      3632.016 ±    1078.421    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.156  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.171 ±       0.292    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        29.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        24.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1615001.387 ±   85827.042   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       878.549 ±      46.467  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       856.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       848.631 ±     684.586  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       827.050 ±     669.588    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.062 ±       0.139  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.061 ±       0.133    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        13.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        14.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   4339740.182 ±  240130.168   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       330.934 ±      18.244  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       352.313 ±     365.514  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       128.037 ±     138.431    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.382 ±       3.147  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.136 ±       1.121    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        10.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    481007.068 ±    7639.239   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1655.455 ±      25.939  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5416.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1664.127 ±      73.102  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5444.595 ±     308.136    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.100 ±       0.132  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.327 ±       0.428    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        26.000                    ms
[info] MutableMapsBenchmark.readJacksonScala                                                    thrpt    5    590429.690 ±   15057.975   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       963.507 ±      24.950  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2568.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       979.160 ±      27.396  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2609.857 ±     118.366    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.072  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.189 ±       0.191    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                          thrpt    5        15.000                counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        14.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3321055.144 ±  117119.684   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1570.099 ±      55.281  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5      1613.855 ±     578.713  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       764.804 ±     276.255    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.079 ±       0.222  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.038 ±       0.107    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        21.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    313220.708 ±    7152.250   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1646.283 ±      37.176  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8272.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1663.490 ±      72.766  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8358.786 ±     445.916    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.108  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.356 ±       0.542    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        26.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    479396.266 ±   17559.651   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1294.028 ±      46.611  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4248.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1266.311 ±     575.237  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4157.874 ±    1912.231    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.071 ±       0.134  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.232 ±       0.444    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        19.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        16.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   3014157.457 ±   64170.955   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       567.015 ±      11.735  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.263 ±     698.750  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       277.036 ±     367.470    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.399 ±       3.169  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.208 ±       1.648    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    346524.375 ±    7822.695   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1340.709 ±      29.911  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6088.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1388.131 ±     571.661  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      6304.577 ±    2651.730    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.174  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.396 ±       0.783    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        21.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        25.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    717852.753 ±   19278.000   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2124.164 ±      56.870  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4656.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2089.030 ±     588.253  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4578.647 ±    1258.531    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.096 ±       0.185  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.210 ±       0.408    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1462442.047 ±   15773.675   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1107.725 ±      12.164  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1119.236 ±     704.877  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1204.392 ±     758.493    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±       0.119  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.072 ±       0.128    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   5419402.284 ±  555103.916   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       165.308 ±      16.890  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       204.676 ±     440.580  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        59.783 ±     128.872    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.483 ±       4.094  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.138 ±       1.169    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    222982.916 ±    9390.618   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1534.894 ±      65.306  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     10832.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1524.292 ±     685.773  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10762.452 ±    5020.521    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.071 ±       0.108  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.501 ±       0.777    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        23.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    990176.571 ±    7714.707   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1726.592 ±      13.254  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2744.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1744.770 ±     603.964  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2772.796 ±     954.154    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.087 ±       0.105  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.139 ±       0.167    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        26.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2480818.419 ±   90429.896   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1097.345 ±      39.749  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5      1053.191 ±     551.698  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       668.557 ±     371.668    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.150  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.053 ±       0.097    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        15.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   6580247.853 ±  287295.514   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       535.248 ±      23.173  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       515.810 ±     657.751  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       123.251 ±     156.187    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.385 ±       2.963  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.091 ±       0.699    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6408066.045 ±  192160.107   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       390.890 ±      11.738  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5       367.862 ±     654.280  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5        90.591 ±     164.539    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5         0.383 ±       3.222  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.095 ±       0.801    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    314069.544 ±   12137.497   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1616.016 ±      62.078  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8096.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1660.099 ±      75.858  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8317.570 ±     514.894    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.146  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.459 ±       0.734    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        25.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   3398995.566 ±   71861.846   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3092.794 ±      63.658  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1432.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      3054.376 ±      45.942  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1414.247 ±      37.708    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.108 ±       0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.050 ±       0.031    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        45.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        37.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   3951136.643 ±   55650.736   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2370.195 ±      32.158  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       944.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      2358.556 ±      76.599  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       939.373 ±      32.550    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.100 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.040 ±       0.052    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        35.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   7546635.257 ±  249754.264   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1419.542 ±      46.000  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       296.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1409.944 ±     590.303  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       293.999 ±     122.614    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.087 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.018 ±       0.027    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                 thrpt    5   4945918.646 ±  110269.782   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      3067.648 ±      68.881  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      3050.234 ±      62.073  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5       970.503 ±      38.197    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.129 ±       0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.041 ±       0.028    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                       thrpt    5        45.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                        thrpt    5        38.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2687158.172 ±   83025.552   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1666.734 ±      50.919  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1677.655 ±      49.146  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5       982.439 ±      38.664    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.079 ±       0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.046 ±       0.051    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        20.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   4871985.479 ±  135705.676   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1287.859 ±      35.269  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       416.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1260.152 ±     572.603  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       407.253 ±     191.637    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.092 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.030 ±       0.024    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        19.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   8544545.505 ±  705923.665   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       825.263 ±      68.013  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       797.711 ±     699.626  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5       147.314 ±     137.117    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.092 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.017 ±       0.008    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        12.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   7519799.225 ±   65246.548   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   5022487.982 ±  201802.857   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1608.613 ±      64.591  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1610.039 ±     555.086  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5       504.272 ±     164.605    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.100 ±       0.154  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.031 ±       0.049    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        20.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5   1385777.483 ±   51751.522   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1887.938 ±      70.577  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2144.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1886.188 ±     685.651  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5      2141.738 ±     760.511    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.083 ±       0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.095 ±       0.091    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        28.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1093749.675 ±    5017.860   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       706.092 ±       3.321  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1016.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5       721.539 ±     560.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      1038.200 ±     805.103    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.463 ±       3.716  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.665 ±       5.344    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1821306.587 ±   78704.979   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       342.640 ±      14.834  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       296.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       353.155 ±     364.496  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       305.351 ±     318.993    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.338 ±       2.732  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.297 ±       2.404    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                              thrpt    5   1164587.360 ±    9167.546   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5       722.222 ±       5.643  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5       976.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5       724.208 ±     575.246  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5       978.823 ±     781.442    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.067 ±       0.164  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.090 ±       0.222    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                    thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                     thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1257616.749 ±   62565.829   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       952.557 ±      47.300  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1192.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5       929.582 ±     576.757  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1163.323 ±     722.874    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.058 ±       0.119  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.073 ±       0.149    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2379345.532 ±   82884.082   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5      1064.393 ±      37.170  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       704.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5      1056.541 ±     567.605  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       698.823 ±     375.221    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.062 ±       0.113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.041 ±       0.075    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2504498.858 ±   37819.183   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       585.706 ±       8.697  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       597.387 ±     571.701  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5       375.211 ±     357.526    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.402 ±       2.926  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.253 ±       1.845    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2654021.344 ±    7843.927   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2345661.486 ±   55054.428   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1073.326 ±      24.979  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1065.024 ±     573.929  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5       714.310 ±     379.615    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.075 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.050 ±       0.030    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     12021.560 ±     331.823   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1695.713 ±      46.996  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    221985.008 ±      81.308    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      1672.570 ±      54.025  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    218955.868 ±    4165.153    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.175 ±       0.328  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        22.883 ±      42.641    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15323.817 ±     378.942   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       242.355 ±       5.929  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     24889.761 ±      26.728    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       269.133 ±     114.737  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5     27647.213 ±   12119.358    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.611 ±       5.077  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        63.076 ±     523.863    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5        16.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     37279.029 ±     728.847   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       408.213 ±       8.086  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     17232.019 ±       0.048    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       419.061 ±     639.020  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     17707.039 ±   27194.133    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.347 ±       2.868  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        14.605 ±     120.538    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3423.911 ±     126.151   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1105.575 ±      40.603  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    508148.018 ±      35.391    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1126.239 ±     685.724  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5    517527.515 ±  310678.078    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.046 ±       0.132  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        21.126 ±      61.186    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     58155.186 ±    1925.093   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       742.707 ±      24.542  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20100.002 ±       0.261    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       712.700 ±     561.657  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     19307.910 ±   15771.708    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.096 ±       0.146  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.591 ±       3.935    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        11.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     79558.131 ±    1195.992   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       520.075 ±       7.791  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10288.006 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       514.810 ±     655.956  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10179.616 ±   12915.100    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.415 ±       3.172  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         8.214 ±      62.828    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     87863.820 ±      94.948   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5         6.700 ±       0.008  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       120.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk8.json
[success] Total time: 4262 s, completed Mar 15, 2018 12:16:40 AM
