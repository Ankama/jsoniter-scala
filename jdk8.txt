[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jan 26, 2018 8:36:23 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:809:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:346:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:354:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] three warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.6.0-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.6.0-SNAPSHOT.jar ...
[info] Compiling 32 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:74: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decode(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encode(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val booleanArrayCodec: JsonCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:65: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decode(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encode(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val byteArrayCodec: JsonCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:71: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decode(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encode(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val doubleArrayCodec: JsonCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:68: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decode(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encode(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val shortArrayCodec: JsonCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:65: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decode(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encode(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val longArrayCodec: JsonCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:65: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decode(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encode(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val uuidArrayCodec: JsonCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT.jar ...
Processing 299 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 26 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 286 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 408675.011 ops/s
[info] # Warmup Iteration   2: 809118.283 ops/s
[info] # Warmup Iteration   3: 822598.818 ops/s
[info] Iteration   1: 819826.566 ops/s
[info]                  ·gc.alloc.rate:                   2158.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2333.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4480.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 814591.479 ops/s
[info]                  ·gc.alloc.rate:                   2145.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3892.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 825401.630 ops/s
[info]                  ·gc.alloc.rate:                   2173.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4505.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 821889.776 ops/s
[info]                  ·gc.alloc.rate:                   2164.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3891.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 823651.096 ops/s
[info]                  ·gc.alloc.rate:                   2168.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3892.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   821072.109 ±(99.9%) 16063.977 ops/s [Average]
[info]   (min, avg, max) = (814591.479, 821072.109, 825401.630), stdev = 4171.764
[info]   CI (99.9%): [805008.132, 837136.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2162.186 ±(99.9%) 42.013 MB/sec [Average]
[info]   (min, avg, max) = (2145.212, 2162.186, 2173.367), stdev = 10.911
[info]   CI (99.9%): [2120.173, 2204.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2156.401 ±(99.9%) 676.807 MB/sec [Average]
[info]   (min, avg, max) = (2014.794, 2156.401, 2362.848), stdev = 175.765
[info]   CI (99.9%): [1479.594, 2833.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4132.469 ±(99.9%) 1267.360 B/op [Average]
[info]   (min, avg, max) = (3891.963, 4132.469, 4505.287), stdev = 329.129
[info]   CI (99.9%): [2865.110, 5399.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.167), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.216 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (0.159, 0.216, 0.322), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.54% complete, ETA 00:38:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 579613.691 ops/s
[info] # Warmup Iteration   2: 1646317.758 ops/s
[info] # Warmup Iteration   3: 1621241.610 ops/s
[info] Iteration   1: 1620051.689 ops/s
[info]                  ·gc.alloc.rate:                   1152.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1267.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1615526.662 ops/s
[info]                  ·gc.alloc.rate:                   1149.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1642970.230 ops/s
[info]                  ·gc.alloc.rate:                   1169.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1262.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1641777.539 ops/s
[info]                  ·gc.alloc.rate:                   1168.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1272.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1639384.381 ops/s
[info]                  ·gc.alloc.rate:                   1166.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     960.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1631942.100 ±(99.9%) 50375.472 ops/s [Average]
[info]   (min, avg, max) = (1615526.662, 1631942.100, 1642970.230), stdev = 13082.350
[info]   CI (99.9%): [1581566.628, 1682317.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1161.412 ±(99.9%) 35.753 MB/sec [Average]
[info]   (min, avg, max) = (1149.814, 1161.412, 1169.180), stdev = 9.285
[info]   CI (99.9%): [1125.659, 1197.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1186.578 ±(99.9%) 686.020 MB/sec [Average]
[info]   (min, avg, max) = (982.421, 1186.578, 1327.005), stdev = 178.157
[info]   CI (99.9%): [500.558, 1872.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1143.935 ±(99.9%) 650.479 B/op [Average]
[info]   (min, avg, max) = (956.947, 1143.935, 1272.069), stdev = 168.927
[info]   CI (99.9%): [493.457, 1794.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.072, 0.081), stdev = 0.011
[info]   CI (99.9%): [0.030, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 1.08% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3333751.593 ops/s
[info] # Warmup Iteration   2: 3948563.915 ops/s
[info] # Warmup Iteration   3: 4002078.437 ops/s
[info] Iteration   1: 3996742.436 ops/s
[info]                  ·gc.alloc.rate:                   264.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4002656.112 ops/s
[info]                  ·gc.alloc.rate:               264.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 4010519.760 ops/s
[info]                  ·gc.alloc.rate:                   265.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4019085.604 ops/s
[info]                  ·gc.alloc.rate:      265.569 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4012867.052 ops/s
[info]                  ·gc.alloc.rate:                   265.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4008374.193 ±(99.9%) 33762.801 ops/s [Average]
[info]   (min, avg, max) = (3996742.436, 4008374.193, 4019085.604), stdev = 8768.092
[info]   CI (99.9%): [3974611.392, 4042136.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   264.898 ±(99.9%) 2.212 MB/sec [Average]
[info]   (min, avg, max) = (264.151, 264.898, 265.569), stdev = 0.574
[info]   CI (99.9%): [262.686, 267.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   220.665 ±(99.9%) 493.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.665, 335.862), stdev = 128.132
[info]   CI (99.9%): [≈ 0, 714.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   86.676 ±(99.9%) 193.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.676, 131.679), stdev = 50.292
[info]   CI (99.9%): [≈ 0, 280.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.303 ±(99.9%) 2.534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.303, 1.480), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.580), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.61% complete, ETA 00:38:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35680.051 ops/s
[info] # Warmup Iteration   2: 170848.761 ops/s
[info] # Warmup Iteration   3: 172140.289 ops/s
[info] Iteration   1: 173976.043 ops/s
[info]                  ·gc.alloc.rate:                   1455.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              13168.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11805.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.942 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 174488.217 ops/s
[info]                  ·gc.alloc.rate:                   1460.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              13168.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14816.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 175096.303 ops/s
[info]                  ·gc.alloc.rate:                   1464.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              13168.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11915.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.561 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 173018.124 ops/s
[info]                  ·gc.alloc.rate:                   1447.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              13168.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12131.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.947 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 173972.286 ops/s
[info]                  ·gc.alloc.rate:                   1456.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              13168.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15168.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.942 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   174110.195 ±(99.9%) 2948.286 ops/s [Average]
[info]   (min, avg, max) = (173018.124, 174110.195, 175096.303), stdev = 765.661
[info]   CI (99.9%): [171161.909, 177058.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1456.926 ±(99.9%) 24.721 MB/sec [Average]
[info]   (min, avg, max) = (1447.585, 1456.926, 1464.983), stdev = 6.420
[info]   CI (99.9%): [1432.205, 1481.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13168.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13168.002, 13168.003, 13168.003), stdev = 0.001
[info]   CI (99.9%): [13168.002, 13168.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1456.965 ±(99.9%) 717.077 MB/sec [Average]
[info]   (min, avg, max) = (1305.110, 1456.965, 1677.413), stdev = 186.223
[info]   CI (99.9%): [739.888, 2174.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13167.654 ±(99.9%) 6449.006 B/op [Average]
[info]   (min, avg, max) = (11805.655, 13167.654, 15168.804), stdev = 1674.786
[info]   CI (99.9%): [6718.647, 19616.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.941 ±(99.9%) 1.024 B/op [Average]
[info]   (min, avg, max) = (0.561, 0.941, 1.314), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 2.15% complete, ETA 00:38:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 735564.342 ops/s
[info] # Warmup Iteration   2: 2116274.820 ops/s
[info] # Warmup Iteration   3: 2136580.058 ops/s
[info] Iteration   1: 2128916.901 ops/s
[info]                  ·gc.alloc.rate:                   887.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2112930.866 ops/s
[info]                  ·gc.alloc.rate:                   880.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     729.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2130394.993 ops/s
[info]                  ·gc.alloc.rate:                   887.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     726.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2084901.769 ops/s
[info]                  ·gc.alloc.rate:                   869.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2114679.875 ops/s
[info]                  ·gc.alloc.rate:                   881.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     737.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2114364.881 ±(99.9%) 70450.904 ops/s [Average]
[info]   (min, avg, max) = (2084901.769, 2114364.881, 2130394.993), stdev = 18295.876
[info]   CI (99.9%): [2043913.976, 2184815.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   881.321 ±(99.9%) 29.303 MB/sec [Average]
[info]   (min, avg, max) = (869.014, 881.321, 887.963), stdev = 7.610
[info]   CI (99.9%): [852.018, 910.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   917.987 ±(99.9%) 561.099 MB/sec [Average]
[info]   (min, avg, max) = (657.494, 917.987, 991.570), stdev = 145.716
[info]   CI (99.9%): [356.887, 1479.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   682.654 ±(99.9%) 401.670 B/op [Average]
[info]   (min, avg, max) = (496.328, 682.654, 737.953), stdev = 104.312
[info]   CI (99.9%): [280.984, 1084.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.077, 0.108), stdev = 0.019
[info]   CI (99.9%): [0.005, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 2.69% complete, ETA 00:37:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11594143.270 ops/s
[info] # Warmup Iteration   2: 15490172.507 ops/s
[info] # Warmup Iteration   3: 16253570.035 ops/s
[info] Iteration   1: 16518375.834 ops/s
[info]                  ·gc.alloc.rate:                   839.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16170971.711 ops/s
[info]                  ·gc.alloc.rate:                   822.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16298755.313 ops/s
[info]                  ·gc.alloc.rate:                   828.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16352921.897 ops/s
[info]                  ·gc.alloc.rate:                   831.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16372895.832 ops/s
[info]                  ·gc.alloc.rate:                   832.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   16342784.117 ±(99.9%) 484401.132 ops/s [Average]
[info]   (min, avg, max) = (16170971.711, 16342784.117, 16518375.834), stdev = 125797.436
[info]   CI (99.9%): [15858382.986, 16827185.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   830.828 ±(99.9%) 24.511 MB/sec [Average]
[info]   (min, avg, max) = (822.014, 830.828, 839.651), stdev = 6.365
[info]   CI (99.9%): [806.317, 855.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   800.831 ±(99.9%) 702.344 MB/sec [Average]
[info]   (min, avg, max) = (666.183, 800.831, 1001.943), stdev = 182.397
[info]   CI (99.9%): [98.487, 1503.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   77.180 ±(99.9%) 69.138 B/op [Average]
[info]   (min, avg, max) = (63.472, 77.180, 97.255), stdev = 17.955
[info]   CI (99.9%): [8.042, 146.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.009, 0.014), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 3.23% complete, ETA 00:37:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66204.528 ops/s
[info] # Warmup Iteration   2: 292038.818 ops/s
[info] # Warmup Iteration   3: 297959.458 ops/s
[info] Iteration   1: 300171.896 ops/s
[info]                  ·gc.alloc.rate:                   983.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5117.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 299684.197 ops/s
[info]                  ·gc.alloc.rate:                   981.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5139.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 300416.888 ops/s
[info]                  ·gc.alloc.rate:                   983.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5152.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 296424.473 ops/s
[info]                  ·gc.alloc.rate:                   970.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5243.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 300201.289 ops/s
[info]                  ·gc.alloc.rate:                   982.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5208.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   299379.749 ±(99.9%) 6444.633 ops/s [Average]
[info]   (min, avg, max) = (296424.473, 299379.749, 300416.888), stdev = 1673.651
[info]   CI (99.9%): [292935.116, 305824.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   980.206 ±(99.9%) 21.441 MB/sec [Average]
[info]   (min, avg, max) = (970.343, 980.206, 983.522), stdev = 5.568
[info]   CI (99.9%): [958.765, 1001.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5152.001, 5152.001, 5152.002), stdev = 0.001
[info]   CI (99.9%): [5152.001, 5152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   984.038 ±(99.9%) 26.320 MB/sec [Average]
[info]   (min, avg, max) = (976.393, 984.038, 993.555), stdev = 6.835
[info]   CI (99.9%): [957.718, 1010.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5172.322 ±(99.9%) 201.151 B/op [Average]
[info]   (min, avg, max) = (5117.118, 5172.322, 5243.411), stdev = 52.238
[info]   CI (99.9%): [4971.170, 5373.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.460 ±(99.9%) 0.553 B/op [Average]
[info]   (min, avg, max) = (0.218, 0.460, 0.553), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 1.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 3.76% complete, ETA 00:37:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 883491.185 ops/s
[info] # Warmup Iteration   2: 1630831.058 ops/s
[info] # Warmup Iteration   3: 1636118.872 ops/s
[info] Iteration   1: 1655198.827 ops/s
[info]                  ·gc.alloc.rate:                   2558.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2548.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1647140.449 ops/s
[info]                  ·gc.alloc.rate:                   2545.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2579.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1676541.900 ops/s
[info]                  ·gc.alloc.rate:                   2591.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2226.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1665925.992 ops/s
[info]                  ·gc.alloc.rate:                   2574.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2567.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1677304.370 ops/s
[info]                  ·gc.alloc.rate:                   2591.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2234.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1664422.308 ±(99.9%) 50896.583 ops/s [Average]
[info]   (min, avg, max) = (1647140.449, 1664422.308, 1677304.370), stdev = 13217.681
[info]   CI (99.9%): [1613525.725, 1715318.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2572.349 ±(99.9%) 78.563 MB/sec [Average]
[info]   (min, avg, max) = (2545.313, 2572.349, 2591.825), stdev = 20.403
[info]   CI (99.9%): [2493.786, 2650.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2570.319 ±(99.9%) 682.967 MB/sec [Average]
[info]   (min, avg, max) = (2372.251, 2570.319, 2717.538), stdev = 177.364
[info]   CI (99.9%): [1887.352, 3253.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2431.096 ±(99.9%) 707.510 B/op [Average]
[info]   (min, avg, max) = (2226.340, 2431.096, 2579.180), stdev = 183.738
[info]   CI (99.9%): [1723.586, 3138.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.187), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.110, 0.179), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 4.30% complete, ETA 00:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 997916.380 ops/s
[info] # Warmup Iteration   2: 2577977.434 ops/s
[info] # Warmup Iteration   3: 2616599.141 ops/s
[info] Iteration   1: 2592454.199 ops/s
[info]                  ·gc.alloc.rate:                   1818.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1199.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2615271.886 ops/s
[info]                  ·gc.alloc.rate:                   1834.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2646044.119 ops/s
[info]                  ·gc.alloc.rate:                   1856.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1194.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2644014.486 ops/s
[info]                  ·gc.alloc.rate:                   1854.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1001.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2606561.195 ops/s
[info]                  ·gc.alloc.rate:                   1828.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1224.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2620869.177 ±(99.9%) 90570.837 ops/s [Average]
[info]   (min, avg, max) = (2592454.199, 2620869.177, 2646044.119), stdev = 23520.959
[info]   CI (99.9%): [2530298.340, 2711440.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1838.604 ±(99.9%) 63.255 MB/sec [Average]
[info]   (min, avg, max) = (1818.494, 1838.604, 1856.121), stdev = 16.427
[info]   CI (99.9%): [1775.349, 1901.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1871.273 ±(99.9%) 704.525 MB/sec [Average]
[info]   (min, avg, max) = (1661.499, 1871.273, 2028.817), stdev = 182.963
[info]   CI (99.9%): [1166.747, 2575.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1123.919 ±(99.9%) 435.609 B/op [Average]
[info]   (min, avg, max) = (999.634, 1123.919, 1224.769), stdev = 113.126
[info]   CI (99.9%): [688.310, 1559.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.068, 0.101), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 4.84% complete, ETA 00:37:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10025428.241 ops/s
[info] # Warmup Iteration   2: 10262867.818 ops/s
[info] # Warmup Iteration   3: 10613940.840 ops/s
[info] Iteration   1: 10715351.939 ops/s
[info]                  ·gc.alloc.rate:                   1361.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10789414.785 ops/s
[info]                  ·gc.alloc.rate:                   1371.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10730692.323 ops/s
[info]                  ·gc.alloc.rate:                   1363.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10674132.738 ops/s
[info]                  ·gc.alloc.rate:                   1356.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10796654.660 ops/s
[info]                  ·gc.alloc.rate:                   1372.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10741249.289 ±(99.9%) 198937.323 ops/s [Average]
[info]   (min, avg, max) = (10674132.738, 10741249.289, 10796654.660), stdev = 51663.391
[info]   CI (99.9%): [10542311.967, 10940186.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1364.974 ±(99.9%) 25.472 MB/sec [Average]
[info]   (min, avg, max) = (1356.413, 1364.974, 1372.169), stdev = 6.615
[info]   CI (99.9%): [1339.502, 1390.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1346.179 ±(99.9%) 20.734 MB/sec [Average]
[info]   (min, avg, max) = (1339.580, 1346.179, 1353.108), stdev = 5.385
[info]   CI (99.9%): [1325.444, 1366.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   197.249 ±(99.9%) 4.417 B/op [Average]
[info]   (min, avg, max) = (195.854, 197.249, 198.997), stdev = 1.147
[info]   CI (99.9%): [192.833, 201.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.012, 0.015), stdev = 0.002
[info]   CI (99.9%): [0.004, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 5.38% complete, ETA 00:36:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143656.042 ops/s
[info] # Warmup Iteration   2: 602793.491 ops/s
[info] # Warmup Iteration   3: 618247.837 ops/s
[info] Iteration   1: 619686.083 ops/s
[info]                  ·gc.alloc.rate:                   1638.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4156.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 615848.626 ops/s
[info]                  ·gc.alloc.rate:                   1628.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4214.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 617497.654 ops/s
[info]                  ·gc.alloc.rate:                   1632.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4242.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 608467.333 ops/s
[info]                  ·gc.alloc.rate:                   1608.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4332.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 619623.854 ops/s
[info]                  ·gc.alloc.rate:                   1638.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4278.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   616224.710 ±(99.9%) 17800.016 ops/s [Average]
[info]   (min, avg, max) = (608467.333, 616224.710, 619686.083), stdev = 4622.608
[info]   CI (99.9%): [598424.694, 634024.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1629.107 ±(99.9%) 47.196 MB/sec [Average]
[info]   (min, avg, max) = (1608.447, 1629.107, 1638.198), stdev = 12.257
[info]   CI (99.9%): [1581.911, 1676.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1662.169 ±(99.9%) 74.470 MB/sec [Average]
[info]   (min, avg, max) = (1636.555, 1662.169, 1684.771), stdev = 19.340
[info]   CI (99.9%): [1587.699, 1736.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4244.709 ±(99.9%) 255.694 B/op [Average]
[info]   (min, avg, max) = (4156.101, 4244.709, 4332.653), stdev = 66.403
[info]   CI (99.9%): [3989.015, 4500.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.026
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.266 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (0.211, 0.266, 0.372), stdev = 0.066
[info]   CI (99.9%): [0.013, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 5.91% complete, ETA 00:36:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1252943.927 ops/s
[info] # Warmup Iteration   2: 2059499.410 ops/s
[info] # Warmup Iteration   3: 2117338.658 ops/s
[info] Iteration   1: 2098460.330 ops/s
[info]                  ·gc.alloc.rate:                   2090.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2337.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1752.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2121355.465 ops/s
[info]                  ·gc.alloc.rate:                   2113.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1496.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2106639.149 ops/s
[info]                  ·gc.alloc.rate:                   2098.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1513.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2089537.642 ops/s
[info]                  ·gc.alloc.rate:                   2082.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1530.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2118266.565 ops/s
[info]                  ·gc.alloc.rate:                   2110.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1766.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2106851.830 ±(99.9%) 51334.124 ops/s [Average]
[info]   (min, avg, max) = (2089537.642, 2106851.830, 2121355.465), stdev = 13331.309
[info]   CI (99.9%): [2055517.706, 2158185.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2099.133 ±(99.9%) 50.447 MB/sec [Average]
[info]   (min, avg, max) = (2082.204, 2099.133, 2113.438), stdev = 13.101
[info]   CI (99.9%): [2048.686, 2149.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1568.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1568.000, 1568.000, 1568.000), stdev = 0.001
[info]   CI (99.9%): [1568.000, 1568.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2157.792 ±(99.9%) 702.549 MB/sec [Average]
[info]   (min, avg, max) = (2016.425, 2157.792, 2376.879), stdev = 182.450
[info]   CI (99.9%): [1455.243, 2860.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1611.787 ±(99.9%) 521.091 B/op [Average]
[info]   (min, avg, max) = (1496.024, 1611.787, 1766.013), stdev = 135.326
[info]   CI (99.9%): [1090.697, 2132.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.108), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 6.45% complete, ETA 00:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2198835.763 ops/s
[info] # Warmup Iteration   2: 5757503.131 ops/s
[info] # Warmup Iteration   3: 5909523.637 ops/s
[info] Iteration   1: 5835885.361 ops/s
[info]                  ·gc.alloc.rate:                   1601.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5816231.484 ops/s
[info]                  ·gc.alloc.rate:                   1596.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5904782.764 ops/s
[info]                  ·gc.alloc.rate:                   1621.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5822435.801 ops/s
[info]                  ·gc.alloc.rate:                   1598.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5917367.620 ops/s
[info]                  ·gc.alloc.rate:                   1624.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     447.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   5859340.606 ±(99.9%) 184696.826 ops/s [Average]
[info]   (min, avg, max) = (5816231.484, 5859340.606, 5917367.620), stdev = 47965.179
[info]   CI (99.9%): [5674643.780, 6044037.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1608.513 ±(99.9%) 50.649 MB/sec [Average]
[info]   (min, avg, max) = (1596.513, 1608.513, 1624.258), stdev = 13.154
[info]   CI (99.9%): [1557.863, 1659.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1596.185 ±(99.9%) 597.597 MB/sec [Average]
[info]   (min, avg, max) = (1320.386, 1596.185, 1684.336), stdev = 155.194
[info]   CI (99.9%): [998.588, 2193.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   428.561 ±(99.9%) 154.318 B/op [Average]
[info]   (min, avg, max) = (357.283, 428.561, 452.597), stdev = 40.076
[info]   CI (99.9%): [274.243, 582.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.029, 0.045), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 6.99% complete, ETA 00:36:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15178594.799 ops/s
[info] # Warmup Iteration   2: 18701913.504 ops/s
[info] # Warmup Iteration   3: 19092920.370 ops/s
[info] Iteration   1: 19090502.323 ops/s
[info]                  ·gc.alloc.rate:                   582.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19219341.955 ops/s
[info]                  ·gc.alloc.rate:               586.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 19324812.007 ops/s
[info]                  ·gc.alloc.rate:                   589.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19318503.311 ops/s
[info]                  ·gc.alloc.rate:                   589.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19307008.481 ops/s
[info]                  ·gc.alloc.rate:                   588.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   19252033.616 ±(99.9%) 384574.344 ops/s [Average]
[info]   (min, avg, max) = (19090502.323, 19252033.616, 19324812.007), stdev = 99872.736
[info]   CI (99.9%): [18867459.271, 19636607.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   587.291 ±(99.9%) 11.604 MB/sec [Average]
[info]   (min, avg, max) = (582.437, 587.291, 589.601), stdev = 3.013
[info]   CI (99.9%): [575.688, 598.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   599.881 ±(99.9%) 574.159 MB/sec [Average]
[info]   (min, avg, max) = (333.151, 599.881, 667.053), stdev = 149.107
[info]   CI (99.9%): [25.722, 1174.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   49.021 ±(99.9%) 46.823 B/op [Average]
[info]   (min, avg, max) = (27.275, 49.021, 54.973), stdev = 12.160
[info]   CI (99.9%): [2.198, 95.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 2.761 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.657), stdev = 0.717
[info]   CI (99.9%): [≈ 0, 3.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.137), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.53% complete, ETA 00:36:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22877962.668 ops/s
[info] # Warmup Iteration   2: 27959951.055 ops/s
[info] # Warmup Iteration   3: 28682423.050 ops/s
[info] Iteration   1: 28677112.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 28657147.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28635350.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 28606354.269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28676042.014 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   28650401.445 ±(99.9%) 115248.195 ops/s [Average]
[info]   (min, avg, max) = (28606354.269, 28650401.445, 28677112.568), stdev = 29929.590
[info]   CI (99.9%): [28535153.251, 28765649.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 8.06% complete, ETA 00:35:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 357958.978 ops/s
[info] # Warmup Iteration   2: 1126115.404 ops/s
[info] # Warmup Iteration   3: 1145751.669 ops/s
[info] Iteration   1: 1140685.860 ops/s
[info]                  ·gc.alloc.rate:                   1710.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2261.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1127764.521 ops/s
[info]                  ·gc.alloc.rate:                   1691.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2308.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1134295.402 ops/s
[info]                  ·gc.alloc.rate:                   1700.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2776.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1137246.192 ops/s
[info]                  ·gc.alloc.rate:                   1705.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2323.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1144248.345 ops/s
[info]                  ·gc.alloc.rate:                   1716.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2319.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1136848.064 ±(99.9%) 24252.804 ops/s [Average]
[info]   (min, avg, max) = (1127764.521, 1136848.064, 1144248.345), stdev = 6298.376
[info]   CI (99.9%): [1112595.260, 1161100.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1704.922 ±(99.9%) 36.595 MB/sec [Average]
[info]   (min, avg, max) = (1691.458, 1704.922, 1716.457), stdev = 9.504
[info]   CI (99.9%): [1668.328, 1741.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2360.000, 2360.000, 2360.000), stdev = 0.001
[info]   CI (99.9%): [2360.000, 2360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1732.269 ±(99.9%) 583.363 MB/sec [Average]
[info]   (min, avg, max) = (1639.004, 1732.269, 2001.086), stdev = 151.497
[info]   CI (99.9%): [1148.906, 2315.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2398.093 ±(99.9%) 820.356 B/op [Average]
[info]   (min, avg, max) = (2261.484, 2398.093, 2776.598), stdev = 213.044
[info]   CI (99.9%): [1577.737, 3218.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.104 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (0.057, 0.104, 0.174), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 8.60% complete, ETA 00:35:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5839.278 ops/s
[info] # Warmup Iteration   2: 7146.177 ops/s
[info] # Warmup Iteration   3: 7357.081 ops/s
[info] Iteration   1: 7352.678 ops/s
[info]                  ·gc.alloc.rate:                   1237.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284102.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.823 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7404.903 ops/s
[info]                  ·gc.alloc.rate:                   1245.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283169.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.698 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7405.197 ops/s
[info]                  ·gc.alloc.rate:                   1246.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284263.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.544 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7402.030 ops/s
[info]                  ·gc.alloc.rate:                   1245.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213992.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7296.730 ops/s
[info]                  ·gc.alloc.rate:                   1227.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              264808.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290377.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.470 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   7372.308 ±(99.9%) 183.915 ops/s [Average]
[info]   (min, avg, max) = (7296.730, 7372.308, 7405.197), stdev = 47.762
[info]   CI (99.9%): [7188.393, 7556.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1240.695 ±(99.9%) 31.187 MB/sec [Average]
[info]   (min, avg, max) = (1227.714, 1240.695, 1246.497), stdev = 8.099
[info]   CI (99.9%): [1209.508, 1271.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   264808.059 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (264808.058, 264808.059, 264808.063), stdev = 0.002
[info]   CI (99.9%): [264808.052, 264808.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1270.226 ±(99.9%) 568.051 MB/sec [Average]
[info]   (min, avg, max) = (1006.619, 1270.226, 1346.258), stdev = 147.521
[info]   CI (99.9%): [702.175, 1838.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   271180.893 ±(99.9%) 123594.279 B/op [Average]
[info]   (min, avg, max) = (213992.212, 271180.893, 290377.103), stdev = 32097.042
[info]   CI (99.9%): [147586.615, 394775.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.877 ±(99.9%) 25.179 B/op [Average]
[info]   (min, avg, max) = (8.851, 16.877, 26.544), stdev = 6.539
[info]   CI (99.9%): [≈ 0, 42.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 9.14% complete, ETA 00:35:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17338.662 ops/s
[info] # Warmup Iteration   2: 24867.102 ops/s
[info] # Warmup Iteration   3: 25018.325 ops/s
[info] Iteration   1: 24918.517 ops/s
[info]                  ·gc.alloc.rate:                   1071.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              67664.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62143.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 24657.159 ops/s
[info]                  ·gc.alloc.rate:                   1060.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              67654.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63014.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24957.719 ops/s
[info]                  ·gc.alloc.rate:                   1072.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83429.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25145.936 ops/s
[info]                  ·gc.alloc.rate:                   1081.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62414.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 25056.301 ops/s
[info]                  ·gc.alloc.rate:                   1076.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62889.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   24947.127 ±(99.9%) 711.213 ops/s [Average]
[info]   (min, avg, max) = (24657.159, 24947.127, 25145.936), stdev = 184.700
[info]   CI (99.9%): [24235.913, 25658.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1072.536 ±(99.9%) 29.761 MB/sec [Average]
[info]   (min, avg, max) = (1060.403, 1072.536, 1081.045), stdev = 7.729
[info]   CI (99.9%): [1042.775, 1102.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   67642.961 ±(99.9%) 59.068 B/op [Average]
[info]   (min, avg, max) = (67632.017, 67642.961, 67664.019), stdev = 15.340
[info]   CI (99.9%): [67583.892, 67702.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1058.826 ±(99.9%) 569.673 MB/sec [Average]
[info]   (min, avg, max) = (984.299, 1058.826, 1323.178), stdev = 147.942
[info]   CI (99.9%): [489.153, 1628.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   66778.108 ±(99.9%) 35868.045 B/op [Average]
[info]   (min, avg, max) = (62143.759, 66778.108, 83429.027), stdev = 9314.818
[info]   CI (99.9%): [30910.063, 102646.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.889 ±(99.9%) 6.566 B/op [Average]
[info]   (min, avg, max) = (1.303, 2.889, 5.230), stdev = 1.705
[info]   CI (99.9%): [≈ 0, 9.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 9.68% complete, ETA 00:35:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29103.209 ops/s
[info] # Warmup Iteration   2: 29915.782 ops/s
[info] # Warmup Iteration   3: 30690.056 ops/s
[info] Iteration   1: 30650.370 ops/s
[info]                  ·gc.alloc.rate:                   556.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34274.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 30849.233 ops/s
[info]                  ·gc.alloc.rate:                   559.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16992.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 30826.067 ops/s
[info]                  ·gc.alloc.rate:                   559.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34010.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30756.571 ops/s
[info]                  ·gc.alloc.rate:                   558.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34087.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30817.462 ops/s
[info]                  ·gc.alloc.rate:               559.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17010.188 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   30779.940 ±(99.9%) 308.482 ops/s [Average]
[info]   (min, avg, max) = (30650.370, 30779.940, 30849.233), stdev = 80.112
[info]   CI (99.9%): [30471.459, 31088.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   558.715 ±(99.9%) 5.669 MB/sec [Average]
[info]   (min, avg, max) = (556.335, 558.715, 559.944), stdev = 1.472
[info]   CI (99.9%): [553.046, 564.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.015, 28568.020), stdev = 0.003
[info]   CI (99.9%): [28568.005, 28568.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.197 ±(99.9%) 703.488 MB/sec [Average]
[info]   (min, avg, max) = (333.061, 533.197, 667.456), stdev = 182.694
[info]   CI (99.9%): [≈ 0, 1236.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27275.027 ±(99.9%) 36115.258 B/op [Average]
[info]   (min, avg, max) = (16992.546, 27275.027, 34274.120), stdev = 9379.018
[info]   CI (99.9%): [≈ 0, 63390.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.335 ±(99.9%) 2.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 1.551), stdev = 0.680
[info]   CI (99.9%): [≈ 0, 2.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.203 ±(99.9%) 134.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.203, 79.637), stdev = 34.922
[info]   CI (99.9%): [≈ 0, 151.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 10.22% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7934.536 ops/s
[info] # Warmup Iteration   2: 13327.932 ops/s
[info] # Warmup Iteration   3: 13509.219 ops/s
[info] Iteration   1: 13520.229 ops/s
[info]                  ·gc.alloc.rate:                   1433.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1641.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191006.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.846 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13564.495 ops/s
[info]                  ·gc.alloc.rate:                   1437.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153418.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.907 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13585.385 ops/s
[info]                  ·gc.alloc.rate:                   1439.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              166759.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154107.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.646 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13539.184 ops/s
[info]                  ·gc.alloc.rate:                   1434.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194483.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13442.407 ops/s
[info]                  ·gc.alloc.rate:                   1424.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157539.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.312 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   13530.340 ±(99.9%) 211.865 ops/s [Average]
[info]   (min, avg, max) = (13442.407, 13530.340, 13585.385), stdev = 55.021
[info]   CI (99.9%): [13318.475, 13742.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1433.957 ±(99.9%) 21.603 MB/sec [Average]
[info]   (min, avg, max) = (1424.892, 1433.957, 1439.504), stdev = 5.610
[info]   CI (99.9%): [1412.354, 1455.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   166760.035 ±(99.9%) 0.394 B/op [Average]
[info]   (min, avg, max) = (166759.888, 166760.035, 166760.176), stdev = 0.102
[info]   CI (99.9%): [166759.641, 166760.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1462.741 ±(99.9%) 686.772 MB/sec [Average]
[info]   (min, avg, max) = (1322.320, 1462.741, 1673.503), stdev = 178.353
[info]   CI (99.9%): [775.969, 2149.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   170110.890 ±(99.9%) 79928.231 B/op [Average]
[info]   (min, avg, max) = (153418.100, 170110.890, 194483.319), stdev = 20757.108
[info]   CI (99.9%): [90182.659, 250039.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.226 ±(99.9%) 21.383 B/op [Average]
[info]   (min, avg, max) = (2.420, 8.226, 16.907), stdev = 5.553
[info]   CI (99.9%): [≈ 0, 29.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 10.75% complete, ETA 00:34:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13548.822 ops/s
[info] # Warmup Iteration   2: 14407.321 ops/s
[info] # Warmup Iteration   3: 14536.608 ops/s
[info] Iteration   1: 14219.303 ops/s
[info]                  ·gc.alloc.rate:                   1423.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147826.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.520 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14489.637 ops/s
[info]                  ·gc.alloc.rate:                   1451.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145579.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.828 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14375.637 ops/s
[info]                  ·gc.alloc.rate:                   1439.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184060.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.837 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14469.084 ops/s
[info]                  ·gc.alloc.rate:                   1449.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146794.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.528 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14210.880 ops/s
[info]                  ·gc.alloc.rate:                   1423.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149828.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.611 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   14352.908 ±(99.9%) 512.043 ops/s [Average]
[info]   (min, avg, max) = (14210.880, 14352.908, 14489.637), stdev = 132.976
[info]   CI (99.9%): [13840.865, 14864.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1437.412 ±(99.9%) 51.780 MB/sec [Average]
[info]   (min, avg, max) = (1423.336, 1437.412, 1451.326), stdev = 13.447
[info]   CI (99.9%): [1385.631, 1489.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   157576.033 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (157576.030, 157576.033, 157576.042), stdev = 0.005
[info]   CI (99.9%): [157576.013, 157576.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1412.250 ±(99.9%) 579.680 MB/sec [Average]
[info]   (min, avg, max) = (1335.671, 1412.250, 1681.247), stdev = 150.541
[info]   CI (99.9%): [832.570, 1991.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   154817.950 ±(99.9%) 63232.140 B/op [Average]
[info]   (min, avg, max) = (145579.279, 154817.950, 184060.493), stdev = 16421.186
[info]   CI (99.9%): [91585.810, 218050.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.665 ±(99.9%) 18.898 B/op [Average]
[info]   (min, avg, max) = (4.528, 8.665, 15.828), stdev = 4.908
[info]   CI (99.9%): [≈ 0, 27.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 11.29% complete, ETA 00:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13306.214 ops/s
[info] # Warmup Iteration   2: 14584.310 ops/s
[info] # Warmup Iteration   3: 14830.860 ops/s
[info] Iteration   1: 14662.723 ops/s
[info]                  ·gc.alloc.rate:                   1372.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143244.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14771.943 ops/s
[info]                  ·gc.alloc.rate:                   1382.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142648.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14803.204 ops/s
[info]                  ·gc.alloc.rate:                   1385.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142810.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.213 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14819.882 ops/s
[info]                  ·gc.alloc.rate:                   1386.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178971.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14730.952 ops/s
[info]                  ·gc.alloc.rate:                   1378.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144469.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.896 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   14757.741 ±(99.9%) 242.591 ops/s [Average]
[info]   (min, avg, max) = (14662.723, 14757.741, 14819.882), stdev = 63.000
[info]   CI (99.9%): [14515.149, 15000.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1380.928 ±(99.9%) 22.433 MB/sec [Average]
[info]   (min, avg, max) = (1372.010, 1380.928, 1386.600), stdev = 5.826
[info]   CI (99.9%): [1358.495, 1403.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   147248.031 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (147248.029, 147248.031, 147248.040), stdev = 0.005
[info]   CI (99.9%): [147248.013, 147248.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1411.028 ±(99.9%) 591.027 MB/sec [Average]
[info]   (min, avg, max) = (1334.706, 1411.028, 1685.333), stdev = 153.488
[info]   CI (99.9%): [820.001, 2002.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   150428.954 ±(99.9%) 61501.690 B/op [Average]
[info]   (min, avg, max) = (142648.918, 150428.954, 178971.685), stdev = 15971.794
[info]   CI (99.9%): [88927.264, 211930.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   6.221 ±(99.9%) 11.179 B/op [Average]
[info]   (min, avg, max) = (2.213, 6.221, 8.896), stdev = 2.903
[info]   CI (99.9%): [≈ 0, 17.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 11.83% complete, ETA 00:34:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37641.322 ops/s
[info] # Warmup Iteration   2: 45003.357 ops/s
[info] # Warmup Iteration   3: 45522.589 ops/s
[info] Iteration   1: 45258.041 ops/s
[info]                  ·gc.alloc.rate:                   1731.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57982.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 45560.521 ops/s
[info]                  ·gc.alloc.rate:                   1743.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57894.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 45835.745 ops/s
[info]                  ·gc.alloc.rate:                   1753.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57812.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.144 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 45826.572 ops/s
[info]                  ·gc.alloc.rate:                   1753.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69629.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.860 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 45757.564 ops/s
[info]                  ·gc.alloc.rate:                   1751.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              60216.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58266.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.864 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   45647.689 ±(99.9%) 940.971 ops/s [Average]
[info]   (min, avg, max) = (45258.041, 45647.689, 45835.745), stdev = 244.367
[info]   CI (99.9%): [44706.718, 46588.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1746.579 ±(99.9%) 36.187 MB/sec [Average]
[info]   (min, avg, max) = (1731.574, 1746.579, 1753.675), stdev = 9.398
[info]   CI (99.9%): [1710.392, 1782.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   60216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (60216.009, 60216.010, 60216.010), stdev = 0.001
[info]   CI (99.9%): [60216.008, 60216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1749.778 ±(99.9%) 598.843 MB/sec [Average]
[info]   (min, avg, max) = (1667.352, 1749.778, 2027.403), stdev = 155.518
[info]   CI (99.9%): [1150.935, 2348.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   60317.279 ±(99.9%) 20056.686 B/op [Average]
[info]   (min, avg, max) = (57812.007, 60317.279, 69629.766), stdev = 5208.658
[info]   CI (99.9%): [40260.593, 80373.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.450 ±(99.9%) 4.621 B/op [Average]
[info]   (min, avg, max) = (2.144, 3.450, 5.067), stdev = 1.200
[info]   CI (99.9%): [≈ 0, 8.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 12.37% complete, ETA 00:34:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78581.143 ops/s
[info] # Warmup Iteration   2: 102977.126 ops/s
[info] # Warmup Iteration   3: 103173.949 ops/s
[info] Iteration   1: 103019.534 ops/s
[info]                  ·gc.alloc.rate:                   235.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              3592.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3907.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 103272.387 ops/s
[info]                  ·gc.alloc.rate:               235.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          3592.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3898.354 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 102271.494 ops/s
[info]                  ·gc.alloc.rate:                   233.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              3592.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3936.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 98660.172 ops/s
[info]                  ·gc.alloc.rate:               225.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          3592.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4080.682 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 102922.480 ops/s
[info]                  ·gc.alloc.rate:                   234.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              3592.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5001.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   102029.213 ±(99.9%) 7390.146 ops/s [Average]
[info]   (min, avg, max) = (98660.172, 102029.213, 103272.387), stdev = 1919.198
[info]   CI (99.9%): [94639.067, 109419.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   232.876 ±(99.9%) 16.897 MB/sec [Average]
[info]   (min, avg, max) = (225.176, 232.876, 235.728), stdev = 4.388
[info]   CI (99.9%): [215.979, 249.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3592.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3592.004, 3592.004, 3592.005), stdev = 0.001
[info]   CI (99.9%): [3592.004, 3592.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   270.077 ±(99.9%) 122.790 MB/sec [Average]
[info]   (min, avg, max) = (255.799, 270.077, 327.121), stdev = 31.888
[info]   CI (99.9%): [147.287, 392.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4165.043 ±(99.9%) 1823.035 B/op [Average]
[info]   (min, avg, max) = (3898.354, 4165.043, 5001.708), stdev = 473.436
[info]   CI (99.9%): [2342.008, 5988.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.432 ±(99.9%) 3.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.432, 2.120), stdev = 0.943
[info]   CI (99.9%): [≈ 0, 4.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.610 ±(99.9%) 55.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.610, 32.411), stdev = 14.424
[info]   CI (99.9%): [≈ 0, 62.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 12.90% complete, ETA 00:34:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207561.364 ops/s
[info] # Warmup Iteration   2: 212221.635 ops/s
[info] # Warmup Iteration   3: 216040.494 ops/s
[info] Iteration   1: 214944.620 ops/s
[info]                  ·gc.alloc.rate:               292.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1873.015 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 215798.927 ops/s
[info]                  ·gc.alloc.rate:               293.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1865.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 212357.171 ops/s
[info]                  ·gc.alloc.rate:               289.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1895.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 210691.821 ops/s
[info]                  ·gc.alloc.rate:                   287.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2488.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 212743.394 ops/s
[info]                  ·gc.alloc.rate:                   289.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2464.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   213307.187 ±(99.9%) 7926.737 ops/s [Average]
[info]   (min, avg, max) = (210691.821, 213307.187, 215798.927), stdev = 2058.548
[info]   CI (99.9%): [205380.450, 221233.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   290.582 ±(99.9%) 10.767 MB/sec [Average]
[info]   (min, avg, max) = (287.012, 290.582, 293.962), stdev = 2.796
[info]   CI (99.9%): [279.815, 301.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.002, 2144.002, 2144.002), stdev = 0.001
[info]   CI (99.9%): [2144.002, 2144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.717 ±(99.9%) 163.052 MB/sec [Average]
[info]   (min, avg, max) = (255.786, 286.717, 333.131), stdev = 42.344
[info]   CI (99.9%): [123.664, 449.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2117.326 ±(99.9%) 1262.187 B/op [Average]
[info]   (min, avg, max) = (1865.647, 2117.326, 2488.091), stdev = 327.786
[info]   CI (99.9%): [855.138, 3379.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.333 ±(99.9%) 2.739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.605), stdev = 0.711
[info]   CI (99.9%): [≈ 0, 3.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.490 ±(99.9%) 20.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.490, 11.988), stdev = 5.313
[info]   CI (99.9%): [≈ 0, 22.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 13.44% complete, ETA 00:33:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7964.917 ops/s
[info] # Warmup Iteration   2: 13204.561 ops/s
[info] # Warmup Iteration   3: 13179.228 ops/s
[info] Iteration   1: 13259.656 ops/s
[info]                  ·gc.alloc.rate:                   4044.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4058.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     481631.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.883 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 13221.368 ops/s
[info]                  ·gc.alloc.rate:                   4032.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     485077.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.779 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 13161.126 ops/s
[info]                  ·gc.alloc.rate:                   4013.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              479962.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3743.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     447699.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.957 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13287.049 ops/s
[info]                  ·gc.alloc.rate:                   4052.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     483848.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.795 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 13266.713 ops/s
[info]                  ·gc.alloc.rate:                   4045.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484541.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.877 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   13239.183 ±(99.9%) 191.358 ops/s [Average]
[info]   (min, avg, max) = (13161.126, 13239.183, 13287.049), stdev = 49.695
[info]   CI (99.9%): [13047.824, 13430.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4037.571 ±(99.9%) 58.714 MB/sec [Average]
[info]   (min, avg, max) = (4013.476, 4037.571, 4052.050), stdev = 15.248
[info]   CI (99.9%): [3978.857, 4096.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   479960.515 ±(99.9%) 4.149 B/op [Average]
[info]   (min, avg, max) = (479960.033, 479960.515, 479962.442), stdev = 1.077
[info]   CI (99.9%): [479956.366, 479964.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4009.321 ±(99.9%) 573.283 MB/sec [Average]
[info]   (min, avg, max) = (3743.695, 4009.321, 4084.881), stdev = 148.880
[info]   CI (99.9%): [3436.038, 4582.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   476559.933 ±(99.9%) 62328.420 B/op [Average]
[info]   (min, avg, max) = (447699.894, 476559.933, 485077.411), stdev = 16186.493
[info]   CI (99.9%): [414231.513, 538888.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.208), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.858 ±(99.9%) 24.882 B/op [Average]
[info]   (min, avg, max) = (9.877, 13.858, 24.779), stdev = 6.462
[info]   CI (99.9%): [≈ 0, 38.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   59.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.800, 12.000), stdev = 0.447
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.000, 12.000), stdev = 1.581
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 13.98% complete, ETA 00:33:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36875.241 ops/s
[info] # Warmup Iteration   2: 45353.001 ops/s
[info] # Warmup Iteration   3: 44993.011 ops/s
[info] Iteration   1: 44380.759 ops/s
[info]                  ·gc.alloc.rate:                   1098.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35198.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 44369.231 ops/s
[info]                  ·gc.alloc.rate:                   1098.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35324.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.954 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44871.481 ops/s
[info]                  ·gc.alloc.rate:                   1110.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46739.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.190 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45150.906 ops/s
[info]                  ·gc.alloc.rate:                   1117.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34980.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 44612.672 ops/s
[info]                  ·gc.alloc.rate:                   1104.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              38960.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35522.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   44677.010 ±(99.9%) 1290.150 ops/s [Average]
[info]   (min, avg, max) = (44369.231, 44677.010, 45150.906), stdev = 335.048
[info]   CI (99.9%): [43386.860, 45967.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1106.071 ±(99.9%) 32.198 MB/sec [Average]
[info]   (min, avg, max) = (1098.329, 1106.071, 1117.916), stdev = 8.362
[info]   CI (99.9%): [1073.873, 1138.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38960.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38960.010, 38960.010, 38960.010), stdev = 0.001
[info]   CI (99.9%): [38960.008, 38960.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1066.380 ±(99.9%) 573.367 MB/sec [Average]
[info]   (min, avg, max) = (992.513, 1066.380, 1332.532), stdev = 148.902
[info]   CI (99.9%): [493.013, 1639.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37552.921 ±(99.9%) 19789.662 B/op [Average]
[info]   (min, avg, max) = (34980.397, 37552.921, 46739.668), stdev = 5139.312
[info]   CI (99.9%): [17763.260, 57342.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.055 ±(99.9%) 2.395 B/op [Average]
[info]   (min, avg, max) = (1.451, 2.055, 2.954), stdev = 0.622
[info]   CI (99.9%): [≈ 0, 4.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 14.52% complete, ETA 00:33:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87853.783 ops/s
[info] # Warmup Iteration   2: 114592.949 ops/s
[info] # Warmup Iteration   3: 107836.226 ops/s
[info] Iteration   1: 107981.962 ops/s
[info]                  ·gc.alloc.rate:                   772.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9553.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 109219.102 ops/s
[info]                  ·gc.alloc.rate:                   780.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14178.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.500 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 108669.506 ops/s
[info]                  ·gc.alloc.rate:                   776.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9522.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 108541.396 ops/s
[info]                  ·gc.alloc.rate:               775.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          11248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9557.711 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 109217.236 ops/s
[info]                  ·gc.alloc.rate:                   780.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14298.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   108725.840 ±(99.9%) 1996.517 ops/s [Average]
[info]   (min, avg, max) = (107981.962, 108725.840, 109219.102), stdev = 518.489
[info]   CI (99.9%): [106729.323, 110722.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   777.218 ±(99.9%) 14.360 MB/sec [Average]
[info]   (min, avg, max) = (772.020, 777.218, 780.902), stdev = 3.729
[info]   CI (99.9%): [762.858, 791.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11248.004, 11248.004, 11248.004), stdev = 0.001
[info]   CI (99.9%): [11248.004, 11248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   789.870 ±(99.9%) 698.132 MB/sec [Average]
[info]   (min, avg, max) = (655.747, 789.870, 992.523), stdev = 181.303
[info]   CI (99.9%): [91.738, 1488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11422.395 ±(99.9%) 9901.426 B/op [Average]
[info]   (min, avg, max) = (9522.773, 11422.395, 14298.764), stdev = 2571.369
[info]   CI (99.9%): [1520.968, 21323.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.025 ±(99.9%) 2.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.025, 1.517), stdev = 0.626
[info]   CI (99.9%): [≈ 0, 3.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 15.05% complete, ETA 00:33:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262994.614 ops/s
[info] # Warmup Iteration   2: 268963.026 ops/s
[info] # Warmup Iteration   3: 273669.298 ops/s
[info] Iteration   1: 274532.581 ops/s
[info]                  ·gc.alloc.rate:                   986.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5728.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 273319.862 ops/s
[info]                  ·gc.alloc.rate:                   982.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5757.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 274469.356 ops/s
[info]                  ·gc.alloc.rate:                   986.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5745.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 274569.224 ops/s
[info]                  ·gc.alloc.rate:                   986.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5758.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 273500.291 ops/s
[info]                  ·gc.alloc.rate:                   982.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3863.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   274078.263 ±(99.9%) 2365.581 ops/s [Average]
[info]   (min, avg, max) = (273319.862, 274078.263, 274569.224), stdev = 614.334
[info]   CI (99.9%): [271712.681, 276443.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   985.041 ±(99.9%) 8.812 MB/sec [Average]
[info]   (min, avg, max) = (982.213, 985.041, 986.965), stdev = 2.288
[info]   CI (99.9%): [976.228, 993.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5656.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5656.002, 5656.002, 5656.002), stdev = 0.001
[info]   CI (99.9%): [5656.001, 5656.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.490 ±(99.9%) 568.377 MB/sec [Average]
[info]   (min, avg, max) = (671.469, 935.490, 1004.565), stdev = 147.606
[info]   CI (99.9%): [367.113, 1503.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5370.683 ±(99.9%) 3243.812 B/op [Average]
[info]   (min, avg, max) = (3863.895, 5370.683, 5758.239), stdev = 842.408
[info]   CI (99.9%): [2126.870, 8614.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.359 ±(99.9%) 0.566 B/op [Average]
[info]   (min, avg, max) = (0.119, 0.359, 0.479), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 15.59% complete, ETA 00:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295363.913 ops/s
[info] # Warmup Iteration   2: 307425.509 ops/s
[info] # Warmup Iteration   3: 318120.127 ops/s
[info] Iteration   1: 316734.141 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 316980.340 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 317098.175 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 317065.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 316972.188 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   316969.969 ±(99.9%) 548.617 ops/s [Average]
[info]   (min, avg, max) = (316734.141, 316969.969, 317098.175), stdev = 142.474
[info]   CI (99.9%): [316421.353, 317518.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 16.13% complete, ETA 00:32:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40526.410 ops/s
[info] # Warmup Iteration   2: 51712.950 ops/s
[info] # Warmup Iteration   3: 51702.464 ops/s
[info] Iteration   1: 52451.164 ops/s
[info]                  ·gc.alloc.rate:                   518.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              15560.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          584.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17540.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 52046.724 ops/s
[info]                  ·gc.alloc.rate:               514.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          15560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9940.875 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 52406.966 ops/s
[info]                  ·gc.alloc.rate:                   518.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              15560.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19724.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 52308.362 ops/s
[info]                  ·gc.alloc.rate:                   517.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              15560.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19762.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 52519.103 ops/s
[info]                  ·gc.alloc.rate:               519.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          15560.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      329.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9861.341 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   52346.464 ±(99.9%) 709.300 ops/s [Average]
[info]   (min, avg, max) = (52046.724, 52346.464, 52519.103), stdev = 184.203
[info]   CI (99.9%): [51637.164, 53055.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   517.528 ±(99.9%) 7.022 MB/sec [Average]
[info]   (min, avg, max) = (514.560, 517.528, 519.245), stdev = 1.824
[info]   CI (99.9%): [510.505, 524.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   15560.011 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (15560.004, 15560.011, 15560.022), stdev = 0.007
[info]   CI (99.9%): [15559.985, 15560.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   511.198 ±(99.9%) 650.768 MB/sec [Average]
[info]   (min, avg, max) = (328.739, 511.198, 656.818), stdev = 169.002
[info]   CI (99.9%): [≈ 0, 1161.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15365.881 ±(99.9%) 19519.561 B/op [Average]
[info]   (min, avg, max) = (9861.341, 15365.881, 19762.141), stdev = 5069.168
[info]   CI (99.9%): [≈ 0, 34885.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.442 ±(99.9%) 3.538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 2.084), stdev = 0.919
[info]   CI (99.9%): [≈ 0, 3.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.255 ±(99.9%) 106.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.255, 62.522), stdev = 27.572
[info]   CI (99.9%): [≈ 0, 119.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 16.67% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17588.998 ops/s
[info] # Warmup Iteration   2: 21129.040 ops/s
[info] # Warmup Iteration   3: 21551.621 ops/s
[info] Iteration   1: 21545.124 ops/s
[info]                  ·gc.alloc.rate:                   2006.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              146567.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146515.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.124 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 21227.639 ops/s
[info]                  ·gc.alloc.rate:                   1977.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              146568.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149599.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.434 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 21048.374 ops/s
[info]                  ·gc.alloc.rate:                   1960.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              146567.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151468.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.452 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21503.011 ops/s
[info]                  ·gc.alloc.rate:                   2002.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              146568.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148751.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.142 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 21523.711 ops/s
[info]                  ·gc.alloc.rate:                   2004.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              146568.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124058.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.177 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   21369.572 ±(99.9%) 851.716 ops/s [Average]
[info]   (min, avg, max) = (21048.374, 21369.572, 21545.124), stdev = 221.188
[info]   CI (99.9%): [20517.856, 22221.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1990.161 ±(99.9%) 78.800 MB/sec [Average]
[info]   (min, avg, max) = (1960.236, 1990.161, 2006.251), stdev = 20.464
[info]   CI (99.9%): [1911.360, 2068.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   146567.711 ±(99.9%) 1.651 B/op [Average]
[info]   (min, avg, max) = (146567.203, 146567.711, 146568.029), stdev = 0.429
[info]   CI (99.9%): [146566.061, 146569.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1955.706 ±(99.9%) 559.030 MB/sec [Average]
[info]   (min, avg, max) = (1696.616, 1955.706, 2032.337), stdev = 145.178
[info]   CI (99.9%): [1396.677, 2514.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   144078.633 ±(99.9%) 43636.743 B/op [Average]
[info]   (min, avg, max) = (124058.114, 144078.633, 151468.726), stdev = 11332.324
[info]   CI (99.9%): [100441.890, 187715.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.158, 0.208), stdev = 0.035
[info]   CI (99.9%): [0.024, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.666 ±(99.9%) 10.172 B/op [Average]
[info]   (min, avg, max) = (9.124, 11.666, 15.434), stdev = 2.642
[info]   CI (99.9%): [1.494, 21.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 17.20% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37475.142 ops/s
[info] # Warmup Iteration   2: 52793.974 ops/s
[info] # Warmup Iteration   3: 52643.387 ops/s
[info] Iteration   1: 53225.970 ops/s
[info]                  ·gc.alloc.rate:      123.910 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52999.886 ops/s
[info]                  ·gc.alloc.rate:                   123.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7595.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.171 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 53280.704 ops/s
[info]                  ·gc.alloc.rate:      124.044 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 53086.568 ops/s
[info]                  ·gc.alloc.rate:               123.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          3664.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7583.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 53324.377 ops/s
[info]                  ·gc.alloc.rate:      124.194 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   53183.501 ±(99.9%) 524.482 ops/s [Average]
[info]   (min, avg, max) = (52999.886, 53183.501, 53324.377), stdev = 136.206
[info]   CI (99.9%): [52659.019, 53707.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   123.824 ±(99.9%) 1.280 MB/sec [Average]
[info]   (min, avg, max) = (123.384, 123.824, 124.194), stdev = 0.332
[info]   CI (99.9%): [122.544, 125.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3664.009 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (3664.008, 3664.009, 3664.010), stdev = 0.001
[info]   CI (99.9%): [3664.006, 3664.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   102.316 ±(99.9%) 539.482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.316, 255.790), stdev = 140.102
[info]   CI (99.9%): [≈ 0, 641.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3035.858 ±(99.9%) 16007.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3035.858, 7595.940), stdev = 4157.022
[info]   CI (99.9%): [≈ 0, 19043.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.991 ±(99.9%) 8.534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.991, 4.956), stdev = 2.216
[info]   CI (99.9%): [≈ 0, 9.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.434 ±(99.9%) 253.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.434, 147.171), stdev = 65.817
[info]   CI (99.9%): [≈ 0, 282.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 17.74% complete, ETA 00:32:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117374.237 ops/s
[info] # Warmup Iteration   2: 120471.678 ops/s
[info] # Warmup Iteration   3: 121077.347 ops/s
[info] Iteration   1: 120620.637 ops/s
[info]                  ·gc.alloc.rate:      164.312 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 119763.105 ops/s
[info]                  ·gc.alloc.rate:               163.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3361.634 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 119315.675 ops/s
[info]                  ·gc.alloc.rate:                   162.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3374.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 119888.340 ops/s
[info]                  ·gc.alloc.rate:      163.322 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 119257.796 ops/s
[info]                  ·gc.alloc.rate:               162.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3375.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   119769.111 ±(99.9%) 2114.697 ops/s [Average]
[info]   (min, avg, max) = (119257.796, 119769.111, 120620.637), stdev = 549.180
[info]   CI (99.9%): [117654.413, 121883.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   163.162 ±(99.9%) 2.878 MB/sec [Average]
[info]   (min, avg, max) = (162.458, 163.162, 164.312), stdev = 0.748
[info]   CI (99.9%): [160.284, 166.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.004, 2144.004, 2144.004), stdev = 0.001
[info]   CI (99.9%): [2144.003, 2144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   153.491 ±(99.9%) 539.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.491, 255.859), stdev = 140.117
[info]   CI (99.9%): [≈ 0, 693.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2022.334 ±(99.9%) 7108.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2022.334, 3375.811), stdev = 1846.138
[info]   CI (99.9%): [≈ 0, 9131.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.165 ±(99.9%) 1.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.824), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 1.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 18.28% complete, ETA 00:32:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5695.831 ops/s
[info] # Warmup Iteration   2: 9641.312 ops/s
[info] # Warmup Iteration   3: 9862.035 ops/s
[info] Iteration   1: 9844.660 ops/s
[info]                  ·gc.alloc.rate:                   3400.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              543720.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3700.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     591694.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.605 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9746.911 ops/s
[info]                  ·gc.alloc.rate:                   3368.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              543720.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3049.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492182.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.528 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 9748.471 ops/s
[info]                  ·gc.alloc.rate:                   3367.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              543722.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     548378.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.969 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 9740.218 ops/s
[info]                  ·gc.alloc.rate:                   3366.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              543725.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549689.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.909 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 9779.836 ops/s
[info]                  ·gc.alloc.rate:                   3378.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              543720.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547819.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.801 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   9772.019 ±(99.9%) 167.116 ops/s [Average]
[info]   (min, avg, max) = (9740.218, 9772.019, 9844.660), stdev = 43.399
[info]   CI (99.9%): [9604.903, 9939.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3376.569 ±(99.9%) 55.438 MB/sec [Average]
[info]   (min, avg, max) = (3366.440, 3376.569, 3400.834), stdev = 14.397
[info]   CI (99.9%): [3321.131, 3432.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   543721.605 ±(99.9%) 8.924 B/op [Average]
[info]   (min, avg, max) = (543720.044, 543721.605, 543725.214), stdev = 2.318
[info]   CI (99.9%): [543712.681, 543730.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3390.965 ±(99.9%) 888.554 MB/sec [Average]
[info]   (min, avg, max) = (3049.544, 3390.965, 3700.900), stdev = 230.755
[info]   CI (99.9%): [2502.411, 4279.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   545952.806 ±(99.9%) 136234.582 B/op [Average]
[info]   (min, avg, max) = (492182.150, 545952.806, 591694.175), stdev = 35379.688
[info]   CI (99.9%): [409718.224, 682187.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.187 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 0.187, 0.229), stdev = 0.039
[info]   CI (99.9%): [0.038, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   30.162 ±(99.9%) 23.872 B/op [Average]
[info]   (min, avg, max) = (23.528, 30.162, 36.969), stdev = 6.199
[info]   CI (99.9%): [6.291, 54.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 10.000, 11.000), stdev = 0.707
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.200, 13.000), stdev = 1.924
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 18.82% complete, ETA 00:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24309.104 ops/s
[info] # Warmup Iteration   2: 27857.520 ops/s
[info] # Warmup Iteration   3: 32192.173 ops/s
[info] Iteration   1: 32161.843 ops/s
[info]                  ·gc.alloc.rate:                   1401.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              68594.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64871.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30320.515 ops/s
[info]                  ·gc.alloc.rate:                   1320.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              68544.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69089.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.403 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 30186.858 ops/s
[info]                  ·gc.alloc.rate:                   1314.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              68544.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69740.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.427 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 29914.420 ops/s
[info]                  ·gc.alloc.rate:                   1302.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              68544.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70657.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30097.415 ops/s
[info]                  ·gc.alloc.rate:                   1310.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              68544.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70471.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   30536.210 ±(99.9%) 3545.112 ops/s [Average]
[info]   (min, avg, max) = (29914.420, 30536.210, 32161.843), stdev = 920.654
[info]   CI (99.9%): [26991.098, 34081.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1330.221 ±(99.9%) 156.063 MB/sec [Average]
[info]   (min, avg, max) = (1302.858, 1330.221, 1401.770), stdev = 40.529
[info]   CI (99.9%): [1174.158, 1486.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68554.042 ±(99.9%) 86.338 B/op [Average]
[info]   (min, avg, max) = (68544.014, 68554.042, 68594.151), stdev = 22.422
[info]   CI (99.9%): [68467.703, 68640.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1337.106 ±(99.9%) 33.902 MB/sec [Average]
[info]   (min, avg, max) = (1325.701, 1337.106, 1347.688), stdev = 8.804
[info]   CI (99.9%): [1303.204, 1371.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   68966.125 ±(99.9%) 9133.800 B/op [Average]
[info]   (min, avg, max) = (64871.798, 68966.125, 70657.438), stdev = 2372.019
[info]   CI (99.9%): [59832.326, 78099.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.663 ±(99.9%) 7.666 B/op [Average]
[info]   (min, avg, max) = (1.095, 3.663, 5.427), stdev = 1.991
[info]   CI (99.9%): [≈ 0, 11.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 19.35% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220376.694 ops/s
[info] # Warmup Iteration   2: 224047.037 ops/s
[info] # Warmup Iteration   3: 223652.499 ops/s
[info] Iteration   1: 227087.421 ops/s
[info]                  ·gc.alloc.rate:                   542.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2310.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 227805.435 ops/s
[info]                  ·gc.alloc.rate:                   544.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4604.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 228789.509 ops/s
[info]                  ·gc.alloc.rate:                   546.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4582.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 226897.327 ops/s
[info]                  ·gc.alloc.rate:               542.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2310.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 217215.867 ops/s
[info]                  ·gc.alloc.rate:                   518.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4826.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   225559.112 ±(99.9%) 18185.654 ops/s [Average]
[info]   (min, avg, max) = (217215.867, 225559.112, 228789.509), stdev = 4722.757
[info]   CI (99.9%): [207373.458, 243744.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   538.873 ±(99.9%) 43.490 MB/sec [Average]
[info]   (min, avg, max) = (518.931, 538.873, 546.660), stdev = 11.294
[info]   CI (99.9%): [495.383, 582.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3760.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3760.002, 3760.002, 3760.002), stdev = 0.001
[info]   CI (99.9%): [3760.002, 3760.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.066 ±(99.9%) 702.431 MB/sec [Average]
[info]   (min, avg, max) = (333.072, 533.066, 666.489), stdev = 182.419
[info]   CI (99.9%): [≈ 0, 1235.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3726.977 ±(99.9%) 4992.371 B/op [Average]
[info]   (min, avg, max) = (2310.351, 3726.977, 4826.609), stdev = 1296.503
[info]   CI (99.9%): [≈ 0, 8719.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.348 ±(99.9%) 2.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.553), stdev = 0.674
[info]   CI (99.9%): [≈ 0, 2.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.414 ±(99.9%) 17.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.414, 10.762), stdev = 4.674
[info]   CI (99.9%): [≈ 0, 20.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 19.89% complete, ETA 00:31:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233337.432 ops/s
[info] # Warmup Iteration   2: 246959.468 ops/s
[info] # Warmup Iteration   3: 247711.942 ops/s
[info] Iteration   1: 248511.535 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 247741.841 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 248562.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 248611.140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 248633.813 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   248412.176 ±(99.9%) 1454.280 ops/s [Average]
[info]   (min, avg, max) = (247741.841, 248412.176, 248633.813), stdev = 377.672
[info]   CI (99.9%): [246957.896, 249866.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 20.43% complete, ETA 00:31:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3110.000 ops/s
[info] # Warmup Iteration   2: 4237.529 ops/s
[info] # Warmup Iteration   3: 4347.400 ops/s
[info] Iteration   1: 4369.523 ops/s
[info]                  ·gc.alloc.rate:                   1735.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     596016.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.987 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4361.538 ops/s
[info]                  ·gc.alloc.rate:                   1732.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     721962.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.552 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4387.592 ops/s
[info]                  ·gc.alloc.rate:                   1742.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     601814.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.864 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4377.886 ops/s
[info]                  ·gc.alloc.rate:                   1738.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     605822.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4283.275 ops/s
[info]                  ·gc.alloc.rate:                   1700.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              624976.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     621215.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.947 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   4355.963 ±(99.9%) 160.848 ops/s [Average]
[info]   (min, avg, max) = (4283.275, 4355.963, 4387.592), stdev = 41.772
[info]   CI (99.9%): [4195.115, 4516.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1729.849 ±(99.9%) 64.034 MB/sec [Average]
[info]   (min, avg, max) = (1700.917, 1729.849, 1742.534), stdev = 16.629
[info]   CI (99.9%): [1665.815, 1793.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   624976.101 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (624976.098, 624976.101, 624976.106), stdev = 0.003
[info]   CI (99.9%): [624976.088, 624976.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1741.909 ±(99.9%) 560.022 MB/sec [Average]
[info]   (min, avg, max) = (1654.790, 1741.909, 2000.920), stdev = 145.436
[info]   CI (99.9%): [1181.887, 2301.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   629366.171 ±(99.9%) 202535.598 B/op [Average]
[info]   (min, avg, max) = (596016.260, 629366.171, 721962.481), stdev = 52597.852
[info]   CI (99.9%): [426830.574, 831901.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.063 ±(99.9%) 32.770 B/op [Average]
[info]   (min, avg, max) = (14.966, 27.063, 37.552), stdev = 8.510
[info]   CI (99.9%): [≈ 0, 59.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 20.97% complete, ETA 00:31:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2239.670 ops/s
[info] # Warmup Iteration   2: 2789.508 ops/s
[info] # Warmup Iteration   3: 2732.643 ops/s
[info] Iteration   1: 2786.467 ops/s
[info]                  ·gc.alloc.rate:                   1412.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     749197.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.519 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2777.315 ops/s
[info]                  ·gc.alloc.rate:                   1408.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755103.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.569 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2764.361 ops/s
[info]                  ·gc.alloc.rate:                   1401.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953199.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.404 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2792.675 ops/s
[info]                  ·gc.alloc.rate:                   1416.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757721.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.640 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2766.978 ops/s
[info]                  ·gc.alloc.rate:                   1403.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              797976.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767490.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   2777.559 ±(99.9%) 46.926 ops/s [Average]
[info]   (min, avg, max) = (2764.361, 2777.559, 2792.675), stdev = 12.187
[info]   CI (99.9%): [2730.633, 2824.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1408.444 ±(99.9%) 24.009 MB/sec [Average]
[info]   (min, avg, max) = (1401.597, 1408.444, 1416.113), stdev = 6.235
[info]   CI (99.9%): [1384.435, 1432.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   797976.158 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (797976.155, 797976.158, 797976.168), stdev = 0.006
[info]   CI (99.9%): [797976.136, 797976.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1405.555 ±(99.9%) 579.417 MB/sec [Average]
[info]   (min, avg, max) = (1326.569, 1405.555, 1674.237), stdev = 150.473
[info]   CI (99.9%): [826.138, 1984.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   796542.574 ±(99.9%) 338172.832 B/op [Average]
[info]   (min, avg, max) = (749197.773, 796542.574, 953199.196), stdev = 87822.411
[info]   CI (99.9%): [458369.741, 1134715.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   63.665 ±(99.9%) 51.447 B/op [Average]
[info]   (min, avg, max) = (47.404, 63.665, 82.569), stdev = 13.361
[info]   CI (99.9%): [12.218, 115.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 21.51% complete, ETA 00:30:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4034.259 ops/s
[info] # Warmup Iteration   2: 5753.086 ops/s
[info] # Warmup Iteration   3: 5914.182 ops/s
[info] Iteration   1: 5763.151 ops/s
[info]                  ·gc.alloc.rate:                   865.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268056.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5819.333 ops/s
[info]                  ·gc.alloc.rate:                   874.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265971.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5945.243 ops/s
[info]                  ·gc.alloc.rate:                   893.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174027.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5937.258 ops/s
[info]                  ·gc.alloc.rate:                   891.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262629.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.035 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5861.109 ops/s
[info]                  ·gc.alloc.rate:                   880.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              236424.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267106.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   5865.219 ±(99.9%) 299.099 ops/s [Average]
[info]   (min, avg, max) = (5763.151, 5865.219, 5945.243), stdev = 77.675
[info]   CI (99.9%): [5566.120, 6164.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   881.114 ±(99.9%) 44.780 MB/sec [Average]
[info]   (min, avg, max) = (865.853, 881.114, 893.099), stdev = 11.629
[info]   CI (99.9%): [836.334, 925.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   236424.075 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (236424.073, 236424.075, 236424.080), stdev = 0.003
[info]   CI (99.9%): [236424.063, 236424.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   921.620 ±(99.9%) 569.130 MB/sec [Average]
[info]   (min, avg, max) = (657.396, 921.620, 994.750), stdev = 147.801
[info]   CI (99.9%): [352.490, 1490.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   247558.553 ±(99.9%) 158476.674 B/op [Average]
[info]   (min, avg, max) = (174027.999, 247558.553, 268056.339), stdev = 41155.889
[info]   CI (99.9%): [89081.879, 406035.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.322 ±(99.9%) 39.390 B/op [Average]
[info]   (min, avg, max) = (11.020, 21.322, 33.776), stdev = 10.229
[info]   CI (99.9%): [≈ 0, 60.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 22.04% complete, ETA 00:30:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6934.785 ops/s
[info] # Warmup Iteration   2: 7334.947 ops/s
[info] # Warmup Iteration   3: 7379.845 ops/s
[info] Iteration   1: 7477.048 ops/s
[info]                  ·gc.alloc.rate:                   553.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              116448.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140211.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7493.953 ops/s
[info]                  ·gc.alloc.rate:                   554.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              116448.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69942.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7484.283 ops/s
[info]                  ·gc.alloc.rate:                   553.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              116448.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140071.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7478.528 ops/s
[info]                  ·gc.alloc.rate:                   553.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              116448.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140183.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7408.389 ops/s
[info]                  ·gc.alloc.rate:               548.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          116448.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70754.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   7468.440 ±(99.9%) 131.767 ops/s [Average]
[info]   (min, avg, max) = (7408.389, 7468.440, 7493.953), stdev = 34.219
[info]   CI (99.9%): [7336.674, 7600.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   552.683 ±(99.9%) 9.810 MB/sec [Average]
[info]   (min, avg, max) = (548.198, 552.683, 554.561), stdev = 2.548
[info]   CI (99.9%): [542.873, 562.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   116448.060 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (116448.058, 116448.060, 116448.062), stdev = 0.002
[info]   CI (99.9%): [116448.051, 116448.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   532.985 ±(99.9%) 702.670 MB/sec [Average]
[info]   (min, avg, max) = (333.087, 532.985, 666.422), stdev = 182.481
[info]   CI (99.9%): [≈ 0, 1235.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   112232.743 ±(99.9%) 147234.206 B/op [Average]
[info]   (min, avg, max) = (69942.369, 112232.743, 140211.672), stdev = 38236.256
[info]   CI (99.9%): [≈ 0, 259466.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.350 ±(99.9%) 2.706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.350, 1.606), stdev = 0.703
[info]   CI (99.9%): [≈ 0, 3.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   73.716 ±(99.9%) 569.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.716, 337.946), stdev = 147.851
[info]   CI (99.9%): [≈ 0, 643.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 22.58% complete, ETA 00:30:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2087.947 ops/s
[info] # Warmup Iteration   2: 3489.069 ops/s
[info] # Warmup Iteration   3: 3542.529 ops/s
[info] Iteration   1: 3635.868 ops/s
[info]                  ·gc.alloc.rate:                   1591.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              688861.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712264.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3645.373 ops/s
[info]                  ·gc.alloc.rate:                   1588.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              686024.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715970.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.899 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3637.237 ops/s
[info]                  ·gc.alloc.rate:                   1585.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              686024.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722445.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3625.672 ops/s
[info]                  ·gc.alloc.rate:               1580.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          686024.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 582831.325 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3605.087 ops/s
[info]                  ·gc.alloc.rate:                   1571.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              686024.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     735689.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.348 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   3629.848 ±(99.9%) 59.729 ops/s [Average]
[info]   (min, avg, max) = (3605.087, 3629.848, 3645.373), stdev = 15.511
[info]   CI (99.9%): [3570.119, 3689.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1583.569 ±(99.9%) 30.599 MB/sec [Average]
[info]   (min, avg, max) = (1571.437, 1583.569, 1591.529), stdev = 7.946
[info]   CI (99.9%): [1552.970, 1614.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   686591.504 ±(99.9%) 4885.333 B/op [Average]
[info]   (min, avg, max) = (686024.118, 686591.504, 688861.033), stdev = 1268.705
[info]   CI (99.9%): [681706.171, 691476.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1600.294 ±(99.9%) 557.175 MB/sec [Average]
[info]   (min, avg, max) = (1342.768, 1600.294, 1685.203), stdev = 144.697
[info]   CI (99.9%): [1043.119, 2157.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   693840.402 ±(99.9%) 241409.867 B/op [Average]
[info]   (min, avg, max) = (582831.325, 693840.402, 735689.762), stdev = 62693.376
[info]   CI (99.9%): [452430.535, 935250.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   41.469 ±(99.9%) 108.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.469, 71.899), stdev = 28.142
[info]   CI (99.9%): [≈ 0, 149.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 23.12% complete, ETA 00:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5007.993 ops/s
[info] # Warmup Iteration   2: 5918.826 ops/s
[info] # Warmup Iteration   3: 5991.033 ops/s
[info] Iteration   1: 5988.710 ops/s
[info]                  ·gc.alloc.rate:                   632.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173829.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5972.936 ops/s
[info]                  ·gc.alloc.rate:                   630.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174119.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5967.826 ops/s
[info]                  ·gc.alloc.rate:                   630.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174264.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5980.398 ops/s
[info]                  ·gc.alloc.rate:                   631.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174061.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5980.317 ops/s
[info]                  ·gc.alloc.rate:                   631.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              166096.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174412.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   5978.037 ±(99.9%) 30.743 ops/s [Average]
[info]   (min, avg, max) = (5967.826, 5978.037, 5988.710), stdev = 7.984
[info]   CI (99.9%): [5947.294, 6008.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   631.042 ±(99.9%) 3.078 MB/sec [Average]
[info]   (min, avg, max) = (630.028, 631.042, 632.206), stdev = 0.799
[info]   CI (99.9%): [627.963, 634.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   166096.073 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (166096.072, 166096.073, 166096.077), stdev = 0.002
[info]   CI (99.9%): [166096.064, 166096.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.592 ±(99.9%) 2.675 MB/sec [Average]
[info]   (min, avg, max) = (661.014, 661.592, 662.753), stdev = 0.695
[info]   CI (99.9%): [658.917, 664.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   174137.332 ±(99.9%) 845.604 B/op [Average]
[info]   (min, avg, max) = (173829.043, 174137.332, 174412.090), stdev = 219.601
[info]   CI (99.9%): [173291.728, 174982.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.397 ±(99.9%) 3.027 MB/sec [Average]
[info]   (min, avg, max) = (0.028, 0.397, 1.803), stdev = 0.786
[info]   CI (99.9%): [≈ 0, 3.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   104.388 ±(99.9%) 795.316 B/op [Average]
[info]   (min, avg, max) = (7.318, 104.388, 473.792), stdev = 206.541
[info]   CI (99.9%): [≈ 0, 899.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 23.66% complete, ETA 00:30:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4776.850 ops/s
[info] # Warmup Iteration   2: 6673.298 ops/s
[info] # Warmup Iteration   3: 6858.010 ops/s
[info] Iteration   1: 6833.115 ops/s
[info]                  ·gc.alloc.rate:               353.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          81355.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117820.976 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 6855.803 ops/s
[info]                  ·gc.alloc.rate:               354.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          81356.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58721.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6862.531 ops/s
[info]                  ·gc.alloc.rate:                   354.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              81354.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75083.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.695 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6868.418 ops/s
[info]                  ·gc.alloc.rate:                   355.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              81355.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75018.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6876.598 ops/s
[info]                  ·gc.alloc.rate:               355.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          81356.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74854.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   6859.293 ±(99.9%) 63.585 ops/s [Average]
[info]   (min, avg, max) = (6833.115, 6859.293, 6876.598), stdev = 16.513
[info]   CI (99.9%): [6795.708, 6922.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   354.579 ±(99.9%) 3.282 MB/sec [Average]
[info]   (min, avg, max) = (353.228, 354.579, 355.479), stdev = 0.852
[info]   CI (99.9%): [351.296, 357.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81355.741 ±(99.9%) 2.489 B/op [Average]
[info]   (min, avg, max) = (81354.897, 81355.741, 81356.484), stdev = 0.646
[info]   CI (99.9%): [81353.252, 81358.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.842 ±(99.9%) 367.937 MB/sec [Average]
[info]   (min, avg, max) = (255.804, 349.842, 511.555), stdev = 95.552
[info]   CI (99.9%): [≈ 0, 717.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   80299.836 ±(99.9%) 85198.779 B/op [Average]
[info]   (min, avg, max) = (58721.479, 80299.836, 117820.976), stdev = 22125.852
[info]   CI (99.9%): [≈ 0, 165498.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.092), stdev = 0.929
[info]   CI (99.9%): [≈ 0, 4.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   98.801 ±(99.9%) 820.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98.801, 479.695), stdev = 213.016
[info]   CI (99.9%): [≈ 0, 919.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 24.19% complete, ETA 00:29:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6693.084 ops/s
[info] # Warmup Iteration   2: 7579.768 ops/s
[info] # Warmup Iteration   3: 7572.927 ops/s
[info] Iteration   1: 7507.328 ops/s
[info]                  ·gc.alloc.rate:                   328.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              68848.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107245.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7599.366 ops/s
[info]                  ·gc.alloc.rate:               332.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          68848.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52973.712 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7573.990 ops/s
[info]                  ·gc.alloc.rate:                   331.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              68848.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69203.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337.293 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7612.254 ops/s
[info]                  ·gc.alloc.rate:                   333.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              68848.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68858.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.911 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 7618.295 ops/s
[info]                  ·gc.alloc.rate:                   333.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              68848.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68666.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   7582.247 ±(99.9%) 174.069 ops/s [Average]
[info]   (min, avg, max) = (7507.328, 7582.247, 7618.295), stdev = 45.205
[info]   CI (99.9%): [7408.178, 7756.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   331.715 ±(99.9%) 7.385 MB/sec [Average]
[info]   (min, avg, max) = (328.553, 331.715, 333.264), stdev = 1.918
[info]   CI (99.9%): [324.330, 339.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   68848.059 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (68848.057, 68848.059, 68848.062), stdev = 0.003
[info]   CI (99.9%): [68848.049, 68848.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   353.210 ±(99.9%) 364.732 MB/sec [Average]
[info]   (min, avg, max) = (255.782, 353.210, 511.792), stdev = 94.720
[info]   CI (99.9%): [≈ 0, 717.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   73389.602 ±(99.9%) 77573.727 B/op [Average]
[info]   (min, avg, max) = (52973.712, 73389.602, 107245.488), stdev = 20145.651
[info]   CI (99.9%): [≈ 0, 150963.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.347 ±(99.9%) 2.749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.347, 1.623), stdev = 0.714
[info]   CI (99.9%): [≈ 0, 3.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   72.015 ±(99.9%) 571.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.015, 337.293), stdev = 148.368
[info]   CI (99.9%): [≈ 0, 643.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 24.73% complete, ETA 00:29:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6789.567 ops/s
[info] # Warmup Iteration   2: 7679.872 ops/s
[info] # Warmup Iteration   3: 7673.443 ops/s
[info] Iteration   1: 7687.456 ops/s
[info]                  ·gc.alloc.rate:                   264.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52367.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7609.890 ops/s
[info]                  ·gc.alloc.rate:               262.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          54240.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52897.160 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7532.211 ops/s
[info]                  ·gc.alloc.rate:                   259.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53444.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7659.867 ops/s
[info]                  ·gc.alloc.rate:      263.992 MB/sec
[info]                  ·gc.alloc.rate.norm: 54240.056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7631.626 ops/s
[info]                  ·gc.alloc.rate:                   263.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68687.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334.778 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   7624.210 ±(99.9%) 227.769 ops/s [Average]
[info]   (min, avg, max) = (7532.211, 7624.210, 7687.456), stdev = 59.151
[info]   CI (99.9%): [7396.441, 7851.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   262.760 ±(99.9%) 7.851 MB/sec [Average]
[info]   (min, avg, max) = (259.582, 262.760, 264.931), stdev = 2.039
[info]   CI (99.9%): [254.909, 270.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   54240.057 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (54240.056, 54240.057, 54240.057), stdev = 0.001
[info]   CI (99.9%): [54240.055, 54240.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   220.084 ±(99.9%) 490.962 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.084, 333.071), stdev = 127.501
[info]   CI (99.9%): [≈ 0, 711.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   45479.283 ±(99.9%) 101383.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45479.283, 68687.017), stdev = 26329.096
[info]   CI (99.9%): [≈ 0, 146863.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.331 ±(99.9%) 2.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.331, 1.623), stdev = 0.723
[info]   CI (99.9%): [≈ 0, 3.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   68.250 ±(99.9%) 573.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.250, 334.778), stdev = 149.004
[info]   CI (99.9%): [≈ 0, 642.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 25.27% complete, ETA 00:29:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3317.762 ops/s
[info] # Warmup Iteration   2: 3864.502 ops/s
[info] # Warmup Iteration   3: 3997.283 ops/s
[info] Iteration   1: 3948.777 ops/s
[info]                  ·gc.alloc.rate:                   1465.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              584088.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     529597.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.623 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4001.748 ops/s
[info]                  ·gc.alloc.rate:                   1485.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              584088.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524942.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.115 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3978.672 ops/s
[info]                  ·gc.alloc.rate:                   1476.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              584088.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     663000.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.233 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4024.924 ops/s
[info]                  ·gc.alloc.rate:                   1493.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              584088.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     526501.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.252 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3950.388 ops/s
[info]                  ·gc.alloc.rate:                   1466.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              584088.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     672340.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.874 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   3980.902 ±(99.9%) 126.846 ops/s [Average]
[info]   (min, avg, max) = (3948.777, 3980.902, 4024.924), stdev = 32.942
[info]   CI (99.9%): [3854.055, 4107.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1477.521 ±(99.9%) 47.043 MB/sec [Average]
[info]   (min, avg, max) = (1465.539, 1477.521, 1493.793), stdev = 12.217
[info]   CI (99.9%): [1430.478, 1524.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   584088.110 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (584088.108, 584088.110, 584088.115), stdev = 0.003
[info]   CI (99.9%): [584088.099, 584088.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1474.856 ±(99.9%) 728.994 MB/sec [Average]
[info]   (min, avg, max) = (1328.816, 1474.856, 1687.655), stdev = 189.317
[info]   CI (99.9%): [745.863, 2203.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   583276.663 ±(99.9%) 296999.353 B/op [Average]
[info]   (min, avg, max) = (524942.869, 583276.663, 672340.988), stdev = 77129.789
[info]   CI (99.9%): [286277.310, 880276.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.127 ±(99.9%) 0.341 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.127, 0.237), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   50.019 ±(99.9%) 134.888 B/op [Average]
[info]   (min, avg, max) = (8.233, 50.019, 94.623), stdev = 35.030
[info]   CI (99.9%): [≈ 0, 184.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 25.81% complete, ETA 00:29:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7144.426 ops/s
[info] # Warmup Iteration   2: 10195.832 ops/s
[info] # Warmup Iteration   3: 10314.521 ops/s
[info] Iteration   1: 10372.021 ops/s
[info]                  ·gc.alloc.rate:                   926.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              140536.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99358.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10037.080 ops/s
[info]                  ·gc.alloc.rate:                   896.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              140536.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154273.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10137.469 ops/s
[info]                  ·gc.alloc.rate:                   905.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              140536.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153408.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10339.066 ops/s
[info]                  ·gc.alloc.rate:                   923.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              140560.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151035.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10393.399 ops/s
[info]                  ·gc.alloc.rate:                   928.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              140568.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100570.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   10255.807 ±(99.9%) 612.527 ops/s [Average]
[info]   (min, avg, max) = (10037.080, 10255.807, 10393.399), stdev = 159.071
[info]   CI (99.9%): [9643.280, 10868.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   915.967 ±(99.9%) 54.999 MB/sec [Average]
[info]   (min, avg, max) = (896.419, 915.967, 928.538), stdev = 14.283
[info]   CI (99.9%): [860.967, 970.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   140547.334 ±(99.9%) 60.412 B/op [Average]
[info]   (min, avg, max) = (140536.042, 140547.334, 140568.042), stdev = 15.689
[info]   CI (99.9%): [140486.922, 140607.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   856.724 ±(99.9%) 693.283 MB/sec [Average]
[info]   (min, avg, max) = (654.785, 856.724, 992.327), stdev = 180.043
[info]   CI (99.9%): [163.441, 1550.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   131729.225 ±(99.9%) 111762.074 B/op [Average]
[info]   (min, avg, max) = (99358.994, 131729.225, 154273.010), stdev = 29024.256
[info]   CI (99.9%): [19967.151, 243491.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.026 ±(99.9%) 15.952 B/op [Average]
[info]   (min, avg, max) = (3.159, 7.026, 12.609), stdev = 4.143
[info]   CI (99.9%): [≈ 0, 22.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 26.34% complete, ETA 00:29:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18951.489 ops/s
[info] # Warmup Iteration   2: 19438.120 ops/s
[info] # Warmup Iteration   3: 18628.175 ops/s
[info] Iteration   1: 19077.290 ops/s
[info]                  ·gc.alloc.rate:      99.885 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19372.563 ops/s
[info]                  ·gc.alloc.rate:                   101.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20782.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19401.511 ops/s
[info]                  ·gc.alloc.rate:      101.583 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.032 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19415.479 ops/s
[info]                  ·gc.alloc.rate:      101.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19396.968 ops/s
[info]                  ·gc.alloc.rate:                   101.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20755.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.313 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   19332.762 ±(99.9%) 553.144 ops/s [Average]
[info]   (min, avg, max) = (19077.290, 19332.762, 19415.479), stdev = 143.650
[info]   CI (99.9%): [18779.618, 19885.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   101.221 ±(99.9%) 2.893 MB/sec [Average]
[info]   (min, avg, max) = (99.885, 101.221, 101.653), stdev = 0.751
[info]   CI (99.9%): [98.328, 104.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.024 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (8240.022, 8240.024, 8240.032), stdev = 0.004
[info]   CI (99.9%): [8240.007, 8240.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.323 ±(99.9%) 539.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.323, 255.808), stdev = 140.111
[info]   CI (99.9%): [≈ 0, 641.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8307.484 ±(99.9%) 43802.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8307.484, 20782.100), stdev = 11375.495
[info]   CI (99.9%): [≈ 0, 52110.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 3.662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 2.130), stdev = 0.951
[info]   CI (99.9%): [≈ 0, 4.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   34.879 ±(99.9%) 297.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.879, 173.084), stdev = 77.261
[info]   CI (99.9%): [≈ 0, 332.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 26.88% complete, ETA 00:28:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2672.775 ops/s
[info] # Warmup Iteration   2: 4516.510 ops/s
[info] # Warmup Iteration   3: 4521.942 ops/s
[info] Iteration   1: 4538.026 ops/s
[info]                  ·gc.alloc.rate:                   2003.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              694648.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     689925.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.438 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4561.312 ops/s
[info]                  ·gc.alloc.rate:                   2020.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              696960.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     692041.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.544 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4600.750 ops/s
[info]                  ·gc.alloc.rate:                   2030.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              694648.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690278.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.482 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4624.186 ops/s
[info]                  ·gc.alloc.rate:               2040.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          694648.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2027.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 689906.328 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 4555.444 ops/s
[info]                  ·gc.alloc.rate:                   2010.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              694648.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702272.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.381 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   4575.944 ±(99.9%) 136.341 ops/s [Average]
[info]   (min, avg, max) = (4538.026, 4575.944, 4624.186), stdev = 35.407
[info]   CI (99.9%): [4439.603, 4712.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2021.156 ±(99.9%) 58.228 MB/sec [Average]
[info]   (min, avg, max) = (2003.207, 2021.156, 2040.971), stdev = 15.122
[info]   CI (99.9%): [1962.928, 2079.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   695110.665 ±(99.9%) 3982.844 B/op [Average]
[info]   (min, avg, max) = (694648.093, 695110.665, 696960.934), stdev = 1034.332
[info]   CI (99.9%): [691127.821, 699093.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2014.653 ±(99.9%) 66.789 MB/sec [Average]
[info]   (min, avg, max) = (1989.589, 2014.653, 2032.884), stdev = 17.345
[info]   CI (99.9%): [1947.864, 2081.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   692884.828 ±(99.9%) 20489.430 B/op [Average]
[info]   (min, avg, max) = (689906.328, 692884.828, 702272.098), stdev = 5321.040
[info]   CI (99.9%): [672395.398, 713374.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   15.769 ±(99.9%) 40.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.769, 28.482), stdev = 10.575
[info]   CI (99.9%): [≈ 0, 56.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 27.42% complete, ETA 00:28:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7662.442 ops/s
[info] # Warmup Iteration   2: 9110.577 ops/s
[info] # Warmup Iteration   3: 9120.373 ops/s
[info] Iteration   1: 9054.368 ops/s
[info]                  ·gc.alloc.rate:                   647.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              112608.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114964.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9082.632 ops/s
[info]                  ·gc.alloc.rate:                   649.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              112608.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114507.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.822 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8812.888 ops/s
[info]                  ·gc.alloc.rate:                   630.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              112608.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118001.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9047.293 ops/s
[info]                  ·gc.alloc.rate:               642.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          111780.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115182.290 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 9893.888 ops/s
[info]                  ·gc.alloc.rate:                   605.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              96288.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105429.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   9178.214 ±(99.9%) 1596.122 ops/s [Average]
[info]   (min, avg, max) = (8812.888, 9178.214, 9893.888), stdev = 414.508
[info]   CI (99.9%): [7582.092, 10774.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   635.266 ±(99.9%) 70.562 MB/sec [Average]
[info]   (min, avg, max) = (605.357, 635.266, 649.862), stdev = 18.325
[info]   CI (99.9%): [564.704, 705.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   109178.487 ±(99.9%) 27781.948 B/op [Average]
[info]   (min, avg, max) = (96288.049, 109178.487, 112608.053), stdev = 7214.884
[info]   CI (99.9%): [81396.539, 136960.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.618 ±(99.9%) 3.505 MB/sec [Average]
[info]   (min, avg, max) = (660.766, 661.618, 662.830), stdev = 0.910
[info]   CI (99.9%): [658.113, 665.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   113617.292 ±(99.9%) 18398.504 B/op [Average]
[info]   (min, avg, max) = (105429.782, 113617.292, 118001.973), stdev = 4778.033
[info]   CI (99.9%): [95218.788, 132015.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.774), stdev = 0.779
[info]   CI (99.9%): [≈ 0, 3.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   66.279 ±(99.9%) 521.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.279, 308.317), stdev = 135.372
[info]   CI (99.9%): [≈ 0, 587.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 27.96% complete, ETA 00:28:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8017.633 ops/s
[info] # Warmup Iteration   2: 11110.753 ops/s
[info] # Warmup Iteration   3: 11129.333 ops/s
[info] Iteration   1: 11187.163 ops/s
[info]                  ·gc.alloc.rate:               391.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          55021.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35986.521 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 11062.540 ops/s
[info]                  ·gc.alloc.rate:                   386.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              55021.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          583.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82974.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10907.840 ops/s
[info]                  ·gc.alloc.rate:                   381.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              55021.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47238.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 11189.218 ops/s
[info]                  ·gc.alloc.rate:                   391.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              55021.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46095.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.928 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 10886.463 ops/s
[info]                  ·gc.alloc.rate:               380.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          55021.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47382.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   11046.645 ±(99.9%) 562.148 ops/s [Average]
[info]   (min, avg, max) = (10886.463, 11046.645, 11189.218), stdev = 145.988
[info]   CI (99.9%): [10484.497, 11608.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   386.226 ±(99.9%) 19.683 MB/sec [Average]
[info]   (min, avg, max) = (380.588, 386.226, 391.174), stdev = 5.111
[info]   CI (99.9%): [366.544, 405.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   55021.866 ±(99.9%) 0.389 B/op [Average]
[info]   (min, avg, max) = (55021.710, 55021.866, 55021.950), stdev = 0.101
[info]   CI (99.9%): [55021.478, 55022.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   364.429 ±(99.9%) 486.531 MB/sec [Average]
[info]   (min, avg, max) = (255.799, 364.429, 583.500), stdev = 126.351
[info]   CI (99.9%): [≈ 0, 850.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   51935.483 ±(99.9%) 69276.223 B/op [Average]
[info]   (min, avg, max) = (35986.521, 51935.483, 82974.357), stdev = 17990.815
[info]   CI (99.9%): [≈ 0, 121211.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.436 ±(99.9%) 3.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.436, 2.095), stdev = 0.928
[info]   CI (99.9%): [≈ 0, 4.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.972 ±(99.9%) 508.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.972, 297.921), stdev = 131.951
[info]   CI (99.9%): [≈ 0, 570.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 28.49% complete, ETA 00:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12405.015 ops/s
[info] # Warmup Iteration   2: 13111.001 ops/s
[info] # Warmup Iteration   3: 13097.789 ops/s
[info] Iteration   1: 13055.435 ops/s
[info]                  ·gc.alloc.rate:                   385.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              46528.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61671.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13089.793 ops/s
[info]                  ·gc.alloc.rate:                   386.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              46528.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40046.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13177.962 ops/s
[info]                  ·gc.alloc.rate:                   389.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              46528.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39776.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13165.163 ops/s
[info]                  ·gc.alloc.rate:               389.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          46528.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39818.334 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 13166.978 ops/s
[info]                  ·gc.alloc.rate:                   389.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              46528.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39809.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   13131.066 ±(99.9%) 211.567 ops/s [Average]
[info]   (min, avg, max) = (13055.435, 13131.066, 13177.962), stdev = 54.943
[info]   CI (99.9%): [12919.499, 13342.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   388.213 ±(99.9%) 6.252 MB/sec [Average]
[info]   (min, avg, max) = (385.999, 388.213, 389.647), stdev = 1.624
[info]   CI (99.9%): [381.960, 394.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   46528.036 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (46528.033, 46528.036, 46528.045), stdev = 0.005
[info]   CI (99.9%): [46528.017, 46528.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   368.782 ±(99.9%) 307.492 MB/sec [Average]
[info]   (min, avg, max) = (333.047, 368.782, 511.631), stdev = 79.855
[info]   CI (99.9%): [61.290, 676.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44224.315 ±(99.9%) 37558.644 B/op [Average]
[info]   (min, avg, max) = (39776.041, 44224.315, 61671.494), stdev = 9753.860
[info]   CI (99.9%): [6665.671, 81782.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.343 ±(99.9%) 2.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.343, 1.594), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 3.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.189 ±(99.9%) 324.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.189, 191.702), stdev = 84.225
[info]   CI (99.9%): [≈ 0, 365.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.03% complete, ETA 00:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12579.279 ops/s
[info] # Warmup Iteration   2: 13361.295 ops/s
[info] # Warmup Iteration   3: 13361.679 ops/s
[info] Iteration   1: 13365.219 ops/s
[info]                  ·gc.alloc.rate:                   312.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              36792.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30120.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13291.963 ops/s
[info]                  ·gc.alloc.rate:                   310.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              36792.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60572.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13316.132 ops/s
[info]                  ·gc.alloc.rate:                   311.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              36792.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39363.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13246.283 ops/s
[info]                  ·gc.alloc.rate:                   309.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              36792.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39571.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 13275.228 ops/s
[info]                  ·gc.alloc.rate:      310.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 36792.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   13298.965 ±(99.9%) 172.981 ops/s [Average]
[info]   (min, avg, max) = (13246.283, 13298.965, 13365.219), stdev = 44.923
[info]   CI (99.9%): [13125.984, 13471.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   310.916 ±(99.9%) 4.099 MB/sec [Average]
[info]   (min, avg, max) = (309.672, 310.916, 312.499), stdev = 1.065
[info]   CI (99.9%): [306.817, 315.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   36792.035 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (36792.032, 36792.035, 36792.045), stdev = 0.005
[info]   CI (99.9%): [36792.014, 36792.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   286.711 ±(99.9%) 715.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.711, 511.590), stdev = 185.758
[info]   CI (99.9%): [≈ 0, 1001.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   33925.721 ±(99.9%) 84734.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33925.721, 60572.122), stdev = 22005.209
[info]   CI (99.9%): [≈ 0, 118659.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.342 ±(99.9%) 2.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.342, 1.596), stdev = 0.702
[info]   CI (99.9%): [≈ 0, 3.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   40.402 ±(99.9%) 319.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.402, 188.667), stdev = 82.934
[info]   CI (99.9%): [≈ 0, 359.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.57% complete, ETA 00:27:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12886.886 ops/s
[info] # Warmup Iteration   2: 15832.533 ops/s
[info] # Warmup Iteration   3: 15970.925 ops/s
[info] Iteration   1: 16088.902 ops/s
[info]                  ·gc.alloc.rate:                   2120.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196363.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.036 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16021.063 ops/s
[info]                  ·gc.alloc.rate:                   2111.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198329.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.269 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16006.944 ops/s
[info]                  ·gc.alloc.rate:                   2109.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2365.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232572.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.467 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16142.382 ops/s
[info]                  ·gc.alloc.rate:                   2127.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198284.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.148 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16114.238 ops/s
[info]                  ·gc.alloc.rate:                   2123.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199019.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.398 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   16074.706 ±(99.9%) 226.285 ops/s [Average]
[info]   (min, avg, max) = (16006.944, 16074.706, 16142.382), stdev = 58.766
[info]   CI (99.9%): [15848.420, 16300.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2118.294 ±(99.9%) 30.358 MB/sec [Average]
[info]   (min, avg, max) = (2109.269, 2118.294, 2127.669), stdev = 7.884
[info]   CI (99.9%): [2087.936, 2148.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207384.048 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (207384.029, 207384.048, 207384.086), stdev = 0.024
[info]   CI (99.9%): [207383.954, 207384.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2092.765 ±(99.9%) 588.873 MB/sec [Average]
[info]   (min, avg, max) = (2007.368, 2092.765, 2365.462), stdev = 152.928
[info]   CI (99.9%): [1503.893, 2681.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204914.020 ±(99.9%) 59659.471 B/op [Average]
[info]   (min, avg, max) = (196363.645, 204914.020, 232572.978), stdev = 15493.375
[info]   CI (99.9%): [145254.549, 264573.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.347 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.142, 0.250), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.864 ±(99.9%) 33.943 B/op [Average]
[info]   (min, avg, max) = (2.036, 13.864, 24.398), stdev = 8.815
[info]   CI (99.9%): [≈ 0, 47.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.11% complete, ETA 00:27:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28513.959 ops/s
[info] # Warmup Iteration   2: 38230.947 ops/s
[info] # Warmup Iteration   3: 38324.919 ops/s
[info] Iteration   1: 38332.696 ops/s
[info]                  ·gc.alloc.rate:                   275.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              11309.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10502.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38937.031 ops/s
[info]                  ·gc.alloc.rate:               279.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          11304.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10339.552 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 39267.567 ops/s
[info]                  ·gc.alloc.rate:                   282.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10252.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.834 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 38751.584 ops/s
[info]                  ·gc.alloc.rate:                   278.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13284.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 38920.642 ops/s
[info]                  ·gc.alloc.rate:               279.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13226.059 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   38841.904 ±(99.9%) 1311.324 ops/s [Average]
[info]   (min, avg, max) = (38332.696, 38841.904, 39267.567), stdev = 340.547
[info]   CI (99.9%): [37530.580, 40153.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   279.049 ±(99.9%) 9.026 MB/sec [Average]
[info]   (min, avg, max) = (275.571, 279.049, 282.034), stdev = 2.344
[info]   CI (99.9%): [270.023, 288.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   11305.153 ±(99.9%) 9.828 B/op [Average]
[info]   (min, avg, max) = (11304.011, 11305.153, 11309.719), stdev = 2.552
[info]   CI (99.9%): [11295.324, 11314.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   284.360 ±(99.9%) 150.411 MB/sec [Average]
[info]   (min, avg, max) = (255.790, 284.360, 327.216), stdev = 39.061
[info]   CI (99.9%): [133.949, 434.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11521.015 ±(99.9%) 6105.738 B/op [Average]
[info]   (min, avg, max) = (10252.672, 11521.015, 13284.073), stdev = 1585.641
[info]   CI (99.9%): [5415.276, 17626.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.428 ±(99.9%) 3.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.428, 2.116), stdev = 0.943
[info]   CI (99.9%): [≈ 0, 4.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.384 ±(99.9%) 147.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.384, 85.893), stdev = 38.300
[info]   CI (99.9%): [≈ 0, 164.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.65% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79451.553 ops/s
[info] # Warmup Iteration   2: 80374.375 ops/s
[info] # Warmup Iteration   3: 81962.949 ops/s
[info] Iteration   1: 82931.710 ops/s
[info]                  ·gc.alloc.rate:                   434.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4854.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.592 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 81762.289 ops/s
[info]                  ·gc.alloc.rate:                   428.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6411.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.891 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 82465.161 ops/s
[info]                  ·gc.alloc.rate:                   431.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12713.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 83202.946 ops/s
[info]                  ·gc.alloc.rate:               435.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6300.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 83044.101 ops/s
[info]                  ·gc.alloc.rate:               434.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6306.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   82681.241 ±(99.9%) 2243.426 ops/s [Average]
[info]   (min, avg, max) = (81762.289, 82681.241, 83202.946), stdev = 582.611
[info]   CI (99.9%): [80437.815, 84924.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   432.962 ±(99.9%) 11.808 MB/sec [Average]
[info]   (min, avg, max) = (428.078, 432.962, 435.679), stdev = 3.067
[info]   CI (99.9%): [421.153, 444.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8240.005, 8240.005, 8240.006), stdev = 0.001
[info]   CI (99.9%): [8240.005, 8240.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   384.262 ±(99.9%) 620.925 MB/sec [Average]
[info]   (min, avg, max) = (255.798, 384.262, 666.448), stdev = 161.252
[info]   CI (99.9%): [≈ 0, 1005.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7317.240 ±(99.9%) 11878.094 B/op [Average]
[info]   (min, avg, max) = (4854.577, 7317.240, 12713.557), stdev = 3084.703
[info]   CI (99.9%): [≈ 0, 19195.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.338 ±(99.9%) 2.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 1.553), stdev = 0.681
[info]   CI (99.9%): [≈ 0, 2.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.494 ±(99.9%) 50.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.494, 29.891), stdev = 13.105
[info]   CI (99.9%): [≈ 0, 56.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 31.18% complete, ETA 00:27:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5396.015 ops/s
[info] # Warmup Iteration   2: 9239.810 ops/s
[info] # Warmup Iteration   3: 9365.431 ops/s
[info] Iteration   1: 9302.937 ops/s
[info]                  ·gc.alloc.rate:                   3386.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              572856.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3701.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     626159.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.086 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9394.585 ops/s
[info]                  ·gc.alloc.rate:                   3419.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              572856.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567364.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.900 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9301.295 ops/s
[info]                  ·gc.alloc.rate:                   3385.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              572863.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574840.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.612 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 9337.435 ops/s
[info]                  ·gc.alloc.rate:                   3398.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              572856.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573461.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.033 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 9331.627 ops/s
[info]                  ·gc.alloc.rate:                   3396.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              572859.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574054.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.085 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   9333.576 ±(99.9%) 145.635 ops/s [Average]
[info]   (min, avg, max) = (9301.295, 9333.576, 9394.585), stdev = 37.821
[info]   CI (99.9%): [9187.941, 9479.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3397.319 ±(99.9%) 52.646 MB/sec [Average]
[info]   (min, avg, max) = (3385.588, 3397.319, 3419.404), stdev = 13.672
[info]   CI (99.9%): [3344.674, 3449.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   572858.221 ±(99.9%) 12.819 B/op [Average]
[info]   (min, avg, max) = (572856.046, 572858.221, 572863.590), stdev = 3.329
[info]   CI (99.9%): [572845.402, 572871.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3458.254 ±(99.9%) 524.135 MB/sec [Average]
[info]   (min, avg, max) = (3386.627, 3458.254, 3701.452), stdev = 136.116
[info]   CI (99.9%): [2934.119, 3982.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   583175.945 ±(99.9%) 93226.739 B/op [Average]
[info]   (min, avg, max) = (567364.877, 583175.945, 626159.328), stdev = 24210.688
[info]   CI (99.9%): [489949.206, 676402.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.343 ±(99.9%) 27.462 B/op [Average]
[info]   (min, avg, max) = (14.033, 20.343, 28.085), stdev = 7.132
[info]   CI (99.9%): [≈ 0, 47.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.72% complete, ETA 00:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18820.010 ops/s
[info] # Warmup Iteration   2: 21323.047 ops/s
[info] # Warmup Iteration   3: 21918.252 ops/s
[info] Iteration   1: 26166.086 ops/s
[info]                  ·gc.alloc.rate:                   1635.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              98352.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99801.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.764 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25368.823 ops/s
[info]                  ·gc.alloc.rate:                   1585.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              98341.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82732.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.331 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22949.915 ops/s
[info]                  ·gc.alloc.rate:                   1433.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114962.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.710 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 23307.576 ops/s
[info]                  ·gc.alloc.rate:                   1455.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90886.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.623 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22953.613 ops/s
[info]                  ·gc.alloc.rate:                   1433.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92603.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.564 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   24149.203 ±(99.9%) 5817.962 ops/s [Average]
[info]   (min, avg, max) = (22949.915, 24149.203, 26166.086), stdev = 1510.906
[info]   CI (99.9%): [18331.241, 29967.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1508.580 ±(99.9%) 365.346 MB/sec [Average]
[info]   (min, avg, max) = (1433.298, 1508.580, 1635.242), stdev = 94.879
[info]   CI (99.9%): [1143.234, 1873.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98311.581 ±(99.9%) 125.009 B/op [Average]
[info]   (min, avg, max) = (98288.019, 98311.581, 98352.018), stdev = 32.464
[info]   CI (99.9%): [98186.572, 98436.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1473.204 ±(99.9%) 685.204 MB/sec [Average]
[info]   (min, avg, max) = (1333.545, 1473.204, 1676.461), stdev = 177.945
[info]   CI (99.9%): [788.000, 2158.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   96197.213 ±(99.9%) 46669.309 B/op [Average]
[info]   (min, avg, max) = (82732.291, 96197.213, 114962.815), stdev = 12119.871
[info]   CI (99.9%): [49527.904, 142866.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.798 ±(99.9%) 7.945 B/op [Average]
[info]   (min, avg, max) = (5.623, 7.798, 10.331), stdev = 2.063
[info]   CI (99.9%): [≈ 0, 15.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 32.26% complete, ETA 00:26:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74376.359 ops/s
[info] # Warmup Iteration   2: 99140.421 ops/s
[info] # Warmup Iteration   3: 98107.486 ops/s
[info] Iteration   1: 100727.337 ops/s
[info]                  ·gc.alloc.rate:                   812.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10221.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 99533.020 ops/s
[info]                  ·gc.alloc.rate:                   802.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15552.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 100455.494 ops/s
[info]                  ·gc.alloc.rate:                   810.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10295.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 100407.403 ops/s
[info]                  ·gc.alloc.rate:                   809.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15505.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100703.490 ops/s
[info]                  ·gc.alloc.rate:                   812.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10348.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   100365.349 ±(99.9%) 1874.636 ops/s [Average]
[info]   (min, avg, max) = (99533.020, 100365.349, 100727.337), stdev = 486.837
[info]   CI (99.9%): [98490.713, 102239.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   809.316 ±(99.9%) 15.522 MB/sec [Average]
[info]   (min, avg, max) = (802.405, 809.316, 812.241), stdev = 4.031
[info]   CI (99.9%): [793.794, 824.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12692.321 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (12692.305, 12692.321, 12692.338), stdev = 0.012
[info]   CI (99.9%): [12692.273, 12692.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   789.163 ±(99.9%) 692.787 MB/sec [Average]
[info]   (min, avg, max) = (654.108, 789.163, 989.194), stdev = 179.915
[info]   CI (99.9%): [96.375, 1481.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12384.732 ±(99.9%) 11054.330 B/op [Average]
[info]   (min, avg, max) = (10221.277, 12384.732, 15552.522), stdev = 2870.774
[info]   CI (99.9%): [1330.402, 23439.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.241 ±(99.9%) 1.391 B/op [Average]
[info]   (min, avg, max) = (0.652, 1.241, 1.646), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 2.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 32.80% complete, ETA 00:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110769.918 ops/s
[info] # Warmup Iteration   2: 112594.883 ops/s
[info] # Warmup Iteration   3: 114163.867 ops/s
[info] Iteration   1: 113783.457 ops/s
[info]                  ·gc.alloc.rate:                   484.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          589.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8145.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 115877.963 ops/s
[info]                  ·gc.alloc.rate:                   493.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4523.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 116115.577 ops/s
[info]                  ·gc.alloc.rate:                   494.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9010.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 115226.421 ops/s
[info]                  ·gc.alloc.rate:               490.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4540.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 114634.245 ops/s
[info]                  ·gc.alloc.rate:                   488.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9136.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   115127.533 ±(99.9%) 3652.549 ops/s [Average]
[info]   (min, avg, max) = (113783.457, 115127.533, 116115.577), stdev = 948.555
[info]   CI (99.9%): [111474.984, 118780.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   490.470 ±(99.9%) 15.178 MB/sec [Average]
[info]   (min, avg, max) = (484.869, 490.470, 494.604), stdev = 3.942
[info]   CI (99.9%): [475.292, 505.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6704.004, 6704.004, 6704.004), stdev = 0.001
[info]   CI (99.9%): [6704.003, 6704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   517.034 ±(99.9%) 658.808 MB/sec [Average]
[info]   (min, avg, max) = (332.396, 517.034, 665.764), stdev = 171.090
[info]   CI (99.9%): [≈ 0, 1175.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7071.512 ±(99.9%) 9046.527 B/op [Average]
[info]   (min, avg, max) = (4523.936, 7071.512, 9136.821), stdev = 2349.354
[info]   CI (99.9%): [≈ 0, 16118.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.357 ±(99.9%) 2.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 1.595), stdev = 0.694
[info]   CI (99.9%): [≈ 0, 3.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.921 ±(99.9%) 36.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.921, 22.055), stdev = 9.593
[info]   CI (99.9%): [≈ 0, 41.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.33% complete, ETA 00:26:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135198.695 ops/s
[info] # Warmup Iteration   2: 139021.428 ops/s
[info] # Warmup Iteration   3: 141525.751 ops/s
[info] Iteration   1: 138050.745 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 141496.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 141540.888 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 141423.819 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 141494.523 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   140801.392 ±(99.9%) 5923.177 ops/s [Average]
[info]   (min, avg, max) = (138050.745, 140801.392, 141540.888), stdev = 1538.230
[info]   CI (99.9%): [134878.215, 146724.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 33.87% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2637.001 ops/s
[info] # Warmup Iteration   2: 3448.233 ops/s
[info] # Warmup Iteration   3: 3610.708 ops/s
[info] Iteration   1: 3632.294 ops/s
[info]                  ·gc.alloc.rate:                   1588.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              688196.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715935.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3631.060 ops/s
[info]                  ·gc.alloc.rate:                   1587.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              688196.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     721040.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3596.460 ops/s
[info]                  ·gc.alloc.rate:                   1573.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              688196.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     585780.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.215 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3629.750 ops/s
[info]                  ·gc.alloc.rate:                   1587.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              688196.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728891.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.147 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3557.038 ops/s
[info]                  ·gc.alloc.rate:                   1555.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              688196.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     746498.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   3609.320 ±(99.9%) 126.496 ops/s [Average]
[info]   (min, avg, max) = (3557.038, 3609.320, 3632.294), stdev = 32.850
[info]   CI (99.9%): [3482.825, 3735.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1578.350 ±(99.9%) 55.182 MB/sec [Average]
[info]   (min, avg, max) = (1555.375, 1578.350, 1588.234), stdev = 14.331
[info]   CI (99.9%): [1523.168, 1633.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   688196.484 ±(99.9%) 1.167 B/op [Average]
[info]   (min, avg, max) = (688196.184, 688196.484, 688196.983), stdev = 0.303
[info]   CI (99.9%): [688195.317, 688197.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1604.613 ±(99.9%) 574.255 MB/sec [Average]
[info]   (min, avg, max) = (1338.994, 1604.613, 1687.143), stdev = 149.132
[info]   CI (99.9%): [1030.358, 2178.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   699629.313 ±(99.9%) 249096.361 B/op [Average]
[info]   (min, avg, max) = (585780.367, 699629.313, 746498.878), stdev = 64689.534
[info]   CI (99.9%): [450532.952, 948725.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23.569 ±(99.9%) 67.590 B/op [Average]
[info]   (min, avg, max) = (9.020, 23.569, 54.147), stdev = 17.553
[info]   CI (99.9%): [≈ 0, 91.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 34.41% complete, ETA 00:25:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11747.648 ops/s
[info] # Warmup Iteration   2: 14416.537 ops/s
[info] # Warmup Iteration   3: 14546.428 ops/s
[info] Iteration   1: 14384.145 ops/s
[info]                  ·gc.alloc.rate:                   2111.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              231000.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219525.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.666 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14382.699 ops/s
[info]                  ·gc.alloc.rate:                   2111.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              231009.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2355.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257697.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.389 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14274.771 ops/s
[info]                  ·gc.alloc.rate:                   2095.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              231016.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223624.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.540 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 14163.166 ops/s
[info]                  ·gc.alloc.rate:                   2078.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              231016.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225984.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.939 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14484.699 ops/s
[info]                  ·gc.alloc.rate:                   2126.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              231014.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221411.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.357 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   14337.896 ±(99.9%) 472.441 ops/s [Average]
[info]   (min, avg, max) = (14163.166, 14337.896, 14484.699), stdev = 122.691
[info]   CI (99.9%): [13865.455, 14810.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2104.544 ±(99.9%) 69.169 MB/sec [Average]
[info]   (min, avg, max) = (2078.902, 2104.544, 2126.087), stdev = 17.963
[info]   CI (99.9%): [2035.375, 2173.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   231011.209 ±(99.9%) 26.557 B/op [Average]
[info]   (min, avg, max) = (231000.032, 231011.209, 231016.032), stdev = 6.897
[info]   CI (99.9%): [230984.652, 231037.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2092.214 ±(99.9%) 567.821 MB/sec [Average]
[info]   (min, avg, max) = (2006.204, 2092.214, 2355.101), stdev = 147.461
[info]   CI (99.9%): [1524.393, 2660.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   229648.934 ±(99.9%) 61090.401 B/op [Average]
[info]   (min, avg, max) = (219525.329, 229648.934, 257697.793), stdev = 15864.983
[info]   CI (99.9%): [168558.533, 290739.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.146, 0.250), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.978 ±(99.9%) 31.102 B/op [Average]
[info]   (min, avg, max) = (6.939, 15.978, 27.540), stdev = 8.077
[info]   CI (99.9%): [≈ 0, 47.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 34.95% complete, ETA 00:25:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22295.295 ops/s
[info] # Warmup Iteration   2: 31233.090 ops/s
[info] # Warmup Iteration   3: 30846.838 ops/s
[info] Iteration   1: 30601.715 ops/s
[info]                  ·gc.alloc.rate:                   417.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              21451.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26312.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30338.164 ops/s
[info]                  ·gc.alloc.rate:                   413.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              21424.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16967.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 31412.842 ops/s
[info]                  ·gc.alloc.rate:               427.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          21424.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16387.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 31387.774 ops/s
[info]                  ·gc.alloc.rate:                   427.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              21424.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32800.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31163.147 ops/s
[info]                  ·gc.alloc.rate:                   424.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              21424.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16535.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   30980.728 ±(99.9%) 1868.876 ops/s [Average]
[info]   (min, avg, max) = (30338.164, 30980.728, 31412.842), stdev = 485.341
[info]   CI (99.9%): [29111.852, 32849.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   421.887 ±(99.9%) 25.010 MB/sec [Average]
[info]   (min, avg, max) = (413.119, 421.887, 427.612), stdev = 6.495
[info]   CI (99.9%): [396.877, 446.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21429.579 ±(99.9%) 47.916 B/op [Average]
[info]   (min, avg, max) = (21424.014, 21429.579, 21451.839), stdev = 12.444
[info]   CI (99.9%): [21381.663, 21477.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.531 ±(99.9%) 573.406 MB/sec [Average]
[info]   (min, avg, max) = (327.089, 429.531, 654.400), stdev = 148.912
[info]   CI (99.9%): [≈ 0, 1002.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21800.628 ±(99.9%) 28669.019 B/op [Average]
[info]   (min, avg, max) = (16387.651, 21800.628, 32800.358), stdev = 7445.253
[info]   CI (99.9%): [≈ 0, 50469.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.434 ±(99.9%) 3.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.434, 2.056), stdev = 0.907
[info]   CI (99.9%): [≈ 0, 3.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.484 ±(99.9%) 181.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.484, 106.623), stdev = 47.043
[info]   CI (99.9%): [≈ 0, 203.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 35.48% complete, ETA 00:25:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51525.260 ops/s
[info] # Warmup Iteration   2: 53758.795 ops/s
[info] # Warmup Iteration   3: 54087.097 ops/s
[info] Iteration   1: 54141.709 ops/s
[info]                  ·gc.alloc.rate:                   563.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19384.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 54221.399 ops/s
[info]                  ·gc.alloc.rate:                   563.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9668.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.604 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 54165.730 ops/s
[info]                  ·gc.alloc.rate:                   563.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19355.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.629 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 53584.723 ops/s
[info]                  ·gc.alloc.rate:                   557.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19565.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 52816.447 ops/s
[info]                  ·gc.alloc.rate:               549.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9925.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   53786.001 ±(99.9%) 2311.061 ops/s [Average]
[info]   (min, avg, max) = (52816.447, 53786.001, 54221.399), stdev = 600.175
[info]   CI (99.9%): [51474.940, 56097.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   559.405 ±(99.9%) 23.950 MB/sec [Average]
[info]   (min, avg, max) = (549.285, 559.405, 563.883), stdev = 6.220
[info]   CI (99.9%): [535.455, 583.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16368.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16368.008, 16368.008, 16368.009), stdev = 0.001
[info]   CI (99.9%): [16368.007, 16368.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.094 ±(99.9%) 703.102 MB/sec [Average]
[info]   (min, avg, max) = (333.073, 533.094, 666.815), stdev = 182.593
[info]   CI (99.9%): [≈ 0, 1236.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15579.658 ±(99.9%) 20333.274 B/op [Average]
[info]   (min, avg, max) = (9668.216, 15579.658, 19565.175), stdev = 5280.487
[info]   CI (99.9%): [≈ 0, 35912.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.357 ±(99.9%) 2.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 1.597), stdev = 0.695
[info]   CI (99.9%): [≈ 0, 3.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.378 ±(99.9%) 77.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.378, 46.434), stdev = 20.203
[info]   CI (99.9%): [≈ 0, 88.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 36.02% complete, ETA 00:25:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5117.526 ops/s
[info] # Warmup Iteration   2: 8140.287 ops/s
[info] # Warmup Iteration   3: 8278.997 ops/s
[info] Iteration   1: 8303.197 ops/s
[info]                  ·gc.alloc.rate:                   3012.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     572392.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.728 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8312.664 ops/s
[info]                  ·gc.alloc.rate:                   3016.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3041.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575808.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.589 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8252.754 ops/s
[info]                  ·gc.alloc.rate:                   3001.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              572379.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3053.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     582281.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.910 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8319.939 ops/s
[info]                  ·gc.alloc.rate:                   3019.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514081.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.750 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 8318.341 ops/s
[info]                  ·gc.alloc.rate:                   3018.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              571089.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     579615.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.815 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   8301.379 ±(99.9%) 107.668 ops/s [Average]
[info]   (min, avg, max) = (8252.754, 8301.379, 8319.939), stdev = 27.961
[info]   CI (99.9%): [8193.712, 8409.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3013.686 ±(99.9%) 27.880 MB/sec [Average]
[info]   (min, avg, max) = (3001.496, 3013.686, 3019.112), stdev = 7.240
[info]   CI (99.9%): [2985.806, 3041.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   571346.744 ±(99.9%) 2224.031 B/op [Average]
[info]   (min, avg, max) = (571088.052, 571346.744, 572379.939), stdev = 577.574
[info]   CI (99.9%): [569122.714, 573570.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2979.172 ±(99.9%) 566.250 MB/sec [Average]
[info]   (min, avg, max) = (2717.744, 2979.172, 3063.635), stdev = 147.053
[info]   CI (99.9%): [2412.922, 3545.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   564835.946 ±(99.9%) 110202.409 B/op [Average]
[info]   (min, avg, max) = (514081.961, 564835.946, 582281.087), stdev = 28619.216
[info]   CI (99.9%): [454633.537, 675038.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.358 ±(99.9%) 25.344 B/op [Average]
[info]   (min, avg, max) = (11.815, 17.358, 27.589), stdev = 6.582
[info]   CI (99.9%): [≈ 0, 42.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 36.56% complete, ETA 00:25:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16122.961 ops/s
[info] # Warmup Iteration   2: 18600.467 ops/s
[info] # Warmup Iteration   3: 18863.785 ops/s
[info] Iteration   1: 21016.245 ops/s
[info]                  ·gc.alloc.rate:                   1741.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              130360.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149354.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.471 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 22532.597 ops/s
[info]                  ·gc.alloc.rate:                   1867.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              130384.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116810.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20675.251 ops/s
[info]                  ·gc.alloc.rate:                   1712.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              130358.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127915.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.093 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 20062.590 ops/s
[info]                  ·gc.alloc.rate:                   1661.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              130320.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132390.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.930 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 20172.059 ops/s
[info]                  ·gc.alloc.rate:                   1670.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              130320.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132040.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.539 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   20891.748 ±(99.9%) 3831.444 ops/s [Average]
[info]   (min, avg, max) = (20062.590, 20891.748, 22532.597), stdev = 995.014
[info]   CI (99.9%): [17060.305, 24723.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1730.751 ±(99.9%) 319.415 MB/sec [Average]
[info]   (min, avg, max) = (1661.321, 1730.751, 1867.418), stdev = 82.951
[info]   CI (99.9%): [1411.336, 2050.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   130348.538 ±(99.9%) 107.522 B/op [Average]
[info]   (min, avg, max) = (130320.021, 130348.538, 130384.019), stdev = 27.923
[info]   CI (99.9%): [130241.017, 130456.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.893 ±(99.9%) 537.656 MB/sec [Average]
[info]   (min, avg, max) = (1673.017, 1745.893, 1995.302), stdev = 139.627
[info]   CI (99.9%): [1208.237, 2283.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   131702.281 ±(99.9%) 45082.623 B/op [Average]
[info]   (min, avg, max) = (116810.882, 131702.281, 149354.736), stdev = 11707.814
[info]   CI (99.9%): [86619.658, 176784.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.155 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (0.127, 0.155, 0.174), stdev = 0.019
[info]   CI (99.9%): [0.082, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.638 ±(99.9%) 4.300 B/op [Average]
[info]   (min, avg, max) = (9.930, 11.638, 12.539), stdev = 1.117
[info]   CI (99.9%): [7.338, 15.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 37.10% complete, ETA 00:24:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41888.421 ops/s
[info] # Warmup Iteration   2: 56127.907 ops/s
[info] # Warmup Iteration   3: 56344.316 ops/s
[info] Iteration   1: 56640.367 ops/s
[info]                  ·gc.alloc.rate:                   705.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18186.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 55365.020 ops/s
[info]                  ·gc.alloc.rate:                   690.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18614.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 56512.859 ops/s
[info]                  ·gc.alloc.rate:                   704.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18264.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 56781.069 ops/s
[info]                  ·gc.alloc.rate:                   708.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18214.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 56704.358 ops/s
[info]                  ·gc.alloc.rate:                   707.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27456.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   56400.735 ±(99.9%) 2261.366 ops/s [Average]
[info]   (min, avg, max) = (55365.020, 56400.735, 56781.069), stdev = 587.269
[info]   CI (99.9%): [54139.369, 58662.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   703.076 ±(99.9%) 28.489 MB/sec [Average]
[info]   (min, avg, max) = (690.066, 703.076, 708.017), stdev = 7.398
[info]   CI (99.9%): [674.587, 731.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19616.245 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (19616.184, 19616.245, 19616.335), stdev = 0.061
[info]   CI (99.9%): [19616.011, 19616.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   722.432 ±(99.9%) 575.180 MB/sec [Average]
[info]   (min, avg, max) = (654.444, 722.432, 989.630), stdev = 149.372
[info]   CI (99.9%): [147.252, 1297.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20147.385 ±(99.9%) 15748.241 B/op [Average]
[info]   (min, avg, max) = (18186.127, 20147.385, 27456.894), stdev = 4089.768
[info]   CI (99.9%): [4399.144, 35895.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.859 ±(99.9%) 3.304 B/op [Average]
[info]   (min, avg, max) = (0.577, 1.859, 2.892), stdev = 0.858
[info]   CI (99.9%): [≈ 0, 5.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 37.63% complete, ETA 00:24:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67763.076 ops/s
[info] # Warmup Iteration   2: 73233.445 ops/s
[info] # Warmup Iteration   3: 70886.247 ops/s
[info] Iteration   1: 70362.636 ops/s
[info]                  ·gc.alloc.rate:                   469.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13171.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 69618.166 ops/s
[info]                  ·gc.alloc.rate:                   464.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7529.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.941 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 69910.186 ops/s
[info]                  ·gc.alloc.rate:                   466.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7482.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 69359.007 ops/s
[info]                  ·gc.alloc.rate:                   462.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15084.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 69542.112 ops/s
[info]                  ·gc.alloc.rate:               463.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7522.672 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   69758.421 ±(99.9%) 1508.770 ops/s [Average]
[info]   (min, avg, max) = (69359.007, 69758.421, 70362.636), stdev = 391.823
[info]   CI (99.9%): [68249.651, 71267.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   465.275 ±(99.9%) 9.984 MB/sec [Average]
[info]   (min, avg, max) = (462.737, 465.275, 469.317), stdev = 2.593
[info]   CI (99.9%): [455.290, 475.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10496.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10496.006, 10496.006, 10496.007), stdev = 0.001
[info]   CI (99.9%): [10496.005, 10496.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.370 ±(99.9%) 629.440 MB/sec [Average]
[info]   (min, avg, max) = (332.392, 450.370, 665.034), stdev = 163.464
[info]   CI (99.9%): [≈ 0, 1079.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10158.238 ±(99.9%) 14195.797 B/op [Average]
[info]   (min, avg, max) = (7482.759, 10158.238, 15084.597), stdev = 3686.603
[info]   CI (99.9%): [≈ 0, 24354.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.356 ±(99.9%) 2.753 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.633), stdev = 0.715
[info]   CI (99.9%): [≈ 0, 3.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.966 ±(99.9%) 61.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.966, 36.531), stdev = 15.983
[info]   CI (99.9%): [≈ 0, 69.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 38.17% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75304.429 ops/s
[info] # Warmup Iteration   2: 75034.368 ops/s
[info] # Warmup Iteration   3: 75663.756 ops/s
[info] Iteration   1: 75469.400 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 75640.050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 75635.375 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 75348.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 75399.963 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   75498.692 ±(99.9%) 515.813 ops/s [Average]
[info]   (min, avg, max) = (75348.672, 75498.692, 75640.050), stdev = 133.955
[info]   CI (99.9%): [74982.879, 76014.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
[info]   CI (99.9%): [0.006, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 38.71% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2264.062 ops/s
[info] # Warmup Iteration   2: 3070.886 ops/s
[info] # Warmup Iteration   3: 3128.739 ops/s
[info] Iteration   1: 3149.273 ops/s
[info]                  ·gc.alloc.rate:                   1465.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              732136.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     659271.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.208 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3151.076 ops/s
[info]                  ·gc.alloc.rate:                   1465.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              732136.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     828182.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.168 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3149.791 ops/s
[info]                  ·gc.alloc.rate:                   1465.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              732136.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     666882.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.399 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3146.312 ops/s
[info]                  ·gc.alloc.rate:                   1463.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              732136.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     839060.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3114.171 ops/s
[info]                  ·gc.alloc.rate:                   1448.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              732137.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     681153.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.558 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   3142.125 ±(99.9%) 60.546 ops/s [Average]
[info]   (min, avg, max) = (3114.171, 3142.125, 3151.076), stdev = 15.724
[info]   CI (99.9%): [3081.579, 3202.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1461.719 ±(99.9%) 28.203 MB/sec [Average]
[info]   (min, avg, max) = (1448.682, 1461.719, 1465.815), stdev = 7.324
[info]   CI (99.9%): [1433.516, 1489.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   732136.390 ±(99.9%) 1.532 B/op [Average]
[info]   (min, avg, max) = (732136.079, 732136.390, 732137.071), stdev = 0.398
[info]   CI (99.9%): [732134.858, 732137.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.479 ±(99.9%) 705.938 MB/sec [Average]
[info]   (min, avg, max) = (1319.218, 1467.479, 1677.608), stdev = 183.330
[info]   CI (99.9%): [761.541, 2173.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   734910.016 ±(99.9%) 348614.913 B/op [Average]
[info]   (min, avg, max) = (659271.355, 734910.016, 839060.656), stdev = 90534.186
[info]   CI (99.9%): [386295.104, 1083524.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.167), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33.348 ±(99.9%) 114.595 B/op [Average]
[info]   (min, avg, max) = (10.399, 33.348, 83.168), stdev = 29.760
[info]   CI (99.9%): [≈ 0, 147.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 39.25% complete, ETA 00:23:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14429.658 ops/s
[info] # Warmup Iteration   2: 17332.961 ops/s
[info] # Warmup Iteration   3: 17325.454 ops/s
[info] Iteration   1: 17311.152 ops/s
[info]                  ·gc.alloc.rate:                   2394.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              217668.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2350.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213694.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.570 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17370.848 ops/s
[info]                  ·gc.alloc.rate:                   2402.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214042.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.202 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17446.645 ops/s
[info]                  ·gc.alloc.rate:                   2413.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213921.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.145 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17321.976 ops/s
[info]                  ·gc.alloc.rate:                   2395.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              217679.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215888.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.240 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 17351.899 ops/s
[info]                  ·gc.alloc.rate:                   2399.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215696.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.993 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   17360.504 ±(99.9%) 206.659 ops/s [Average]
[info]   (min, avg, max) = (17311.152, 17360.504, 17446.645), stdev = 53.669
[info]   CI (99.9%): [17153.846, 17567.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2401.229 ±(99.9%) 28.324 MB/sec [Average]
[info]   (min, avg, max) = (2394.649, 2401.229, 2413.071), stdev = 7.356
[info]   CI (99.9%): [2372.905, 2429.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   217677.581 ±(99.9%) 19.154 B/op [Average]
[info]   (min, avg, max) = (217668.711, 217677.581, 217680.027), stdev = 4.974
[info]   CI (99.9%): [217658.427, 217696.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2367.806 ±(99.9%) 43.126 MB/sec [Average]
[info]   (min, avg, max) = (2350.923, 2367.806, 2378.130), stdev = 11.200
[info]   CI (99.9%): [2324.680, 2410.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   214648.706 ±(99.9%) 4058.352 B/op [Average]
[info]   (min, avg, max) = (213694.144, 214648.706, 215888.634), stdev = 1053.941
[info]   CI (99.9%): [210590.354, 218707.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.187), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.830 ±(99.9%) 12.973 B/op [Average]
[info]   (min, avg, max) = (7.570, 12.830, 16.993), stdev = 3.369
[info]   CI (99.9%): [≈ 0, 25.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 39.78% complete, ETA 00:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31243.312 ops/s
[info] # Warmup Iteration   2: 44420.748 ops/s
[info] # Warmup Iteration   3: 44658.878 ops/s
[info] Iteration   1: 45052.424 ops/s
[info]                  ·gc.alloc.rate:      177.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 44943.775 ops/s
[info]                  ·gc.alloc.rate:               177.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8957.602 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 44582.012 ops/s
[info]                  ·gc.alloc.rate:                   175.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9030.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.571 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45605.110 ops/s
[info]                  ·gc.alloc.rate:      179.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45523.739 ops/s
[info]                  ·gc.alloc.rate:                   179.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8843.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   45141.412 ±(99.9%) 1634.934 ops/s [Average]
[info]   (min, avg, max) = (44582.012, 45141.412, 45605.110), stdev = 424.587
[info]   CI (99.9%): [43506.478, 46776.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   178.075 ±(99.9%) 6.373 MB/sec [Average]
[info]   (min, avg, max) = (175.887, 178.075, 179.882), stdev = 1.655
[info]   CI (99.9%): [171.701, 184.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6208.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.009, 6208.010, 6208.010), stdev = 0.001
[info]   CI (99.9%): [6208.008, 6208.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   153.507 ±(99.9%) 539.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.507, 255.882), stdev = 140.132
[info]   CI (99.9%): [≈ 0, 693.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5366.325 ±(99.9%) 18865.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5366.325, 9030.528), stdev = 4899.216
[info]   CI (99.9%): [≈ 0, 24231.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.362 ±(99.9%) 2.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.362, 1.240), stdev = 0.550
[info]   CI (99.9%): [≈ 0, 2.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 40.32% complete, ETA 00:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89936.111 ops/s
[info] # Warmup Iteration   2: 92736.006 ops/s
[info] # Warmup Iteration   3: 93467.805 ops/s
[info] Iteration   1: 93597.233 ops/s
[info]                  ·gc.alloc.rate:      248.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 4176.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 93375.275 ops/s
[info]                  ·gc.alloc.rate:               247.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4311.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 93765.689 ops/s
[info]                  ·gc.alloc.rate:                   248.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4293.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 93244.081 ops/s
[info]                  ·gc.alloc.rate:               247.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4317.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 93651.766 ops/s
[info]                  ·gc.alloc.rate:                   248.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5603.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   93526.809 ±(99.9%) 818.059 ops/s [Average]
[info]   (min, avg, max) = (93244.081, 93526.809, 93765.689), stdev = 212.447
[info]   CI (99.9%): [92708.750, 94344.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   248.187 ±(99.9%) 2.255 MB/sec [Average]
[info]   (min, avg, max) = (247.407, 248.187, 248.885), stdev = 0.586
[info]   CI (99.9%): [245.933, 250.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4176.005, 4176.005, 4176.005), stdev = 0.001
[info]   CI (99.9%): [4176.004, 4176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   220.197 ±(99.9%) 491.335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.197, 333.449), stdev = 127.598
[info]   CI (99.9%): [≈ 0, 711.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3705.176 ±(99.9%) 8263.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3705.176, 5603.138), stdev = 2145.902
[info]   CI (99.9%): [≈ 0, 11968.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.325 ±(99.9%) 2.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.595), stdev = 0.710
[info]   CI (99.9%): [≈ 0, 3.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.464 ±(99.9%) 45.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.464, 26.795), stdev = 11.927
[info]   CI (99.9%): [≈ 0, 51.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 40.86% complete, ETA 00:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5572.359 ops/s
[info] # Warmup Iteration   2: 9140.251 ops/s
[info] # Warmup Iteration   3: 9319.279 ops/s
[info] Iteration   1: 9346.819 ops/s
[info]                  ·gc.alloc.rate:                   3342.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     566347.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.030 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9353.753 ops/s
[info]                  ·gc.alloc.rate:                   3345.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     569566.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.009 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9293.964 ops/s
[info]                  ·gc.alloc.rate:                   3323.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575160.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.150 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9168.340 ops/s
[info]                  ·gc.alloc.rate:                   3279.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3062.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     525431.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.147 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 9304.336 ops/s
[info]                  ·gc.alloc.rate:                   3326.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575781.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.127 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   9293.442 ±(99.9%) 287.228 ops/s [Average]
[info]   (min, avg, max) = (9168.340, 9293.442, 9353.753), stdev = 74.592
[info]   CI (99.9%): [9006.214, 9580.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3323.492 ±(99.9%) 100.688 MB/sec [Average]
[info]   (min, avg, max) = (3279.883, 3323.492, 3345.070), stdev = 26.148
[info]   CI (99.9%): [3222.804, 3424.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   562784.048 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (562784.046, 562784.048, 562784.051), stdev = 0.002
[info]   CI (99.9%): [562784.040, 562784.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3322.233 ±(99.9%) 562.799 MB/sec [Average]
[info]   (min, avg, max) = (3062.193, 3322.233, 3403.781), stdev = 146.157
[info]   CI (99.9%): [2759.434, 3885.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   562457.465 ±(99.9%) 81126.334 B/op [Average]
[info]   (min, avg, max) = (525431.485, 562457.465, 575781.577), stdev = 21068.251
[info]   CI (99.9%): [481331.131, 643583.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.893 ±(99.9%) 24.083 B/op [Average]
[info]   (min, avg, max) = (7.147, 16.893, 21.150), stdev = 6.254
[info]   CI (99.9%): [≈ 0, 40.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 41.40% complete, ETA 00:23:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19413.656 ops/s
[info] # Warmup Iteration   2: 22475.156 ops/s
[info] # Warmup Iteration   3: 23479.063 ops/s
[info] Iteration   1: 26691.590 ops/s
[info]                  ·gc.alloc.rate:                   1701.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              100352.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97979.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.682 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25041.613 ops/s
[info]                  ·gc.alloc.rate:                   1596.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              100332.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105020.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.391 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 23629.051 ops/s
[info]                  ·gc.alloc.rate:                   1505.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              100288.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89451.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.546 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23848.346 ops/s
[info]                  ·gc.alloc.rate:                   1519.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              100288.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111179.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.374 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24003.983 ops/s
[info]                  ·gc.alloc.rate:                   1529.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              100288.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88666.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.555 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   24642.917 ±(99.9%) 4879.665 ops/s [Average]
[info]   (min, avg, max) = (23629.051, 24642.917, 26691.590), stdev = 1267.234
[info]   CI (99.9%): [19763.251, 29522.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1570.702 ±(99.9%) 312.665 MB/sec [Average]
[info]   (min, avg, max) = (1505.650, 1570.702, 1701.885), stdev = 81.198
[info]   CI (99.9%): [1258.037, 1883.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   100309.760 ±(99.9%) 117.605 B/op [Average]
[info]   (min, avg, max) = (100288.018, 100309.760, 100352.017), stdev = 30.542
[info]   CI (99.9%): [100192.154, 100427.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1542.587 ±(99.9%) 685.591 MB/sec [Average]
[info]   (min, avg, max) = (1342.966, 1542.587, 1684.685), stdev = 178.046
[info]   CI (99.9%): [856.996, 2228.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   98459.661 ±(99.9%) 37635.946 B/op [Average]
[info]   (min, avg, max) = (88666.192, 98459.661, 111179.302), stdev = 9773.936
[info]   CI (99.9%): [60823.715, 136095.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.313 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.108, 0.229), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.910 ±(99.9%) 19.812 B/op [Average]
[info]   (min, avg, max) = (1.374, 6.910, 14.391), stdev = 5.145
[info]   CI (99.9%): [≈ 0, 26.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 41.94% complete, ETA 00:22:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83855.968 ops/s
[info] # Warmup Iteration   2: 113558.930 ops/s
[info] # Warmup Iteration   3: 115576.264 ops/s
[info] Iteration   1: 112620.210 ops/s
[info]                  ·gc.alloc.rate:                   859.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13722.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 114967.631 ops/s
[info]                  ·gc.alloc.rate:                   877.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13469.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 113536.245 ops/s
[info]                  ·gc.alloc.rate:                   866.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9123.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 115627.549 ops/s
[info]                  ·gc.alloc.rate:                   882.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13492.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 115269.667 ops/s
[info]                  ·gc.alloc.rate:                   879.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13588.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   114404.260 ±(99.9%) 4908.264 ops/s [Average]
[info]   (min, avg, max) = (112620.210, 114404.260, 115627.549), stdev = 1274.661
[info]   CI (99.9%): [109495.997, 119312.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   873.257 ±(99.9%) 37.215 MB/sec [Average]
[info]   (min, avg, max) = (859.813, 873.257, 882.427), stdev = 9.665
[info]   CI (99.9%): [836.042, 910.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12011.366 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (12011.354, 12011.366, 12011.381), stdev = 0.011
[info]   CI (99.9%): [12011.325, 12011.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   922.250 ±(99.9%) 568.847 MB/sec [Average]
[info]   (min, avg, max) = (658.159, 922.250, 995.470), stdev = 147.728
[info]   CI (99.9%): [353.403, 1491.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12679.087 ±(99.9%) 7663.948 B/op [Average]
[info]   (min, avg, max) = (9123.191, 12679.087, 13722.209), stdev = 1990.303
[info]   CI (99.9%): [5015.139, 20343.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.262 ±(99.9%) 2.044 B/op [Average]
[info]   (min, avg, max) = (0.577, 1.262, 2.036), stdev = 0.531
[info]   CI (99.9%): [≈ 0, 3.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 42.47% complete, ETA 00:22:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119970.969 ops/s
[info] # Warmup Iteration   2: 124487.858 ops/s
[info] # Warmup Iteration   3: 125390.066 ops/s
[info] Iteration   1: 120416.560 ops/s
[info]                  ·gc.alloc.rate:                   484.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          589.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7701.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 124139.104 ops/s
[info]                  ·gc.alloc.rate:               499.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4227.073 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 124872.963 ops/s
[info]                  ·gc.alloc.rate:                   502.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8395.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 124664.349 ops/s
[info]                  ·gc.alloc.rate:               501.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4205.136 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 124883.859 ops/s
[info]                  ·gc.alloc.rate:                   502.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8395.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   123795.367 ±(99.9%) 7365.621 ops/s [Average]
[info]   (min, avg, max) = (120416.560, 123795.367, 124883.859), stdev = 1912.828
[info]   CI (99.9%): [116429.746, 131160.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   497.747 ±(99.9%) 29.692 MB/sec [Average]
[info]   (min, avg, max) = (484.132, 497.747, 502.143), stdev = 7.711
[info]   CI (99.9%): [468.054, 527.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6328.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6328.003, 6328.004, 6328.004), stdev = 0.001
[info]   CI (99.9%): [6328.003, 6328.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   517.614 ±(99.9%) 659.294 MB/sec [Average]
[info]   (min, avg, max) = (333.097, 517.614, 666.206), stdev = 171.216
[info]   CI (99.9%): [≈ 0, 1176.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6584.952 ±(99.9%) 8398.200 B/op [Average]
[info]   (min, avg, max) = (4205.136, 6584.952, 8395.996), stdev = 2180.986
[info]   CI (99.9%): [≈ 0, 14983.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.365 ±(99.9%) 2.656 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.365, 1.594), stdev = 0.690
[info]   CI (99.9%): [≈ 0, 3.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.745 ±(99.9%) 34.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.745, 20.839), stdev = 9.026
[info]   CI (99.9%): [≈ 0, 39.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 43.01% complete, ETA 00:22:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140404.480 ops/s
[info] # Warmup Iteration   2: 145823.925 ops/s
[info] # Warmup Iteration   3: 145966.901 ops/s
[info] Iteration   1: 138560.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 145677.472 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 146188.922 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 146540.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 146492.479 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   144692.039 ±(99.9%) 13264.403 ops/s [Average]
[info]   (min, avg, max) = (138560.664, 144692.039, 146540.659), stdev = 3444.723
[info]   CI (99.9%): [131427.636, 157956.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 43.55% complete, ETA 00:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2698.364 ops/s
[info] # Warmup Iteration   2: 3635.185 ops/s
[info] # Warmup Iteration   3: 3684.541 ops/s
[info] Iteration   1: 3689.042 ops/s
[info]                  ·gc.alloc.rate:                   1739.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              742259.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     847527.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.880 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3727.937 ops/s
[info]                  ·gc.alloc.rate:                   1758.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              742260.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     703971.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.362 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3671.561 ops/s
[info]                  ·gc.alloc.rate:                   1731.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              742259.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719129.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.921 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3722.033 ops/s
[info]                  ·gc.alloc.rate:               1755.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          742259.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1685.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 712569.777 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3696.208 ops/s
[info]                  ·gc.alloc.rate:                   1743.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              742259.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719850.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.863 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   3701.356 ±(99.9%) 90.305 ops/s [Average]
[info]   (min, avg, max) = (3671.561, 3701.356, 3727.937), stdev = 23.452
[info]   CI (99.9%): [3611.051, 3791.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1745.820 ±(99.9%) 42.433 MB/sec [Average]
[info]   (min, avg, max) = (1731.669, 1745.820, 1758.163), stdev = 11.020
[info]   CI (99.9%): [1703.387, 1788.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   742259.579 ±(99.9%) 1.451 B/op [Average]
[info]   (min, avg, max) = (742259.222, 742259.579, 742260.113), stdev = 0.377
[info]   CI (99.9%): [742258.128, 742261.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1741.667 ±(99.9%) 528.424 MB/sec [Average]
[info]   (min, avg, max) = (1667.471, 1741.667, 1986.637), stdev = 137.230
[info]   CI (99.9%): [1213.242, 2270.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   740609.789 ±(99.9%) 231458.974 B/op [Average]
[info]   (min, avg, max) = (703971.578, 740609.789, 847527.892), stdev = 60109.161
[info]   CI (99.9%): [509150.815, 972068.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.605 ±(99.9%) 37.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.605, 26.362), stdev = 9.612
[info]   CI (99.9%): [≈ 0, 47.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 44.09% complete, ETA 00:22:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14490.503 ops/s
[info] # Warmup Iteration   2: 18037.595 ops/s
[info] # Warmup Iteration   3: 17795.463 ops/s
[info] Iteration   1: 18032.772 ops/s
[info]                  ·gc.alloc.rate:                   1892.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              165166.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174849.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.267 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17678.574 ops/s
[info]                  ·gc.alloc.rate:                   1855.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149491.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.118 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18161.318 ops/s
[info]                  ·gc.alloc.rate:                   1906.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175368.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.216 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18156.827 ops/s
[info]                  ·gc.alloc.rate:                   1905.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              165164.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146633.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.804 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17951.495 ops/s
[info]                  ·gc.alloc.rate:                   1883.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              165160.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178383.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.125 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17996.197 ±(99.9%) 763.573 ops/s [Average]
[info]   (min, avg, max) = (17678.574, 17996.197, 18161.318), stdev = 198.297
[info]   CI (99.9%): [17232.624, 18759.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1888.743 ±(99.9%) 80.682 MB/sec [Average]
[info]   (min, avg, max) = (1855.315, 1888.743, 1906.149), stdev = 20.953
[info]   CI (99.9%): [1808.061, 1969.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165168.613 ±(99.9%) 27.521 B/op [Average]
[info]   (min, avg, max) = (165160.026, 165168.613, 165176.033), stdev = 7.147
[info]   CI (99.9%): [165141.092, 165196.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886.619 ±(99.9%) 708.038 MB/sec [Average]
[info]   (min, avg, max) = (1679.142, 1886.619, 2034.580), stdev = 183.875
[info]   CI (99.9%): [1178.581, 2594.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   164945.366 ±(99.9%) 59699.929 B/op [Average]
[info]   (min, avg, max) = (146633.191, 164945.366, 178383.379), stdev = 15503.882
[info]   CI (99.9%): [105245.438, 224645.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.306 ±(99.9%) 13.356 B/op [Average]
[info]   (min, avg, max) = (1.804, 7.306, 11.118), stdev = 3.468
[info]   CI (99.9%): [≈ 0, 20.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 44.62% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65356.168 ops/s
[info] # Warmup Iteration   2: 95060.149 ops/s
[info] # Warmup Iteration   3: 96306.848 ops/s
[info] Iteration   1: 93836.923 ops/s
[info]                  ·gc.alloc.rate:                   1231.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22022.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.746 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 96861.111 ops/s
[info]                  ·gc.alloc.rate:                   1271.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21453.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 96279.608 ops/s
[info]                  ·gc.alloc.rate:                   1263.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21707.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 95373.212 ops/s
[info]                  ·gc.alloc.rate:                   1252.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16516.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 95259.124 ops/s
[info]                  ·gc.alloc.rate:                   1250.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22143.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.720 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   95521.996 ±(99.9%) 4431.552 ops/s [Average]
[info]   (min, avg, max) = (93836.923, 95521.996, 96861.111), stdev = 1150.860
[info]   CI (99.9%): [91090.444, 99953.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1253.894 ±(99.9%) 58.062 MB/sec [Average]
[info]   (min, avg, max) = (1231.834, 1253.894, 1271.541), stdev = 15.079
[info]   CI (99.9%): [1195.832, 1311.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.005, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1260.687 ±(99.9%) 559.693 MB/sec [Average]
[info]   (min, avg, max) = (1001.287, 1260.687, 1340.258), stdev = 145.351
[info]   CI (99.9%): [700.993, 1820.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20768.612 ±(99.9%) 9211.754 B/op [Average]
[info]   (min, avg, max) = (16516.600, 20768.612, 22143.636), stdev = 2392.263
[info]   CI (99.9%): [11556.858, 29980.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.509 ±(99.9%) 1.763 B/op [Average]
[info]   (min, avg, max) = (1.021, 1.509, 2.030), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 3.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 45.16% complete, ETA 00:21:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220753.276 ops/s
[info] # Warmup Iteration   2: 233528.183 ops/s
[info] # Warmup Iteration   3: 230303.099 ops/s
[info] Iteration   1: 235185.581 ops/s
[info]                  ·gc.alloc.rate:                   765.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4457.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 229600.268 ops/s
[info]                  ·gc.alloc.rate:                   747.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4566.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 227228.257 ops/s
[info]                  ·gc.alloc.rate:                   739.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4614.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 235131.365 ops/s
[info]                  ·gc.alloc.rate:                   765.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6699.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 234501.629 ops/s
[info]                  ·gc.alloc.rate:                   762.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4486.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   232329.420 ±(99.9%) 14173.977 ops/s [Average]
[info]   (min, avg, max) = (227228.257, 232329.420, 235185.581), stdev = 3680.937
[info]   CI (99.9%): [218155.443, 246503.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   755.929 ±(99.9%) 46.157 MB/sec [Average]
[info]   (min, avg, max) = (739.196, 755.929, 765.193), stdev = 11.987
[info]   CI (99.9%): [709.772, 802.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.002, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   733.707 ±(99.9%) 575.926 MB/sec [Average]
[info]   (min, avg, max) = (666.144, 733.707, 1001.254), stdev = 149.566
[info]   CI (99.9%): [157.781, 1309.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4964.895 ±(99.9%) 3741.836 B/op [Average]
[info]   (min, avg, max) = (4457.757, 4964.895, 6699.632), stdev = 971.743
[info]   CI (99.9%): [1223.059, 8706.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.146), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 1.400 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.424, 0.999), stdev = 0.363
[info]   CI (99.9%): [≈ 0, 1.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 45.70% complete, ETA 00:21:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9834.938 ops/s
[info] # Warmup Iteration   2: 16351.059 ops/s
[info] # Warmup Iteration   3: 16398.323 ops/s
[info] Iteration   1: 16461.801 ops/s
[info]                  ·gc.alloc.rate:                   2120.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190557.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.942 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16190.756 ops/s
[info]                  ·gc.alloc.rate:                   2085.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              202705.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195236.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16422.897 ops/s
[info]                  ·gc.alloc.rate:                   2115.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226058.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.975 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 16376.906 ops/s
[info]                  ·gc.alloc.rate:                   2109.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195119.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.002 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16327.454 ops/s
[info]                  ·gc.alloc.rate:                   2102.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196166.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.026 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16355.963 ±(99.9%) 404.898 ops/s [Average]
[info]   (min, avg, max) = (16190.756, 16355.963, 16461.801), stdev = 105.151
[info]   CI (99.9%): [15951.065, 16760.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2106.686 ±(99.9%) 51.864 MB/sec [Average]
[info]   (min, avg, max) = (2085.475, 2106.686, 2120.154), stdev = 13.469
[info]   CI (99.9%): [2054.822, 2158.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202704.328 ±(99.9%) 2.566 B/op [Average]
[info]   (min, avg, max) = (202704.026, 202704.328, 202705.520), stdev = 0.666
[info]   CI (99.9%): [202701.762, 202706.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2085.293 ±(99.9%) 592.423 MB/sec [Average]
[info]   (min, avg, max) = (1993.109, 2085.293, 2358.819), stdev = 153.850
[info]   CI (99.9%): [1492.870, 2677.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   200627.607 ±(99.9%) 55382.201 B/op [Average]
[info]   (min, avg, max) = (190557.543, 200627.607, 226058.302), stdev = 14382.582
[info]   CI (99.9%): [145245.406, 256009.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.803 ±(99.9%) 8.596 B/op [Average]
[info]   (min, avg, max) = (6.071, 8.803, 11.942), stdev = 2.232
[info]   CI (99.9%): [0.207, 17.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 46.24% complete, ETA 00:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16737.779 ops/s
[info] # Warmup Iteration   2: 21272.641 ops/s
[info] # Warmup Iteration   3: 21315.961 ops/s
[info] Iteration   1: 21286.494 ops/s
[info]                  ·gc.alloc.rate:                   1722.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              127388.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123105.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.157 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21183.803 ops/s
[info]                  ·gc.alloc.rate:                   1714.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124402.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.733 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 21224.745 ops/s
[info]                  ·gc.alloc.rate:                   1718.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              127367.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124724.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.718 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 21673.319 ops/s
[info]                  ·gc.alloc.rate:                   1753.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122630.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21668.226 ops/s
[info]                  ·gc.alloc.rate:                   1753.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122997.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.560 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   21407.317 ±(99.9%) 936.743 ops/s [Average]
[info]   (min, avg, max) = (21183.803, 21407.317, 21673.319), stdev = 243.269
[info]   CI (99.9%): [20470.575, 22344.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1732.679 ±(99.9%) 74.946 MB/sec [Average]
[info]   (min, avg, max) = (1714.702, 1732.679, 1753.775), stdev = 19.463
[info]   CI (99.9%): [1657.733, 1807.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.414 ±(99.9%) 73.624 B/op [Average]
[info]   (min, avg, max) = (127352.020, 127370.414, 127392.028), stdev = 19.120
[info]   CI (99.9%): [127296.789, 127444.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1680.918 ±(99.9%) 44.214 MB/sec [Average]
[info]   (min, avg, max) = (1664.931, 1680.918, 1693.804), stdev = 11.482
[info]   CI (99.9%): [1636.704, 1725.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   123572.111 ±(99.9%) 3577.679 B/op [Average]
[info]   (min, avg, max) = (122630.567, 123572.111, 124724.628), stdev = 929.112
[info]   CI (99.9%): [119994.432, 127149.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.438 ±(99.9%) 7.777 B/op [Average]
[info]   (min, avg, max) = (3.023, 6.438, 7.733), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 14.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 46.77% complete, ETA 00:21:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60948.769 ops/s
[info] # Warmup Iteration   2: 87615.848 ops/s
[info] # Warmup Iteration   3: 86938.888 ops/s
[info] Iteration   1: 88197.911 ops/s
[info]                  ·gc.alloc.rate:                   1208.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23399.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.486 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 88579.817 ops/s
[info]                  ·gc.alloc.rate:                   1213.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17558.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 88297.580 ops/s
[info]                  ·gc.alloc.rate:                   1209.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23628.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.484 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 88825.845 ops/s
[info]                  ·gc.alloc.rate:                   1216.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23616.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 88515.743 ops/s
[info]                  ·gc.alloc.rate:                   1212.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17867.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   88483.379 ±(99.9%) 950.345 ops/s [Average]
[info]   (min, avg, max) = (88197.911, 88483.379, 88825.845), stdev = 246.802
[info]   CI (99.9%): [87533.034, 89433.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1212.140 ±(99.9%) 12.987 MB/sec [Average]
[info]   (min, avg, max) = (1208.258, 1212.140, 1216.825), stdev = 3.373
[info]   CI (99.9%): [1199.153, 1225.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.002 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.002, 21560.013), stdev = 0.012
[info]   CI (99.9%): [21559.958, 21560.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.595 ±(99.9%) 690.124 MB/sec [Average]
[info]   (min, avg, max) = (988.253, 1192.595, 1332.901), stdev = 179.223
[info]   CI (99.9%): [502.471, 1882.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21213.955 ±(99.9%) 12319.473 B/op [Average]
[info]   (min, avg, max) = (17558.328, 21213.955, 23628.076), stdev = 3199.328
[info]   CI (99.9%): [8894.482, 33533.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.408 ±(99.9%) 1.566 B/op [Average]
[info]   (min, avg, max) = (0.738, 1.408, 1.849), stdev = 0.407
[info]   CI (99.9%): [≈ 0, 2.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 47.31% complete, ETA 00:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220419.162 ops/s
[info] # Warmup Iteration   2: 228841.361 ops/s
[info] # Warmup Iteration   3: 225443.876 ops/s
[info] Iteration   1: 225247.484 ops/s
[info]                  ·gc.alloc.rate:                   717.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6983.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 218823.522 ops/s
[info]                  ·gc.alloc.rate:                   697.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4791.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 224024.969 ops/s
[info]                  ·gc.alloc.rate:                   714.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4679.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 223355.409 ops/s
[info]                  ·gc.alloc.rate:                   711.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4698.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 224444.542 ops/s
[info]                  ·gc.alloc.rate:                   715.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4680.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   223179.185 ±(99.9%) 9740.911 ops/s [Average]
[info]   (min, avg, max) = (218823.522, 223179.185, 225247.484), stdev = 2529.684
[info]   CI (99.9%): [213438.274, 232920.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   711.307 ±(99.9%) 31.111 MB/sec [Average]
[info]   (min, avg, max) = (697.399, 711.307, 717.918), stdev = 8.079
[info]   CI (99.9%): [680.196, 742.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.002, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   733.247 ±(99.9%) 573.312 MB/sec [Average]
[info]   (min, avg, max) = (666.139, 733.247, 999.582), stdev = 148.887
[info]   CI (99.9%): [159.935, 1306.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5166.864 ±(99.9%) 3915.442 B/op [Average]
[info]   (min, avg, max) = (4679.889, 5166.864, 6983.959), stdev = 1016.828
[info]   CI (99.9%): [1251.423, 9082.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.587 ±(99.9%) 1.259 B/op [Average]
[info]   (min, avg, max) = (0.146, 0.587, 1.018), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 47.85% complete, ETA 00:20:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236325.326 ops/s
[info] # Warmup Iteration   2: 236136.109 ops/s
[info] # Warmup Iteration   3: 245889.882 ops/s
[info] Iteration   1: 246035.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 245909.896 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 245653.805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 245804.868 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 245850.112 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   245850.868 ±(99.9%) 539.717 ops/s [Average]
[info]   (min, avg, max) = (245653.805, 245850.868, 246035.659), stdev = 140.163
[info]   CI (99.9%): [245311.151, 246390.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 48.39% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18391.620 ops/s
[info] # Warmup Iteration   2: 26074.168 ops/s
[info] # Warmup Iteration   3: 25906.331 ops/s
[info] Iteration   1: 26135.118 ops/s
[info]                  ·gc.alloc.rate:                   1782.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              107311.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99819.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.761 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25975.109 ops/s
[info]                  ·gc.alloc.rate:                   1771.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              107313.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101087.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.568 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26133.744 ops/s
[info]                  ·gc.alloc.rate:                   1781.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121313.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.283 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 25976.107 ops/s
[info]                  ·gc.alloc.rate:                   1771.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              107311.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102230.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.784 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26141.926 ops/s
[info]                  ·gc.alloc.rate:                   1782.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101865.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   26072.401 ±(99.9%) 340.452 ops/s [Average]
[info]   (min, avg, max) = (25975.109, 26072.401, 26141.926), stdev = 88.414
[info]   CI (99.9%): [25731.948, 26412.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1777.818 ±(99.9%) 22.793 MB/sec [Average]
[info]   (min, avg, max) = (1771.102, 1777.818, 1782.490), stdev = 5.919
[info]   CI (99.9%): [1755.025, 1800.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107312.197 ±(99.9%) 1.889 B/op [Average]
[info]   (min, avg, max) = (107311.941, 107312.197, 107313.072), stdev = 0.490
[info]   CI (99.9%): [107310.309, 107314.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1744.013 ±(99.9%) 584.516 MB/sec [Average]
[info]   (min, avg, max) = (1657.602, 1744.013, 2014.390), stdev = 151.797
[info]   CI (99.9%): [1159.497, 2328.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105263.360 ±(99.9%) 34731.859 B/op [Average]
[info]   (min, avg, max) = (99819.493, 105263.360, 121313.560), stdev = 9019.753
[info]   CI (99.9%): [70531.501, 139995.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.187), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.284 ±(99.9%) 13.375 B/op [Average]
[info]   (min, avg, max) = (3.761, 7.284, 11.283), stdev = 3.473
[info]   CI (99.9%): [≈ 0, 20.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 48.92% complete, ETA 00:20:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605087.239 ops/s
[info] # Warmup Iteration   2: 867389.170 ops/s
[info] # Warmup Iteration   3: 903131.238 ops/s
[info] Iteration   1: 898294.712 ops/s
[info]                  ·gc.alloc.rate:                   2926.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3028.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5305.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 897088.016 ops/s
[info]                  ·gc.alloc.rate:                   2923.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3046.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5344.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 899611.039 ops/s
[info]                  ·gc.alloc.rate:                   2931.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4752.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 905170.415 ops/s
[info]                  ·gc.alloc.rate:                   2950.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5322.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 909004.449 ops/s
[info]                  ·gc.alloc.rate:                   2962.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5304.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   901833.726 ±(99.9%) 19496.153 ops/s [Average]
[info]   (min, avg, max) = (897088.016, 901833.726, 909004.449), stdev = 5063.089
[info]   CI (99.9%): [882337.573, 921329.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2938.832 ±(99.9%) 65.269 MB/sec [Average]
[info]   (min, avg, max) = (2923.336, 2938.832, 2962.839), stdev = 16.950
[info]   CI (99.9%): [2873.563, 3004.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.000, 5128.000, 5128.001), stdev = 0.001
[info]   CI (99.9%): [5128.000, 5128.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2983.698 ±(99.9%) 577.315 MB/sec [Average]
[info]   (min, avg, max) = (2716.758, 2983.698, 3064.760), stdev = 149.927
[info]   CI (99.9%): [2406.383, 3561.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5206.032 ±(99.9%) 977.529 B/op [Average]
[info]   (min, avg, max) = (4752.836, 5206.032, 5344.606), stdev = 253.861
[info]   CI (99.9%): [4228.503, 6183.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.229), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.240 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (0.146, 0.240, 0.402), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 49.46% complete, ETA 00:19:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 804421.038 ops/s
[info] # Warmup Iteration   2: 1630096.897 ops/s
[info] # Warmup Iteration   3: 1663420.780 ops/s
[info] Iteration   1: 1656702.786 ops/s
[info]                  ·gc.alloc.rate:                   1557.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1560.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1645147.493 ops/s
[info]                  ·gc.alloc.rate:                   1547.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1265.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1655965.075 ops/s
[info]                  ·gc.alloc.rate:                   1557.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1583.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1658741.293 ops/s
[info]                  ·gc.alloc.rate:                   1559.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1590.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1622895.691 ops/s
[info]                  ·gc.alloc.rate:                   1526.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1306.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1647890.468 ±(99.9%) 57530.071 ops/s [Average]
[info]   (min, avg, max) = (1622895.691, 1647890.468, 1658741.293), stdev = 14940.377
[info]   CI (99.9%): [1590360.397, 1705420.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1549.704 ±(99.9%) 54.001 MB/sec [Average]
[info]   (min, avg, max) = (1526.240, 1549.704, 1559.817), stdev = 14.024
[info]   CI (99.9%): [1495.703, 1603.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1530.964 ±(99.9%) 690.980 MB/sec [Average]
[info]   (min, avg, max) = (1323.042, 1530.964, 1675.980), stdev = 179.445
[info]   CI (99.9%): [839.984, 2221.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1461.173 ±(99.9%) 619.825 B/op [Average]
[info]   (min, avg, max) = (1265.647, 1461.173, 1590.220), stdev = 160.966
[info]   CI (99.9%): [841.348, 2080.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.083, 0.100), stdev = 0.016
[info]   CI (99.9%): [0.021, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 50.00% complete, ETA 00:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6937511.025 ops/s
[info] # Warmup Iteration   2: 7537650.468 ops/s
[info] # Warmup Iteration   3: 7756328.306 ops/s
[info] Iteration   1: 7775716.398 ops/s
[info]                  ·gc.alloc.rate:                   2331.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2354.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     476.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7829548.405 ops/s
[info]                  ·gc.alloc.rate:                   2348.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2366.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7704611.810 ops/s
[info]                  ·gc.alloc.rate:                   2310.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7803331.233 ops/s
[info]                  ·gc.alloc.rate:                   2340.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7749398.124 ops/s
[info]                  ·gc.alloc.rate:                   2323.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7772521.194 ±(99.9%) 186248.719 ops/s [Average]
[info]   (min, avg, max) = (7704611.810, 7772521.194, 7829548.405), stdev = 48368.201
[info]   CI (99.9%): [7586272.475, 7958769.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2330.992 ±(99.9%) 55.483 MB/sec [Average]
[info]   (min, avg, max) = (2310.932, 2330.992, 2348.135), stdev = 14.409
[info]   CI (99.9%): [2275.508, 2386.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2302.709 ±(99.9%) 564.296 MB/sec [Average]
[info]   (min, avg, max) = (2041.059, 2302.709, 2378.119), stdev = 146.546
[info]   CI (99.9%): [1738.413, 2867.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   466.249 ±(99.9%) 112.167 B/op [Average]
[info]   (min, avg, max) = (414.539, 466.249, 484.845), stdev = 29.129
[info]   CI (99.9%): [354.082, 578.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.015, 0.021), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 50.54% complete, ETA 00:19:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88202.291 ops/s
[info] # Warmup Iteration   2: 305221.727 ops/s
[info] # Warmup Iteration   3: 313453.754 ops/s
[info] Iteration   1: 315978.716 ops/s
[info]                  ·gc.alloc.rate:                   1925.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9817.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.518 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 314454.964 ops/s
[info]                  ·gc.alloc.rate:                   1916.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9968.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 315922.943 ops/s
[info]                  ·gc.alloc.rate:                   1925.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10005.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 316411.151 ops/s
[info]                  ·gc.alloc.rate:                   1928.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8374.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.518 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 316394.408 ops/s
[info]                  ·gc.alloc.rate:                   1928.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10088.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   315832.436 ±(99.9%) 3091.172 ops/s [Average]
[info]   (min, avg, max) = (314454.964, 315832.436, 316411.151), stdev = 802.768
[info]   CI (99.9%): [312741.264, 318923.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1924.921 ±(99.9%) 19.164 MB/sec [Average]
[info]   (min, avg, max) = (1916.445, 1924.921, 1928.767), stdev = 4.977
[info]   CI (99.9%): [1905.758, 1944.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1936.681 ±(99.9%) 550.711 MB/sec [Average]
[info]   (min, avg, max) = (1683.664, 1936.681, 2028.561), stdev = 143.018
[info]   CI (99.9%): [1385.970, 2487.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9651.130 ±(99.9%) 2772.859 B/op [Average]
[info]   (min, avg, max) = (8374.943, 9651.130, 10088.292), stdev = 720.103
[info]   CI (99.9%): [6878.271, 12423.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.457 ±(99.9%) 0.539 B/op [Average]
[info]   (min, avg, max) = (0.311, 0.457, 0.625), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 51.08% complete, ETA 00:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 639702.596 ops/s
[info] # Warmup Iteration   2: 1040838.918 ops/s
[info] # Warmup Iteration   3: 1065504.914 ops/s
[info] Iteration   1: 1067825.970 ops/s
[info]                  ·gc.alloc.rate:                   2458.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3951.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1075494.904 ops/s
[info]                  ·gc.alloc.rate:                   2477.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3455.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1069469.663 ops/s
[info]                  ·gc.alloc.rate:                   2462.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3488.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1063816.900 ops/s
[info]                  ·gc.alloc.rate:                   2449.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3516.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1068926.293 ops/s
[info]                  ·gc.alloc.rate:                   2461.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4004.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1069106.746 ±(99.9%) 16176.795 ops/s [Average]
[info]   (min, avg, max) = (1063816.900, 1069106.746, 1075494.904), stdev = 4201.062
[info]   CI (99.9%): [1052929.951, 1085283.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2461.866 ±(99.9%) 38.340 MB/sec [Average]
[info]   (min, avg, max) = (2449.553, 2461.866, 2477.159), stdev = 9.957
[info]   CI (99.9%): [2423.526, 2500.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3624.000, 3624.000, 3624.000), stdev = 0.001
[info]   CI (99.9%): [3624.000, 3624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2501.974 ±(99.9%) 699.237 MB/sec [Average]
[info]   (min, avg, max) = (2361.960, 2501.974, 2719.877), stdev = 181.590
[info]   CI (99.9%): [1802.737, 3201.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3683.254 ±(99.9%) 1041.558 B/op [Average]
[info]   (min, avg, max) = (3455.468, 3683.254, 4004.684), stdev = 270.489
[info]   CI (99.9%): [2641.696, 4724.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.165 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.165, 0.244), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 51.61% complete, ETA 00:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1491491.435 ops/s
[info] # Warmup Iteration   2: 3226376.099 ops/s
[info] # Warmup Iteration   3: 3252206.510 ops/s
[info] Iteration   1: 3217990.412 ops/s
[info]                  ·gc.alloc.rate:                   1864.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3252715.576 ops/s
[info]                  ·gc.alloc.rate:                   1885.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     804.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3279399.224 ops/s
[info]                  ·gc.alloc.rate:                   1900.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3229078.588 ops/s
[info]                  ·gc.alloc.rate:                   1871.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3264236.010 ops/s
[info]                  ·gc.alloc.rate:                   1891.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     815.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3248683.962 ±(99.9%) 96803.919 ops/s [Average]
[info]   (min, avg, max) = (3217990.412, 3248683.962, 3279399.224), stdev = 25139.670
[info]   CI (99.9%): [3151880.043, 3345487.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1882.703 ±(99.9%) 56.870 MB/sec [Average]
[info]   (min, avg, max) = (1864.519, 1882.703, 1900.630), stdev = 14.769
[info]   CI (99.9%): [1825.833, 1939.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1872.810 ±(99.9%) 690.785 MB/sec [Average]
[info]   (min, avg, max) = (1663.217, 1872.810, 2022.362), stdev = 179.395
[info]   CI (99.9%): [1182.024, 2563.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   907.429 ±(99.9%) 344.182 B/op [Average]
[info]   (min, avg, max) = (804.382, 907.429, 985.711), stdev = 89.383
[info]   CI (99.9%): [563.247, 1251.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.050, 0.061), stdev = 0.010
[info]   CI (99.9%): [0.011, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 52.15% complete, ETA 00:18:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14393095.791 ops/s
[info] # Warmup Iteration   2: 15170519.502 ops/s
[info] # Warmup Iteration   3: 16548581.997 ops/s
[info] Iteration   1: 16577379.251 ops/s
[info]                  ·gc.alloc.rate:                   758.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16452617.106 ops/s
[info]                  ·gc.alloc.rate:                   752.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 16575285.258 ops/s
[info]                  ·gc.alloc.rate:                   758.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16374043.743 ops/s
[info]                  ·gc.alloc.rate:                   749.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16548950.169 ops/s
[info]                  ·gc.alloc.rate:                   757.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   16505655.105 ±(99.9%) 344421.502 ops/s [Average]
[info]   (min, avg, max) = (16374043.743, 16505655.105, 16577379.251), stdev = 89445.170
[info]   CI (99.9%): [16161233.604, 16850076.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   755.150 ±(99.9%) 15.242 MB/sec [Average]
[info]   (min, avg, max) = (749.392, 755.150, 758.328), stdev = 3.958
[info]   CI (99.9%): [739.907, 770.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   800.501 ±(99.9%) 705.524 MB/sec [Average]
[info]   (min, avg, max) = (666.163, 800.501, 1002.901), stdev = 183.222
[info]   CI (99.9%): [94.978, 1506.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   76.283 ±(99.9%) 66.301 B/op [Average]
[info]   (min, avg, max) = (63.254, 76.283, 95.381), stdev = 17.218
[info]   CI (99.9%): [9.982, 142.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.007, 0.014), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 52.69% complete, ETA 00:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107081.621 ops/s
[info] # Warmup Iteration   2: 428700.887 ops/s
[info] # Warmup Iteration   3: 443116.976 ops/s
[info] Iteration   1: 439702.947 ops/s
[info]                  ·gc.alloc.rate:                   1564.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              5600.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5857.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 443966.038 ops/s
[info]                  ·gc.alloc.rate:                   1579.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              5600.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4675.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 445740.754 ops/s
[info]                  ·gc.alloc.rate:                   1586.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              5600.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5864.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 445516.765 ops/s
[info]                  ·gc.alloc.rate:                   1585.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              5600.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5911.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 445274.275 ops/s
[info]                  ·gc.alloc.rate:                   1584.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              5600.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5947.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   444040.156 ±(99.9%) 9705.673 ops/s [Average]
[info]   (min, avg, max) = (439702.947, 444040.156, 445740.754), stdev = 2520.532
[info]   CI (99.9%): [434334.483, 453745.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1579.984 ±(99.9%) 34.636 MB/sec [Average]
[info]   (min, avg, max) = (1564.455, 1579.984, 1586.000), stdev = 8.995
[info]   CI (99.9%): [1545.348, 1614.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5600.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5600.001, 5600.001, 5600.001), stdev = 0.001
[info]   CI (99.9%): [5600.001, 5600.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.508 ±(99.9%) 596.406 MB/sec [Average]
[info]   (min, avg, max) = (1319.193, 1594.508, 1682.706), stdev = 154.885
[info]   CI (99.9%): [998.103, 2190.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5651.379 ±(99.9%) 2104.555 B/op [Average]
[info]   (min, avg, max) = (4675.882, 5651.379, 5947.624), stdev = 546.546
[info]   CI (99.9%): [3546.823, 7755.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.295 ±(99.9%) 0.196 B/op [Average]
[info]   (min, avg, max) = (0.224, 0.295, 0.368), stdev = 0.051
[info]   CI (99.9%): [0.099, 0.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 53.23% complete, ETA 00:18:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1192693.073 ops/s
[info] # Warmup Iteration   2: 2108516.722 ops/s
[info] # Warmup Iteration   3: 2117572.695 ops/s
[info] Iteration   1: 2110330.605 ops/s
[info]                  ·gc.alloc.rate:                   1340.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     975.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2095373.434 ops/s
[info]                  ·gc.alloc.rate:                   1331.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     989.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2144366.340 ops/s
[info]                  ·gc.alloc.rate:                   1362.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     972.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2104525.451 ops/s
[info]                  ·gc.alloc.rate:                   1337.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     997.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2130894.773 ops/s
[info]                  ·gc.alloc.rate:                   1354.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     990.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2117098.121 ±(99.9%) 77246.852 ops/s [Average]
[info]   (min, avg, max) = (2095373.434, 2117098.121, 2144366.340), stdev = 20060.762
[info]   CI (99.9%): [2039851.269, 2194344.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1345.329 ±(99.9%) 49.831 MB/sec [Average]
[info]   (min, avg, max) = (1331.364, 1345.329, 1362.790), stdev = 12.941
[info]   CI (99.9%): [1295.498, 1395.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1325.545 ±(99.9%) 50.728 MB/sec [Average]
[info]   (min, avg, max) = (1308.251, 1325.545, 1341.500), stdev = 13.174
[info]   CI (99.9%): [1274.817, 1376.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   985.337 ±(99.9%) 40.728 B/op [Average]
[info]   (min, avg, max) = (972.960, 985.337, 997.874), stdev = 10.577
[info]   CI (99.9%): [944.609, 1026.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.059, 0.078), stdev = 0.013
[info]   CI (99.9%): [0.008, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 53.76% complete, ETA 00:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8734203.297 ops/s
[info] # Warmup Iteration   2: 4921854.779 ops/s
[info] # Warmup Iteration   3: 5212069.521 ops/s
[info] Iteration   1: 5231170.550 ops/s
[info]                  ·gc.alloc.rate:                   691.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5180183.124 ops/s
[info]                  ·gc.alloc.rate:                   684.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5191986.140 ops/s
[info]                  ·gc.alloc.rate:                   686.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5123261.381 ops/s
[info]                  ·gc.alloc.rate:               677.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204.951 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 5226951.365 ops/s
[info]                  ·gc.alloc.rate:                   691.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5190710.512 ±(99.9%) 167980.921 ops/s [Average]
[info]   (min, avg, max) = (5123261.381, 5190710.512, 5231170.550), stdev = 43624.112
[info]   CI (99.9%): [5022729.591, 5358691.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   686.055 ±(99.9%) 22.333 MB/sec [Average]
[info]   (min, avg, max) = (677.093, 686.055, 691.290), stdev = 5.800
[info]   CI (99.9%): [663.723, 708.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.865 ±(99.9%) 3.651 MB/sec [Average]
[info]   (min, avg, max) = (666.099, 666.865, 668.388), stdev = 0.948
[info]   CI (99.9%): [663.214, 670.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   202.193 ±(99.9%) 6.625 B/op [Average]
[info]   (min, avg, max) = (200.420, 202.193, 204.951), stdev = 1.720
[info]   CI (99.9%): [195.569, 208.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 54.30% complete, ETA 00:18:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130543.049 ops/s
[info] # Warmup Iteration   2: 378769.547 ops/s
[info] # Warmup Iteration   3: 394807.413 ops/s
[info] Iteration   1: 395906.156 ops/s
[info]                  ·gc.alloc.rate:                   1797.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1641.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6526.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 393916.509 ops/s
[info]                  ·gc.alloc.rate:                   1788.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7943.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.749 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 394793.131 ops/s
[info]                  ·gc.alloc.rate:                   1792.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6660.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 395669.641 ops/s
[info]                  ·gc.alloc.rate:                   1796.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6688.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 395293.584 ops/s
[info]                  ·gc.alloc.rate:                   1794.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8065.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   395115.804 ±(99.9%) 3047.502 ops/s [Average]
[info]   (min, avg, max) = (393916.509, 395115.804, 395906.156), stdev = 791.427
[info]   CI (99.9%): [392068.302, 398163.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1793.527 ±(99.9%) 13.997 MB/sec [Average]
[info]   (min, avg, max) = (1788.024, 1793.527, 1797.055), stdev = 3.635
[info]   CI (99.9%): [1779.530, 1807.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1801.606 ±(99.9%) 726.018 MB/sec [Average]
[info]   (min, avg, max) = (1641.659, 1801.606, 2025.819), stdev = 188.544
[info]   CI (99.9%): [1075.588, 2527.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7176.892 ±(99.9%) 2924.439 B/op [Average]
[info]   (min, avg, max) = (6526.242, 7176.892, 8065.786), stdev = 759.468
[info]   CI (99.9%): [4252.453, 10101.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.498 ±(99.9%) 0.681 B/op [Average]
[info]   (min, avg, max) = (0.331, 0.498, 0.749), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 1.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 54.84% complete, ETA 00:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1670108.496 ops/s
[info] # Warmup Iteration   2: 2595670.821 ops/s
[info] # Warmup Iteration   3: 2623508.658 ops/s
[info] Iteration   1: 2622434.207 ops/s
[info]                  ·gc.alloc.rate:                   1386.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     785.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2634095.322 ops/s
[info]                  ·gc.alloc.rate:                   1392.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     984.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2640027.852 ops/s
[info]                  ·gc.alloc.rate:                   1395.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2658689.830 ops/s
[info]                  ·gc.alloc.rate:                   1405.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2637429.191 ops/s
[info]                  ·gc.alloc.rate:                   1394.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2638535.280 ±(99.9%) 50523.282 ops/s [Average]
[info]   (min, avg, max) = (2622434.207, 2638535.280, 2658689.830), stdev = 13120.736
[info]   CI (99.9%): [2588011.998, 2689058.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1394.914 ±(99.9%) 27.555 MB/sec [Average]
[info]   (min, avg, max) = (1386.242, 1394.914, 1405.986), stdev = 7.156
[info]   CI (99.9%): [1367.359, 1422.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1392.738 ±(99.9%) 552.447 MB/sec [Average]
[info]   (min, avg, max) = (1308.281, 1392.738, 1648.333), stdev = 143.469
[info]   CI (99.9%): [840.291, 1945.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   830.765 ±(99.9%) 332.519 B/op [Average]
[info]   (min, avg, max) = (785.209, 830.765, 984.899), stdev = 86.354
[info]   CI (99.9%): [498.246, 1163.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.045, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 55.38% complete, ETA 00:17:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6034718.304 ops/s
[info] # Warmup Iteration   2: 6455196.243 ops/s
[info] # Warmup Iteration   3: 6808668.954 ops/s
[info] Iteration   1: 6826243.487 ops/s
[info]                  ·gc.alloc.rate:                   1041.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6817464.953 ops/s
[info]                  ·gc.alloc.rate:                   1039.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6745100.388 ops/s
[info]                  ·gc.alloc.rate:                   1028.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6724453.017 ops/s
[info]                  ·gc.alloc.rate:                   1025.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6719176.567 ops/s
[info]                  ·gc.alloc.rate:                   1024.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6766487.682 ±(99.9%) 198524.030 ops/s [Average]
[info]   (min, avg, max) = (6719176.567, 6766487.682, 6826243.487), stdev = 51556.060
[info]   CI (99.9%): [6567963.652, 6965011.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1031.936 ±(99.9%) 30.721 MB/sec [Average]
[info]   (min, avg, max) = (1024.630, 1031.936, 1041.234), stdev = 7.978
[info]   CI (99.9%): [1001.215, 1062.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1002.776 ±(99.9%) 13.353 MB/sec [Average]
[info]   (min, avg, max) = (999.486, 1002.776, 1007.858), stdev = 3.468
[info]   CI (99.9%): [989.422, 1016.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   233.234 ±(99.9%) 9.777 B/op [Average]
[info]   (min, avg, max) = (230.377, 233.234, 236.072), stdev = 2.539
[info]   CI (99.9%): [223.457, 243.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.017, 0.020), stdev = 0.003
[info]   CI (99.9%): [0.007, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 55.91% complete, ETA 00:17:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271481.426 ops/s
[info] # Warmup Iteration   2: 651539.018 ops/s
[info] # Warmup Iteration   3: 655544.144 ops/s
[info] Iteration   1: 650958.455 ops/s
[info]                  ·gc.alloc.rate:                   1932.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4777.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 658698.334 ops/s
[info]                  ·gc.alloc.rate:                   1955.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4767.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 657052.312 ops/s
[info]                  ·gc.alloc.rate:                   1951.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4818.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 661339.266 ops/s
[info]                  ·gc.alloc.rate:                   1963.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4814.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 647847.073 ops/s
[info]                  ·gc.alloc.rate:                   1923.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              4672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4934.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   655179.088 ±(99.9%) 21561.375 ops/s [Average]
[info]   (min, avg, max) = (647847.073, 655179.088, 661339.266), stdev = 5599.421
[info]   CI (99.9%): [633617.713, 676740.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1945.208 ±(99.9%) 63.853 MB/sec [Average]
[info]   (min, avg, max) = (1923.567, 1945.208, 1963.229), stdev = 16.582
[info]   CI (99.9%): [1881.355, 2009.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4672.001, 4672.001, 4672.001), stdev = 0.001
[info]   CI (99.9%): [4672.001, 4672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.682 ±(99.9%) 85.940 MB/sec [Average]
[info]   (min, avg, max) = (1975.935, 2007.682, 2031.585), stdev = 22.318
[info]   CI (99.9%): [1921.742, 2093.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4822.316 ±(99.9%) 256.119 B/op [Average]
[info]   (min, avg, max) = (4767.253, 4822.316, 4934.357), stdev = 66.513
[info]   CI (99.9%): [4566.198, 5078.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.270 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (0.201, 0.270, 0.349), stdev = 0.056
[info]   CI (99.9%): [0.054, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 56.45% complete, ETA 00:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461376.625 ops/s
[info] # Warmup Iteration   2: 827626.225 ops/s
[info] # Warmup Iteration   3: 834077.027 ops/s
[info] Iteration   1: 828340.110 ops/s
[info]                  ·gc.alloc.rate:                   2749.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5103.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 828351.523 ops/s
[info]                  ·gc.alloc.rate:                   2749.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3041.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5778.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 832628.610 ops/s
[info]                  ·gc.alloc.rate:                   2764.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5130.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 828772.151 ops/s
[info]                  ·gc.alloc.rate:                   2751.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5162.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 829992.499 ops/s
[info]                  ·gc.alloc.rate:                   2755.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5163.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   829616.979 ±(99.9%) 6983.491 ops/s [Average]
[info]   (min, avg, max) = (828340.110, 829616.979, 832628.610), stdev = 1813.591
[info]   CI (99.9%): [822633.487, 836600.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2753.946 ±(99.9%) 24.208 MB/sec [Average]
[info]   (min, avg, max) = (2749.501, 2753.946, 2764.439), stdev = 6.287
[info]   CI (99.9%): [2729.738, 2778.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2776.940 ±(99.9%) 572.455 MB/sec [Average]
[info]   (min, avg, max) = (2685.888, 2776.940, 3041.580), stdev = 148.665
[info]   CI (99.9%): [2204.484, 3349.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5267.817 ±(99.9%) 1104.056 B/op [Average]
[info]   (min, avg, max) = (5103.139, 5267.817, 5778.737), stdev = 286.720
[info]   CI (99.9%): [4163.761, 6371.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 0.273 B/op [Average]
[info]   (min, avg, max) = (0.157, 0.229, 0.316), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 56.99% complete, ETA 00:16:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 325795.314 ops/s
[info] # Warmup Iteration   2: 970568.778 ops/s
[info] # Warmup Iteration   3: 984531.932 ops/s
[info] Iteration   1: 999799.864 ops/s
[info]                  ·gc.alloc.rate:                   1240.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1542.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 998271.133 ops/s
[info]                  ·gc.alloc.rate:                   1238.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1001568.339 ops/s
[info]                  ·gc.alloc.rate:                   1242.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2075.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1007627.219 ops/s
[info]                  ·gc.alloc.rate:                   1249.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2076.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1009350.958 ops/s
[info]                  ·gc.alloc.rate:                   1251.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2085.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1003323.503 ±(99.9%) 18851.965 ops/s [Average]
[info]   (min, avg, max) = (998271.133, 1003323.503, 1009350.958), stdev = 4895.796
[info]   CI (99.9%): [984471.537, 1022175.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1244.474 ±(99.9%) 23.210 MB/sec [Average]
[info]   (min, avg, max) = (1238.307, 1244.474, 1251.913), stdev = 6.028
[info]   CI (99.9%): [1221.264, 1267.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1256.200 ±(99.9%) 595.460 MB/sec [Average]
[info]   (min, avg, max) = (980.065, 1256.200, 1337.387), stdev = 154.639
[info]   CI (99.9%): [660.740, 1851.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1970.007 ±(99.9%) 920.322 B/op [Average]
[info]   (min, avg, max) = (1542.580, 1970.007, 2085.273), stdev = 239.005
[info]   CI (99.9%): [1049.685, 2890.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.124 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.124, 0.197), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 57.53% complete, ETA 00:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6922911.617 ops/s
[info] # Warmup Iteration   2: 7651206.115 ops/s
[info] # Warmup Iteration   3: 7755633.189 ops/s
[info] Iteration   1: 7799193.639 ops/s
[info]                  ·gc.alloc.rate:               356.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.619 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 7788879.913 ops/s
[info]                  ·gc.alloc.rate:                   356.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7724416.669 ops/s
[info]                  ·gc.alloc.rate:                   353.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7802298.294 ops/s
[info]                  ·gc.alloc.rate:                   356.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7559468.486 ops/s
[info]                  ·gc.alloc.rate:               345.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69.760 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7734851.400 ±(99.9%) 396803.848 ops/s [Average]
[info]   (min, avg, max) = (7559468.486, 7734851.400, 7802298.294), stdev = 103048.699
[info]   CI (99.9%): [7338047.552, 8131655.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   353.860 ±(99.9%) 18.149 MB/sec [Average]
[info]   (min, avg, max) = (345.835, 353.860, 356.932), stdev = 4.713
[info]   CI (99.9%): [335.711, 372.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.642 ±(99.9%) 168.136 MB/sec [Average]
[info]   (min, avg, max) = (255.773, 303.642, 335.769), stdev = 43.664
[info]   CI (99.9%): [135.506, 471.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   61.841 ±(99.9%) 35.920 B/op [Average]
[info]   (min, avg, max) = (51.619, 61.841, 69.760), stdev = 9.328
[info]   CI (99.9%): [25.921, 97.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.311 ±(99.9%) 2.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.311, 1.480), stdev = 0.654
[info]   CI (99.9%): [≈ 0, 2.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.302), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 58.06% complete, ETA 00:16:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36139.192 ops/s
[info] # Warmup Iteration   2: 305296.797 ops/s
[info] # Warmup Iteration   3: 319964.422 ops/s
[info] Iteration   1: 323667.843 ops/s
[info]                  ·gc.alloc.rate:                   1796.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9549.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 322725.799 ops/s
[info]                  ·gc.alloc.rate:                   1791.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8058.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 319942.226 ops/s
[info]                  ·gc.alloc.rate:                   1776.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9841.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 320164.556 ops/s
[info]                  ·gc.alloc.rate:                   1777.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8250.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 320807.933 ops/s
[info]                  ·gc.alloc.rate:                   1780.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8271.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   321461.671 ±(99.9%) 6351.756 ops/s [Average]
[info]   (min, avg, max) = (319942.226, 321461.671, 323667.843), stdev = 1649.531
[info]   CI (99.9%): [315109.915, 327813.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1784.390 ±(99.9%) 35.508 MB/sec [Average]
[info]   (min, avg, max) = (1776.043, 1784.390, 1796.865), stdev = 9.221
[info]   CI (99.9%): [1748.882, 1819.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8736.001, 8736.001, 8736.001), stdev = 0.001
[info]   CI (99.9%): [8736.001, 8736.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1796.303 ±(99.9%) 657.952 MB/sec [Average]
[info]   (min, avg, max) = (1652.320, 1796.303, 2000.709), stdev = 170.868
[info]   CI (99.9%): [1138.351, 2454.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8794.154 ±(99.9%) 3208.325 B/op [Average]
[info]   (min, avg, max) = (8058.247, 8794.154, 9841.091), stdev = 833.192
[info]   CI (99.9%): [5585.829, 12002.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.208), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.509 ±(99.9%) 1.103 B/op [Average]
[info]   (min, avg, max) = (0.304, 0.509, 1.015), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 58.60% complete, ETA 00:16:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5338.259 ops/s
[info] # Warmup Iteration   2: 7461.801 ops/s
[info] # Warmup Iteration   3: 7937.576 ops/s
[info] Iteration   1: 8045.273 ops/s
[info]                  ·gc.alloc.rate:                   2070.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     390723.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.922 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7838.133 ops/s
[info]                  ·gc.alloc.rate:                   2017.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2347.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     471183.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.504 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7894.938 ops/s
[info]                  ·gc.alloc.rate:                   2032.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403257.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.659 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7951.224 ops/s
[info]                  ·gc.alloc.rate:                   2046.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     401730.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.168 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7993.025 ops/s
[info]                  ·gc.alloc.rate:                   2056.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400675.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.591 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7944.518 ±(99.9%) 312.387 ops/s [Average]
[info]   (min, avg, max) = (7838.133, 7944.518, 8045.273), stdev = 81.126
[info]   CI (99.9%): [7632.132, 8256.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2044.920 ±(99.9%) 79.004 MB/sec [Average]
[info]   (min, avg, max) = (2017.948, 2044.920, 2070.438), stdev = 20.517
[info]   CI (99.9%): [1965.917, 2123.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405016.055 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (405016.054, 405016.055, 405016.059), stdev = 0.002
[info]   CI (99.9%): [405016.046, 405016.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2086.748 ±(99.9%) 564.321 MB/sec [Average]
[info]   (min, avg, max) = (1997.376, 2086.748, 2347.620), stdev = 146.552
[info]   CI (99.9%): [1522.427, 2651.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   413514.288 ±(99.9%) 125575.402 B/op [Average]
[info]   (min, avg, max) = (390723.889, 413514.288, 471183.692), stdev = 32611.533
[info]   CI (99.9%): [287938.886, 539089.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.087, 0.137, 0.179), stdev = 0.035
[info]   CI (99.9%): [0.004, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27.169 ±(99.9%) 26.273 B/op [Average]
[info]   (min, avg, max) = (17.504, 27.169, 35.659), stdev = 6.823
[info]   CI (99.9%): [0.895, 53.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 59.14% complete, ETA 00:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7524.802 ops/s
[info] # Warmup Iteration   2: 13535.979 ops/s
[info] # Warmup Iteration   3: 13098.094 ops/s
[info] Iteration   1: 13699.426 ops/s
[info]                  ·gc.alloc.rate:               499.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          57352.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29386.453 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13666.918 ops/s
[info]                  ·gc.alloc.rate:                   498.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              57352.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74711.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 295.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13783.282 ops/s
[info]                  ·gc.alloc.rate:                   502.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              57352.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37038.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.753 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13518.190 ops/s
[info]                  ·gc.alloc.rate:                   492.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              57352.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75579.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13714.457 ops/s
[info]                  ·gc.alloc.rate:                   499.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              57352.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74608.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13676.455 ±(99.9%) 377.886 ops/s [Average]
[info]   (min, avg, max) = (13518.190, 13676.455, 13783.282), stdev = 98.136
[info]   CI (99.9%): [13298.569, 14054.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   498.420 ±(99.9%) 13.529 MB/sec [Average]
[info]   (min, avg, max) = (492.797, 498.420, 502.304), stdev = 3.513
[info]   CI (99.9%): [484.891, 511.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57352.034 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (57352.032, 57352.034, 57352.043), stdev = 0.005
[info]   CI (99.9%): [57352.015, 57352.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   505.704 ±(99.9%) 763.641 MB/sec [Average]
[info]   (min, avg, max) = (255.788, 505.704, 650.171), stdev = 198.315
[info]   CI (99.9%): [≈ 0, 1269.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   58265.203 ±(99.9%) 88689.009 B/op [Average]
[info]   (min, avg, max) = (29386.453, 58265.203, 75579.683), stdev = 23032.254
[info]   CI (99.9%): [≈ 0, 146954.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.542 ±(99.9%) 4.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.542, 2.564), stdev = 1.131
[info]   CI (99.9%): [≈ 0, 4.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   62.426 ±(99.9%) 501.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 62.426, 295.329), stdev = 130.223
[info]   CI (99.9%): [≈ 0, 563.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 59.68% complete, ETA 00:15:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19880.538 ops/s
[info] # Warmup Iteration   2: 23267.140 ops/s
[info] # Warmup Iteration   3: 23183.783 ops/s
[info] Iteration   1: 23726.866 ops/s
[info]                  ·gc.alloc.rate:                   443.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16967.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23659.391 ops/s
[info]                  ·gc.alloc.rate:                   442.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22155.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.755 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23521.912 ops/s
[info]                  ·gc.alloc.rate:                   440.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44526.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23760.430 ops/s
[info]                  ·gc.alloc.rate:               444.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22017.228 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 23753.105 ops/s
[info]                  ·gc.alloc.rate:                   444.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22024.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23684.341 ±(99.9%) 381.836 ops/s [Average]
[info]   (min, avg, max) = (23521.912, 23684.341, 23760.430), stdev = 99.162
[info]   CI (99.9%): [23302.504, 24066.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   443.187 ±(99.9%) 7.177 MB/sec [Average]
[info]   (min, avg, max) = (440.120, 443.187, 444.580), stdev = 1.864
[info]   CI (99.9%): [436.010, 450.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29448.020 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (29448.018, 29448.020, 29448.026), stdev = 0.004
[info]   CI (99.9%): [29448.006, 29448.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.851 ±(99.9%) 619.624 MB/sec [Average]
[info]   (min, avg, max) = (255.787, 383.851, 665.476), stdev = 160.914
[info]   CI (99.9%): [≈ 0, 1003.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25538.229 ±(99.9%) 41748.614 B/op [Average]
[info]   (min, avg, max) = (16967.392, 25538.229, 44526.372), stdev = 10841.982
[info]   CI (99.9%): [≈ 0, 67286.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.361 ±(99.9%) 2.875 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.361, 1.695), stdev = 0.747
[info]   CI (99.9%): [≈ 0, 3.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24.017 ±(99.9%) 191.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.017, 112.755), stdev = 49.655
[info]   CI (99.9%): [≈ 0, 215.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 60.22% complete, ETA 00:15:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 909.478 ops/s
[info] # Warmup Iteration   2: 2357.736 ops/s
[info] # Warmup Iteration   3: 2419.563 ops/s
[info] Iteration   1: 2425.876 ops/s
[info]                  ·gc.alloc.rate:                   1472.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     845946.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.507 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2427.435 ops/s
[info]                  ·gc.alloc.rate:                   1473.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1065202.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.479 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2405.412 ops/s
[info]                  ·gc.alloc.rate:                   1460.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     867058.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.858 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2410.731 ops/s
[info]                  ·gc.alloc.rate:               1463.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          955216.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 870335.469 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2435.752 ops/s
[info]                  ·gc.alloc.rate:                   1478.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082997.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.230 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2421.041 ±(99.9%) 48.373 ops/s [Average]
[info]   (min, avg, max) = (2405.412, 2421.041, 2435.752), stdev = 12.562
[info]   CI (99.9%): [2372.668, 2469.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1469.652 ±(99.9%) 29.798 MB/sec [Average]
[info]   (min, avg, max) = (1460.008, 1469.652, 1478.564), stdev = 7.738
[info]   CI (99.9%): [1439.854, 1499.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   955216.196 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (955216.177, 955216.196, 955216.254), stdev = 0.033
[info]   CI (99.9%): [955216.070, 955216.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1456.509 ±(99.9%) 717.795 MB/sec [Average]
[info]   (min, avg, max) = (1304.082, 1456.509, 1676.355), stdev = 186.409
[info]   CI (99.9%): [738.714, 2174.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   946308.157 ±(99.9%) 451301.969 B/op [Average]
[info]   (min, avg, max) = (845946.357, 946308.157, 1082997.863), stdev = 117201.688
[info]   CI (99.9%): [495006.188, 1397610.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   48.615 ±(99.9%) 113.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.615, 67.507), stdev = 29.508
[info]   CI (99.9%): [≈ 0, 162.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 60.75% complete, ETA 00:15:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6408.786 ops/s
[info] # Warmup Iteration   2: 8536.851 ops/s
[info] # Warmup Iteration   3: 8658.707 ops/s
[info] Iteration   1: 8578.744 ops/s
[info]                  ·gc.alloc.rate:                   1975.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366390.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.979 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8692.275 ops/s
[info]                  ·gc.alloc.rate:                   2001.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363998.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.921 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8648.531 ops/s
[info]                  ·gc.alloc.rate:                   1991.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367806.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.782 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8700.814 ops/s
[info]                  ·gc.alloc.rate:                   2002.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367055.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.514 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8673.148 ops/s
[info]                  ·gc.alloc.rate:                   1996.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              362302.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369207.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.825 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8658.702 ±(99.9%) 188.701 ops/s [Average]
[info]   (min, avg, max) = (8578.744, 8658.702, 8700.814), stdev = 49.005
[info]   CI (99.9%): [8470.001, 8847.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1993.399 ±(99.9%) 42.933 MB/sec [Average]
[info]   (min, avg, max) = (1975.193, 1993.399, 2002.777), stdev = 11.150
[info]   CI (99.9%): [1950.466, 2036.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362278.100 ±(99.9%) 52.079 B/op [Average]
[info]   (min, avg, max) = (362272.050, 362278.100, 362302.294), stdev = 13.525
[info]   CI (99.9%): [362226.021, 362330.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2018.781 ±(99.9%) 56.864 MB/sec [Average]
[info]   (min, avg, max) = (1997.648, 2018.781, 2034.491), stdev = 14.767
[info]   CI (99.9%): [1961.917, 2075.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   366891.812 ±(99.9%) 7419.233 B/op [Average]
[info]   (min, avg, max) = (363998.432, 366891.812, 369207.538), stdev = 1926.751
[info]   CI (99.9%): [359472.579, 374311.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.181 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (0.131, 0.181, 0.241), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32.804 ±(99.9%) 33.981 B/op [Average]
[info]   (min, avg, max) = (23.782, 32.804, 43.514), stdev = 8.825
[info]   CI (99.9%): [≈ 0, 66.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 61.29% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25055.249 ops/s
[info] # Warmup Iteration   2: 42129.276 ops/s
[info] # Warmup Iteration   3: 42442.695 ops/s
[info] Iteration   1: 42413.628 ops/s
[info]                  ·gc.alloc.rate:                   614.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24101.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 42458.173 ops/s
[info]                  ·gc.alloc.rate:                   615.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24051.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 42654.323 ops/s
[info]                  ·gc.alloc.rate:                   618.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23989.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42506.143 ops/s
[info]                  ·gc.alloc.rate:                   616.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          325.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12061.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 42058.167 ops/s
[info]                  ·gc.alloc.rate:                   609.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24416.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   42418.087 ±(99.9%) 849.611 ops/s [Average]
[info]   (min, avg, max) = (42058.167, 42418.087, 42654.323), stdev = 220.641
[info]   CI (99.9%): [41568.476, 43267.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   614.810 ±(99.9%) 12.417 MB/sec [Average]
[info]   (min, avg, max) = (609.507, 614.810, 618.160), stdev = 3.225
[info]   CI (99.9%): [602.392, 627.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.883 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (22807.774, 22807.883, 22807.947), stdev = 0.078
[info]   CI (99.9%): [22807.583, 22808.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   585.441 ±(99.9%) 558.905 MB/sec [Average]
[info]   (min, avg, max) = (325.807, 585.441, 652.494), stdev = 145.146
[info]   CI (99.9%): [26.537, 1144.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21724.173 ±(99.9%) 20810.129 B/op [Average]
[info]   (min, avg, max) = (12061.103, 21724.173, 24416.503), stdev = 5404.324
[info]   CI (99.9%): [914.044, 42534.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.576 ±(99.9%) 4.426 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.576, 2.632), stdev = 1.149
[info]   CI (99.9%): [≈ 0, 5.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.387 ±(99.9%) 164.213 B/op [Average]
[info]   (min, avg, max) = (0.771, 21.387, 97.648), stdev = 42.646
[info]   CI (99.9%): [≈ 0, 185.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 61.83% complete, ETA 00:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59936.592 ops/s
[info] # Warmup Iteration   2: 64754.988 ops/s
[info] # Warmup Iteration   3: 66685.044 ops/s
[info] Iteration   1: 65707.448 ops/s
[info]                  ·gc.alloc.rate:                   495.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14096.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 63814.731 ops/s
[info]                  ·gc.alloc.rate:                   480.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8206.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 65981.149 ops/s
[info]                  ·gc.alloc.rate:                   497.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15857.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 66652.674 ops/s
[info]                  ·gc.alloc.rate:               502.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7849.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 65790.183 ops/s
[info]                  ·gc.alloc.rate:                   495.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15903.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   65589.237 ±(99.9%) 4078.647 ops/s [Average]
[info]   (min, avg, max) = (63814.731, 65589.237, 66652.674), stdev = 1059.212
[info]   CI (99.9%): [61510.590, 69667.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   494.169 ±(99.9%) 30.666 MB/sec [Average]
[info]   (min, avg, max) = (480.812, 494.169, 502.104), stdev = 7.964
[info]   CI (99.9%): [463.502, 524.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11856.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11856.006, 11856.007, 11856.007), stdev = 0.001
[info]   CI (99.9%): [11856.005, 11856.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.749 ±(99.9%) 658.290 MB/sec [Average]
[info]   (min, avg, max) = (332.407, 516.749, 665.065), stdev = 170.956
[info]   CI (99.9%): [≈ 0, 1175.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12382.729 ±(99.9%) 15570.617 B/op [Average]
[info]   (min, avg, max) = (7849.023, 12382.729, 15903.692), stdev = 4043.640
[info]   CI (99.9%): [≈ 0, 27953.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 2.904 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.727), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 3.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.072 ±(99.9%) 69.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.072, 41.348), stdev = 18.057
[info]   CI (99.9%): [≈ 0, 78.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.37% complete, ETA 00:14:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72893.318 ops/s
[info] # Warmup Iteration   2: 78995.054 ops/s
[info] # Warmup Iteration   3: 77704.942 ops/s
[info] Iteration   1: 75319.148 ops/s
[info]                  ·gc.alloc.rate:      1.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 79365.823 ops/s
[info]                  ·gc.alloc.rate:      1.211 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 78852.936 ops/s
[info]                  ·gc.alloc.rate:      1.203 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 79354.140 ops/s
[info]                  ·gc.alloc.rate:      1.210 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 79366.700 ops/s
[info]                  ·gc.alloc.rate:      1.211 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   78451.750 ±(99.9%) 6796.446 ops/s [Average]
[info]   (min, avg, max) = (75319.148, 78451.750, 79366.700), stdev = 1765.015
[info]   CI (99.9%): [71655.304, 85248.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.197 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (1.149, 1.197, 1.211), stdev = 0.027
[info]   CI (99.9%): [1.093, 1.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.006, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 62.90% complete, ETA 00:14:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2493.843 ops/s
[info] # Warmup Iteration   2: 5196.801 ops/s
[info] # Warmup Iteration   3: 5356.506 ops/s
[info] Iteration   1: 5310.048 ops/s
[info]                  ·gc.alloc.rate:                   1596.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              473272.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484611.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.169 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5305.602 ops/s
[info]                  ·gc.alloc.rate:                   1595.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              473270.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     489315.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5335.548 ops/s
[info]                  ·gc.alloc.rate:                   1604.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              473272.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     490691.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.559 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5322.384 ops/s
[info]                  ·gc.alloc.rate:                   1600.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              473272.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     396071.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.464 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5352.305 ops/s
[info]                  ·gc.alloc.rate:                   1609.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              473271.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     494714.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.361 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5325.177 ±(99.9%) 73.651 ops/s [Average]
[info]   (min, avg, max) = (5305.602, 5325.177, 5352.305), stdev = 19.127
[info]   CI (99.9%): [5251.526, 5398.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1601.363 ±(99.9%) 22.053 MB/sec [Average]
[info]   (min, avg, max) = (1595.535, 1601.363, 1609.530), stdev = 5.727
[info]   CI (99.9%): [1579.310, 1623.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   473271.872 ±(99.9%) 2.780 B/op [Average]
[info]   (min, avg, max) = (473270.838, 473271.872, 473272.672), stdev = 0.722
[info]   CI (99.9%): [473269.092, 473274.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.014 ±(99.9%) 552.204 MB/sec [Average]
[info]   (min, avg, max) = (1339.394, 1594.014, 1682.455), stdev = 143.406
[info]   CI (99.9%): [1041.810, 2146.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   471080.905 ±(99.9%) 162059.726 B/op [Average]
[info]   (min, avg, max) = (396071.814, 471080.905, 494714.788), stdev = 42086.396
[info]   CI (99.9%): [309021.179, 633140.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.920 ±(99.9%) 43.202 B/op [Average]
[info]   (min, avg, max) = (6.169, 20.920, 37.047), stdev = 11.219
[info]   CI (99.9%): [≈ 0, 64.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 63.44% complete, ETA 00:14:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5011237.510 ops/s
[info] # Warmup Iteration   2: 5118459.947 ops/s
[info] # Warmup Iteration   3: 5121768.506 ops/s
[info] Iteration   1: 5130957.964 ops/s
[info]                  ·gc.alloc.rate:                   1538.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     409.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5087750.279 ops/s
[info]                  ·gc.alloc.rate:                   1525.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     518.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5130683.957 ops/s
[info]                  ·gc.alloc.rate:                   1539.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5082720.684 ops/s
[info]                  ·gc.alloc.rate:                   1524.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5092363.543 ops/s
[info]                  ·gc.alloc.rate:                   1527.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     523.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5104895.286 ±(99.9%) 92074.435 ops/s [Average]
[info]   (min, avg, max) = (5082720.684, 5104895.286, 5130957.964), stdev = 23911.438
[info]   CI (99.9%): [5012820.851, 5196969.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1531.045 ±(99.9%) 28.214 MB/sec [Average]
[info]   (min, avg, max) = (1524.267, 1531.045, 1539.220), stdev = 7.327
[info]   CI (99.9%): [1502.832, 1559.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1547.663 ±(99.9%) 719.037 MB/sec [Average]
[info]   (min, avg, max) = (1335.986, 1547.663, 1692.366), stdev = 186.732
[info]   CI (99.9%): [828.626, 2266.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   477.148 ±(99.9%) 222.438 B/op [Average]
[info]   (min, avg, max) = (409.802, 477.148, 523.045), stdev = 57.767
[info]   CI (99.9%): [254.710, 699.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.027, 0.039), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 63.98% complete, ETA 00:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126334.496 ops/s
[info] # Warmup Iteration   2: 347492.629 ops/s
[info] # Warmup Iteration   3: 352793.145 ops/s
[info] Iteration   1: 357417.466 ops/s
[info]                  ·gc.alloc.rate:                   1865.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8682.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 355929.749 ops/s
[info]                  ·gc.alloc.rate:                   1857.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8807.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.552 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 358633.815 ops/s
[info]                  ·gc.alloc.rate:                   1872.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7343.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 354393.625 ops/s
[info]                  ·gc.alloc.rate:                   1850.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8971.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 354958.741 ops/s
[info]                  ·gc.alloc.rate:                   1853.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7492.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.646 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   356266.679 ±(99.9%) 6741.431 ops/s [Average]
[info]   (min, avg, max) = (354393.625, 356266.679, 358633.815), stdev = 1750.728
[info]   CI (99.9%): [349525.248, 363008.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1859.833 ±(99.9%) 35.147 MB/sec [Average]
[info]   (min, avg, max) = (1850.115, 1859.833, 1872.234), stdev = 9.128
[info]   CI (99.9%): [1824.686, 1894.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8216.001, 8216.001, 8216.001), stdev = 0.001
[info]   CI (99.9%): [8216.001, 8216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1869.386 ±(99.9%) 663.686 MB/sec [Average]
[info]   (min, avg, max) = (1673.447, 1869.386, 2020.248), stdev = 172.357
[info]   CI (99.9%): [1205.700, 2533.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8259.448 ±(99.9%) 2990.975 B/op [Average]
[info]   (min, avg, max) = (7343.657, 8259.448, 8971.531), stdev = 776.747
[info]   CI (99.9%): [5268.474, 11250.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.423 ±(99.9%) 0.694 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.423, 0.646), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 64.52% complete, ETA 00:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3024850.386 ops/s
[info] # Warmup Iteration   2: 3262933.231 ops/s
[info] # Warmup Iteration   3: 3274646.459 ops/s
[info] Iteration   1: 3293794.134 ops/s
[info]                  ·gc.alloc.rate:                   485.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3309979.235 ops/s
[info]                  ·gc.alloc.rate:               488.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158.378 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3290322.787 ops/s
[info]                  ·gc.alloc.rate:                   485.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3291111.981 ops/s
[info]                  ·gc.alloc.rate:               485.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3304146.993 ops/s
[info]                  ·gc.alloc.rate:                   487.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3297871.026 ±(99.9%) 33639.631 ops/s [Average]
[info]   (min, avg, max) = (3290322.787, 3297871.026, 3309979.235), stdev = 8736.105
[info]   CI (99.9%): [3264231.395, 3331510.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   486.202 ±(99.9%) 5.011 MB/sec [Average]
[info]   (min, avg, max) = (485.142, 486.202, 488.054), stdev = 1.301
[info]   CI (99.9%): [481.191, 491.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.936 ±(99.9%) 658.274 MB/sec [Average]
[info]   (min, avg, max) = (332.419, 516.936, 665.159), stdev = 170.952
[info]   CI (99.9%): [≈ 0, 1175.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   246.708 ±(99.9%) 314.603 B/op [Average]
[info]   (min, avg, max) = (158.378, 246.708, 317.995), stdev = 81.701
[info]   CI (99.9%): [≈ 0, 561.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.358, 1.646), stdev = 0.721
[info]   CI (99.9%): [≈ 0, 3.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.171 ±(99.9%) 1.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.787), stdev = 0.345
[info]   CI (99.9%): [≈ 0, 1.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 65.05% complete, ETA 00:13:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102574.345 ops/s
[info] # Warmup Iteration   2: 334955.369 ops/s
[info] # Warmup Iteration   3: 343637.209 ops/s
[info] Iteration   1: 344376.463 ops/s
[info]                  ·gc.alloc.rate:                   1333.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              6096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5960.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 338483.934 ops/s
[info]                  ·gc.alloc.rate:                   1311.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              6096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6101.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 342181.998 ops/s
[info]                  ·gc.alloc.rate:                   1325.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              6096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6075.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 344572.799 ops/s
[info]                  ·gc.alloc.rate:                   1334.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              6096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6073.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 344930.338 ops/s
[info]                  ·gc.alloc.rate:                   1336.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              6096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6103.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   342909.106 ±(99.9%) 10389.110 ops/s [Average]
[info]   (min, avg, max) = (338483.934, 342909.106, 344930.338), stdev = 2698.019
[info]   CI (99.9%): [332519.996, 353298.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1328.240 ±(99.9%) 40.400 MB/sec [Average]
[info]   (min, avg, max) = (1311.053, 1328.240, 1336.028), stdev = 10.492
[info]   CI (99.9%): [1287.840, 1368.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6096.001, 6096.001, 6096.001), stdev = 0.001
[info]   CI (99.9%): [6096.001, 6096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1321.034 ±(99.9%) 51.392 MB/sec [Average]
[info]   (min, avg, max) = (1304.271, 1321.034, 1337.643), stdev = 13.346
[info]   CI (99.9%): [1269.642, 1372.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6063.064 ±(99.9%) 226.423 B/op [Average]
[info]   (min, avg, max) = (5960.932, 6063.064, 6103.370), stdev = 58.801
[info]   CI (99.9%): [5836.642, 6289.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.267 ±(99.9%) 0.477 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.267, 0.381), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 65.59% complete, ETA 00:13:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458008.450 ops/s
[info] # Warmup Iteration   2: 662995.154 ops/s
[info] # Warmup Iteration   3: 661759.763 ops/s
[info] Iteration   1: 667646.372 ops/s
[info]                  ·gc.alloc.rate:                   2433.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2346.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5531.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 659322.308 ops/s
[info]                  ·gc.alloc.rate:                   2403.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5636.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 650629.703 ops/s
[info]                  ·gc.alloc.rate:                   2371.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5734.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 645865.892 ops/s
[info]                  ·gc.alloc.rate:                   2353.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5791.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 657330.586 ops/s
[info]                  ·gc.alloc.rate:                   2395.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5695.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   656158.972 ±(99.9%) 32208.746 ops/s [Average]
[info]   (min, avg, max) = (645865.892, 656158.972, 667646.372), stdev = 8364.509
[info]   CI (99.9%): [623950.226, 688367.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2391.523 ±(99.9%) 117.418 MB/sec [Average]
[info]   (min, avg, max) = (2353.923, 2391.523, 2433.217), stdev = 30.493
[info]   CI (99.9%): [2274.105, 2508.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2366.860 ±(99.9%) 50.867 MB/sec [Average]
[info]   (min, avg, max) = (2346.422, 2366.860, 2378.791), stdev = 13.210
[info]   CI (99.9%): [2315.992, 2417.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5677.845 ±(99.9%) 383.139 B/op [Average]
[info]   (min, avg, max) = (5531.392, 5677.845, 5791.659), stdev = 99.500
[info]   CI (99.9%): [5294.706, 6060.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.229, 0.348), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 66.13% complete, ETA 00:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272159.617 ops/s
[info] # Warmup Iteration   2: 615007.195 ops/s
[info] # Warmup Iteration   3: 630497.778 ops/s
[info] Iteration   1: 632558.180 ops/s
[info]                  ·gc.alloc.rate:                   736.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          972.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2419.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 633049.248 ops/s
[info]                  ·gc.alloc.rate:                   736.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1613.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 635481.589 ops/s
[info]                  ·gc.alloc.rate:                   739.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1609.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 635426.009 ops/s
[info]                  ·gc.alloc.rate:                   739.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2422.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 636181.364 ops/s
[info]                  ·gc.alloc.rate:                   740.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1619.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   634539.278 ±(99.9%) 6243.397 ops/s [Average]
[info]   (min, avg, max) = (632558.180, 634539.278, 636181.364), stdev = 1621.391
[info]   CI (99.9%): [628295.880, 640782.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   738.632 ±(99.9%) 7.338 MB/sec [Average]
[info]   (min, avg, max) = (736.270, 738.632, 740.529), stdev = 1.906
[info]   CI (99.9%): [731.294, 745.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   780.881 ±(99.9%) 683.758 MB/sec [Average]
[info]   (min, avg, max) = (648.877, 780.881, 978.191), stdev = 177.570
[info]   CI (99.9%): [97.123, 1464.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1937.089 ±(99.9%) 1702.673 B/op [Average]
[info]   (min, avg, max) = (1609.430, 1937.089, 2422.985), stdev = 442.179
[info]   CI (99.9%): [234.416, 3639.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.598 ±(99.9%) 4.476 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.598, 2.677), stdev = 1.162
[info]   CI (99.9%): [≈ 0, 5.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.487 ±(99.9%) 11.138 B/op [Average]
[info]   (min, avg, max) = (0.155, 1.487, 6.661), stdev = 2.892
[info]   CI (99.9%): [≈ 0, 12.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 66.67% complete, ETA 00:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3212048.456 ops/s
[info] # Warmup Iteration   2: 3353429.053 ops/s
[info] # Warmup Iteration   3: 3429465.917 ops/s
[info] Iteration   1: 3463012.716 ops/s
[info]                  ·gc.alloc.rate:                   1443.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3460695.286 ops/s
[info]                  ·gc.alloc.rate:                   1442.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     608.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3460509.851 ops/s
[info]                  ·gc.alloc.rate:                   1442.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     611.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3413185.785 ops/s
[info]                  ·gc.alloc.rate:                   1423.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     777.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3419840.987 ops/s
[info]                  ·gc.alloc.rate:                   1425.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     622.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3443448.925 ±(99.9%) 95190.505 ops/s [Average]
[info]   (min, avg, max) = (3413185.785, 3443448.925, 3463012.716), stdev = 24720.672
[info]   CI (99.9%): [3348258.420, 3538639.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1435.480 ±(99.9%) 39.349 MB/sec [Average]
[info]   (min, avg, max) = (1423.253, 1435.480, 1443.943), stdev = 10.219
[info]   CI (99.9%): [1396.132, 1474.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1477.902 ±(99.9%) 700.635 MB/sec [Average]
[info]   (min, avg, max) = (1338.951, 1477.902, 1686.073), stdev = 181.953
[info]   CI (99.9%): [777.267, 2178.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   675.514 ±(99.9%) 324.863 B/op [Average]
[info]   (min, avg, max) = (608.951, 675.514, 777.138), stdev = 84.366
[info]   CI (99.9%): [350.651, 1000.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.032, 0.048), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 67.20% complete, ETA 00:12:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60301.671 ops/s
[info] # Warmup Iteration   2: 221891.121 ops/s
[info] # Warmup Iteration   3: 231344.248 ops/s
[info] Iteration   1: 232165.528 ops/s
[info]                  ·gc.alloc.rate:                   1616.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11086.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 233694.329 ops/s
[info]                  ·gc.alloc.rate:                   1626.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11103.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.841 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 233527.294 ops/s
[info]                  ·gc.alloc.rate:                   1625.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11212.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.842 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 233192.582 ops/s
[info]                  ·gc.alloc.rate:                   1622.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11300.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 232446.096 ops/s
[info]                  ·gc.alloc.rate:                   1617.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9119.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.846 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   233005.166 ±(99.9%) 2583.263 ops/s [Average]
[info]   (min, avg, max) = (232165.528, 233005.166, 233694.329), stdev = 670.865
[info]   CI (99.9%): [230421.903, 235588.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1621.539 ±(99.9%) 17.339 MB/sec [Average]
[info]   (min, avg, max) = (1616.156, 1621.539, 1626.338), stdev = 4.503
[info]   CI (99.9%): [1604.200, 1638.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1593.970 ±(99.9%) 534.680 MB/sec [Average]
[info]   (min, avg, max) = (1346.941, 1593.970, 1674.295), stdev = 138.855
[info]   CI (99.9%): [1059.291, 2128.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10764.744 ±(99.9%) 3556.812 B/op [Average]
[info]   (min, avg, max) = (9119.699, 10764.744, 11300.851), stdev = 923.693
[info]   CI (99.9%): [7207.932, 14321.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.675 ±(99.9%) 0.887 B/op [Average]
[info]   (min, avg, max) = (0.422, 0.675, 0.846), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 67.74% complete, ETA 00:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 657348.343 ops/s
[info] # Warmup Iteration   2: 879710.239 ops/s
[info] # Warmup Iteration   3: 880716.523 ops/s
[info] Iteration   1: 888493.662 ops/s
[info]                  ·gc.alloc.rate:                   2131.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3552.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 888029.205 ops/s
[info]                  ·gc.alloc.rate:                   2130.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3575.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 889711.536 ops/s
[info]                  ·gc.alloc.rate:                   2134.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2365.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4184.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 889897.836 ops/s
[info]                  ·gc.alloc.rate:                   2135.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3596.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 889717.924 ops/s
[info]                  ·gc.alloc.rate:                   2135.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              3776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3604.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   889170.033 ±(99.9%) 3268.556 ops/s [Average]
[info]   (min, avg, max) = (888029.205, 889170.033, 889897.836), stdev = 848.834
[info]   CI (99.9%): [885901.476, 892438.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2133.553 ±(99.9%) 9.003 MB/sec [Average]
[info]   (min, avg, max) = (2130.551, 2133.553, 2135.812), stdev = 2.338
[info]   CI (99.9%): [2124.550, 2142.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3776.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3776.000, 3776.000, 3776.001), stdev = 0.001
[info]   CI (99.9%): [3776.000, 3776.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2092.269 ±(99.9%) 590.619 MB/sec [Average]
[info]   (min, avg, max) = (2005.420, 2092.269, 2365.617), stdev = 153.382
[info]   CI (99.9%): [1501.651, 2682.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3702.860 ±(99.9%) 1039.815 B/op [Average]
[info]   (min, avg, max) = (3552.525, 3702.860, 4184.547), stdev = 270.037
[info]   CI (99.9%): [2663.045, 4742.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.108, 0.125), stdev = 0.009
[info]   CI (99.9%): [0.072, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.184, 0.192, 0.221), stdev = 0.016
[info]   CI (99.9%): [0.128, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 68.28% complete, ETA 00:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 647653.080 ops/s
[info] # Warmup Iteration   2: 1313728.068 ops/s
[info] # Warmup Iteration   3: 1321918.112 ops/s
[info] Iteration   1: 1356497.677 ops/s
[info]                  ·gc.alloc.rate:                   916.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1131.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1359756.744 ops/s
[info]                  ·gc.alloc.rate:                   919.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1128.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1351145.532 ops/s
[info]                  ·gc.alloc.rate:                   913.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1353026.056 ops/s
[info]                  ·gc.alloc.rate:                   914.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1146.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1354584.804 ops/s
[info]                  ·gc.alloc.rate:                   915.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1149.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1355002.163 ±(99.9%) 12741.412 ops/s [Average]
[info]   (min, avg, max) = (1351145.532, 1355002.163, 1359756.744), stdev = 3308.904
[info]   CI (99.9%): [1342260.751, 1367743.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   916.144 ±(99.9%) 8.934 MB/sec [Average]
[info]   (min, avg, max) = (913.636, 916.144, 919.645), stdev = 2.320
[info]   CI (99.9%): [907.210, 925.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   915.819 ±(99.9%) 564.856 MB/sec [Average]
[info]   (min, avg, max) = (653.632, 915.819, 989.223), stdev = 146.691
[info]   CI (99.9%): [350.964, 1480.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1063.429 ±(99.9%) 651.450 B/op [Average]
[info]   (min, avg, max) = (761.206, 1063.429, 1149.361), stdev = 169.179
[info]   CI (99.9%): [411.979, 1714.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (0.048, 0.077, 0.097), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 68.82% complete, ETA 00:12:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5865897.318 ops/s
[info] # Warmup Iteration   2: 6327951.127 ops/s
[info] # Warmup Iteration   3: 6715455.214 ops/s
[info] Iteration   1: 6691091.289 ops/s
[info]                  ·gc.alloc.rate:                   748.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6810908.420 ops/s
[info]                  ·gc.alloc.rate:                   761.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6493357.411 ops/s
[info]                  ·gc.alloc.rate:                   726.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6441300.773 ops/s
[info]                  ·gc.alloc.rate:                   720.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6425572.002 ops/s
[info]                  ·gc.alloc.rate:                   718.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6572445.979 ±(99.9%) 655647.971 ops/s [Average]
[info]   (min, avg, max) = (6425572.002, 6572445.979, 6810908.420), stdev = 170269.696
[info]   CI (99.9%): [5916798.008, 7228093.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   735.028 ±(99.9%) 73.061 MB/sec [Average]
[info]   (min, avg, max) = (718.836, 735.028, 761.600), stdev = 18.974
[info]   CI (99.9%): [661.967, 808.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.423 ±(99.9%) 571.636 MB/sec [Average]
[info]   (min, avg, max) = (664.786, 732.423, 997.975), stdev = 148.452
[info]   CI (99.9%): [160.787, 1304.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   175.183 ±(99.9%) 129.071 B/op [Average]
[info]   (min, avg, max) = (153.627, 175.183, 234.730), stdev = 33.519
[info]   CI (99.9%): [46.112, 304.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.021, 0.034), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 69.35% complete, ETA 00:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168060.393 ops/s
[info] # Warmup Iteration   2: 480965.883 ops/s
[info] # Warmup Iteration   3: 484512.290 ops/s
[info] Iteration   1: 489412.584 ops/s
[info]                  ·gc.alloc.rate:                   1714.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5269.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 485224.919 ops/s
[info]                  ·gc.alloc.rate:                   1699.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5369.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 490637.057 ops/s
[info]                  ·gc.alloc.rate:                   1718.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5354.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 492817.492 ops/s
[info]                  ·gc.alloc.rate:                   1726.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5362.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 486117.672 ops/s
[info]                  ·gc.alloc.rate:                   1702.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5461.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   488841.945 ±(99.9%) 12155.107 ops/s [Average]
[info]   (min, avg, max) = (485224.919, 488841.945, 492817.492), stdev = 3156.643
[info]   CI (99.9%): [476686.838, 500997.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1712.276 ±(99.9%) 43.076 MB/sec [Average]
[info]   (min, avg, max) = (1699.719, 1712.276, 1726.659), stdev = 11.187
[info]   CI (99.9%): [1669.200, 1755.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5512.001, 5512.001, 5512.001), stdev = 0.001
[info]   CI (99.9%): [5512.001, 5512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1666.037 ±(99.9%) 73.552 MB/sec [Average]
[info]   (min, avg, max) = (1639.003, 1666.037, 1686.711), stdev = 19.101
[info]   CI (99.9%): [1592.484, 1739.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5363.302 ±(99.9%) 261.268 B/op [Average]
[info]   (min, avg, max) = (5269.818, 5363.302, 5461.030), stdev = 67.850
[info]   CI (99.9%): [5102.035, 5624.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.255 ±(99.9%) 0.426 B/op [Average]
[info]   (min, avg, max) = (0.134, 0.255, 0.402), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 69.89% complete, ETA 00:11:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 414131.408 ops/s
[info] # Warmup Iteration   2: 645461.383 ops/s
[info] # Warmup Iteration   3: 642168.937 ops/s
[info] Iteration   1: 641951.397 ops/s
[info]                  ·gc.alloc.rate:                   2287.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2341.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5740.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 651812.091 ops/s
[info]                  ·gc.alloc.rate:                   2322.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5692.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 652942.071 ops/s
[info]                  ·gc.alloc.rate:                   2326.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5708.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 646092.941 ops/s
[info]                  ·gc.alloc.rate:                   2302.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5786.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 652877.765 ops/s
[info]                  ·gc.alloc.rate:                   2326.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5733.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   649135.253 ±(99.9%) 18915.949 ops/s [Average]
[info]   (min, avg, max) = (641951.397, 649135.253, 652942.071), stdev = 4912.412
[info]   CI (99.9%): [630219.304, 668051.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2312.986 ±(99.9%) 67.393 MB/sec [Average]
[info]   (min, avg, max) = (2287.428, 2312.986, 2326.489), stdev = 17.502
[info]   CI (99.9%): [2245.593, 2380.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.001, 5608.001, 5608.001), stdev = 0.001
[info]   CI (99.9%): [5608.001, 5608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2364.218 ±(99.9%) 57.527 MB/sec [Average]
[info]   (min, avg, max) = (2341.621, 2364.218, 2378.248), stdev = 14.940
[info]   CI (99.9%): [2306.691, 2421.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5732.346 ±(99.9%) 138.712 B/op [Average]
[info]   (min, avg, max) = (5692.558, 5732.346, 5786.764), stdev = 36.023
[info]   CI (99.9%): [5593.634, 5871.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.222 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (0.201, 0.222, 0.254), stdev = 0.028
[info]   CI (99.9%): [0.116, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 70.43% complete, ETA 00:11:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3913237.517 ops/s
[info] # Warmup Iteration   2: 4532410.840 ops/s
[info] # Warmup Iteration   3: 4569376.947 ops/s
[info] Iteration   1: 4557468.924 ops/s
[info]                  ·gc.alloc.rate:                   1135.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     345.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4486884.718 ops/s
[info]                  ·gc.alloc.rate:                   1117.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4531426.287 ops/s
[info]                  ·gc.alloc.rate:                   1128.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4572604.243 ops/s
[info]                  ·gc.alloc.rate:                   1138.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4513489.153 ops/s
[info]                  ·gc.alloc.rate:                   1124.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     469.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   4532374.665 ±(99.9%) 131642.446 ops/s [Average]
[info]   (min, avg, max) = (4486884.718, 4532374.665, 4572604.243), stdev = 34187.125
[info]   CI (99.9%): [4400732.219, 4664017.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1128.958 ±(99.9%) 32.557 MB/sec [Average]
[info]   (min, avg, max) = (1117.723, 1128.958, 1138.878), stdev = 8.455
[info]   CI (99.9%): [1096.401, 1161.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1138.152 ±(99.9%) 711.311 MB/sec [Average]
[info]   (min, avg, max) = (999.218, 1138.152, 1346.323), stdev = 184.725
[info]   CI (99.9%): [426.841, 1849.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   395.540 ±(99.9%) 257.414 B/op [Average]
[info]   (min, avg, max) = (345.058, 395.540, 469.465), stdev = 66.850
[info]   CI (99.9%): [138.126, 652.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.028, 0.051), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 70.97% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141193.758 ops/s
[info] # Warmup Iteration   2: 351403.758 ops/s
[info] # Warmup Iteration   3: 354281.319 ops/s
[info] Iteration   1: 359403.321 ops/s
[info]                  ·gc.alloc.rate:                   1876.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7201.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 359289.930 ops/s
[info]                  ·gc.alloc.rate:                   1876.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8725.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 360455.297 ops/s
[info]                  ·gc.alloc.rate:                   1881.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8772.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.273 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 357307.781 ops/s
[info]                  ·gc.alloc.rate:                   1865.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7419.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 358474.031 ops/s
[info]                  ·gc.alloc.rate:                   1872.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8904.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   358986.072 ±(99.9%) 4516.879 ops/s [Average]
[info]   (min, avg, max) = (357307.781, 358986.072, 360455.297), stdev = 1173.019
[info]   CI (99.9%): [354469.193, 363502.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1874.444 ±(99.9%) 22.734 MB/sec [Average]
[info]   (min, avg, max) = (1865.962, 1874.444, 1881.951), stdev = 5.904
[info]   CI (99.9%): [1851.710, 1897.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8216.001, 8216.001, 8216.001), stdev = 0.001
[info]   CI (99.9%): [8216.001, 8216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1872.013 ±(99.9%) 732.354 MB/sec [Average]
[info]   (min, avg, max) = (1644.435, 1872.013, 2028.859), stdev = 190.190
[info]   CI (99.9%): [1139.659, 2604.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8204.455 ±(99.9%) 3167.148 B/op [Average]
[info]   (min, avg, max) = (7201.129, 8204.455, 8904.033), stdev = 822.498
[info]   CI (99.9%): [5037.308, 11371.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.365 ±(99.9%) 0.430 B/op [Average]
[info]   (min, avg, max) = (0.273, 0.365, 0.547), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 71.51% complete, ETA 00:11:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315059.117 ops/s
[info] # Warmup Iteration   2: 480007.290 ops/s
[info] # Warmup Iteration   3: 487560.667 ops/s
[info] Iteration   1: 486374.841 ops/s
[info]                  ·gc.alloc.rate:                   1330.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4287.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 485416.253 ops/s
[info]                  ·gc.alloc.rate:                   1327.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4313.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 476955.022 ops/s
[info]                  ·gc.alloc.rate:                   1304.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4411.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 488588.920 ops/s
[info]                  ·gc.alloc.rate:                   1336.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4326.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 486410.327 ops/s
[info]                  ·gc.alloc.rate:                   1330.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4358.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   484749.073 ±(99.9%) 17364.191 ops/s [Average]
[info]   (min, avg, max) = (476955.022, 484749.073, 488588.920), stdev = 4509.425
[info]   CI (99.9%): [467384.881, 502113.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1325.690 ±(99.9%) 47.515 MB/sec [Average]
[info]   (min, avg, max) = (1304.361, 1325.690, 1336.164), stdev = 12.339
[info]   CI (99.9%): [1278.176, 1373.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4304.001, 4304.001, 4304.001), stdev = 0.001
[info]   CI (99.9%): [4304.001, 4304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1336.518 ±(99.9%) 34.409 MB/sec [Average]
[info]   (min, avg, max) = (1325.193, 1336.518, 1346.998), stdev = 8.936
[info]   CI (99.9%): [1302.109, 1370.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4339.440 ±(99.9%) 184.429 B/op [Average]
[info]   (min, avg, max) = (4287.539, 4339.440, 4411.942), stdev = 47.896
[info]   CI (99.9%): [4155.011, 4523.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.283 ±(99.9%) 0.591 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.283, 0.540), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 72.04% complete, ETA 00:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2835849.382 ops/s
[info] # Warmup Iteration   2: 3175291.699 ops/s
[info] # Warmup Iteration   3: 3194084.862 ops/s
[info] Iteration   1: 3145124.390 ops/s
[info]                  ·gc.alloc.rate:                   479.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3200007.719 ops/s
[info]                  ·gc.alloc.rate:               487.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3181497.945 ops/s
[info]                  ·gc.alloc.rate:                   485.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     328.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3205233.689 ops/s
[info]                  ·gc.alloc.rate:               488.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3196591.996 ops/s
[info]                  ·gc.alloc.rate:                   487.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     327.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3185691.148 ±(99.9%) 93708.970 ops/s [Average]
[info]   (min, avg, max) = (3145124.390, 3185691.148, 3205233.689), stdev = 24335.922
[info]   CI (99.9%): [3091982.177, 3279400.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   485.817 ±(99.9%) 14.404 MB/sec [Average]
[info]   (min, avg, max) = (479.585, 485.817, 488.766), stdev = 3.741
[info]   CI (99.9%): [471.413, 500.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.979 ±(99.9%) 658.697 MB/sec [Average]
[info]   (min, avg, max) = (332.401, 516.979, 665.765), stdev = 171.061
[info]   CI (99.9%): [≈ 0, 1175.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   255.655 ±(99.9%) 328.158 B/op [Average]
[info]   (min, avg, max) = (163.220, 255.655, 328.887), stdev = 85.222
[info]   CI (99.9%): [≈ 0, 583.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.359 ±(99.9%) 2.740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.359, 1.630), stdev = 0.712
[info]   CI (99.9%): [≈ 0, 3.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.180 ±(99.9%) 1.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.816), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 72.58% complete, ETA 00:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94956.409 ops/s
[info] # Warmup Iteration   2: 311618.897 ops/s
[info] # Warmup Iteration   3: 326398.283 ops/s
[info] Iteration   1: 326563.527 ops/s
[info]                  ·gc.alloc.rate:                   1203.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6279.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.702 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 318381.769 ops/s
[info]                  ·gc.alloc.rate:                   1173.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6475.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.617 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 321617.616 ops/s
[info]                  ·gc.alloc.rate:                   1185.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4832.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 318873.745 ops/s
[info]                  ·gc.alloc.rate:                   1175.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6543.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 324736.820 ops/s
[info]                  ·gc.alloc.rate:                   1197.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4847.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   322034.696 ±(99.9%) 13792.782 ops/s [Average]
[info]   (min, avg, max) = (318381.769, 322034.696, 326563.527), stdev = 3581.942
[info]   CI (99.9%): [308241.914, 335827.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1186.850 ±(99.9%) 51.265 MB/sec [Average]
[info]   (min, avg, max) = (1173.311, 1186.850, 1203.611), stdev = 13.313
[info]   CI (99.9%): [1135.585, 1238.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5800.001, 5800.001, 5800.001), stdev = 0.001
[info]   CI (99.9%): [5800.001, 5800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1185.367 ±(99.9%) 673.553 MB/sec [Average]
[info]   (min, avg, max) = (987.540, 1185.367, 1325.634), stdev = 174.920
[info]   CI (99.9%): [511.814, 1858.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5795.779 ±(99.9%) 3379.520 B/op [Average]
[info]   (min, avg, max) = (4832.696, 5795.779, 6543.058), stdev = 877.651
[info]   CI (99.9%): [2416.259, 9175.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.467 ±(99.9%) 0.806 B/op [Average]
[info]   (min, avg, max) = (0.205, 0.467, 0.702), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 73.12% complete, ETA 00:10:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1018684.371 ops/s
[info] # Warmup Iteration   2: 1898741.525 ops/s
[info] # Warmup Iteration   3: 1950933.938 ops/s
[info] Iteration   1: 1906781.023 ops/s
[info]                  ·gc.alloc.rate:                   3082.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3030.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2501.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1966557.719 ops/s
[info]                  ·gc.alloc.rate:                   3178.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3047.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2439.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1941947.360 ops/s
[info]                  ·gc.alloc.rate:                   3139.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2752.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 1965344.243 ops/s
[info]                  ·gc.alloc.rate:                   3177.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2452.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1932079.048 ops/s
[info]                  ·gc.alloc.rate:                   3124.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2495.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1942541.879 ±(99.9%) 95984.039 ops/s [Average]
[info]   (min, avg, max) = (1906781.023, 1942541.879, 1966557.719), stdev = 24926.750
[info]   CI (99.9%): [1846557.840, 2038525.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3140.362 ±(99.9%) 155.258 MB/sec [Average]
[info]   (min, avg, max) = (3082.092, 3140.362, 3178.768), stdev = 40.320
[info]   CI (99.9%): [2985.103, 3295.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2544.000, 2544.000, 2544.000), stdev = 0.001
[info]   CI (99.9%): [2544.000, 2544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3120.617 ±(99.9%) 597.789 MB/sec [Average]
[info]   (min, avg, max) = (3030.016, 3120.617, 3397.180), stdev = 155.244
[info]   CI (99.9%): [2522.828, 3718.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2528.279 ±(99.9%) 494.249 B/op [Average]
[info]   (min, avg, max) = (2439.113, 2528.279, 2752.872), stdev = 128.355
[info]   CI (99.9%): [2034.030, 3022.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.137, 0.187), stdev = 0.032
[info]   CI (99.9%): [0.016, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (0.085, 0.111, 0.150), stdev = 0.025
[info]   CI (99.9%): [0.015, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 73.66% complete, ETA 00:10:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76634.515 ops/s
[info] # Warmup Iteration   2: 301026.734 ops/s
[info] # Warmup Iteration   3: 309119.653 ops/s
[info] Iteration   1: 317793.695 ops/s
[info]                  ·gc.alloc.rate:                   743.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3229.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 316447.722 ops/s
[info]                  ·gc.alloc.rate:                   739.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3246.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 315234.201 ops/s
[info]                  ·gc.alloc.rate:                   737.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4892.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.520 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 309507.489 ops/s
[info]                  ·gc.alloc.rate:                   724.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3331.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 311888.610 ops/s
[info]                  ·gc.alloc.rate:               729.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          3680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3316.087 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   314174.343 ±(99.9%) 13114.165 ops/s [Average]
[info]   (min, avg, max) = (309507.489, 314174.343, 317793.695), stdev = 3405.707
[info]   CI (99.9%): [301060.178, 327288.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   734.817 ±(99.9%) 30.175 MB/sec [Average]
[info]   (min, avg, max) = (724.065, 734.817, 743.201), stdev = 7.836
[info]   CI (99.9%): [704.642, 764.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3680.001, 3680.001, 3680.001), stdev = 0.001
[info]   CI (99.9%): [3680.001, 3680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   719.648 ±(99.9%) 561.000 MB/sec [Average]
[info]   (min, avg, max) = (652.294, 719.648, 980.240), stdev = 145.690
[info]   CI (99.9%): [158.648, 1280.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3603.278 ±(99.9%) 2779.402 B/op [Average]
[info]   (min, avg, max) = (3229.870, 3603.278, 4892.133), stdev = 721.802
[info]   CI (99.9%): [823.876, 6382.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.481 ±(99.9%) 3.789 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.481, 2.240), stdev = 0.984
[info]   CI (99.9%): [≈ 0, 4.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.385 ±(99.9%) 18.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.385, 11.093), stdev = 4.871
[info]   CI (99.9%): [≈ 0, 21.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 74.19% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 656739.057 ops/s
[info] # Warmup Iteration   2: 688399.461 ops/s
[info] # Warmup Iteration   3: 712811.243 ops/s
[info] Iteration   1: 709588.918 ops/s
[info]                  ·gc.alloc.rate:                   642.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1487.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 709938.647 ops/s
[info]                  ·gc.alloc.rate:               642.329 MB/sec
[info]                  ·gc.alloc.rate.norm:          1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 742.822 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 690833.269 ops/s
[info]                  ·gc.alloc.rate:                   625.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1523.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 672928.359 ops/s
[info]                  ·gc.alloc.rate:                   608.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1564.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 693696.534 ops/s
[info]                  ·gc.alloc.rate:                   627.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1520.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   695397.146 ±(99.9%) 59074.108 ops/s [Average]
[info]   (min, avg, max) = (672928.359, 695397.146, 709938.647), stdev = 15341.358
[info]   CI (99.9%): [636323.038, 754471.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   629.232 ±(99.9%) 53.679 MB/sec [Average]
[info]   (min, avg, max) = (608.837, 629.232, 642.329), stdev = 13.940
[info]   CI (99.9%): [575.553, 682.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1424.001, 1424.001, 1424.001), stdev = 0.001
[info]   CI (99.9%): [1424.001, 1424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   602.792 ±(99.9%) 576.311 MB/sec [Average]
[info]   (min, avg, max) = (335.067, 602.792, 671.072), stdev = 149.666
[info]   CI (99.9%): [26.482, 1179.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1367.827 ±(99.9%) 1349.413 B/op [Average]
[info]   (min, avg, max) = (742.822, 1367.827, 1564.250), stdev = 350.438
[info]   CI (99.9%): [18.414, 2717.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.104 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.231), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 74.73% complete, ETA 00:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3347983.601 ops/s
[info] # Warmup Iteration   2: 3513108.220 ops/s
[info] # Warmup Iteration   3: 3581610.379 ops/s
[info] Iteration   1: 3593651.236 ops/s
[info]                  ·gc.alloc.rate:                   2137.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     884.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3595302.058 ops/s
[info]                  ·gc.alloc.rate:                   2138.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     887.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3587711.455 ops/s
[info]                  ·gc.alloc.rate:                   2134.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3572907.151 ops/s
[info]                  ·gc.alloc.rate:                   2124.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     897.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3621670.027 ops/s
[info]                  ·gc.alloc.rate:                   2154.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     886.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3594248.385 ±(99.9%) 68113.771 ops/s [Average]
[info]   (min, avg, max) = (3572907.151, 3594248.385, 3621670.027), stdev = 17688.930
[info]   CI (99.9%): [3526134.614, 3662362.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2137.907 ±(99.9%) 41.456 MB/sec [Average]
[info]   (min, avg, max) = (2124.888, 2137.907, 2154.703), stdev = 10.766
[info]   CI (99.9%): [2096.451, 2179.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   936.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (936.000, 936.000, 936.000), stdev = 0.001
[info]   CI (99.9%): [936.000, 936.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2099.543 ±(99.9%) 590.045 MB/sec [Average]
[info]   (min, avg, max) = (2018.939, 2099.543, 2373.221), stdev = 153.233
[info]   CI (99.9%): [1509.498, 2689.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   919.266 ±(99.9%) 262.027 B/op [Average]
[info]   (min, avg, max) = (884.279, 919.266, 1040.644), stdev = 68.048
[info]   CI (99.9%): [657.239, 1181.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.033, 0.046), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 75.27% complete, ETA 00:09:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6096509.821 ops/s
[info] # Warmup Iteration   2: 6525950.186 ops/s
[info] # Warmup Iteration   3: 6532342.312 ops/s
[info] Iteration   1: 6761533.769 ops/s
[info]                  ·gc.alloc.rate:                   893.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6544775.789 ops/s
[info]                  ·gc.alloc.rate:                   865.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6833464.588 ops/s
[info]                  ·gc.alloc.rate:                   903.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6852401.897 ops/s
[info]                  ·gc.alloc.rate:                   905.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6805817.622 ops/s
[info]                  ·gc.alloc.rate:                   899.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6759598.733 ±(99.9%) 480781.150 ops/s [Average]
[info]   (min, avg, max) = (6544775.789, 6759598.733, 6852401.897), stdev = 124857.338
[info]   CI (99.9%): [6278817.583, 7240379.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   893.523 ±(99.9%) 63.599 MB/sec [Average]
[info]   (min, avg, max) = (865.088, 893.523, 905.973), stdev = 16.516
[info]   CI (99.9%): [829.924, 957.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   871.604 ±(99.9%) 707.244 MB/sec [Average]
[info]   (min, avg, max) = (669.755, 871.604, 1007.886), stdev = 183.669
[info]   CI (99.9%): [164.359, 1578.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   203.182 ±(99.9%) 170.178 B/op [Average]
[info]   (min, avg, max) = (154.068, 203.182, 241.418), stdev = 44.195
[info]   CI (99.9%): [33.004, 373.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.012, 0.025), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 75.81% complete, ETA 00:09:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18334.756 ops/s
[info] # Warmup Iteration   2: 181151.626 ops/s
[info] # Warmup Iteration   3: 189510.519 ops/s
[info] Iteration   1: 197364.980 ops/s
[info]                  ·gc.alloc.rate:                   1644.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1631.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13011.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.664 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 192694.429 ops/s
[info]                  ·gc.alloc.rate:                   1605.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13441.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.190 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 193850.869 ops/s
[info]                  ·gc.alloc.rate:                   1615.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13480.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.676 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 195336.424 ops/s
[info]                  ·gc.alloc.rate:                   1627.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13474.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.839 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 195307.007 ops/s
[info]                  ·gc.alloc.rate:                   1627.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10838.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   194910.742 ±(99.9%) 6778.907 ops/s [Average]
[info]   (min, avg, max) = (192694.429, 194910.742, 197364.980), stdev = 1760.461
[info]   CI (99.9%): [188131.835, 201689.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1623.838 ±(99.9%) 56.397 MB/sec [Average]
[info]   (min, avg, max) = (1605.342, 1623.838, 1644.245), stdev = 14.646
[info]   CI (99.9%): [1567.441, 1680.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13112.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13112.002, 13112.002, 13112.002), stdev = 0.001
[info]   CI (99.9%): [13112.002, 13112.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1591.038 ±(99.9%) 532.959 MB/sec [Average]
[info]   (min, avg, max) = (1344.966, 1591.038, 1672.352), stdev = 138.408
[info]   CI (99.9%): [1058.079, 2123.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12849.320 ±(99.9%) 4395.101 B/op [Average]
[info]   (min, avg, max) = (10838.175, 12849.320, 13480.378), stdev = 1141.394
[info]   CI (99.9%): [8454.219, 17244.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.774 ±(99.9%) 1.005 B/op [Average]
[info]   (min, avg, max) = (0.503, 0.774, 1.190), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 76.34% complete, ETA 00:09:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 493102.812 ops/s
[info] # Warmup Iteration   2: 729863.350 ops/s
[info] # Warmup Iteration   3: 741904.918 ops/s
[info] Iteration   1: 744504.105 ops/s
[info]                  ·gc.alloc.rate:                   2876.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5686.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 742170.104 ops/s
[info]                  ·gc.alloc.rate:                   2867.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3045.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6457.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 734662.192 ops/s
[info]                  ·gc.alloc.rate:                   2838.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5816.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 737765.520 ops/s
[info]                  ·gc.alloc.rate:                   2850.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6527.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 748367.012 ops/s
[info]                  ·gc.alloc.rate:                   2891.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5727.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   741493.787 ±(99.9%) 20855.007 ops/s [Average]
[info]   (min, avg, max) = (734662.192, 741493.787, 748367.012), stdev = 5415.979
[info]   CI (99.9%): [720638.780, 762348.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2864.510 ±(99.9%) 80.739 MB/sec [Average]
[info]   (min, avg, max) = (2838.033, 2864.510, 2891.142), stdev = 20.968
[info]   CI (99.9%): [2783.771, 2945.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6080.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6080.001, 6080.001, 6080.001), stdev = 0.001
[info]   CI (99.9%): [6080.001, 6080.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2846.640 ±(99.9%) 725.014 MB/sec [Average]
[info]   (min, avg, max) = (2689.840, 2846.640, 3059.697), stdev = 188.284
[info]   CI (99.9%): [2121.627, 3571.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6042.941 ±(99.9%) 1592.476 B/op [Average]
[info]   (min, avg, max) = (5686.163, 6042.941, 6527.017), stdev = 413.561
[info]   CI (99.9%): [4450.466, 7635.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.187), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.239 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (0.176, 0.239, 0.397), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 76.88% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2549653.562 ops/s
[info] # Warmup Iteration   2: 2919194.778 ops/s
[info] # Warmup Iteration   3: 2957558.492 ops/s
[info] Iteration   1: 2918765.133 ops/s
[info]                  ·gc.alloc.rate:                   1884.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2951900.550 ops/s
[info]                  ·gc.alloc.rate:                   1906.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1076.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2945872.209 ops/s
[info]                  ·gc.alloc.rate:                   1901.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     902.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2949565.740 ops/s
[info]                  ·gc.alloc.rate:                   1904.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1084.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2948395.284 ops/s
[info]                  ·gc.alloc.rate:                   1903.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1087.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   2942899.783 ±(99.9%) 52620.355 ops/s [Average]
[info]   (min, avg, max) = (2918765.133, 2942899.783, 2951900.550), stdev = 13665.339
[info]   CI (99.9%): [2890279.428, 2995520.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1899.943 ±(99.9%) 34.692 MB/sec [Average]
[info]   (min, avg, max) = (1884.116, 1899.943, 1906.396), stdev = 9.009
[info]   CI (99.9%): [1865.251, 1934.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1957.191 ±(99.9%) 579.720 MB/sec [Average]
[info]   (min, avg, max) = (1688.638, 1957.191, 2037.086), stdev = 150.551
[info]   CI (99.9%): [1377.471, 2536.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1046.649 ±(99.9%) 311.393 B/op [Average]
[info]   (min, avg, max) = (902.177, 1046.649, 1087.406), stdev = 80.868
[info]   CI (99.9%): [735.256, 1358.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.047, 0.089), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 77.42% complete, ETA 00:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63150.669 ops/s
[info] # Warmup Iteration   2: 245422.241 ops/s
[info] # Warmup Iteration   3: 248901.317 ops/s
[info] Iteration   1: 252191.444 ops/s
[info]                  ·gc.alloc.rate:                   1813.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1967.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12276.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.169 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 248284.021 ops/s
[info]                  ·gc.alloc.rate:                   1786.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10491.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 254082.011 ops/s
[info]                  ·gc.alloc.rate:                   1827.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12408.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.258 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 254123.228 ops/s
[info]                  ·gc.alloc.rate:                   1827.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10406.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 253945.150 ops/s
[info]                  ·gc.alloc.rate:                   1827.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              11320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12552.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.774 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   252525.171 ±(99.9%) 9644.422 ops/s [Average]
[info]   (min, avg, max) = (248284.021, 252525.171, 254123.228), stdev = 2504.626
[info]   CI (99.9%): [242880.749, 262169.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1816.630 ±(99.9%) 69.451 MB/sec [Average]
[info]   (min, avg, max) = (1786.188, 1816.630, 1827.967), stdev = 18.036
[info]   CI (99.9%): [1747.179, 1886.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11320.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11320.002, 11320.002, 11320.002), stdev = 0.001
[info]   CI (99.9%): [11320.001, 11320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1866.574 ±(99.9%) 703.905 MB/sec [Average]
[info]   (min, avg, max) = (1655.412, 1866.574, 2026.234), stdev = 182.802
[info]   CI (99.9%): [1162.669, 2570.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11627.055 ±(99.9%) 4159.883 B/op [Average]
[info]   (min, avg, max) = (10406.673, 11627.055, 12552.790), stdev = 1080.308
[info]   CI (99.9%): [7467.172, 15786.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.187), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.650 ±(99.9%) 1.372 B/op [Average]
[info]   (min, avg, max) = (0.258, 0.650, 1.169), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 2.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 77.96% complete, ETA 00:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562831.222 ops/s
[info] # Warmup Iteration   2: 795470.598 ops/s
[info] # Warmup Iteration   3: 825678.662 ops/s
[info] Iteration   1: 821199.774 ops/s
[info]                  ·gc.alloc.rate:                   1908.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3829.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 828761.579 ops/s
[info]                  ·gc.alloc.rate:                   1925.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3820.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 830449.338 ops/s
[info]                  ·gc.alloc.rate:                   1929.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3832.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 824035.376 ops/s
[info]                  ·gc.alloc.rate:                   1914.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3230.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 824863.569 ops/s
[info]                  ·gc.alloc.rate:                   1916.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              3656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3881.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   825861.927 ±(99.9%) 14346.039 ops/s [Average]
[info]   (min, avg, max) = (821199.774, 825861.927, 830449.338), stdev = 3725.621
[info]   CI (99.9%): [811515.888, 840207.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1918.758 ±(99.9%) 32.105 MB/sec [Average]
[info]   (min, avg, max) = (1908.482, 1918.758, 1929.098), stdev = 8.338
[info]   CI (99.9%): [1886.654, 1950.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3656.001, 3656.001, 3656.001), stdev = 0.001
[info]   CI (99.9%): [3656.000, 3656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1951.970 ±(99.9%) 562.711 MB/sec [Average]
[info]   (min, avg, max) = (1691.661, 1951.970, 2035.222), stdev = 146.134
[info]   CI (99.9%): [1389.260, 2514.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3719.011 ±(99.9%) 1054.643 B/op [Average]
[info]   (min, avg, max) = (3230.946, 3719.011, 3881.817), stdev = 273.888
[info]   CI (99.9%): [2664.368, 4773.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.167 ±(99.9%) 0.297 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.167, 0.279), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 78.49% complete, ETA 00:08:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 824212.917 ops/s
[info] # Warmup Iteration   2: 1629345.612 ops/s
[info] # Warmup Iteration   3: 1642394.312 ops/s
[info] Iteration   1: 1658004.236 ops/s
[info]                  ·gc.alloc.rate:                   901.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1646751.040 ops/s
[info]                  ·gc.alloc.rate:                   895.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     621.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1656618.271 ops/s
[info]                  ·gc.alloc.rate:                   901.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1659111.245 ops/s
[info]                  ·gc.alloc.rate:                   902.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     933.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1655410.922 ops/s
[info]                  ·gc.alloc.rate:                   900.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1655179.143 ±(99.9%) 18923.115 ops/s [Average]
[info]   (min, avg, max) = (1646751.040, 1655179.143, 1659111.245), stdev = 4914.273
[info]   CI (99.9%): [1636256.028, 1674102.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   900.406 ±(99.9%) 10.766 MB/sec [Average]
[info]   (min, avg, max) = (895.653, 900.406, 902.747), stdev = 2.796
[info]   CI (99.9%): [889.640, 911.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   915.213 ±(99.9%) 570.946 MB/sec [Average]
[info]   (min, avg, max) = (650.167, 915.213, 988.970), stdev = 148.273
[info]   CI (99.9%): [344.267, 1486.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   869.752 ±(99.9%) 535.099 B/op [Average]
[info]   (min, avg, max) = (621.382, 869.752, 940.203), stdev = 138.964
[info]   CI (99.9%): [334.652, 1404.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.059, 0.080), stdev = 0.014
[info]   CI (99.9%): [0.005, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 79.03% complete, ETA 00:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4120886.394 ops/s
[info] # Warmup Iteration   2: 6183489.783 ops/s
[info] # Warmup Iteration   3: 6375064.619 ops/s
[info] Iteration   1: 6267896.181 ops/s
[info]                  ·gc.alloc.rate:               477.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64.231 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6215123.042 ops/s
[info]                  ·gc.alloc.rate:                   473.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6175294.078 ops/s
[info]                  ·gc.alloc.rate:               470.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84.721 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 6196640.826 ops/s
[info]                  ·gc.alloc.rate:                   472.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6085785.097 ops/s
[info]                  ·gc.alloc.rate:               464.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   6188147.845 ±(99.9%) 256891.205 ops/s [Average]
[info]   (min, avg, max) = (6085785.097, 6188147.845, 6267896.181), stdev = 66713.830
[info]   CI (99.9%): [5931256.639, 6445039.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   471.809 ±(99.9%) 19.541 MB/sec [Average]
[info]   (min, avg, max) = (464.019, 471.809, 477.868), stdev = 5.075
[info]   CI (99.9%): [452.268, 491.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.184 ±(99.9%) 765.195 MB/sec [Average]
[info]   (min, avg, max) = (255.785, 450.184, 665.507), stdev = 198.719
[info]   CI (99.9%): [≈ 0, 1215.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   114.461 ±(99.9%) 193.507 B/op [Average]
[info]   (min, avg, max) = (64.231, 114.461, 168.854), stdev = 50.253
[info]   CI (99.9%): [≈ 0, 307.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.363 ±(99.9%) 2.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.363, 1.730), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.438), stdev = 0.194
[info]   CI (99.9%): [≈ 0, 0.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 79.57% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184205.906 ops/s
[info] # Warmup Iteration   2: 491788.406 ops/s
[info] # Warmup Iteration   3: 491978.718 ops/s
[info] Iteration   1: 498211.869 ops/s
[info]                  ·gc.alloc.rate:                   1704.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6218.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 493826.526 ops/s
[info]                  ·gc.alloc.rate:                   1689.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5275.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.464 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 504868.352 ops/s
[info]                  ·gc.alloc.rate:                   1727.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5202.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 502649.229 ops/s
[info]                  ·gc.alloc.rate:                   1719.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5257.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 498620.807 ops/s
[info]                  ·gc.alloc.rate:                   1705.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5322.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   499635.357 ±(99.9%) 16479.880 ops/s [Average]
[info]   (min, avg, max) = (493826.526, 499635.357, 504868.352), stdev = 4279.772
[info]   CI (99.9%): [483155.477, 516115.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1709.297 ±(99.9%) 55.893 MB/sec [Average]
[info]   (min, avg, max) = (1689.641, 1709.297, 1727.071), stdev = 14.515
[info]   CI (99.9%): [1653.404, 1765.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1731.723 ±(99.9%) 511.983 MB/sec [Average]
[info]   (min, avg, max) = (1655.691, 1731.723, 1968.685), stdev = 132.960
[info]   CI (99.9%): [1219.740, 2243.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5455.363 ±(99.9%) 1651.145 B/op [Average]
[info]   (min, avg, max) = (5202.967, 5455.363, 6218.613), stdev = 428.797
[info]   CI (99.9%): [3804.218, 7106.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.289 ±(99.9%) 0.532 B/op [Average]
[info]   (min, avg, max) = (0.131, 0.289, 0.464), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 80.11% complete, ETA 00:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2787830.001 ops/s
[info] # Warmup Iteration   2: 3177094.369 ops/s
[info] # Warmup Iteration   3: 3205302.909 ops/s
[info] Iteration   1: 3223196.888 ops/s
[info]                  ·gc.alloc.rate:                   1524.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     815.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3230034.870 ops/s
[info]                  ·gc.alloc.rate:                   1526.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3223337.045 ops/s
[info]                  ·gc.alloc.rate:                   1523.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3216820.893 ops/s
[info]                  ·gc.alloc.rate:                   1520.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     660.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3225768.739 ops/s
[info]                  ·gc.alloc.rate:                   1525.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     825.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3223831.687 ±(99.9%) 18470.103 ops/s [Average]
[info]   (min, avg, max) = (3216820.893, 3223831.687, 3230034.870), stdev = 4796.627
[info]   CI (99.9%): [3205361.584, 3242301.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1524.243 ±(99.9%) 8.957 MB/sec [Average]
[info]   (min, avg, max) = (1520.685, 1524.243, 1526.885), stdev = 2.326
[info]   CI (99.9%): [1515.286, 1533.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1547.051 ±(99.9%) 709.927 MB/sec [Average]
[info]   (min, avg, max) = (1340.270, 1547.051, 1692.526), stdev = 184.366
[info]   CI (99.9%): [837.123, 2256.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   755.115 ±(99.9%) 345.796 B/op [Average]
[info]   (min, avg, max) = (653.069, 755.115, 825.422), stdev = 89.802
[info]   CI (99.9%): [409.319, 1100.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.041, 0.061), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 80.65% complete, ETA 00:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127290.444 ops/s
[info] # Warmup Iteration   2: 297946.064 ops/s
[info] # Warmup Iteration   3: 298793.223 ops/s
[info] Iteration   1: 303717.903 ops/s
[info]                  ·gc.alloc.rate:                   1617.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8492.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 303644.150 ops/s
[info]                  ·gc.alloc.rate:                   1618.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8565.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 303613.011 ops/s
[info]                  ·gc.alloc.rate:                   1617.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8635.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 307717.529 ops/s
[info]                  ·gc.alloc.rate:                   1639.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6855.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 306857.307 ops/s
[info]                  ·gc.alloc.rate:                   1634.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8635.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   305109.980 ±(99.9%) 7744.466 ops/s [Average]
[info]   (min, avg, max) = (303613.011, 305109.980, 307717.529), stdev = 2011.213
[info]   CI (99.9%): [297365.513, 312854.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1625.510 ±(99.9%) 40.706 MB/sec [Average]
[info]   (min, avg, max) = (1617.415, 1625.510, 1639.243), stdev = 10.571
[info]   CI (99.9%): [1584.805, 1666.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.002), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1596.413 ±(99.9%) 554.814 MB/sec [Average]
[info]   (min, avg, max) = (1340.366, 1596.413, 1683.754), stdev = 144.083
[info]   CI (99.9%): [1041.599, 2151.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8236.736 ±(99.9%) 2982.232 B/op [Average]
[info]   (min, avg, max) = (6855.375, 8236.736, 8635.830), stdev = 774.476
[info]   CI (99.9%): [5254.504, 11218.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.452 ±(99.9%) 0.748 B/op [Average]
[info]   (min, avg, max) = (0.319, 0.452, 0.755), stdev = 0.194
[info]   CI (99.9%): [≈ 0, 1.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 81.18% complete, ETA 00:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226891.144 ops/s
[info] # Warmup Iteration   2: 468663.420 ops/s
[info] # Warmup Iteration   3: 483945.340 ops/s
[info] Iteration   1: 484381.612 ops/s
[info]                  ·gc.alloc.rate:                   1317.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4302.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 485425.154 ops/s
[info]                  ·gc.alloc.rate:                   1320.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4311.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 484031.707 ops/s
[info]                  ·gc.alloc.rate:                   1316.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4343.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 485788.526 ops/s
[info]                  ·gc.alloc.rate:                   1321.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4346.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 478069.587 ops/s
[info]                  ·gc.alloc.rate:                   1300.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3323.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   483539.317 ±(99.9%) 12098.189 ops/s [Average]
[info]   (min, avg, max) = (478069.587, 483539.317, 485788.526), stdev = 3141.861
[info]   CI (99.9%): [471441.128, 495637.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1315.281 ±(99.9%) 33.612 MB/sec [Average]
[info]   (min, avg, max) = (1300.042, 1315.281, 1321.559), stdev = 8.729
[info]   CI (99.9%): [1281.669, 1348.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.001), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1268.563 ±(99.9%) 558.123 MB/sec [Average]
[info]   (min, avg, max) = (1009.550, 1268.563, 1342.154), stdev = 144.943
[info]   CI (99.9%): [710.440, 1826.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4125.650 ±(99.9%) 1727.990 B/op [Average]
[info]   (min, avg, max) = (3323.643, 4125.650, 4346.702), stdev = 448.754
[info]   CI (99.9%): [2397.660, 5853.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 0.413 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.203, 0.337), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 81.72% complete, ETA 00:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2703303.520 ops/s
[info] # Warmup Iteration   2: 2974818.656 ops/s
[info] # Warmup Iteration   3: 3003200.322 ops/s
[info] Iteration   1: 3000886.579 ops/s
[info]                  ·gc.alloc.rate:                   564.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2965974.031 ops/s
[info]                  ·gc.alloc.rate:               557.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.388 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2920579.677 ops/s
[info]                  ·gc.alloc.rate:                   549.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2959227.727 ops/s
[info]                  ·gc.alloc.rate:                   556.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2919216.123 ops/s
[info]                  ·gc.alloc.rate:               549.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 179.390 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2953176.828 ±(99.9%) 131888.149 ops/s [Average]
[info]   (min, avg, max) = (2919216.123, 2953176.828, 3000886.579), stdev = 34250.934
[info]   CI (99.9%): [2821288.678, 3085064.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   555.474 ±(99.9%) 24.925 MB/sec [Average]
[info]   (min, avg, max) = (549.036, 555.474, 564.453), stdev = 6.473
[info]   CI (99.9%): [530.549, 580.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   532.323 ±(99.9%) 702.138 MB/sec [Average]
[info]   (min, avg, max) = (332.411, 532.323, 666.249), stdev = 182.343
[info]   CI (99.9%): [≈ 0, 1234.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   283.434 ±(99.9%) 371.223 B/op [Average]
[info]   (min, avg, max) = (176.388, 283.434, 358.260), stdev = 96.405
[info]   CI (99.9%): [≈ 0, 654.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.356 ±(99.9%) 2.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.636), stdev = 0.716
[info]   CI (99.9%): [≈ 0, 3.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.187 ±(99.9%) 1.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.858), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 82.26% complete, ETA 00:07:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99799.096 ops/s
[info] # Warmup Iteration   2: 333189.539 ops/s
[info] # Warmup Iteration   3: 336143.547 ops/s
[info] Iteration   1: 341006.480 ops/s
[info]                  ·gc.alloc.rate:                   1319.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6013.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.576 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 337932.134 ops/s
[info]                  ·gc.alloc.rate:                   1307.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6108.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 337560.229 ops/s
[info]                  ·gc.alloc.rate:                   1306.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6155.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 341465.317 ops/s
[info]                  ·gc.alloc.rate:                   1321.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6128.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 342786.564 ops/s
[info]                  ·gc.alloc.rate:                   1326.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6141.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   340150.145 ±(99.9%) 8831.527 ops/s [Average]
[info]   (min, avg, max) = (337560.229, 340150.145, 342786.564), stdev = 2293.520
[info]   CI (99.9%): [331318.617, 348981.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1316.035 ±(99.9%) 34.183 MB/sec [Average]
[info]   (min, avg, max) = (1306.227, 1316.035, 1326.212), stdev = 8.877
[info]   CI (99.9%): [1281.852, 1350.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.734 ±(99.9%) 53.319 MB/sec [Average]
[info]   (min, avg, max) = (1303.291, 1320.734, 1337.914), stdev = 13.847
[info]   CI (99.9%): [1267.415, 1374.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6109.790 ±(99.9%) 216.947 B/op [Average]
[info]   (min, avg, max) = (6013.859, 6109.790, 6155.817), stdev = 56.340
[info]   CI (99.9%): [5892.843, 6326.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 0.329 B/op [Average]
[info]   (min, avg, max) = (0.382, 0.424, 0.576), stdev = 0.085
[info]   CI (99.9%): [0.095, 0.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 82.80% complete, ETA 00:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183829.911 ops/s
[info] # Warmup Iteration   2: 665058.436 ops/s
[info] # Warmup Iteration   3: 701958.297 ops/s
[info] Iteration   1: 703870.887 ops/s
[info]                  ·gc.alloc.rate:                   2082.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4467.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 710656.800 ops/s
[info]                  ·gc.alloc.rate:                   2102.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2346.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5196.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 715576.654 ops/s
[info]                  ·gc.alloc.rate:                   2117.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4449.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 703828.927 ops/s
[info]                  ·gc.alloc.rate:                   2083.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4540.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 711385.457 ops/s
[info]                  ·gc.alloc.rate:                   2104.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4504.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   709063.745 ±(99.9%) 19701.909 ops/s [Average]
[info]   (min, avg, max) = (703828.927, 709063.745, 715576.654), stdev = 5116.523
[info]   CI (99.9%): [689361.835, 728765.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2097.982 ±(99.9%) 57.604 MB/sec [Average]
[info]   (min, avg, max) = (2082.530, 2097.982, 2117.426), stdev = 14.960
[info]   CI (99.9%): [2040.378, 2155.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2087.140 ±(99.9%) 561.116 MB/sec [Average]
[info]   (min, avg, max) = (1998.356, 2087.140, 2346.520), stdev = 145.720
[info]   CI (99.9%): [1526.024, 2648.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4631.753 ±(99.9%) 1223.885 B/op [Average]
[info]   (min, avg, max) = (4449.650, 4631.753, 5196.894), stdev = 317.839
[info]   CI (99.9%): [3407.868, 5855.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.212 ±(99.9%) 0.296 B/op [Average]
[info]   (min, avg, max) = (0.093, 0.212, 0.277), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 83.33% complete, ETA 00:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499392.695 ops/s
[info] # Warmup Iteration   2: 1481127.228 ops/s
[info] # Warmup Iteration   3: 1509532.439 ops/s
[info] Iteration   1: 1507436.950 ops/s
[info]                  ·gc.alloc.rate:                   1142.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1363.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1513579.247 ops/s
[info]                  ·gc.alloc.rate:                   1146.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1022.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1496978.684 ops/s
[info]                  ·gc.alloc.rate:                   1133.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1385.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1501317.768 ops/s
[info]                  ·gc.alloc.rate:                   1137.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1043.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1505347.684 ops/s
[info]                  ·gc.alloc.rate:                   1140.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1504932.067 ±(99.9%) 24165.694 ops/s [Average]
[info]   (min, avg, max) = (1496978.684, 1504932.067, 1513579.247), stdev = 6275.754
[info]   CI (99.9%): [1480766.373, 1529097.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1140.028 ±(99.9%) 18.370 MB/sec [Average]
[info]   (min, avg, max) = (1133.973, 1140.028, 1146.547), stdev = 4.771
[info]   CI (99.9%): [1121.658, 1158.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1120.691 ±(99.9%) 675.377 MB/sec [Average]
[info]   (min, avg, max) = (983.412, 1120.691, 1318.507), stdev = 175.393
[info]   CI (99.9%): [445.315, 1796.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1172.053 ±(99.9%) 714.633 B/op [Average]
[info]   (min, avg, max) = (1022.398, 1172.053, 1385.977), stdev = 185.588
[info]   CI (99.9%): [457.420, 1886.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.078, 0.109), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 83.87% complete, ETA 00:06:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5025761.715 ops/s
[info] # Warmup Iteration   2: 5378935.070 ops/s
[info] # Warmup Iteration   3: 5523833.718 ops/s
[info] Iteration   1: 5556942.013 ops/s
[info]                  ·gc.alloc.rate:      169.490 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5533183.439 ops/s
[info]                  ·gc.alloc.rate:               168.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5552348.735 ops/s
[info]                  ·gc.alloc.rate:               169.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5503339.980 ops/s
[info]                  ·gc.alloc.rate:      167.839 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5558135.080 ops/s
[info]                  ·gc.alloc.rate:               169.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.433 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   5540789.849 ±(99.9%) 89391.922 ops/s [Average]
[info]   (min, avg, max) = (5503339.980, 5540789.849, 5558135.080), stdev = 23214.798
[info]   CI (99.9%): [5451397.928, 5630181.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   168.991 ±(99.9%) 2.727 MB/sec [Average]
[info]   (min, avg, max) = (167.839, 168.991, 169.511), stdev = 0.708
[info]   CI (99.9%): [166.265, 171.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   153.487 ±(99.9%) 539.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.487, 255.843), stdev = 140.114
[info]   CI (99.9%): [≈ 0, 693.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.540 ±(99.9%) 153.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.540, 72.759), stdev = 39.747
[info]   CI (99.9%): [≈ 0, 196.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 84.41% complete, ETA 00:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36793.659 ops/s
[info] # Warmup Iteration   2: 219893.508 ops/s
[info] # Warmup Iteration   3: 221568.538 ops/s
[info] Iteration   1: 225258.983 ops/s
[info]                  ·gc.alloc.rate:                   1568.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1633.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11412.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 223638.988 ops/s
[info]                  ·gc.alloc.rate:                   1557.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11591.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.733 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 225746.742 ops/s
[info]                  ·gc.alloc.rate:                   1572.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11580.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.306 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 226583.329 ops/s
[info]                  ·gc.alloc.rate:                   1577.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9291.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 222700.782 ops/s
[info]                  ·gc.alloc.rate:                   1551.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11877.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.030 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   224785.765 ±(99.9%) 6100.841 ops/s [Average]
[info]   (min, avg, max) = (222700.782, 224785.765, 226583.329), stdev = 1584.369
[info]   CI (99.9%): [218684.924, 230886.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1565.434 ±(99.9%) 42.007 MB/sec [Average]
[info]   (min, avg, max) = (1551.208, 1565.434, 1577.866), stdev = 10.909
[info]   CI (99.9%): [1523.427, 1607.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.002, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1592.060 ±(99.9%) 551.936 MB/sec [Average]
[info]   (min, avg, max) = (1337.596, 1592.060, 1681.101), stdev = 143.336
[info]   CI (99.9%): [1040.125, 2143.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11150.677 ±(99.9%) 4054.373 B/op [Average]
[info]   (min, avg, max) = (9291.063, 11150.677, 11877.760), stdev = 1052.908
[info]   CI (99.9%): [7096.304, 15205.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.817 ±(99.9%) 1.464 B/op [Average]
[info]   (min, avg, max) = (0.289, 0.817, 1.306), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 2.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 84.95% complete, ETA 00:05:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467220.318 ops/s
[info] # Warmup Iteration   2: 943636.526 ops/s
[info] # Warmup Iteration   3: 965042.713 ops/s
[info] Iteration   1: 971643.747 ops/s
[info]                  ·gc.alloc.rate:                   1659.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2687.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 973315.394 ops/s
[info]                  ·gc.alloc.rate:                   1662.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2698.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 968161.431 ops/s
[info]                  ·gc.alloc.rate:                   1653.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2727.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 981091.820 ops/s
[info]                  ·gc.alloc.rate:                   1676.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2703.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 973218.755 ops/s
[info]                  ·gc.alloc.rate:                   1662.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2734.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   973486.229 ±(99.9%) 18234.126 ops/s [Average]
[info]   (min, avg, max) = (968161.431, 973486.229, 981091.820), stdev = 4735.345
[info]   CI (99.9%): [955252.104, 991720.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1662.787 ±(99.9%) 32.094 MB/sec [Average]
[info]   (min, avg, max) = (1653.548, 1662.787, 1676.235), stdev = 8.335
[info]   CI (99.9%): [1630.693, 1694.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2688.000, 2688.000, 2688.000), stdev = 0.001
[info]   CI (99.9%): [2688.000, 2688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1676.609 ±(99.9%) 48.667 MB/sec [Average]
[info]   (min, avg, max) = (1659.380, 1676.609, 1690.690), stdev = 12.639
[info]   CI (99.9%): [1627.942, 1725.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2710.366 ±(99.9%) 75.356 B/op [Average]
[info]   (min, avg, max) = (2687.907, 2710.366, 2734.151), stdev = 19.570
[info]   CI (99.9%): [2635.010, 2785.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.155 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.155, 0.202), stdev = 0.039
[info]   CI (99.9%): [0.006, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 85.48% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 936892.570 ops/s
[info] # Warmup Iteration   2: 2437573.052 ops/s
[info] # Warmup Iteration   3: 2396828.941 ops/s
[info] Iteration   1: 2365074.663 ops/s
[info]                  ·gc.alloc.rate:                   1045.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2364638.575 ops/s
[info]                  ·gc.alloc.rate:                   1046.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2403156.856 ops/s
[info]                  ·gc.alloc.rate:                   1062.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2401186.244 ops/s
[info]                  ·gc.alloc.rate:                   1061.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     867.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2428070.162 ops/s
[info]                  ·gc.alloc.rate:                   1073.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2392425.300 ±(99.9%) 105148.600 ops/s [Average]
[info]   (min, avg, max) = (2364638.575, 2392425.300, 2428070.162), stdev = 27306.758
[info]   CI (99.9%): [2287276.700, 2497573.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1058.070 ±(99.9%) 46.175 MB/sec [Average]
[info]   (min, avg, max) = (1045.848, 1058.070, 1073.777), stdev = 11.991
[info]   CI (99.9%): [1011.895, 1104.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1053.989 ±(99.9%) 579.645 MB/sec [Average]
[info]   (min, avg, max) = (979.199, 1053.989, 1322.963), stdev = 150.532
[info]   CI (99.9%): [474.344, 1633.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   693.185 ±(99.9%) 374.653 B/op [Average]
[info]   (min, avg, max) = (646.333, 693.185, 867.145), stdev = 97.296
[info]   CI (99.9%): [318.532, 1067.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.044, 0.055), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 86.02% complete, ETA 00:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4616642.606 ops/s
[info] # Warmup Iteration   2: 6388399.555 ops/s
[info] # Warmup Iteration   3: 6495972.924 ops/s
[info] Iteration   1: 6503905.088 ops/s
[info]                  ·gc.alloc.rate:                   528.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          589.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6449844.525 ops/s
[info]                  ·gc.alloc.rate:                   524.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6579236.125 ops/s
[info]                  ·gc.alloc.rate:                   535.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6615188.584 ops/s
[info]                  ·gc.alloc.rate:                   538.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6625839.942 ops/s
[info]                  ·gc.alloc.rate:               538.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79.117 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6554802.853 ±(99.9%) 291331.958 ops/s [Average]
[info]   (min, avg, max) = (6449844.525, 6554802.853, 6625839.942), stdev = 75657.984
[info]   CI (99.9%): [6263470.894, 6846134.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   533.112 ±(99.9%) 23.542 MB/sec [Average]
[info]   (min, avg, max) = (524.669, 533.112, 538.872), stdev = 6.114
[info]   CI (99.9%): [509.570, 556.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   517.614 ±(99.9%) 659.166 MB/sec [Average]
[info]   (min, avg, max) = (333.076, 517.614, 666.164), stdev = 171.183
[info]   CI (99.9%): [≈ 0, 1176.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   124.181 ±(99.9%) 156.626 B/op [Average]
[info]   (min, avg, max) = (79.117, 124.181, 159.358), stdev = 40.675
[info]   CI (99.9%): [≈ 0, 280.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 2.668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.584), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 3.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.383), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 86.56% complete, ETA 00:05:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4964812.564 ops/s
[info] # Warmup Iteration   2: 6915797.818 ops/s
[info] # Warmup Iteration   3: 7170612.625 ops/s
[info] Iteration   1: 7192412.620 ops/s
[info]                  ·gc.alloc.rate:                   219.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7182019.732 ops/s
[info]                  ·gc.alloc.rate:               219.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.056 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7203655.371 ops/s
[info]                  ·gc.alloc.rate:                   219.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7176426.016 ops/s
[info]                  ·gc.alloc.rate:      218.872 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7112272.386 ops/s
[info]                  ·gc.alloc.rate:                   216.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   7173357.225 ±(99.9%) 137453.693 ops/s [Average]
[info]   (min, avg, max) = (7112272.386, 7173357.225, 7203655.371), stdev = 35696.288
[info]   CI (99.9%): [7035903.532, 7310810.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   218.817 ±(99.9%) 4.312 MB/sec [Average]
[info]   (min, avg, max) = (216.912, 218.817, 219.780), stdev = 1.120
[info]   CI (99.9%): [214.505, 223.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.689 ±(99.9%) 440.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.689, 255.898), stdev = 114.425
[info]   CI (99.9%): [≈ 0, 645.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   44.905 ±(99.9%) 96.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.905, 56.606), stdev = 25.104
[info]   CI (99.9%): [≈ 0, 141.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 87.10% complete, ETA 00:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56829.696 ops/s
[info] # Warmup Iteration   2: 308850.631 ops/s
[info] # Warmup Iteration   3: 315275.122 ops/s
[info] Iteration   1: 313414.469 ops/s
[info]                  ·gc.alloc.rate:                   1609.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              8080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8220.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.627 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 313269.405 ops/s
[info]                  ·gc.alloc.rate:                   1608.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              8080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8294.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.628 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 313666.438 ops/s
[info]                  ·gc.alloc.rate:                   1610.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              8080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6674.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 317382.753 ops/s
[info]                  ·gc.alloc.rate:                   1629.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              8080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8301.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 315056.616 ops/s
[info]                  ·gc.alloc.rate:                   1617.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              8080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8405.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   314557.936 ±(99.9%) 6666.973 ops/s [Average]
[info]   (min, avg, max) = (313269.405, 314557.936, 317382.753), stdev = 1731.392
[info]   CI (99.9%): [307890.963, 321224.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1614.912 ±(99.9%) 34.172 MB/sec [Average]
[info]   (min, avg, max) = (1608.312, 1614.912, 1629.395), stdev = 8.874
[info]   CI (99.9%): [1580.740, 1649.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8080.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8080.001, 8080.001, 8080.001), stdev = 0.001
[info]   CI (99.9%): [8080.001, 8080.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1595.031 ±(99.9%) 574.039 MB/sec [Average]
[info]   (min, avg, max) = (1330.335, 1595.031, 1682.683), stdev = 149.076
[info]   CI (99.9%): [1020.992, 2169.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7979.514 ±(99.9%) 2819.557 B/op [Average]
[info]   (min, avg, max) = (6674.996, 7979.514, 8405.832), stdev = 732.230
[info]   CI (99.9%): [5159.957, 10799.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.459 ±(99.9%) 0.676 B/op [Average]
[info]   (min, avg, max) = (0.209, 0.459, 0.628), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 1.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 87.63% complete, ETA 00:04:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354973.386 ops/s
[info] # Warmup Iteration   2: 501615.420 ops/s
[info] # Warmup Iteration   3: 503783.602 ops/s
[info] Iteration   1: 508035.410 ops/s
[info]                  ·gc.alloc.rate:                   1981.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6209.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 507376.524 ops/s
[info]                  ·gc.alloc.rate:                   1978.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6254.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 507289.795 ops/s
[info]                  ·gc.alloc.rate:                   1977.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6285.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 501796.855 ops/s
[info]                  ·gc.alloc.rate:                   1956.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5310.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 505012.218 ops/s
[info]                  ·gc.alloc.rate:                   1968.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6346.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.454 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   505902.160 ±(99.9%) 9872.896 ops/s [Average]
[info]   (min, avg, max) = (501796.855, 505902.160, 508035.410), stdev = 2563.960
[info]   CI (99.9%): [496029.264, 515775.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1972.693 ±(99.9%) 39.690 MB/sec [Average]
[info]   (min, avg, max) = (1956.335, 1972.693, 1981.566), stdev = 10.307
[info]   CI (99.9%): [1933.003, 2012.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6136.001, 6136.001, 6136.001), stdev = 0.001
[info]   CI (99.9%): [6136.001, 6136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1955.606 ±(99.9%) 566.417 MB/sec [Average]
[info]   (min, avg, max) = (1693.257, 1955.606, 2036.365), stdev = 147.097
[info]   CI (99.9%): [1389.188, 2522.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6081.345 ±(99.9%) 1669.473 B/op [Average]
[info]   (min, avg, max) = (5310.864, 6081.345, 6346.237), stdev = 433.557
[info]   CI (99.9%): [4411.872, 7750.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.285 ±(99.9%) 0.486 B/op [Average]
[info]   (min, avg, max) = (0.131, 0.285, 0.454), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 88.17% complete, ETA 00:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472821.360 ops/s
[info] # Warmup Iteration   2: 925251.956 ops/s
[info] # Warmup Iteration   3: 914443.573 ops/s
[info] Iteration   1: 932987.744 ops/s
[info]                  ·gc.alloc.rate:                   1953.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3352.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 925897.173 ops/s
[info]                  ·gc.alloc.rate:                   1939.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3406.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 936216.807 ops/s
[info]                  ·gc.alloc.rate:                   1960.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2826.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 932489.128 ops/s
[info]                  ·gc.alloc.rate:                   1952.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3419.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 931163.669 ops/s
[info]                  ·gc.alloc.rate:                   1950.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3435.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   931750.904 ±(99.9%) 14488.614 ops/s [Average]
[info]   (min, avg, max) = (925897.173, 931750.904, 936216.807), stdev = 3762.647
[info]   CI (99.9%): [917262.290, 946239.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1951.424 ±(99.9%) 30.244 MB/sec [Average]
[info]   (min, avg, max) = (1939.018, 1951.424, 1960.622), stdev = 7.854
[info]   CI (99.9%): [1921.181, 1981.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3296.000, 3296.000, 3296.000), stdev = 0.001
[info]   CI (99.9%): [3296.000, 3296.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1946.270 ±(99.9%) 574.562 MB/sec [Average]
[info]   (min, avg, max) = (1681.348, 1946.270, 2033.260), stdev = 149.212
[info]   CI (99.9%): [1371.707, 2520.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3287.854 ±(99.9%) 1000.336 B/op [Average]
[info]   (min, avg, max) = (2826.513, 3287.854, 3435.311), stdev = 259.784
[info]   CI (99.9%): [2287.518, 4288.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.141 ±(99.9%) 0.272 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.141, 0.212), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 88.71% complete, ETA 00:04:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 774214.205 ops/s
[info] # Warmup Iteration   2: 812471.425 ops/s
[info] # Warmup Iteration   3: 826911.230 ops/s
[info] Iteration   1: 824750.771 ops/s
[info]                  ·gc.alloc.rate:                   1387.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2558.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 814533.528 ops/s
[info]                  ·gc.alloc.rate:                   1370.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2595.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 816990.481 ops/s
[info]                  ·gc.alloc.rate:                   1374.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2594.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 814261.662 ops/s
[info]                  ·gc.alloc.rate:                   1370.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3262.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 822728.266 ops/s
[info]                  ·gc.alloc.rate:                   1384.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2589.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   818652.941 ±(99.9%) 18548.004 ops/s [Average]
[info]   (min, avg, max) = (814261.662, 818652.941, 824750.771), stdev = 4816.858
[info]   CI (99.9%): [800104.938, 837200.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1377.666 ±(99.9%) 30.625 MB/sec [Average]
[info]   (min, avg, max) = (1370.357, 1377.666, 1387.590), stdev = 7.953
[info]   CI (99.9%): [1347.041, 1408.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2648.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2648.001, 2648.001, 2648.001), stdev = 0.001
[info]   CI (99.9%): [2648.000, 2648.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1414.794 ±(99.9%) 589.431 MB/sec [Average]
[info]   (min, avg, max) = (1340.588, 1414.794, 1688.477), stdev = 153.073
[info]   CI (99.9%): [825.363, 2004.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2720.133 ±(99.9%) 1169.439 B/op [Average]
[info]   (min, avg, max) = (2558.305, 2720.133, 3262.717), stdev = 303.700
[info]   CI (99.9%): [1550.694, 3889.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (0.119, 0.144, 0.201), stdev = 0.036
[info]   CI (99.9%): [0.005, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 89.25% complete, ETA 00:04:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169850.016 ops/s
[info] # Warmup Iteration   2: 254823.473 ops/s
[info] # Warmup Iteration   3: 263435.741 ops/s
[info] Iteration   1: 257940.049 ops/s
[info]                  ·gc.alloc.rate:                   1316.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8096.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 262194.361 ops/s
[info]                  ·gc.alloc.rate:                   1338.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7997.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.875 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 262278.441 ops/s
[info]                  ·gc.alloc.rate:                   1339.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8026.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.500 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 262082.814 ops/s
[info]                  ·gc.alloc.rate:                   1337.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8064.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 261015.223 ops/s
[info]                  ·gc.alloc.rate:                   1332.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8125.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   261102.178 ±(99.9%) 7085.793 ops/s [Average]
[info]   (min, avg, max) = (257940.049, 261102.178, 262278.441), stdev = 1840.158
[info]   CI (99.9%): [254016.385, 268187.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1332.709 ±(99.9%) 35.679 MB/sec [Average]
[info]   (min, avg, max) = (1316.860, 1332.709, 1339.044), stdev = 9.266
[info]   CI (99.9%): [1297.030, 1368.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8032.002, 8032.002, 8032.002), stdev = 0.001
[info]   CI (99.9%): [8032.001, 8032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1337.699 ±(99.9%) 31.004 MB/sec [Average]
[info]   (min, avg, max) = (1327.494, 1337.699, 1347.618), stdev = 8.052
[info]   CI (99.9%): [1306.695, 1368.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8062.250 ±(99.9%) 199.316 B/op [Average]
[info]   (min, avg, max) = (7997.468, 8062.250, 8125.756), stdev = 51.762
[info]   CI (99.9%): [7862.934, 8261.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.551 ±(99.9%) 0.869 B/op [Average]
[info]   (min, avg, max) = (0.254, 0.551, 0.875), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 89.78% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388115.390 ops/s
[info] # Warmup Iteration   2: 722682.134 ops/s
[info] # Warmup Iteration   3: 730459.547 ops/s
[info] Iteration   1: 731577.301 ops/s
[info]                  ·gc.alloc.rate:                   739.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1410.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 736363.238 ops/s
[info]                  ·gc.alloc.rate:                   744.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1401.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 733924.984 ops/s
[info]                  ·gc.alloc.rate:                   742.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1408.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 731498.969 ops/s
[info]                  ·gc.alloc.rate:                   739.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2124.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 735265.138 ops/s
[info]                  ·gc.alloc.rate:                   743.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1414.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   733725.926 ±(99.9%) 8379.053 ops/s [Average]
[info]   (min, avg, max) = (731498.969, 733725.926, 736363.238), stdev = 2176.013
[info]   CI (99.9%): [725346.873, 742104.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   742.187 ±(99.9%) 8.602 MB/sec [Average]
[info]   (min, avg, max) = (739.937, 742.187, 744.931), stdev = 2.234
[info]   CI (99.9%): [733.584, 750.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   723.361 ±(99.9%) 568.698 MB/sec [Average]
[info]   (min, avg, max) = (655.777, 723.361, 987.530), stdev = 147.689
[info]   CI (99.9%): [154.663, 1292.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1552.058 ±(99.9%) 1232.800 B/op [Average]
[info]   (min, avg, max) = (1401.714, 1552.058, 2124.707), stdev = 320.154
[info]   CI (99.9%): [319.258, 2784.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.143, 0.179), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 90.32% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 776826.089 ops/s
[info] # Warmup Iteration   2: 1004569.547 ops/s
[info] # Warmup Iteration   3: 949599.823 ops/s
[info] Iteration   1: 953333.466 ops/s
[info]                  ·gc.alloc.rate:                   804.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1099.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 943355.623 ops/s
[info]                  ·gc.alloc.rate:                   795.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1667.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 950933.855 ops/s
[info]                  ·gc.alloc.rate:                   802.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1103.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 945777.289 ops/s
[info]                  ·gc.alloc.rate:                   798.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1667.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 954035.370 ops/s
[info]                  ·gc.alloc.rate:                   805.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1104.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   949487.121 ±(99.9%) 18156.521 ops/s [Average]
[info]   (min, avg, max) = (943355.623, 949487.121, 954035.370), stdev = 4715.191
[info]   CI (99.9%): [931330.599, 967643.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   801.286 ±(99.9%) 15.718 MB/sec [Average]
[info]   (min, avg, max) = (795.995, 801.286, 805.302), stdev = 4.082
[info]   CI (99.9%): [785.567, 817.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   800.815 ±(99.9%) 702.227 MB/sec [Average]
[info]   (min, avg, max) = (666.234, 800.815, 1001.912), stdev = 182.366
[info]   CI (99.9%): [98.588, 1503.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1328.422 ±(99.9%) 1190.753 B/op [Average]
[info]   (min, avg, max) = (1099.741, 1328.422, 1667.236), stdev = 309.235
[info]   CI (99.9%): [137.670, 2519.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.131 ±(99.9%) 0.196 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.131, 0.206), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 90.86% complete, ETA 00:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 609723.968 ops/s
[info] # Warmup Iteration   2: 758624.084 ops/s
[info] # Warmup Iteration   3: 760797.840 ops/s
[info] Iteration   1: 760197.484 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 759729.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 759962.462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 760069.681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 760143.090 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   760020.529 ±(99.9%) 711.512 ops/s [Average]
[info]   (min, avg, max) = (759729.928, 760020.529, 760197.484), stdev = 184.778
[info]   CI (99.9%): [759309.017, 760732.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 91.40% complete, ETA 00:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 580648.230 ops/s
[info] # Warmup Iteration   2: 753711.089 ops/s
[info] # Warmup Iteration   3: 763892.141 ops/s
[info] Iteration   1: 764893.847 ops/s
[info]                  ·gc.alloc.rate:                   816.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1359.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 760285.975 ops/s
[info]                  ·gc.alloc.rate:                   811.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2054.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 759696.292 ops/s
[info]                  ·gc.alloc.rate:                   810.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1372.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 766008.742 ops/s
[info]                  ·gc.alloc.rate:                   817.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2045.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 773774.945 ops/s
[info]                  ·gc.alloc.rate:                   825.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1354.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   764931.960 ±(99.9%) 21812.860 ops/s [Average]
[info]   (min, avg, max) = (759696.292, 764931.960, 773774.945), stdev = 5664.731
[info]   CI (99.9%): [743119.100, 786744.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   816.572 ±(99.9%) 23.197 MB/sec [Average]
[info]   (min, avg, max) = (810.927, 816.572, 825.940), stdev = 6.024
[info]   CI (99.9%): [793.375, 839.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.000, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   795.580 ±(99.9%) 698.422 MB/sec [Average]
[info]   (min, avg, max) = (660.779, 795.580, 995.762), stdev = 181.378
[info]   CI (99.9%): [97.157, 1494.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1637.451 ±(99.9%) 1450.637 B/op [Average]
[info]   (min, avg, max) = (1354.945, 1637.451, 2054.733), stdev = 376.726
[info]   CI (99.9%): [186.814, 3088.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.154 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (0.086, 0.154, 0.259), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 91.94% complete, ETA 00:03:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 712631.849 ops/s
[info] # Warmup Iteration   2: 989358.340 ops/s
[info] # Warmup Iteration   3: 1022972.912 ops/s
[info] Iteration   1: 1004260.334 ops/s
[info]                  ·gc.alloc.rate:                   1230.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2081.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1022377.299 ops/s
[info]                  ·gc.alloc.rate:                   1252.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2051.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1015974.105 ops/s
[info]                  ·gc.alloc.rate:                   1245.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1553.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1008965.369 ops/s
[info]                  ·gc.alloc.rate:                   1236.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2092.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1001911.900 ops/s
[info]                  ·gc.alloc.rate:                   1227.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2115.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1010697.801 ±(99.9%) 32553.568 ops/s [Average]
[info]   (min, avg, max) = (1001911.900, 1010697.801, 1022377.299), stdev = 8454.058
[info]   CI (99.9%): [978144.233, 1043251.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1238.406 ±(99.9%) 40.595 MB/sec [Average]
[info]   (min, avg, max) = (1227.390, 1238.406, 1252.842), stdev = 10.542
[info]   CI (99.9%): [1197.810, 1279.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1928.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1928.000, 1928.000, 1928.000), stdev = 0.001
[info]   CI (99.9%): [1928.000, 1928.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1270.645 ±(99.9%) 576.950 MB/sec [Average]
[info]   (min, avg, max) = (1002.943, 1270.645, 1346.992), stdev = 149.832
[info]   CI (99.9%): [693.694, 1847.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1978.896 ±(99.9%) 921.010 B/op [Average]
[info]   (min, avg, max) = (1553.073, 1978.896, 2115.873), stdev = 239.183
[info]   CI (99.9%): [1057.886, 2899.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (0.065, 0.097, 0.160), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.47% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 584684.600 ops/s
[info] # Warmup Iteration   2: 1221974.123 ops/s
[info] # Warmup Iteration   3: 1227685.117 ops/s
[info] Iteration   1: 1241610.967 ops/s
[info]                  ·gc.alloc.rate:                   713.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1245.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.687 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1220268.990 ops/s
[info]                  ·gc.alloc.rate:                   701.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     845.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1246686.367 ops/s
[info]                  ·gc.alloc.rate:                   716.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     828.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1246382.744 ops/s
[info]                  ·gc.alloc.rate:                   715.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1245292.779 ops/s
[info]                  ·gc.alloc.rate:               715.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 833.490 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1240048.369 ±(99.9%) 43281.508 ops/s [Average]
[info]   (min, avg, max) = (1220268.990, 1240048.369, 1246686.367), stdev = 11240.070
[info]   CI (99.9%): [1196766.862, 1283329.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   712.283 ±(99.9%) 24.641 MB/sec [Average]
[info]   (min, avg, max) = (701.030, 712.283, 716.092), stdev = 6.399
[info]   CI (99.9%): [687.642, 736.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   722.315 ±(99.9%) 560.162 MB/sec [Average]
[info]   (min, avg, max) = (655.600, 722.315, 982.529), stdev = 145.472
[info]   CI (99.9%): [162.153, 1282.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   916.681 ±(99.9%) 708.271 B/op [Average]
[info]   (min, avg, max) = (828.342, 916.681, 1245.505), stdev = 183.936
[info]   CI (99.9%): [208.410, 1624.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.457 ±(99.9%) 3.580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 2.119), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 4.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.580 ±(99.9%) 4.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.580, 2.687), stdev = 1.179
[info]   CI (99.9%): [≈ 0, 5.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.01% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1847451.410 ops/s
[info] # Warmup Iteration   2: 1971785.089 ops/s
[info] # Warmup Iteration   3: 1934828.174 ops/s
[info] Iteration   1: 1909826.215 ops/s
[info]                  ·gc.alloc.rate:                   310.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     421.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1994050.859 ops/s
[info]                  ·gc.alloc.rate:               324.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201.905 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1992686.839 ops/s
[info]                  ·gc.alloc.rate:                   324.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1991676.488 ops/s
[info]                  ·gc.alloc.rate:                   323.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1996252.392 ops/s
[info]                  ·gc.alloc.rate:               324.694 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 264.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1976898.558 ±(99.9%) 144529.093 ops/s [Average]
[info]   (min, avg, max) = (1909826.215, 1976898.558, 1996252.392), stdev = 37533.746
[info]   CI (99.9%): [1832369.465, 2121427.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   321.547 ±(99.9%) 23.519 MB/sec [Average]
[info]   (min, avg, max) = (310.632, 321.547, 324.694), stdev = 6.108
[info]   CI (99.9%): [298.028, 345.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   354.784 ±(99.9%) 362.760 MB/sec [Average]
[info]   (min, avg, max) = (255.798, 354.784, 511.588), stdev = 94.208
[info]   CI (99.9%): [≈ 0, 717.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   283.636 ±(99.9%) 315.030 B/op [Average]
[info]   (min, avg, max) = (201.905, 283.636, 421.613), stdev = 81.812
[info]   CI (99.9%): [≈ 0, 598.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.308 ±(99.9%) 2.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 1.490), stdev = 0.661
[info]   CI (99.9%): [≈ 0, 2.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.244 ±(99.9%) 2.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.244, 1.177), stdev = 0.522
[info]   CI (99.9%): [≈ 0, 2.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.55% complete, ETA 00:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 965188.342 ops/s
[info] # Warmup Iteration   2: 1453273.877 ops/s
[info] # Warmup Iteration   3: 1491642.415 ops/s
[info] Iteration   1: 1486053.670 ops/s
[info]                  ·gc.alloc.rate:                   966.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1051.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1482532.187 ops/s
[info]                  ·gc.alloc.rate:                   964.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1491231.126 ops/s
[info]                  ·gc.alloc.rate:               970.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 701.650 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 1489429.516 ops/s
[info]                  ·gc.alloc.rate:                   969.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1488122.861 ops/s
[info]                  ·gc.alloc.rate:                   968.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1487473.872 ±(99.9%) 12886.707 ops/s [Average]
[info]   (min, avg, max) = (1482532.187, 1487473.872, 1491231.126), stdev = 3346.637
[info]   CI (99.9%): [1474587.165, 1500360.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   967.869 ±(99.9%) 8.082 MB/sec [Average]
[info]   (min, avg, max) = (964.816, 967.869, 970.235), stdev = 2.099
[info]   CI (99.9%): [959.787, 975.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1024.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.000, 1024.000, 1024.000), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931.157 ±(99.9%) 573.521 MB/sec [Average]
[info]   (min, avg, max) = (664.809, 931.157, 1003.036), stdev = 148.942
[info]   CI (99.9%): [357.636, 1504.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   985.332 ±(99.9%) 610.762 B/op [Average]
[info]   (min, avg, max) = (701.650, 985.332, 1060.666), stdev = 158.613
[info]   CI (99.9%): [374.570, 1596.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.111), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 94.09% complete, ETA 00:02:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1493564.497 ops/s
[info] # Warmup Iteration   2: 2804939.979 ops/s
[info] # Warmup Iteration   3: 2871652.559 ops/s
[info] Iteration   1: 2815254.048 ops/s
[info]                  ·gc.alloc.rate:                   1159.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     550.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2827394.530 ops/s
[info]                  ·gc.alloc.rate:                   1164.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     733.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2874407.685 ops/s
[info]                  ·gc.alloc.rate:                   1183.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     725.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2879075.577 ops/s
[info]                  ·gc.alloc.rate:                   1185.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2878408.714 ops/s
[info]                  ·gc.alloc.rate:                   1185.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2854908.111 ±(99.9%) 119401.321 ops/s [Average]
[info]   (min, avg, max) = (2815254.048, 2854908.111, 2879075.577), stdev = 31008.144
[info]   CI (99.9%): [2735506.790, 2974309.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1175.532 ±(99.9%) 48.600 MB/sec [Average]
[info]   (min, avg, max) = (1159.519, 1175.532, 1185.393), stdev = 12.621
[info]   CI (99.9%): [1126.933, 1224.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1193.159 ±(99.9%) 707.625 MB/sec [Average]
[info]   (min, avg, max) = (985.243, 1193.159, 1338.276), stdev = 183.768
[info]   CI (99.9%): [485.534, 1900.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   657.547 ±(99.9%) 384.120 B/op [Average]
[info]   (min, avg, max) = (546.060, 657.547, 733.645), stdev = 99.755
[info]   CI (99.9%): [273.426, 1041.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.044, 0.058), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.62% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2356334.020 ops/s
[info] # Warmup Iteration   2: 3004371.603 ops/s
[info] # Warmup Iteration   3: 2972984.186 ops/s
[info] Iteration   1: 2973486.343 ops/s
[info]                  ·gc.alloc.rate:                   589.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3025301.966 ops/s
[info]                  ·gc.alloc.rate:                   599.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3026196.604 ops/s
[info]                  ·gc.alloc.rate:               599.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.228 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 3013252.011 ops/s
[info]                  ·gc.alloc.rate:                   597.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3028861.866 ops/s
[info]                  ·gc.alloc.rate:                   600.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3013419.758 ±(99.9%) 89015.677 ops/s [Average]
[info]   (min, avg, max) = (2973486.343, 3013419.758, 3028861.866), stdev = 23117.089
[info]   CI (99.9%): [2924404.081, 3102435.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   597.387 ±(99.9%) 17.732 MB/sec [Average]
[info]   (min, avg, max) = (589.421, 597.387, 600.482), stdev = 4.605
[info]   CI (99.9%): [579.655, 615.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   599.811 ±(99.9%) 574.158 MB/sec [Average]
[info]   (min, avg, max) = (333.080, 599.811, 666.855), stdev = 149.107
[info]   CI (99.9%): [25.652, 1173.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   313.429 ±(99.9%) 301.966 B/op [Average]
[info]   (min, avg, max) = (173.228, 313.429, 352.946), stdev = 78.420
[info]   CI (99.9%): [11.464, 615.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 2.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.605), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 3.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.187 ±(99.9%) 1.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.849), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 95.16% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2529636.379 ops/s
[info] # Warmup Iteration   2: 3185984.461 ops/s
[info] # Warmup Iteration   3: 3196459.724 ops/s
[info] Iteration   1: 3196056.835 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3195988.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3192313.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3197617.537 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3185378.311 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3193470.856 ±(99.9%) 18967.091 ops/s [Average]
[info]   (min, avg, max) = (3185378.311, 3193470.856, 3197617.537), stdev = 4925.693
[info]   CI (99.9%): [3174503.765, 3212437.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 95.70% complete, ETA 00:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2159155.970 ops/s
[info] # Warmup Iteration   2: 2821063.730 ops/s
[info] # Warmup Iteration   3: 2838672.345 ops/s
[info] Iteration   1: 2839415.456 ops/s
[info]                  ·gc.alloc.rate:                   1197.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2823252.125 ops/s
[info]                  ·gc.alloc.rate:                   1191.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     555.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2814699.885 ops/s
[info]                  ·gc.alloc.rate:                   1187.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2820171.599 ops/s
[info]                  ·gc.alloc.rate:                   1190.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     560.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2841982.327 ops/s
[info]                  ·gc.alloc.rate:                   1199.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     743.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2827904.278 ±(99.9%) 46626.652 ops/s [Average]
[info]   (min, avg, max) = (2814699.885, 2827904.278, 2841982.327), stdev = 12108.794
[info]   CI (99.9%): [2781277.626, 2874530.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1193.191 ±(99.9%) 18.982 MB/sec [Average]
[info]   (min, avg, max) = (1187.969, 1193.191, 1199.000), stdev = 4.930
[info]   CI (99.9%): [1174.209, 1212.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1200.353 ±(99.9%) 704.789 MB/sec [Average]
[info]   (min, avg, max) = (995.913, 1200.353, 1342.947), stdev = 183.031
[info]   CI (99.9%): [495.564, 1905.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   667.831 ±(99.9%) 387.471 B/op [Average]
[info]   (min, avg, max) = (555.186, 667.831, 745.742), stdev = 100.625
[info]   CI (99.9%): [280.361, 1055.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.042, 0.058), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6004.090 ops/s
[info] # Warmup Iteration   2: 9730.149 ops/s
[info] # Warmup Iteration   3: 11260.547 ops/s
[info] Iteration   1: 11974.967 ops/s
[info]                  ·gc.alloc.rate:                   1689.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217174.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.862 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12030.130 ops/s
[info]                  ·gc.alloc.rate:                   1696.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217897.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.446 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12059.876 ops/s
[info]                  ·gc.alloc.rate:                   1700.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              221973.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218467.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11808.772 ops/s
[info]                  ·gc.alloc.rate:                   1666.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224257.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11893.971 ops/s
[info]                  ·gc.alloc.rate:                   1677.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223448.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.282 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11953.543 ±(99.9%) 395.224 ops/s [Average]
[info]   (min, avg, max) = (11808.772, 11953.543, 12059.876), stdev = 102.638
[info]   CI (99.9%): [11558.319, 12348.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1686.283 ±(99.9%) 54.446 MB/sec [Average]
[info]   (min, avg, max) = (1666.430, 1686.283, 1700.997), stdev = 14.140
[info]   CI (99.9%): [1631.837, 1740.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221985.127 ±(99.9%) 80.983 B/op [Average]
[info]   (min, avg, max) = (221968.039, 221985.127, 222008.037), stdev = 21.031
[info]   CI (99.9%): [221904.145, 222066.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1672.944 ±(99.9%) 54.714 MB/sec [Average]
[info]   (min, avg, max) = (1653.071, 1672.944, 1688.703), stdev = 14.209
[info]   CI (99.9%): [1618.230, 1727.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   220249.116 ±(99.9%) 12837.048 B/op [Average]
[info]   (min, avg, max) = (217174.422, 220249.116, 224257.300), stdev = 3333.741
[info]   CI (99.9%): [207412.068, 233086.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.129, 0.166), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17.005 ±(99.9%) 25.268 B/op [Average]
[info]   (min, avg, max) = (5.446, 17.005, 21.862), stdev = 6.562
[info]   CI (99.9%): [≈ 0, 42.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.77% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6045.797 ops/s
[info] # Warmup Iteration   2: 14807.951 ops/s
[info] # Warmup Iteration   3: 15375.057 ops/s
[info] Iteration   1: 15352.716 ops/s
[info]                  ·gc.alloc.rate:                   242.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26222.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15292.794 ops/s
[info]                  ·gc.alloc.rate:               241.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          24885.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26325.805 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15280.435 ops/s
[info]                  ·gc.alloc.rate:                   241.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              24896.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26346.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15253.994 ops/s
[info]                  ·gc.alloc.rate:               241.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          24896.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26393.103 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15079.823 ops/s
[info]                  ·gc.alloc.rate:                   238.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              24891.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33754.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15251.952 ±(99.9%) 395.819 ops/s [Average]
[info]   (min, avg, max) = (15079.823, 15251.952, 15352.716), stdev = 102.793
[info]   CI (99.9%): [14856.134, 15647.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   241.222 ±(99.9%) 6.220 MB/sec [Average]
[info]   (min, avg, max) = (238.506, 241.222, 242.797), stdev = 1.615
[info]   CI (99.9%): [235.002, 247.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24889.925 ±(99.9%) 26.794 B/op [Average]
[info]   (min, avg, max) = (24880.028, 24889.925, 24896.028), stdev = 6.958
[info]   CI (99.9%): [24863.130, 24916.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   269.343 ±(99.9%) 116.415 MB/sec [Average]
[info]   (min, avg, max) = (255.791, 269.343, 323.425), stdev = 30.233
[info]   CI (99.9%): [152.928, 385.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27808.541 ±(99.9%) 12801.121 B/op [Average]
[info]   (min, avg, max) = (26222.936, 27808.541, 33754.386), stdev = 3324.410
[info]   CI (99.9%): [15007.420, 40609.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.574 ±(99.9%) 4.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.842), stdev = 1.268
[info]   CI (99.9%): [≈ 0, 5.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59.847 ±(99.9%) 509.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.847, 296.616), stdev = 132.361
[info]   CI (99.9%): [≈ 0, 569.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 97.31% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18438.248 ops/s
[info] # Warmup Iteration   2: 22137.998 ops/s
[info] # Warmup Iteration   3: 35949.481 ops/s
[info] Iteration   1: 35935.009 ops/s
[info]                  ·gc.alloc.rate:                   399.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22407.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 36110.228 ops/s
[info]                  ·gc.alloc.rate:               401.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11149.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 36034.268 ops/s
[info]                  ·gc.alloc.rate:                   400.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14532.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 36087.817 ops/s
[info]                  ·gc.alloc.rate:               400.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14510.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 35990.720 ops/s
[info]                  ·gc.alloc.rate:                   399.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29072.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.731 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36031.608 ±(99.9%) 274.659 ops/s [Average]
[info]   (min, avg, max) = (35935.009, 36031.608, 36110.228), stdev = 71.328
[info]   CI (99.9%): [35756.949, 36306.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   400.375 ±(99.9%) 3.085 MB/sec [Average]
[info]   (min, avg, max) = (399.292, 400.375, 401.264), stdev = 0.801
[info]   CI (99.9%): [397.291, 403.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17488.019 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (17488.012, 17488.019, 17488.047), stdev = 0.016
[info]   CI (99.9%): [17487.959, 17488.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   419.551 ±(99.9%) 640.062 MB/sec [Average]
[info]   (min, avg, max) = (255.826, 419.551, 664.835), stdev = 166.222
[info]   CI (99.9%): [≈ 0, 1059.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18334.707 ±(99.9%) 28072.844 B/op [Average]
[info]   (min, avg, max) = (11149.504, 18334.707, 29072.895), stdev = 7290.428
[info]   CI (99.9%): [≈ 0, 46407.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.361 ±(99.9%) 2.906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.361, 1.710), stdev = 0.755
[info]   CI (99.9%): [≈ 0, 3.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.756 ±(99.9%) 126.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.756, 74.679), stdev = 32.959
[info]   CI (99.9%): [≈ 0, 142.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.483
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 97.85% complete, ETA 00:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 963.587 ops/s
[info] # Warmup Iteration   2: 3101.957 ops/s
[info] # Warmup Iteration   3: 2928.777 ops/s
[info] Iteration   1: 3488.566 ops/s
[info]                  ·gc.alloc.rate:                   1076.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              485619.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441039.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3633.522 ops/s
[info]                  ·gc.alloc.rate:                   1121.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              485608.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     426786.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3620.046 ops/s
[info]                  ·gc.alloc.rate:               1117.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          485608.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 575109.621 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3639.337 ops/s
[info]                  ·gc.alloc.rate:                   1122.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              485608.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     431673.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3636.129 ops/s
[info]                  ·gc.alloc.rate:               1122.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          485608.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1002.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 434047.613 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3603.520 ±(99.9%) 249.059 ops/s [Average]
[info]   (min, avg, max) = (3488.566, 3603.520, 3639.337), stdev = 64.680
[info]   CI (99.9%): [3354.461, 3852.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1111.965 ±(99.9%) 77.014 MB/sec [Average]
[info]   (min, avg, max) = (1076.401, 1111.965, 1122.919), stdev = 20.000
[info]   CI (99.9%): [1034.951, 1188.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   485610.336 ±(99.9%) 19.072 B/op [Average]
[info]   (min, avg, max) = (485608.119, 485610.336, 485619.196), stdev = 4.953
[info]   CI (99.9%): [485591.264, 485629.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1057.451 ±(99.9%) 573.254 MB/sec [Average]
[info]   (min, avg, max) = (977.586, 1057.451, 1323.151), stdev = 148.872
[info]   CI (99.9%): [484.198, 1630.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   461731.196 ±(99.9%) 244855.466 B/op [Average]
[info]   (min, avg, max) = (426786.298, 461731.196, 575109.621), stdev = 63588.187
[info]   CI (99.9%): [216875.730, 706586.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.920 ±(99.9%) 60.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.920, 37.567), stdev = 15.675
[info]   CI (99.9%): [≈ 0, 73.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.39% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26457.520 ops/s
[info] # Warmup Iteration   2: 57195.268 ops/s
[info] # Warmup Iteration   3: 57764.953 ops/s
[info] Iteration   1: 58354.558 ops/s
[info]                  ·gc.alloc.rate:                   745.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17463.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 58640.006 ops/s
[info]                  ·gc.alloc.rate:                   749.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17377.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 58068.254 ops/s
[info]                  ·gc.alloc.rate:                   741.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26376.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 58170.356 ops/s
[info]                  ·gc.alloc.rate:               742.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17609.343 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 58151.561 ops/s
[info]                  ·gc.alloc.rate:                   742.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17686.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   58276.947 ±(99.9%) 879.077 ops/s [Average]
[info]   (min, avg, max) = (58068.254, 58276.947, 58640.006), stdev = 228.293
[info]   CI (99.9%): [57397.870, 59156.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   744.324 ±(99.9%) 11.647 MB/sec [Average]
[info]   (min, avg, max) = (741.633, 744.324, 749.197), stdev = 3.025
[info]   CI (99.9%): [732.678, 755.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.009 ±(99.9%) 0.181 B/op [Average]
[info]   (min, avg, max) = (20099.939, 20100.009, 20100.065), stdev = 0.047
[info]   CI (99.9%): [20099.828, 20100.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   714.548 ±(99.9%) 556.884 MB/sec [Average]
[info]   (min, avg, max) = (647.457, 714.548, 973.216), stdev = 144.621
[info]   CI (99.9%): [157.663, 1271.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19302.624 ±(99.9%) 15234.039 B/op [Average]
[info]   (min, avg, max) = (17377.342, 19302.624, 26376.432), stdev = 3956.232
[info]   CI (99.9%): [4068.584, 34536.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.348 ±(99.9%) 3.929 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.348, 2.254), stdev = 1.020
[info]   CI (99.9%): [≈ 0, 5.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 98.92% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58300.728 ops/s
[info] # Warmup Iteration   2: 78198.400 ops/s
[info] # Warmup Iteration   3: 78492.640 ops/s
[info] Iteration   1: 81013.760 ops/s
[info]                  ·gc.alloc.rate:                   531.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11433.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 81312.443 ops/s
[info]                  ·gc.alloc.rate:               533.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6440.536 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 79195.943 ops/s
[info]                  ·gc.alloc.rate:               519.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13211.782 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 81261.500 ops/s
[info]                  ·gc.alloc.rate:                   532.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12875.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 81318.194 ops/s
[info]                  ·gc.alloc.rate:               533.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6433.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   80820.368 ±(99.9%) 3529.554 ops/s [Average]
[info]   (min, avg, max) = (79195.943, 80820.368, 81318.194), stdev = 916.614
[info]   CI (99.9%): [77290.814, 84349.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   529.989 ±(99.9%) 23.004 MB/sec [Average]
[info]   (min, avg, max) = (519.406, 529.989, 533.255), stdev = 5.974
[info]   CI (99.9%): [506.985, 552.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.700 ±(99.9%) 658.173 MB/sec [Average]
[info]   (min, avg, max) = (332.405, 516.700, 664.950), stdev = 170.926
[info]   CI (99.9%): [≈ 0, 1174.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10079.029 ±(99.9%) 13058.180 B/op [Average]
[info]   (min, avg, max) = (6433.456, 10079.029, 13211.782), stdev = 3391.168
[info]   CI (99.9%): [≈ 0, 23137.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 3.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.770), stdev = 0.781
[info]   CI (99.9%): [≈ 0, 3.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.280 ±(99.9%) 58.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.280, 34.384), stdev = 15.177
[info]   CI (99.9%): [≈ 0, 65.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.46% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62968.570 ops/s
[info] # Warmup Iteration   2: 85242.108 ops/s
[info] # Warmup Iteration   3: 85774.427 ops/s
[info] Iteration   1: 85253.981 ops/s
[info]                  ·gc.alloc.rate:      10.405 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 85799.725 ops/s
[info]                  ·gc.alloc.rate:      10.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 85839.661 ops/s
[info]                  ·gc.alloc.rate:      10.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 85717.824 ops/s
[info]                  ·gc.alloc.rate:      10.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 85814.700 ops/s
[info]                  ·gc.alloc.rate:      10.469 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   85685.178 ±(99.9%) 944.700 ops/s [Average]
[info]   (min, avg, max) = (85253.981, 85685.178, 85839.661), stdev = 245.336
[info]   CI (99.9%): [84740.478, 86629.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.454 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (10.405, 10.454, 10.472), stdev = 0.028
[info]   CI (99.9%): [10.346, 10.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.005, 192.005, 192.005), stdev = 0.001
[info]   CI (99.9%): [192.005, 192.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:39:27
[info] Benchmark                                                                               Mode  Cnt         Score        Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    821072.109 ±  16063.977   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      2162.186 ±     42.013  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4144.001 ±      0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      2156.401 ±    676.807  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4132.469 ±   1267.360    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.112 ±      0.134  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.216 ±      0.261    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        32.000               counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        26.000                   ms
[info] AdtBenchmark.readJacksonScala                                                          thrpt    5   1631942.100 ±  50375.472   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                           thrpt    5      1161.412 ±     35.753  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      thrpt    5      1120.000 ±      0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  thrpt    5      1186.578 ±    686.020  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5      1143.935 ±    650.479    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.075 ±      0.044  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.072 ±      0.042    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                thrpt    5        18.000               counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                 thrpt    5        17.000                   ms
[info] AdtBenchmark.readJsoniterScala                                                         thrpt    5   4008374.193 ±  33762.801   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                          thrpt    5       264.898 ±      2.212  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       104.000 ±      0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5       220.665 ±    493.390  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5        86.676 ±    193.655    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.303 ±      2.534  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.119 ±      0.993    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                               thrpt    5         4.000               counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                thrpt    5         7.000                   ms
[info] AdtBenchmark.readPlayJson                                                              thrpt    5    174110.195 ±   2948.286   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                               thrpt    5      1456.926 ±     24.721  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                          thrpt    5     13168.003 ±      0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5      1456.965 ±    717.077  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5     13167.654 ±   6449.006    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.104 ±      0.113  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.941 ±      1.024    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                    thrpt    5        22.000               counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                     thrpt    5        29.000                   ms
[info] AdtBenchmark.writeJacksonScala                                                         thrpt    5   2114364.881 ±  70450.904   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                          thrpt    5       881.321 ±     29.303  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     thrpt    5       656.000 ±      0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5       917.987 ±    561.099  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       682.654 ±    401.670    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.104 ±      0.098  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.077 ±      0.072    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                               thrpt    5        14.000               counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                thrpt    5        13.000                   ms
[info] AdtBenchmark.writeJsoniterScala                                                        thrpt    5  16342784.117 ± 484401.132   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                         thrpt    5       830.828 ±     24.511  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5        80.000 ±      0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5       800.831 ±    702.344  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5        77.180 ±     69.138    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±      0.122  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.009 ±      0.012    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                              thrpt    5        12.000               counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                               thrpt    5        10.000                   ms
[info] AdtBenchmark.writePlayJson                                                             thrpt    5    299379.749 ±   6444.633   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                              thrpt    5       980.206 ±     21.441  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                         thrpt    5      5152.001 ±      0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5       984.038 ±     26.320  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      5172.322 ±    201.151    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.087 ±      0.105  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.460 ±      0.553    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                   thrpt    5        15.000               counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                    thrpt    5        19.000                   ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1664422.308 ±  50896.583   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2572.349 ±     78.563  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2432.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2570.319 ±    682.967  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      2431.096 ±    707.510    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.117 ±      0.231  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.110 ±      0.220    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        38.000               counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.readJacksonScala                                                      thrpt    5   2620869.177 ±  90570.837   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1838.604 ±     63.255  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1104.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5      1871.273 ±    704.525  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1123.919 ±    435.609    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.112 ±      0.166  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.068 ±      0.102    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                            thrpt    5        28.000               counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                             thrpt    5        23.000                   ms
[info] AnyRefsBenchmark.readJsoniterScala                                                     thrpt    5  10741249.289 ± 198937.323   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1364.974 ±     25.472  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       200.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5      1346.179 ±     20.734  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       197.249 ±      4.417    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.083 ±      0.057  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.012 ±      0.008    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        20.000               counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        15.000                   ms
[info] AnyRefsBenchmark.readPlayJson                                                          thrpt    5    616224.710 ±  17800.016   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1629.107 ±     47.196  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5      4160.001 ±      0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1662.169 ±     74.470  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4244.709 ±    255.694    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.104 ±      0.098  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.266 ±      0.252    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000               counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                 thrpt    5        26.000                   ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   2106851.830 ±  51334.124   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2099.133 ±     50.447  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1568.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2157.792 ±    702.549  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1611.787 ±    521.091    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.100 ±      0.105  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.075 ±      0.077    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        32.000               counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        26.000                   ms
[info] AnyRefsBenchmark.writeJacksonScala                                                     thrpt    5   5859340.606 ± 184696.826   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1608.513 ±     50.649  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       432.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1596.185 ±    597.597  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       428.561 ±    154.318    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.108 ±      0.174  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.029 ±      0.047    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        24.000               counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        22.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                    thrpt    5  19252033.616 ± 384574.344   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       587.291 ±     11.604  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       599.881 ±    574.159  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        49.021 ±     46.823    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.377 ±      2.761  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.031 ±      0.228    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5         9.000               counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5         8.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                            thrpt    5  28650401.445 ± 115248.195   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             thrpt    5        ≈ 10⁻⁴               MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        thrpt    5        ≈ 10⁻⁵                 B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  thrpt    5           ≈ 0               counts
[info] AnyRefsBenchmark.writePlayJson                                                         thrpt    5   1136848.064 ±  24252.804   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1704.922 ±     36.595  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      2360.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1732.269 ±    583.363  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      2398.093 ±    820.356    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.075 ±      0.134  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.104 ±      0.188    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                               thrpt    5        26.000               counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                thrpt    5        29.000                   ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                      thrpt    5      7372.308 ±    183.915   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1240.695 ±     31.187  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    264808.059 ±      0.007    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1270.226 ±    568.051  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    271180.893 ± 123594.279    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±      0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        16.877 ±     25.179    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                            thrpt    5        19.000               counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                             thrpt    5        18.000                   ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                               thrpt    5     24947.127 ±    711.213   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1072.536 ±     29.761  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     67642.961 ±     59.068    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1058.826 ±    569.673  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     66778.108 ±  35868.045    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.046 ±      0.105  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         2.889 ±      6.566    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        16.000               counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        13.000                   ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                              thrpt    5     30779.940 ±    308.482   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       558.715 ±      5.669  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     28568.015 ±      0.011    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       533.197 ±    703.488  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     27275.027 ±  36115.258    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.335 ±      2.618  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5        17.203 ±    134.472    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         8.000               counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         8.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                              thrpt    5     13530.340 ±    211.865   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1433.957 ±     21.603  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5    166760.035 ±      0.394    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1462.741 ±    686.772  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    170110.890 ±  79928.231    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.071 ±      0.185  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         8.226 ±     21.383    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        22.000               counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        20.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                             thrpt    5     14352.908 ±    512.043   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5      1437.412 ±     51.780  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5    157576.033 ±      0.019    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5      1412.250 ±    579.680  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5    154817.950 ±  63232.140    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.079 ±      0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         8.665 ±     18.898    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5        21.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        17.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5     14757.741 ±    242.591   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5      1380.928 ±     22.433  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5    147248.031 ±      0.018    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space             thrpt    5      1411.028 ±    591.027  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm        thrpt    5    150428.954 ±  61501.690    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space         thrpt    5         0.058 ±      0.105  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm    thrpt    5         6.221 ±     11.179    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5        21.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                            thrpt    5        17.000                   ms
[info] ArrayOfBooleansBenchmark.readCirce                                                     thrpt    5     45647.689 ±    940.971   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1746.579 ±     36.187  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     60216.010 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1749.778 ±    598.843  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     60317.279 ±  20056.686    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.100 ±      0.132  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.450 ±      4.621    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                           thrpt    5        26.000               counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                   ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                              thrpt    5    102029.213 ±   7390.146   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5       232.876 ±     16.897  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      3592.004 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       270.077 ±    122.790  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4165.043 ±   1823.035    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.432 ±      3.633  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         6.610 ±     55.543    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                    thrpt    5         5.000               counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                     thrpt    5        11.000                   ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                             thrpt    5    213307.187 ±   7926.737   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       290.582 ±     10.767  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2144.002 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       286.717 ±    163.052  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2117.326 ±   1262.187    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.333 ±      2.739  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.490 ±     20.460    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         5.000               counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         9.000                   ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                  thrpt    5     13239.183 ±    191.358   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      4037.571 ±     58.714  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    479960.515 ±      4.149    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      4009.321 ±    573.283  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    476559.933 ±  62328.420    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.117 ±      0.209  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        13.858 ±     24.882    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                        thrpt    5        59.000               counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                         thrpt    5        50.000                   ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                    thrpt    5     44677.010 ±   1290.150   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1106.071 ±     32.198  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     38960.010 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1066.380 ±    573.367  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     37552.921 ±  19789.662    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.058 ±      0.067  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.055 ±      2.395    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                          thrpt    5        16.000               counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                           thrpt    5        14.000                   ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                             thrpt    5    108725.840 ±   1996.517   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5       777.218 ±     14.360  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     11248.004 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       789.870 ±    698.132  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     11422.395 ±   9901.426    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±      0.166  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.025 ±      2.410    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        12.000               counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        10.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                            thrpt    5    274078.263 ±   2365.581   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       985.041 ±      8.812  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      5656.002 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       935.490 ±    568.377  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      5370.683 ±   3243.812    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±      0.098  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.359 ±      0.566    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        14.000               counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        12.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    316969.969 ±    548.617   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0               counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                 thrpt    5     52346.464 ±    709.300   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       517.528 ±      7.022  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     15560.011 ±      0.026    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       511.198 ±    650.768  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     15365.881 ±  19519.561    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.442 ±      3.538  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5        13.255 ±    106.168    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                       thrpt    5         8.000               counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                        thrpt    5        10.000                   ms
[info] ArrayOfBytesBenchmark.readCirce                                                        thrpt    5     21369.572 ±    851.716   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1990.161 ±     78.800  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    146567.711 ±      1.651    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1955.706 ±    559.030  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    144078.633 ±  43636.743    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.158 ±      0.134  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        11.666 ±     10.172    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                              thrpt    5        29.000               counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                               thrpt    5        26.000                   ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                 thrpt    5     53183.501 ±    524.482   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       123.824 ±      1.280  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5      3664.009 ±      0.003    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       102.316 ±    539.482  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      3035.858 ±  16007.213    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.991 ±      8.534  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        29.434 ±    253.437    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                       thrpt    5         2.000               counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                        thrpt    5         5.000                   ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                thrpt    5    119769.111 ±   2114.697   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       163.162 ±      2.878  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      2144.004 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       153.491 ±    539.542  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      2022.334 ±   7108.821    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.012 ±      0.108  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.165 ±      1.419    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         3.000               counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         5.000                   ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                     thrpt    5      9772.019 ±    167.116   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      3376.569 ±     55.438  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    543721.605 ±      8.924    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      3390.965 ±    888.554  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    545952.806 ± 136234.582    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.187 ±      0.150  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        30.162 ±     23.872    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                           thrpt    5        50.000               counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                            thrpt    5        51.000                   ms
[info] ArrayOfBytesBenchmark.writeCirce                                                       thrpt    5     30536.210 ±   3545.112   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1330.221 ±    156.063  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     68554.042 ±     86.338    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1337.106 ±     33.902  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     68966.125 ±   9133.800    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±      0.146  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.663 ±      7.666    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                             thrpt    5        20.000               counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                              thrpt    5        17.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                               thrpt    5    225559.112 ±  18185.654   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       538.873 ±     43.490  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      3760.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       533.066 ±    702.431  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3726.977 ±   4992.371    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.348 ±      2.597  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         2.414 ±     17.998    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000               counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         7.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    248412.176 ±   1454.280   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                    thrpt    5      4355.963 ±    160.848   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1729.849 ±     64.034  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    624976.101 ±      0.013    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1741.909 ±    560.022  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    629366.171 ± 202535.598    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±      0.091  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        27.063 ±     32.770    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                          thrpt    5        26.000               counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                           thrpt    5        24.000                   ms
[info] ArrayOfDoublesBenchmark.readCirce                                                      thrpt    5      2777.559 ±     46.926   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1408.444 ±     24.009  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    797976.158 ±      0.022    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1405.555 ±    579.417  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    796542.574 ± 338172.832    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.112 ±      0.091  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        63.665 ±     51.447    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                            thrpt    5        21.000               counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                             thrpt    5        18.000                   ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                               thrpt    5      5865.219 ±    299.099   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       881.114 ±     44.780  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5    236424.075 ±      0.011    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       921.620 ±    569.130  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5    247558.553 ± 158476.674    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.079 ±      0.143  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        21.322 ±     39.390    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                     thrpt    5        14.000               counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                      thrpt    5        13.000                   ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                              thrpt    5      7468.440 ±    131.767   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       552.683 ±      9.810  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5    116448.060 ±      0.009    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       532.985 ±    702.670  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    112232.743 ± 147234.206    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.350 ±      2.706  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5        73.716 ±    569.322    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         8.000               counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         8.000                   ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                   thrpt    5      3629.848 ±     59.729   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1583.569 ±     30.599  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    686591.504 ±   4885.333    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1600.294 ±    557.175  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    693840.402 ± 241409.867    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.096 ±      0.251  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        41.469 ±    108.366    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                         thrpt    5        24.000               counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                          thrpt    5        23.000                   ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                     thrpt    5      5978.037 ±     30.743   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5       631.042 ±      3.078  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5    166096.073 ±      0.009    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5       661.592 ±      2.675  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    174137.332 ±    845.604    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.397 ±      3.027  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       104.388 ±    795.316    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                           thrpt    5        10.000               counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                            thrpt    5        10.000                   ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                              thrpt    5      6859.293 ±     63.585   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       354.579 ±      3.282  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     81355.741 ±      2.489    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       349.842 ±    367.937  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     80299.836 ±  85198.779    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.431 ±      3.577  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5        98.801 ±    820.250    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         6.000               counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        11.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                             thrpt    5      7582.247 ±    174.069   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       331.715 ±      7.385  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5     68848.059 ±      0.010    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       353.210 ±    364.732  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     73389.602 ±  77573.727    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.347 ±      2.749  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5        72.015 ±    571.311    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         9.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5      7624.210 ±    227.769   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5       262.760 ±      7.851  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5     54240.057 ±      0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space             thrpt    5       220.084 ±    490.962  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm        thrpt    5     45479.283 ± 101383.974    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space         thrpt    5         0.331 ±      2.782  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm    thrpt    5        68.250 ±    573.762    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5         4.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                            thrpt    5         8.000                   ms
[info] ArrayOfFloatsBenchmark.readCirce                                                       thrpt    5      3980.902 ±    126.846   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1477.521 ±     47.043  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    584088.110 ±      0.011    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1474.856 ±    728.994  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    583276.663 ± 296999.353    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.127 ±      0.341  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        50.019 ±    134.888    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                             thrpt    5        22.000               counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                              thrpt    5        20.000                   ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                thrpt    5     10255.807 ±    612.527   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       915.967 ±     54.999  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    140547.334 ±     60.412    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       856.724 ±    693.283  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    131729.225 ± 111762.074    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.046 ±      0.105  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         7.026 ±     15.952    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        13.000               counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        12.000                   ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                               thrpt    5     19332.762 ±    553.144   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       101.221 ±      2.893  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      8240.024 ±      0.017    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       102.323 ±    539.518  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      8307.484 ±  43802.979    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.429 ±      3.662  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        34.879 ±    297.504    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         2.000               counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         4.000                   ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                    thrpt    5      4575.944 ±    136.341   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      2021.156 ±     58.228  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    695110.665 ±   3982.844    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      2014.653 ±     66.789  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    692884.828 ±  20489.430    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.046 ±      0.119  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        15.769 ±     40.720    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                          thrpt    5        30.000               counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                           thrpt    5        29.000                   ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                      thrpt    5      9178.214 ±   1596.122   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5       635.266 ±     70.562  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    109178.487 ±  27781.948    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5       661.618 ±      3.505  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    113617.292 ±  18398.504    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.381 ±      2.999  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        66.279 ±    521.271    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                            thrpt    5        10.000               counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                             thrpt    5        11.000                   ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                               thrpt    5     11046.645 ±    562.148   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       386.226 ±     19.683  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     55021.866 ±      0.389    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       364.429 ±    486.531  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     51935.483 ±  69276.223    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.436 ±      3.573  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        61.972 ±    508.096    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5         9.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                              thrpt    5     13131.066 ±    211.567   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       388.213 ±      6.252  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     46528.036 ±      0.019    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       368.782 ±    307.492  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     44224.315 ±  37558.644    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.343 ±      2.697  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5        41.189 ±    324.320    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         8.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5     13298.965 ±    172.981   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5       310.916 ±      4.099  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5     36792.035 ±      0.021    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              thrpt    5       286.711 ±    715.288  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         thrpt    5     33925.721 ±  84734.223    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          thrpt    5         0.342 ±      2.702  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     thrpt    5        40.402 ±    319.350    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5         5.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             thrpt    5         8.000                   ms
[info] ArrayOfIntsBenchmark.readCirce                                                         thrpt    5     16074.706 ±    226.285   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2118.294 ±     30.358  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    207384.048 ±      0.094    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2092.765 ±    588.873  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    204914.020 ±  59659.471    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.142 ±      0.347  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        13.864 ±     33.943    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                               thrpt    5        31.000               counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                thrpt    5        28.000                   ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                  thrpt    5     38841.904 ±   1311.324   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       279.049 ±      9.026  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     11305.153 ±      9.828    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       284.360 ±    150.411  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     11521.015 ±   6105.738    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.428 ±      3.633  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        17.384 ±    147.478    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         5.000               counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        11.000                   ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                 thrpt    5     82681.241 ±   2243.426   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       432.962 ±     11.808  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      8240.005 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       384.262 ±    620.925  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      7317.240 ±  11878.094    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.338 ±      2.621  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         6.494 ±     50.461    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000               counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         7.000                   ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                      thrpt    5      9333.576 ±    145.635   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3397.319 ±     52.646  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    572858.221 ±     12.819    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      3458.254 ±    524.135  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    583175.945 ±  93226.739    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.121 ±      0.164  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        20.343 ±     27.462    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                            thrpt    5        51.000               counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                             thrpt    5        46.000                   ms
[info] ArrayOfIntsBenchmark.writeCirce                                                        thrpt    5     24149.203 ±   5817.962   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1508.580 ±    365.346  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     98311.581 ±    125.009    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1473.204 ±    685.204  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     96197.213 ±  46669.309    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.121 ±      0.143  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         7.798 ±      7.945    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                              thrpt    5        22.000               counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                               thrpt    5        18.000                   ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                 thrpt    5    100365.349 ±   1874.636   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       809.316 ±     15.522  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     12692.321 ±      0.048    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       789.163 ±    692.787  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     12384.732 ±  11054.330    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±      0.088  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.241 ±      1.391    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000               counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                thrpt    5    115127.533 ±   3652.549   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       490.470 ±     15.178  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      6704.004 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       517.034 ±    658.808  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      7071.512 ±   9046.527    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.357 ±      2.671  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         4.921 ±     36.941    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    140801.392 ±   5923.177   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5         0.003 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0               counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                     thrpt    5      3609.320 ±    126.496   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1578.350 ±     55.182  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    688196.484 ±      1.167    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1604.613 ±    574.255  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    699629.313 ± 249096.361    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.054 ±      0.156  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        23.569 ±     67.590    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                           thrpt    5        24.000               counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                            thrpt    5        22.000                   ms
[info] ArrayOfLongsBenchmark.readCirce                                                        thrpt    5     14337.896 ±    472.441   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      2104.544 ±     69.169  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    231011.209 ±     26.557    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      2092.214 ±    567.821  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    229648.934 ±  61090.401    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.146 ±      0.283  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        15.978 ±     31.102    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                              thrpt    5        31.000               counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                               thrpt    5        28.000                   ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                 thrpt    5     30980.728 ±   1868.876   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       421.887 ±     25.010  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     21429.579 ±     47.916    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       429.531 ±    573.406  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     21800.628 ±  28669.019    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.434 ±      3.492  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        22.484 ±    181.147    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                       thrpt    5         7.000               counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        11.000                   ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                thrpt    5     53786.001 ±   2311.061   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       559.405 ±     23.950  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     16368.008 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       533.094 ±    703.102  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     15579.658 ±  20333.274    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.357 ±      2.676  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        10.378 ±     77.795    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                   ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                     thrpt    5      8301.379 ±    107.668   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      3013.686 ±     27.880  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    571346.744 ±   2224.031    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2979.172 ±    566.250  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    564835.946 ± 110202.409    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±      0.134  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        17.358 ±     25.344    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                           thrpt    5        44.000               counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                            thrpt    5        42.000                   ms
[info] ArrayOfLongsBenchmark.writeCirce                                                       thrpt    5     20891.748 ±   3831.444   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1730.751 ±    319.415  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5    130348.538 ±    107.522    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1745.893 ±    537.656  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    131702.281 ±  45082.623    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.155 ±      0.073  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        11.638 ±      4.300    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                             thrpt    5        26.000               counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                              thrpt    5        24.000                   ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                thrpt    5     56400.735 ±   2261.366   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       703.076 ±     28.489  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     19616.245 ±      0.235    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       722.432 ±    575.180  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     20147.385 ±  15748.241    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.067 ±      0.119  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.859 ±      3.304    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        11.000               counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        11.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                               thrpt    5     69758.421 ±   1508.770   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       465.275 ±      9.984  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     10496.006 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       450.370 ±    629.440  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     10158.238 ±  14195.797    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.356 ±      2.753  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         7.966 ±     61.547    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000               counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         8.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     75498.692 ±    515.813   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.006 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                    thrpt    5      3142.125 ±     60.546   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1461.719 ±     28.203  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    732136.390 ±      1.532    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1467.479 ±    705.938  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    734910.016 ± 348614.913    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±      0.230  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        33.348 ±    114.595    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                          thrpt    5        22.000               counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                           thrpt    5        20.000                   ms
[info] ArrayOfShortsBenchmark.readCirce                                                       thrpt    5     17360.504 ±    206.659   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2401.229 ±     28.324  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    217677.581 ±     19.154    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2367.806 ±     43.126  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    214648.706 ±   4058.352    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.142 ±      0.143  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        12.830 ±     12.973    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                             thrpt    5        35.000               counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                              thrpt    5        31.000                   ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                thrpt    5     45141.412 ±   1634.934   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       178.075 ±      6.373  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      6208.010 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       153.507 ±    539.597  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      5366.325 ±  18865.135    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.010 ±      0.061  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.362 ±      2.116    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                      thrpt    5         3.000               counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                       thrpt    5         8.000                   ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                               thrpt    5     93526.809 ±    818.059   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       248.187 ±      2.255  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4176.005 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       220.197 ±    491.335  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3705.176 ±   8263.104    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.325 ±      2.733  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         5.464 ±     45.926    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         4.000               counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         8.000                   ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                    thrpt    5      9293.442 ±    287.228   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3323.492 ±    100.688  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    562784.048 ±      0.008    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      3322.233 ±    562.799  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    562457.465 ±  81126.334    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.100 ±      0.143  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        16.893 ±     24.083    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                          thrpt    5        49.000               counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                           thrpt    5        46.000                   ms
[info] ArrayOfShortsBenchmark.writeCirce                                                      thrpt    5     24642.917 ±   4879.665   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1570.702 ±    312.665  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    100309.760 ±    117.605    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1542.587 ±    685.591  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5     98459.661 ±  37635.946    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.108 ±      0.313  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         6.910 ±     19.812    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                            thrpt    5        23.000               counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                             thrpt    5        20.000                   ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                               thrpt    5    114404.260 ±   4908.264   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       873.257 ±     37.215  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     12011.366 ±      0.041    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       922.250 ±    568.847  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     12679.087 ±   7663.948    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.092 ±      0.146  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.262 ±      2.044    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        14.000               counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        12.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                              thrpt    5    123795.367 ±   7365.621   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       497.747 ±     29.692  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      6328.004 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       517.614 ±    659.294  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      6584.952 ±   8398.200    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.365 ±      2.656  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         4.745 ±     34.757    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         8.000               counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         8.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    144692.039 ±  13264.403   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.003 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0               counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                   thrpt    5      3701.356 ±     90.305   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1745.820 ±     42.433  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    742259.579 ±      1.451    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1741.667 ±    528.424  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    740609.789 ± 231458.974    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.025 ±      0.088  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        10.605 ±     37.014    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                         thrpt    5        26.000               counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                          thrpt    5        25.000                   ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                        thrpt    5     17996.197 ±    763.573   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1888.743 ±     80.682  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    165168.613 ±     27.521    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1886.619 ±    708.038  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    164945.366 ±  59699.929    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.083 ±      0.150  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         7.306 ±     13.356    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                              thrpt    5        28.000               counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                               thrpt    5        25.000                   ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                 thrpt    5     95521.996 ±   4431.552   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1253.894 ±     58.062  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     20656.005 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1260.687 ±    559.693  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     20768.612 ±   9211.754    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.092 ±      0.108  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.509 ±      1.763    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        19.000               counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        17.000                   ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                thrpt    5    232329.420 ±  14173.977   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       755.929 ±     46.157  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5120.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       733.707 ±    575.926  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4964.895 ±   3741.836    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±      0.204  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.424 ±      1.400    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        11.000               counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                   ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                     thrpt    5     16355.963 ±    404.898   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2106.686 ±     51.864  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    202704.328 ±      2.566    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2085.293 ±    592.423  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    200627.607 ±  55382.201    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±      0.091  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         8.803 ±      8.596    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                           thrpt    5        31.000               counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                            thrpt    5        28.000                   ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                       thrpt    5     21407.317 ±    936.743   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1732.679 ±     74.946  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5    127370.414 ±     73.624    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1680.918 ±     44.214  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    123572.111 ±   3577.679    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±      0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         6.438 ±      7.777    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                             thrpt    5        25.000               counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                              thrpt    5        21.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                thrpt    5     88483.379 ±    950.345   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1212.140 ±     12.987  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     21560.002 ±      0.045    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1192.595 ±    690.124  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     21213.955 ±  12319.473    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.079 ±      0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.408 ±      1.566    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        18.000               counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        16.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                               thrpt    5    223179.185 ±   9740.911   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       711.307 ±     31.111  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      5016.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       733.247 ±    573.312  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      5166.864 ±   3915.442    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.083 ±      0.179  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.587 ±      1.259    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        11.000               counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         8.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    245850.868 ±    539.717   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                    thrpt    5     26072.401 ±    340.452   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1777.818 ±     22.793  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    107312.197 ±      1.889    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1744.013 ±    584.516  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    105263.360 ±  34731.859    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.121 ±      0.222  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         7.284 ±     13.375    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                          thrpt    5        26.000               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                           thrpt    5        24.000                   ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5    901833.726 ±  19496.153   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      2938.832 ±     65.269  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5128.000 ±      0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      2983.698 ±    577.315  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5206.032 ±    977.529    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.137 ±      0.231  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.240 ±      0.405    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        44.000               counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        35.000                   ms
[info] ArraysBenchmark.readJacksonScala                                                       thrpt    5   1647890.468 ±  57530.071   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                        thrpt    5      1549.704 ±     54.001  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   thrpt    5      1480.000 ±      0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1530.964 ±    690.980  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5      1461.173 ±    619.825    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±      0.067  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.083 ±      0.063    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                             thrpt    5        23.000               counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                              thrpt    5        21.000                   ms
[info] ArraysBenchmark.readJsoniterScala                                                      thrpt    5   7772521.194 ± 186248.719   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                       thrpt    5      2330.992 ±     55.483  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       472.000 ±      0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5      2302.709 ±    564.296  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       466.249 ±    112.167    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.075 ±      0.091  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.015 ±      0.019    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                            thrpt    5        34.000               counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                             thrpt    5        26.000                   ms
[info] ArraysBenchmark.readPlayJson                                                           thrpt    5    315832.436 ±   3091.172   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                            thrpt    5      1924.921 ±     19.164  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                       thrpt    5      9592.001 ±      0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1936.681 ±    550.711  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      9651.130 ±   2772.859    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.092 ±      0.108  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.457 ±      0.539    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                 thrpt    5        29.000               counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                  thrpt    5        29.000                   ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1069106.746 ±  16176.795   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2461.866 ±     38.340  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3624.000 ±      0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2501.974 ±    699.237  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      3683.254 ±   1041.558    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.112 ±      0.156  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.165 ±      0.228    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        37.000               counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        30.000                   ms
[info] ArraysBenchmark.writeJacksonScala                                                      thrpt    5   3248683.962 ±  96803.919   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                       thrpt    5      1882.703 ±     56.870  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  thrpt    5       912.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5      1872.810 ±    690.785  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       907.429 ±    344.182    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.104 ±      0.080  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.050 ±      0.039    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                            thrpt    5        28.000               counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                             thrpt    5        26.000                   ms
[info] ArraysBenchmark.writeJsoniterScala                                                     thrpt    5  16505655.105 ± 344421.502   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                      thrpt    5       755.150 ±     15.242  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5       800.501 ±    705.524  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5        76.283 ±     66.301    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±      0.209  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.007 ±      0.020    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                           thrpt    5        12.000               counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                            thrpt    5        10.000                   ms
[info] ArraysBenchmark.writePlayJson                                                          thrpt    5    444040.156 ±   9705.673   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                           thrpt    5      1579.984 ±     34.636  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                      thrpt    5      5600.001 ±      0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1594.508 ±    596.406  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5      5651.379 ±   2104.555    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±      0.057  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.295 ±      0.196    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                thrpt    5        24.000               counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                 thrpt    5        24.000                   ms
[info] BitSetsBenchmark.readJacksonScala                                                      thrpt    5   2117098.121 ±  77246.852   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1345.329 ±     49.831  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1000.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5      1325.545 ±     50.728  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       985.337 ±     40.728    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±      0.067  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.059 ±      0.050    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                            thrpt    5        20.000               counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                             thrpt    5        18.000                   ms
[info] BitSetsBenchmark.readJsoniterScala                                                     thrpt    5   5190710.512 ± 167980.921   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5       686.055 ±     22.333  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       208.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5       666.865 ±      3.651  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       202.193 ±      6.625    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±      0.174  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.020 ±      0.053    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        10.000               counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                            thrpt    5         8.000                   ms
[info] BitSetsBenchmark.readPlayJson                                                          thrpt    5    395115.804 ±   3047.502   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1793.527 ±     13.997  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5      7144.001 ±      0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1801.606 ±    726.018  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5      7176.892 ±   2924.439    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.125 ±      0.170  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.498 ±      0.681    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                thrpt    5        27.000               counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                 thrpt    5        26.000                   ms
[info] BitSetsBenchmark.writeJacksonScala                                                     thrpt    5   2638535.280 ±  50523.282   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1394.914 ±     27.555  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       832.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1392.738 ±    552.447  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       830.765 ±    332.519    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±      0.108  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.045 ±      0.064    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        21.000               counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        18.000                   ms
[info] BitSetsBenchmark.writeJsoniterScala                                                    thrpt    5   6766487.682 ± 198524.030   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5      1031.936 ±     30.721  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       240.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5      1002.776 ±     13.353  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       233.234 ±      9.777    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±      0.044  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.017 ±      0.010    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        15.000               counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        12.000                   ms
[info] BitSetsBenchmark.writePlayJson                                                         thrpt    5    655179.088 ±  21561.375   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1945.208 ±     63.853  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      4672.001 ±      0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      2007.682 ±     85.940  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      4822.316 ±    256.119    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.112 ±      0.091  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.270 ±      0.216    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                               thrpt    5        30.000               counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                thrpt    5        29.000                   ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    829616.979 ±   6983.491   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2753.946 ±     24.208  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5224.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2776.940 ±    572.455  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      5267.817 ±   1104.056    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.121 ±      0.143  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.229 ±      0.273    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        41.000               counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        34.000                   ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                thrpt    5   1003323.503 ±  18851.965   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1244.474 ±     23.210  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1952.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1256.200 ±    595.460  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1970.007 ±    920.322    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.079 ±      0.105  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.124 ±      0.166    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        19.000               counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        16.000                   ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                               thrpt    5   7734851.400 ± 396803.848   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       353.860 ±     18.149  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5        72.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       303.642 ±    168.136  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        61.841 ±     35.920    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.311 ±      2.519  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.063 ±      0.513    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000               counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                   ms
[info] ExtractFieldsBenchmark.readPlayJson                                                    thrpt    5    321461.671 ±   6351.756   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1784.390 ±     35.508  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5      8736.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1796.303 ±    657.952  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      8794.154 ±   3208.325    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.104 ±      0.227  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.509 ±      1.103    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                          thrpt    5        27.000               counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                           thrpt    5        26.000                   ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      7944.518 ±    312.387   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2044.920 ±     79.004  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    405016.055 ±      0.009    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2086.748 ±    564.321  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    413514.288 ± 125575.402    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.137 ±      0.134  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        27.169 ±     26.273    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        31.000               counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        28.000                   ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                thrpt    5     13676.455 ±    377.886   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       498.420 ±     13.529  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5     57352.034 ±      0.019    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       505.704 ±    763.641  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     58265.203 ±  88689.009    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.542 ±      4.354  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        62.426 ±    501.443    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                      thrpt    5         8.000               counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                       thrpt    5        12.000                   ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                               thrpt    5     23684.341 ±    381.836   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       443.187 ±      7.177  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     29448.020 ±      0.014    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       383.851 ±    619.624  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     25538.229 ±  41748.614    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.361 ±      2.875  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        24.017 ±    191.204    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000               counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                   ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                    thrpt    5      2421.041 ±     48.373   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1469.652 ±     29.798  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    955216.196 ±      0.126    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1456.509 ±    717.795  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    946308.157 ± 451301.969    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±      0.176  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        48.615 ±    113.625    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                          thrpt    5        22.000               counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                           thrpt    5        24.000                   ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      8658.702 ±    188.701   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1993.399 ±     42.933  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    362278.100 ±     52.079    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2018.781 ±     56.864  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    366891.812 ±   7419.233    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.181 ±      0.190  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        32.804 ±     33.981    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        30.000               counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        26.000                   ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                               thrpt    5     42418.087 ±    849.611   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       614.810 ±     12.417  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     22807.883 ±      0.300    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       585.441 ±    558.905  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     21724.173 ±  20810.129    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.576 ±      4.426  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        21.387 ±    164.213    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                     thrpt    5         9.000               counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        11.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                              thrpt    5     65589.237 ±   4078.647   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       494.169 ±     30.666  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     11856.007 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       516.749 ±    658.290  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     12382.729 ±  15570.617    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.379 ±      2.904  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         9.072 ±     69.530    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         8.000               counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         9.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5     78451.750 ±   6796.446   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5         1.197 ±      0.104  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        24.006 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0               counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                   thrpt    5      5325.177 ±     73.651   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1601.363 ±     22.053  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    473271.872 ±      2.780    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1594.014 ±    552.204  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    471080.905 ± 162059.726    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.071 ±      0.146  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        20.920 ±     43.202    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                         thrpt    5        24.000               counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                          thrpt    5        27.000                   ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                              thrpt    5   5104895.286 ±  92074.435   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1531.045 ±     28.214  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       472.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1547.663 ±    719.037  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       477.148 ±    222.438    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.087 ±      0.105  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.027 ±      0.032    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        23.000               counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        18.000                   ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                   thrpt    5    356266.679 ±   6741.431   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1859.833 ±     35.147  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5      8216.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1869.386 ±    663.686  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      8259.448 ±   2990.975    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.096 ±      0.156  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.423 ±      0.694    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                         thrpt    5        28.000               counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                          thrpt    5        28.000                   ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                             thrpt    5   3297871.026 ±  33639.631   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       486.202 ±      5.011  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       232.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       516.936 ±    658.274  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       246.708 ±    314.603    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.358 ±      2.776  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.171 ±      1.327    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         8.000               counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         9.000                   ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                  thrpt    5    342909.106 ±  10389.110   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1328.240 ±     40.400  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      6096.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1321.034 ±     51.392  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      6063.064 ±    226.423    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.058 ±      0.105  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.267 ±      0.477    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                        thrpt    5        20.000               counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                         thrpt    5        20.000                   ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    656158.972 ±  32208.746   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2391.523 ±    117.418  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5736.001 ±      0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2366.860 ±     50.867  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      5677.845 ±    383.139    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.096 ±      0.122  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.229 ±      0.287    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        35.000               counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        28.000                   ms
[info] IterablesBenchmark.readJacksonScala                                                    thrpt    5    634539.278 ±   6243.397   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       738.632 ±      7.338  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      1832.001 ±      0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       780.881 ±    683.758  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1937.089 ±   1702.673    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.598 ±      4.476  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.487 ±     11.138    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                          thrpt    5        12.000               counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                           thrpt    5        14.000                   ms
[info] IterablesBenchmark.readJsoniterScala                                                   thrpt    5   3443448.925 ±  95190.505   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1435.480 ±     39.349  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       656.000 ±      0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5      1477.902 ±    700.635  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       675.514 ±    324.863    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.071 ±      0.122  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.032 ±      0.056    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        22.000               counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        17.000                   ms
[info] IterablesBenchmark.readPlayJson                                                        thrpt    5    233005.166 ±   2583.263   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1621.539 ±     17.339  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     10952.002 ±      0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1593.970 ±    534.680  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     10764.744 ±   3556.812    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.100 ±      0.132  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.675 ±      0.887    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                              thrpt    5        24.000               counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                               thrpt    5        23.000                   ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    889170.033 ±   3268.556   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      2133.553 ±      9.003  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3776.000 ±      0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2092.269 ±    590.619  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      3702.860 ±   1039.815    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.108 ±      0.036  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.192 ±      0.063    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        31.000               counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        25.000                   ms
[info] IterablesBenchmark.writeJacksonScala                                                   thrpt    5   1355002.163 ±  12741.412   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       916.144 ±      8.934  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1064.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       915.819 ±    564.856  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1063.429 ±    651.450    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±      0.088  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.077 ±      0.102    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        14.000               counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        13.000                   ms
[info] IterablesBenchmark.writeJsoniterScala                                                  thrpt    5   6572445.979 ± 655647.971   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       735.028 ±     73.061  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       176.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       732.423 ±    571.636  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       175.183 ±    129.071    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.087 ±      0.154  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.021 ±      0.036    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5        11.000               counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         9.000                   ms
[info] IterablesBenchmark.writePlayJson                                                       thrpt    5    488841.945 ±  12155.107   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1712.276 ±     43.076  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      5512.001 ±      0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1666.037 ±     73.552  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      5363.302 ±    261.268    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±      0.132  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.255 ±      0.426    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                             thrpt    5        25.000               counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                              thrpt    5        25.000                   ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    649135.253 ±  18915.949   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2312.986 ±     67.393  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5608.001 ±      0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2364.218 ±     57.527  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5732.346 ±    138.712    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.092 ±      0.044  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.222 ±      0.106    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        35.000               counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        29.000                   ms
[info] MapsBenchmark.readJsoniterScala                                                        thrpt    5   4532374.665 ± 131642.446   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      1128.958 ±     32.557  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       392.000 ±      0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5      1138.152 ±    711.311  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       395.540 ±    257.414    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±      0.154  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.028 ±      0.055    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        17.000               counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        14.000                   ms
[info] MapsBenchmark.readPlayJson                                                             thrpt    5    358986.072 ±   4516.879   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1874.444 ±     22.734  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      8216.001 ±      0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5      1872.013 ±    732.354  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      8204.455 ±   3167.148    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.083 ±      0.098  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.365 ±      0.430    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        28.000               counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        28.000                   ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    484749.073 ±  17364.191   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1325.690 ±     47.515  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4304.001 ±      0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      1336.518 ±     34.409  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4339.440 ±    184.429    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.087 ±      0.183  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.283 ±      0.591    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        20.000               counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        16.000                   ms
[info] MapsBenchmark.writeJsoniterScala                                                       thrpt    5   3185691.148 ±  93708.970   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       485.817 ±     14.404  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       240.000 ±      0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       516.979 ±    658.697  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       255.655 ±    328.158    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.359 ±      2.740  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.180 ±      1.372    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         8.000               counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5         9.000                   ms
[info] MapsBenchmark.writePlayJson                                                            thrpt    5    322034.696 ±  13792.782   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1186.850 ±     51.265  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5800.001 ±      0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1185.367 ±    673.553  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      5795.779 ±   3379.520    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.096 ±      0.166  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.467 ±      0.806    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        18.000               counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        19.000                   ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   1942541.879 ±  95984.039   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3140.362 ±    155.258  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2544.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      3120.617 ±    597.789  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      2528.279 ±    494.249    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.137 ±      0.122  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.111 ±      0.096    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        46.000               counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        38.000                   ms
[info] MissingReqFieldBenchmark.readJacksonScala                                              thrpt    5    314174.343 ±  13114.165   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5       734.817 ±     30.175  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      3680.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       719.648 ±    561.000  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3603.278 ±   2779.402    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.481 ±      3.789  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         2.385 ±     18.758    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                    thrpt    5        11.000               counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                     thrpt    5        12.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                             thrpt    5    695397.146 ±  59074.108   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       629.232 ±     53.679  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1424.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       602.792 ±    576.311  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      1367.827 ±   1349.413    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.046 ±      0.154  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.104 ±      0.342    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         9.000               counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         7.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   3594248.385 ±  68113.771   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      2137.907 ±     41.456  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       936.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5      2099.543 ±    590.045  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5       919.266 ±    262.027    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5         0.075 ±      0.091  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.033 ±      0.040    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        31.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        23.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   6759598.733 ± 480781.150   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       893.523 ±     63.599  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       208.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5       871.604 ±    707.244  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5       203.182 ±    170.178    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5         0.050 ±      0.122  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5         0.012 ±      0.030    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5        13.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5        10.000                   ms
[info] MissingReqFieldBenchmark.readPlayJson                                                  thrpt    5    194910.742 ±   6778.907   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1623.838 ±     56.397  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5     13112.002 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1591.038 ±    532.959  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5     12849.320 ±   4395.101    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.096 ±      0.122  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.774 ±      1.005    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000               counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                         thrpt    5        25.000                   ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    741493.787 ±  20855.007   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2864.510 ±     80.739  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6080.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      2846.640 ±    725.014  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6042.941 ±   1592.476    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.112 ±      0.166  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.239 ±      0.352    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        42.000               counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        34.000                   ms
[info] MutableIterablesBenchmark.readJsoniterScala                                            thrpt    5   2942899.783 ±  52620.355   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1899.943 ±     34.692  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1016.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1957.191 ±    579.720  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1046.649 ±    311.393    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.087 ±      0.208  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.047 ±      0.110    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        29.000               counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        24.000                   ms
[info] MutableIterablesBenchmark.readPlayJson                                                 thrpt    5    252525.171 ±   9644.422   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1816.630 ±     69.451  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     11320.002 ±      0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1866.574 ±    703.905  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     11627.055 ±   4159.883    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.104 ±      0.220  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.650 ±      1.372    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                       thrpt    5        28.000               counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                        thrpt    5        28.000                   ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    825861.927 ±  14346.039   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1918.758 ±     32.105  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3656.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1951.970 ±    562.711  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3719.011 ±   1054.643    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±      0.154  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.167 ±      0.297    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        29.000               counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        23.000                   ms
[info] MutableIterablesBenchmark.writeJacksonScala                                            thrpt    5   1655179.143 ±  18923.115   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       900.406 ±     10.766  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       856.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5       915.213 ±    570.946  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       869.752 ±    535.099    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±      0.057  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.059 ±      0.055    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        14.000               counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        13.000                   ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                           thrpt    5   6188147.845 ± 256891.205   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       471.809 ±     19.541  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       120.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       450.184 ±    765.195  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5       114.461 ±    193.507    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.363 ±      2.946  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.092 ±      0.746    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5         7.000               counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5         8.000                   ms
[info] MutableIterablesBenchmark.writePlayJson                                                thrpt    5    499635.357 ±  16479.880   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1709.297 ±     55.893  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5      5384.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1731.723 ±    511.983  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5      5455.363 ±   1651.145    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.092 ±      0.166  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.289 ±      0.532    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                      thrpt    5        26.000               counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                       thrpt    5        27.000                   ms
[info] MutableMapsBenchmark.readJsoniterScala                                                 thrpt    5   3223831.687 ±  18470.103   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5      1524.243 ±      8.957  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       744.000 ±      0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5      1547.051 ±    709.927  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       755.115 ±    345.796    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.083 ±      0.127  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.041 ±      0.062    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5        23.000               counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        17.000                   ms
[info] MutableMapsBenchmark.readPlayJson                                                      thrpt    5    305109.980 ±   7744.466   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1625.510 ±     40.706  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8384.001 ±      0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1596.413 ±    554.814  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      8236.736 ±   2982.232    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±      0.143  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.452 ±      0.748    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                            thrpt    5        24.000               counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                             thrpt    5        25.000                   ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    483539.317 ±  12098.189   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1315.281 ±     33.612  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4280.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1268.563 ±    558.123  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5      4125.650 ±   1727.990    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.062 ±      0.127  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.203 ±      0.413    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        19.000               counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        16.000                   ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                thrpt    5   2953176.828 ± 131888.149   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       555.474 ±     24.925  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       296.000 ±      0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       532.323 ±    702.138  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       283.434 ±    371.223    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.356 ±      2.759  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.187 ±      1.446    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         8.000                   ms
[info] MutableMapsBenchmark.writePlayJson                                                     thrpt    5    340150.145 ±   8831.527   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1316.035 ±     34.183  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5      6088.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1320.734 ±     53.319  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      6109.790 ±    216.947    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±      0.072  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.424 ±      0.329    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                           thrpt    5        20.000               counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                            thrpt    5        20.000                   ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    709063.745 ±  19701.909   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2097.982 ±     57.604  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4656.001 ±      0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2087.140 ±    561.116  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4631.753 ±   1223.885    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.096 ±      0.134  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.212 ±      0.296    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000               counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        25.000                   ms
[info] PrimitivesBenchmark.readJacksonScala                                                   thrpt    5   1504932.067 ±  24165.694   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1140.028 ±     18.370  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1192.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5      1120.691 ±    675.377  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1172.053 ±    714.633    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.075 ±      0.091  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.078 ±      0.095    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                         thrpt    5        17.000               counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        15.000                   ms
[info] PrimitivesBenchmark.readJsoniterScala                                                  thrpt    5   5540789.849 ±  89391.922   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       168.991 ±      2.727  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5        48.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       153.487 ±    539.529  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        43.540 ±    153.051    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         3.000               counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         6.000                   ms
[info] PrimitivesBenchmark.readPlayJson                                                       thrpt    5    224785.765 ±   6100.841   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1565.434 ±     42.007  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     10960.002 ±      0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1592.060 ±    551.936  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     11150.677 ±   4054.373    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.117 ±      0.209  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.817 ±      1.464    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                             thrpt    5        24.000               counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                              thrpt    5        24.000                   ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    973486.229 ±  18234.126   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1662.787 ±     32.094  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2688.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1676.609 ±     48.667  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      2710.366 ±     75.356    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±      0.091  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.155 ±      0.149    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000               counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        20.000                   ms
[info] PrimitivesBenchmark.writeJacksonScala                                                  thrpt    5   2392425.300 ± 105148.600   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1058.070 ±     46.175  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5       696.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1053.989 ±    579.645  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       693.185 ±    374.653    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±      0.067  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.044 ±      0.046    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        16.000               counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        16.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                 thrpt    5   6554802.853 ± 291331.958   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       533.112 ±     23.542  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       128.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       517.614 ±    659.166  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       124.181 ±    156.626    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.346 ±      2.668  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.084 ±      0.646    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000               counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   7173357.225 ± 137453.693   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5       218.817 ±      4.312  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        48.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                 thrpt    5       204.689 ±    440.609  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm            thrpt    5        44.905 ±     96.667    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space             thrpt    5         0.009 ±      0.042  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.002 ±      0.009    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5         4.000               counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                thrpt    5         7.000                   ms
[info] PrimitivesBenchmark.writePlayJson                                                      thrpt    5    314557.936 ±   6666.973   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1614.912 ±     34.172  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      8080.001 ±      0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1595.031 ±    574.039  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      7979.514 ±   2819.557    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.092 ±      0.134  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.459 ±      0.676    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                            thrpt    5        24.000               counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                             thrpt    5        24.000                   ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                  thrpt    5    505902.160 ±   9872.896   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                   thrpt    5      1972.693 ±     39.690  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                              thrpt    5      6136.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                          thrpt    5      1955.606 ±    566.417  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                     thrpt    5      6081.345 ±   1669.473    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                      thrpt    5         0.092 ±      0.156  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.285 ±      0.486    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                        thrpt    5        29.000               counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                         thrpt    5        23.000                   ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                           thrpt    5    931750.904 ±  14488.614   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                            thrpt    5      1951.424 ±     30.244  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                       thrpt    5      3296.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                   thrpt    5      1946.270 ±    574.562  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      3287.854 ±   1000.336    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.083 ±      0.160  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.141 ±      0.272    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                 thrpt    5        29.000               counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                  thrpt    5        25.000                   ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                          thrpt    5    818652.941 ±  18548.004   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                           thrpt    5      1377.666 ±     30.625  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      2648.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5      1414.794 ±    589.431  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      2720.133 ±   1169.439    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.075 ±      0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.144 ±      0.139    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                thrpt    5        21.000               counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                 thrpt    5        16.000                   ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                 thrpt    5    261102.178 ±   7085.793   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                  thrpt    5      1332.709 ±     35.679  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                             thrpt    5      8032.002 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1337.699 ±     31.004  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5      8062.250 ±    199.316    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.092 ±      0.146  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.551 ±      0.869    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                       thrpt    5        20.000               counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                        thrpt    5        16.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                          thrpt    5    733725.926 ±   8379.053   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                           thrpt    5       742.187 ±      8.602  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1592.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5       723.361 ±    568.698  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      1552.058 ±   1232.800    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.067 ±      0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.143 ±      0.144    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                thrpt    5        11.000               counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                 thrpt    5        11.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                         thrpt    5    949487.121 ±  18156.521   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                          thrpt    5       801.286 ±     15.718  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                     thrpt    5      1328.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       800.815 ±    702.227  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5      1328.422 ±   1190.753    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.079 ±      0.119  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.131 ±      0.196    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                               thrpt    5        12.000               counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                thrpt    5        10.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                 thrpt    5    760020.529 ±    711.512   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                  thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm             thrpt    5         0.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                       thrpt    5           ≈ 0               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                              thrpt    5    764931.960 ±  21812.860   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                               thrpt    5       816.572 ±     23.197  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                          thrpt    5      1680.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                      thrpt    5       795.580 ±    698.422  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1637.451 ±   1450.637    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.075 ±      0.122  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.154 ±      0.252    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                    thrpt    5        12.000               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                     thrpt    5        10.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                               thrpt    5   1010697.801 ±  32553.568   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                thrpt    5      1238.406 ±     40.595  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                           thrpt    5      1928.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                       thrpt    5      1270.645 ±    576.950  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1978.896 ±    921.010    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   thrpt    5         0.062 ±      0.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.097 ±      0.149    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                     thrpt    5        19.000               counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                      thrpt    5        15.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                        thrpt    5   1240048.369 ±  43281.508   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                         thrpt    5       712.283 ±     24.641  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                    thrpt    5       904.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                thrpt    5       722.315 ±    560.162  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           thrpt    5       916.681 ±    708.271    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.457 ±      3.580  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.580 ±      4.538    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                              thrpt    5        11.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                               thrpt    5        12.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                       thrpt    5   1976898.558 ± 144529.093   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                        thrpt    5       321.547 ±     23.519  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   thrpt    5       256.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5       354.784 ±    362.760  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5       283.636 ±    315.030    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.308 ±      2.545  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.244 ±      2.009    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                             thrpt    5         6.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                              thrpt    5         8.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                              thrpt    5   1487473.872 ±  12886.707   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                               thrpt    5       967.869 ±      8.082  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                          thrpt    5      1024.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                      thrpt    5       931.157 ±    573.521  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                 thrpt    5       985.332 ±    610.762    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                  thrpt    5         0.058 ±      0.154  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.062 ±      0.163    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                    thrpt    5        14.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                     thrpt    5        13.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                       thrpt    5   2854908.111 ± 119401.321   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                        thrpt    5      1175.532 ±     48.600  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   thrpt    5       648.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               thrpt    5      1193.159 ±    707.625  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          thrpt    5       657.547 ±    384.120    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.079 ±      0.104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.044 ±      0.057    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                             thrpt    5        18.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                              thrpt    5        15.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                      thrpt    5   3013419.758 ±  89015.677   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                       thrpt    5       597.387 ±     17.732  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  thrpt    5       312.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              thrpt    5       599.811 ±    574.158  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         thrpt    5       313.429 ±    301.966    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          thrpt    5         0.354 ±      2.695  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     thrpt    5         0.187 ±      1.427    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                            thrpt    5         9.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                             thrpt    5         8.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                              thrpt    5   3193470.856 ±  18967.091   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          thrpt    5        ≈ 10⁻⁴                 B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                    thrpt    5           ≈ 0               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                           thrpt    5   2827904.278 ±  46626.652   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                            thrpt    5      1193.191 ±     18.982  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                       thrpt    5       664.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   thrpt    5      1200.353 ±    704.789  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              thrpt    5       667.831 ±    387.471    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               thrpt    5         0.075 ±      0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.042 ±      0.068    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                 thrpt    5        18.000               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                  thrpt    5        16.000                   ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     11953.543 ±    395.224   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1686.283 ±     54.446  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    221985.127 ±     80.983    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1672.944 ±     54.714  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    220249.116 ±  12837.048    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.129 ±      0.191  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        17.005 ±     25.268    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        25.000               counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        23.000                   ms
[info] TwitterAPIBenchmark.readJacksonScala                                                   thrpt    5     15251.952 ±    395.819   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       241.222 ±      6.220  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     24889.925 ±     26.794    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       269.343 ±    116.415  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     27808.541 ±  12801.121    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.574 ±      4.883  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        59.847 ±    509.675    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                         thrpt    5         5.000               counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                          thrpt    5        15.000                   ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                  thrpt    5     36031.608 ±    274.659   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       400.375 ±      3.085  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5     17488.019 ±      0.060    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       419.551 ±    640.062  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     18334.707 ±  28072.844    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.361 ±      2.906  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        15.756 ±    126.913    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         7.000               counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        11.000                   ms
[info] TwitterAPIBenchmark.readPlayJson                                                       thrpt    5      3603.520 ±    249.059   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1111.965 ±     77.014  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    485610.336 ±     19.072    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1057.451 ±    573.254  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    461731.196 ± 244855.466    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.029 ±      0.134  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        12.920 ±     60.358    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                             thrpt    5        16.000               counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                              thrpt    5        20.000                   ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                  thrpt    5     58276.947 ±    879.077   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       744.324 ±     11.647  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     20100.009 ±      0.181    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       714.548 ±    556.884  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     19302.624 ±  15234.039    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.050 ±      0.146  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.348 ±      3.929    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        11.000               counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        11.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                 thrpt    5     80820.368 ±   3529.554   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       529.989 ±     23.004  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     10320.005 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       516.700 ±    658.173  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     10079.029 ±  13058.180    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.375 ±      3.008  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         7.280 ±     58.439    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000               counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5     85685.178 ±    944.700   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        10.454 ±      0.108  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5       192.005 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] Benchmark result is saved to jdk8.json
[success] Total time: 2410 s, completed Jan 26, 2018 9:16:33 PM
