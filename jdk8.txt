[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Mar 13, 2018 9:01:37 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:446:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:454:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:946:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.21.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.21.2-SNAPSHOT.jar ...
[info] Compiling 47 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigDecimal](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigDecimal](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Duration](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Duration](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZonedDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZonedDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intCodec.decodeValue(in, 0));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:57: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig())
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = JsoniterCodecs.this.intCodec.decodeValue(in, _a);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decodeValue(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.a, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.b, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = JsoniterCodecs.this.intCodec.decodeValue(in, _value);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.value, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decodeValue(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decodeValue(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = JsoniterCodecs.this.intCodec.decodeValue(in, _followers_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = JsoniterCodecs.this.intCodec.decodeValue(in, _friends_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = JsoniterCodecs.this.intCodec.decodeValue(in, _listed_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favourites_count);
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = JsoniterCodecs.this.intCodec.decodeValue(in, _utc_offset);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decodeValue(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = JsoniterCodecs.this.intCodec.decodeValue(in, _statuses_count);
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decodeValue(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.expanded_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.display_url, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.location, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.description, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.followers_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.friends_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.listed_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favourites_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.utc_offset, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.time_zone, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.statuses_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_banner_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_link_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_border_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_fill_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_text_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.translator_type, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.2-SNAPSHOT.jar ...
Processing 339 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
[info] Compiling 41 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 490 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.21.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 417424.217 ops/s
[info] # Warmup Iteration   2: 777668.349 ops/s
[info] # Warmup Iteration   3: 779191.270 ops/s
[info] Iteration   1: 773874.991 ops/s
[info]                  ·gc.alloc.rate:                   2038.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4063.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 765416.400 ops/s
[info]                  ·gc.alloc.rate:                   2015.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4137.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 765229.854 ops/s
[info]                  ·gc.alloc.rate:                   2014.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4160.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 776754.922 ops/s
[info]                  ·gc.alloc.rate:                   2045.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4113.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 766666.201 ops/s
[info]                  ·gc.alloc.rate:                   2018.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4179.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   769588.474 ±(99.9%) 20617.641 ops/s [Average]
[info]   (min, avg, max) = (765229.854, 769588.474, 776754.922), stdev = 5354.336
[info]   CI (99.9%): [748970.833, 790206.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2026.761 ±(99.9%) 55.385 MB/sec [Average]
[info]   (min, avg, max) = (2014.981, 2026.761, 2045.979), stdev = 14.383
[info]   CI (99.9%): [1971.375, 2082.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2020.294 ±(99.9%) 57.726 MB/sec [Average]
[info]   (min, avg, max) = (1998.757, 2020.294, 2036.012), stdev = 14.991
[info]   CI (99.9%): [1962.568, 2078.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4130.967 ±(99.9%) 173.142 B/op [Average]
[info]   (min, avg, max) = (4063.560, 4130.967, 4179.174), stdev = 44.964
[info]   CI (99.9%): [3957.825, 4304.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.162 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (0.085, 0.162, 0.257), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.30% complete, ETA 01:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 478467.233 ops/s
[info] # Warmup Iteration   2: 1575324.281 ops/s
[info] # Warmup Iteration   3: 1613210.074 ops/s
[info] Iteration   1: 1632926.219 ops/s
[info]                  ·gc.alloc.rate:                   1162.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1584371.571 ops/s
[info]                  ·gc.alloc.rate:                   1127.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1615180.699 ops/s
[info]                  ·gc.alloc.rate:                   1149.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1283.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1581390.815 ops/s
[info]                  ·gc.alloc.rate:                   1125.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     988.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1605255.461 ops/s
[info]                  ·gc.alloc.rate:                   1142.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     978.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1603824.953 ±(99.9%) 83025.983 ops/s [Average]
[info]   (min, avg, max) = (1581390.815, 1603824.953, 1632926.219), stdev = 21561.584
[info]   CI (99.9%): [1520798.971, 1686850.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1141.471 ±(99.9%) 59.295 MB/sec [Average]
[info]   (min, avg, max) = (1125.517, 1141.471, 1162.303), stdev = 15.399
[info]   CI (99.9%): [1082.176, 1200.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1118.698 ±(99.9%) 673.583 MB/sec [Average]
[info]   (min, avg, max) = (981.222, 1118.698, 1316.990), stdev = 174.927
[info]   CI (99.9%): [445.115, 1792.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1096.238 ±(99.9%) 610.650 B/op [Average]
[info]   (min, avg, max) = (974.695, 1096.238, 1283.255), stdev = 158.584
[info]   CI (99.9%): [485.587, 1706.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.082, 0.124), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.61% complete, ETA 01:09:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2739633.916 ops/s
[info] # Warmup Iteration   2: 3521221.990 ops/s
[info] # Warmup Iteration   3: 3472540.084 ops/s
[info] Iteration   1: 3517264.732 ops/s
[info]                  ·gc.alloc.rate:               232.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114.457 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3599165.695 ops/s
[info]                  ·gc.alloc.rate:               237.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 3592838.174 ops/s
[info]                  ·gc.alloc.rate:                   237.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3513703.701 ops/s
[info]                  ·gc.alloc.rate:               232.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114.577 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3604622.442 ops/s
[info]                  ·gc.alloc.rate:      238.200 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3565518.949 ±(99.9%) 176677.178 ops/s [Average]
[info]   (min, avg, max) = (3513703.701, 3565518.949, 3604622.442), stdev = 45882.502
[info]   CI (99.9%): [3388841.770, 3742196.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   235.621 ±(99.9%) 11.672 MB/sec [Average]
[info]   (min, avg, max) = (232.209, 235.621, 238.200), stdev = 3.031
[info]   CI (99.9%): [223.949, 247.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.650 ±(99.9%) 440.525 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.650, 255.826), stdev = 114.403
[info]   CI (99.9%): [≈ 0, 645.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   90.589 ±(99.9%) 195.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90.589, 114.577), stdev = 50.657
[info]   CI (99.9%): [≈ 0, 285.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.91% complete, ETA 01:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34951.888 ops/s
[info] # Warmup Iteration   2: 166990.430 ops/s
[info] # Warmup Iteration   3: 168179.696 ops/s
[info] Iteration   1: 171790.664 ops/s
[info]                  ·gc.alloc.rate:                   1455.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11954.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.954 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 170777.646 ops/s
[info]                  ·gc.alloc.rate:                   1447.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15135.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 171818.364 ops/s
[info]                  ·gc.alloc.rate:                   1456.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12142.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.572 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 172108.859 ops/s
[info]                  ·gc.alloc.rate:                   1458.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12194.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.761 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 171113.082 ops/s
[info]                  ·gc.alloc.rate:                   1450.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15420.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.957 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   171521.723 ±(99.9%) 2131.542 ops/s [Average]
[info]   (min, avg, max) = (170777.646, 171521.723, 172108.859), stdev = 553.555
[info]   CI (99.9%): [169390.181, 173653.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1453.587 ±(99.9%) 17.765 MB/sec [Average]
[info]   (min, avg, max) = (1447.554, 1453.587, 1458.673), stdev = 4.613
[info]   CI (99.9%): [1435.822, 1471.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1456.829 ±(99.9%) 716.214 MB/sec [Average]
[info]   (min, avg, max) = (1304.874, 1456.829, 1676.729), stdev = 185.998
[info]   CI (99.9%): [740.615, 2173.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13369.847 ±(99.9%) 6728.988 B/op [Average]
[info]   (min, avg, max) = (11954.887, 13369.847, 15420.956), stdev = 1747.497
[info]   CI (99.9%): [6640.859, 20098.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.917 ±(99.9%) 1.102 B/op [Average]
[info]   (min, avg, max) = (0.572, 0.917, 1.343), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 2.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.21% complete, ETA 01:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277515.314 ops/s
[info] # Warmup Iteration   2: 578682.925 ops/s
[info] # Warmup Iteration   3: 587301.938 ops/s
[info] Iteration   1: 585932.041 ops/s
[info]                  ·gc.alloc.rate:                   1954.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              5248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5359.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.335 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 587869.827 ops/s
[info]                  ·gc.alloc.rate:                   1960.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              5248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4483.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 576319.931 ops/s
[info]                  ·gc.alloc.rate:                   1922.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              5248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5516.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 579541.904 ops/s
[info]                  ·gc.alloc.rate:                   1932.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              5248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5508.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 584836.898 ops/s
[info]                  ·gc.alloc.rate:                   1950.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              5248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5474.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   582900.120 ±(99.9%) 18488.921 ops/s [Average]
[info]   (min, avg, max) = (576319.931, 582900.120, 587869.827), stdev = 4801.514
[info]   CI (99.9%): [564411.199, 601389.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1943.932 ±(99.9%) 61.097 MB/sec [Average]
[info]   (min, avg, max) = (1922.334, 1943.932, 1960.300), stdev = 15.867
[info]   CI (99.9%): [1882.836, 2005.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5248.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5248.001, 5248.001, 5248.001), stdev = 0.001
[info]   CI (99.9%): [5248.001, 5248.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1950.761 ±(99.9%) 596.814 MB/sec [Average]
[info]   (min, avg, max) = (1674.775, 1950.761, 2034.425), stdev = 154.991
[info]   CI (99.9%): [1353.948, 2547.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5268.358 ±(99.9%) 1706.489 B/op [Average]
[info]   (min, avg, max) = (4483.609, 5268.358, 5516.313), stdev = 443.170
[info]   CI (99.9%): [3561.870, 6974.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.292 ±(99.9%) 0.436 B/op [Average]
[info]   (min, avg, max) = (0.170, 0.292, 0.392), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.52% complete, ETA 01:08:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 641264.110 ops/s
[info] # Warmup Iteration   2: 2113010.525 ops/s
[info] # Warmup Iteration   3: 2083233.021 ops/s
[info] Iteration   1: 2116879.014 ops/s
[info]                  ·gc.alloc.rate:                   688.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     483.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2116504.845 ops/s
[info]                  ·gc.alloc.rate:                   688.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2088833.845 ops/s
[info]                  ·gc.alloc.rate:                   679.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     490.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2121844.611 ops/s
[info]                  ·gc.alloc.rate:                   690.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2114611.256 ops/s
[info]                  ·gc.alloc.rate:                   687.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     487.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2111734.714 ±(99.9%) 50359.308 ops/s [Average]
[info]   (min, avg, max) = (2088833.845, 2111734.714, 2121844.611), stdev = 13078.152
[info]   CI (99.9%): [2061375.406, 2162094.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   687.053 ±(99.9%) 16.093 MB/sec [Average]
[info]   (min, avg, max) = (679.747, 687.053, 690.350), stdev = 4.179
[info]   CI (99.9%): [670.960, 703.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   652.452 ±(99.9%) 6.463 MB/sec [Average]
[info]   (min, avg, max) = (650.782, 652.452, 654.832), stdev = 1.678
[info]   CI (99.9%): [645.989, 658.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   486.228 ±(99.9%) 11.202 B/op [Average]
[info]   (min, avg, max) = (483.841, 486.228, 490.848), stdev = 2.909
[info]   CI (99.9%): [475.026, 497.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.508 ±(99.9%) 3.974 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.508, 2.354), stdev = 1.032
[info]   CI (99.9%): [≈ 0, 4.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.378 ±(99.9%) 2.954 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.378, 1.750), stdev = 0.767
[info]   CI (99.9%): [≈ 0, 3.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.82% complete, ETA 01:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7107484.914 ops/s
[info] # Warmup Iteration   2: 8959864.869 ops/s
[info] # Warmup Iteration   3: 9141079.325 ops/s
[info] Iteration   1: 9312456.008 ops/s
[info]                  ·gc.alloc.rate:                   473.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9230724.808 ops/s
[info]                  ·gc.alloc.rate:                   469.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9188370.509 ops/s
[info]                  ·gc.alloc.rate:               467.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.823 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 9335641.664 ops/s
[info]                  ·gc.alloc.rate:                   474.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9351847.436 ops/s
[info]                  ·gc.alloc.rate:               475.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.828 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   9283808.085 ±(99.9%) 272709.755 ops/s [Average]
[info]   (min, avg, max) = (9188370.509, 9283808.085, 9351847.436), stdev = 70821.857
[info]   CI (99.9%): [9011098.330, 9556517.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   471.906 ±(99.9%) 13.835 MB/sec [Average]
[info]   (min, avg, max) = (467.085, 471.906, 475.369), stdev = 3.593
[info]   CI (99.9%): [458.070, 485.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.254 ±(99.9%) 762.478 MB/sec [Average]
[info]   (min, avg, max) = (255.788, 449.254, 663.492), stdev = 198.013
[info]   CI (99.9%): [≈ 0, 1211.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   76.173 ±(99.9%) 129.330 B/op [Average]
[info]   (min, avg, max) = (43.231, 76.173, 113.129), stdev = 33.587
[info]   CI (99.9%): [≈ 0, 205.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 3.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.834), stdev = 0.814
[info]   CI (99.9%): [≈ 0, 3.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.313), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.12% complete, ETA 01:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61292.514 ops/s
[info] # Warmup Iteration   2: 294868.388 ops/s
[info] # Warmup Iteration   3: 297818.371 ops/s
[info] Iteration   1: 293992.958 ops/s
[info]                  ·gc.alloc.rate:               962.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          5152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      975.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5222.322 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 306443.431 ops/s
[info]                  ·gc.alloc.rate:                   1003.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5020.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.641 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 306346.815 ops/s
[info]                  ·gc.alloc.rate:                   1002.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5051.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 301102.485 ops/s
[info]                  ·gc.alloc.rate:                   985.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5159.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 307205.841 ops/s
[info]                  ·gc.alloc.rate:                   1005.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5089.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   303018.306 ±(99.9%) 21566.458 ops/s [Average]
[info]   (min, avg, max) = (293992.958, 303018.306, 307205.841), stdev = 5600.741
[info]   CI (99.9%): [281451.848, 324584.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   991.974 ±(99.9%) 70.596 MB/sec [Average]
[info]   (min, avg, max) = (962.411, 991.974, 1005.693), stdev = 18.334
[info]   CI (99.9%): [921.378, 1062.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5152.001, 5152.001, 5152.002), stdev = 0.001
[info]   CI (99.9%): [5152.001, 5152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   983.434 ±(99.9%) 28.197 MB/sec [Average]
[info]   (min, avg, max) = (975.547, 983.434, 993.569), stdev = 7.323
[info]   CI (99.9%): [955.237, 1011.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5108.767 ±(99.9%) 316.219 B/op [Average]
[info]   (min, avg, max) = (5020.605, 5108.767, 5222.322), stdev = 82.121
[info]   CI (99.9%): [4792.548, 5424.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.257 ±(99.9%) 0.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.257, 0.641), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.42% complete, ETA 01:07:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 980203.277 ops/s
[info] # Warmup Iteration   2: 1650220.623 ops/s
[info] # Warmup Iteration   3: 1687803.088 ops/s
[info] Iteration   1: 1705995.322 ops/s
[info]                  ·gc.alloc.rate:                   2662.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2475.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1714081.008 ops/s
[info]                  ·gc.alloc.rate:                   2675.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2480.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1698490.021 ops/s
[info]                  ·gc.alloc.rate:                   2650.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2512.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1714434.070 ops/s
[info]                  ·gc.alloc.rate:                   2675.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2494.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1689443.255 ops/s
[info]                  ·gc.alloc.rate:                   2636.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2536.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1704488.735 ±(99.9%) 41092.985 ops/s [Average]
[info]   (min, avg, max) = (1689443.255, 1704488.735, 1714434.070), stdev = 10671.718
[info]   CI (99.9%): [1663395.750, 1745581.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2660.064 ±(99.9%) 64.326 MB/sec [Average]
[info]   (min, avg, max) = (2636.418, 2660.064, 2675.541), stdev = 16.705
[info]   CI (99.9%): [2595.738, 2724.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2707.578 ±(99.9%) 59.718 MB/sec [Average]
[info]   (min, avg, max) = (2683.571, 2707.578, 2722.541), stdev = 15.509
[info]   CI (99.9%): [2647.860, 2767.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2499.975 ±(99.9%) 95.941 B/op [Average]
[info]   (min, avg, max) = (2475.392, 2499.975, 2536.229), stdev = 24.916
[info]   CI (99.9%): [2404.034, 2595.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.096, 0.153), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.73% complete, ETA 01:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 945108.111 ops/s
[info] # Warmup Iteration   2: 2556453.546 ops/s
[info] # Warmup Iteration   3: 2558318.748 ops/s
[info] Iteration   1: 2582576.892 ops/s
[info]                  ·gc.alloc.rate:                   1811.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1202.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2602783.503 ops/s
[info]                  ·gc.alloc.rate:                   1825.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2592070.554 ops/s
[info]                  ·gc.alloc.rate:                   1818.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1218.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2584062.431 ops/s
[info]                  ·gc.alloc.rate:                   1812.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1024.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2557737.519 ops/s
[info]                  ·gc.alloc.rate:                   1794.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1039.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2583846.180 ±(99.9%) 64133.239 ops/s [Average]
[info]   (min, avg, max) = (2557737.519, 2583846.180, 2602783.503), stdev = 16655.199
[info]   CI (99.9%): [2519712.940, 2647979.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1812.543 ±(99.9%) 44.941 MB/sec [Average]
[info]   (min, avg, max) = (1794.252, 1812.543, 1825.779), stdev = 11.671
[info]   CI (99.9%): [1767.602, 1857.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1802.459 ±(99.9%) 663.320 MB/sec [Average]
[info]   (min, avg, max) = (1659.634, 1802.459, 2007.549), stdev = 172.262
[info]   CI (99.9%): [1139.139, 2465.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1097.813 ±(99.9%) 400.246 B/op [Average]
[info]   (min, avg, max) = (1003.537, 1097.813, 1218.850), stdev = 103.943
[info]   CI (99.9%): [697.567, 1498.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.058, 0.076), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.03% complete, ETA 01:07:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8457768.555 ops/s
[info] # Warmup Iteration   2: 9406918.927 ops/s
[info] # Warmup Iteration   3: 9597869.200 ops/s
[info] Iteration   1: 9429136.736 ops/s
[info]                  ·gc.alloc.rate:                   1198.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9562404.862 ops/s
[info]                  ·gc.alloc.rate:                   1215.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9170342.828 ops/s
[info]                  ·gc.alloc.rate:                   1165.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9468377.725 ops/s
[info]                  ·gc.alloc.rate:                   1203.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9611899.668 ops/s
[info]                  ·gc.alloc.rate:                   1221.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1011.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9448432.364 ±(99.9%) 660851.777 ops/s [Average]
[info]   (min, avg, max) = (9170342.828, 9448432.364, 9611899.668), stdev = 171621.108
[info]   CI (99.9%): [8787580.587, 10109284.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1200.792 ±(99.9%) 83.400 MB/sec [Average]
[info]   (min, avg, max) = (1165.746, 1200.792, 1221.505), stdev = 21.659
[info]   CI (99.9%): [1117.392, 1284.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1208.048 ±(99.9%) 698.569 MB/sec [Average]
[info]   (min, avg, max) = (1006.874, 1208.048, 1346.241), stdev = 181.416
[info]   CI (99.9%): [509.479, 1906.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   201.119 ±(99.9%) 112.687 B/op [Average]
[info]   (min, avg, max) = (165.674, 201.119, 223.769), stdev = 29.265
[info]   CI (99.9%): [88.432, 313.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.010, 0.017), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.33% complete, ETA 01:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160347.353 ops/s
[info] # Warmup Iteration   2: 637405.202 ops/s
[info] # Warmup Iteration   3: 645172.530 ops/s
[info] Iteration   1: 645392.617 ops/s
[info]                  ·gc.alloc.rate:                   1670.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3995.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 641528.123 ops/s
[info]                  ·gc.alloc.rate:                   1659.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4055.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 646760.750 ops/s
[info]                  ·gc.alloc.rate:                   1673.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4054.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 639814.479 ops/s
[info]                  ·gc.alloc.rate:                   1655.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4125.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 645007.884 ops/s
[info]                  ·gc.alloc.rate:                   1668.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4112.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   643700.770 ±(99.9%) 11186.440 ops/s [Average]
[info]   (min, avg, max) = (639814.479, 643700.770, 646760.750), stdev = 2905.083
[info]   CI (99.9%): [632514.331, 654887.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1665.667 ±(99.9%) 28.998 MB/sec [Average]
[info]   (min, avg, max) = (1655.758, 1665.667, 1673.531), stdev = 7.531
[info]   CI (99.9%): [1636.669, 1694.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4072.001, 4072.001, 4072.001), stdev = 0.001
[info]   CI (99.9%): [4072.001, 4072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.333 ±(99.9%) 71.801 MB/sec [Average]
[info]   (min, avg, max) = (1639.114, 1664.333, 1685.370), stdev = 18.646
[info]   CI (99.9%): [1592.532, 1736.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4068.836 ±(99.9%) 200.381 B/op [Average]
[info]   (min, avg, max) = (3995.930, 4068.836, 4125.988), stdev = 52.038
[info]   CI (99.9%): [3868.454, 4269.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.183 ±(99.9%) 0.263 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.183, 0.255), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.64% complete, ETA 01:06:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1124049.545 ops/s
[info] # Warmup Iteration   2: 2011365.106 ops/s
[info] # Warmup Iteration   3: 2030434.456 ops/s
[info] Iteration   1: 2058266.734 ops/s
[info]                  ·gc.alloc.rate:                   2051.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1528.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2030712.121 ops/s
[info]                  ·gc.alloc.rate:                   2023.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1559.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2064549.224 ops/s
[info]                  ·gc.alloc.rate:                   2057.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1542.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2058312.094 ops/s
[info]                  ·gc.alloc.rate:                   2050.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1552.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2046095.320 ops/s
[info]                  ·gc.alloc.rate:                   2038.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1566.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2051587.099 ±(99.9%) 51797.391 ops/s [Average]
[info]   (min, avg, max) = (2030712.121, 2051587.099, 2064549.224), stdev = 13451.618
[info]   CI (99.9%): [1999789.707, 2103384.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2044.147 ±(99.9%) 51.715 MB/sec [Average]
[info]   (min, avg, max) = (2023.350, 2044.147, 2057.018), stdev = 13.430
[info]   CI (99.9%): [1992.432, 2095.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1568.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1568.000, 1568.000, 1568.000), stdev = 0.001
[info]   CI (99.9%): [1568.000, 1568.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2020.651 ±(99.9%) 56.266 MB/sec [Average]
[info]   (min, avg, max) = (1999.945, 2020.651, 2036.344), stdev = 14.612
[info]   CI (99.9%): [1964.384, 2076.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1550.028 ±(99.9%) 56.967 B/op [Average]
[info]   (min, avg, max) = (1528.885, 1550.028, 1566.317), stdev = 14.794
[info]   CI (99.9%): [1493.061, 1606.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.058, 0.096), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.94% complete, ETA 01:06:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1999677.494 ops/s
[info] # Warmup Iteration   2: 5917470.819 ops/s
[info] # Warmup Iteration   3: 5918924.091 ops/s
[info] Iteration   1: 5963486.444 ops/s
[info]                  ·gc.alloc.rate:                   1637.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     431.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5889309.869 ops/s
[info]                  ·gc.alloc.rate:                   1616.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5915474.867 ops/s
[info]                  ·gc.alloc.rate:                   1623.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5929465.567 ops/s
[info]                  ·gc.alloc.rate:                   1627.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     444.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5910941.118 ops/s
[info]                  ·gc.alloc.rate:                   1622.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     448.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   5921735.573 ±(99.9%) 105630.381 ops/s [Average]
[info]   (min, avg, max) = (5889309.869, 5921735.573, 5963486.444), stdev = 27431.875
[info]   CI (99.9%): [5816105.192, 6027365.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1625.592 ±(99.9%) 29.319 MB/sec [Average]
[info]   (min, avg, max) = (1616.656, 1625.592, 1637.226), stdev = 7.614
[info]   CI (99.9%): [1596.273, 1654.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1595.098 ±(99.9%) 573.502 MB/sec [Average]
[info]   (min, avg, max) = (1330.749, 1595.098, 1683.036), stdev = 148.937
[info]   CI (99.9%): [1021.596, 2168.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   423.893 ±(99.9%) 152.230 B/op [Average]
[info]   (min, avg, max) = (354.024, 423.893, 448.107), stdev = 39.534
[info]   CI (99.9%): [271.664, 576.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.023, 0.033), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.24% complete, ETA 01:06:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16159929.658 ops/s
[info] # Warmup Iteration   2: 22088126.583 ops/s
[info] # Warmup Iteration   3: 22151634.034 ops/s
[info] Iteration   1: 22450248.208 ops/s
[info]                  ·gc.alloc.rate:                   684.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 22388636.623 ops/s
[info]                  ·gc.alloc.rate:                   682.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22293319.746 ops/s
[info]                  ·gc.alloc.rate:                   680.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22089203.308 ops/s
[info]                  ·gc.alloc.rate:                   673.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22358725.601 ops/s
[info]                  ·gc.alloc.rate:                   681.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   22316026.697 ±(99.9%) 534516.216 ops/s [Average]
[info]   (min, avg, max) = (22089203.308, 22316026.697, 22450248.208), stdev = 138812.164
[info]   CI (99.9%): [21781510.481, 22850542.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   680.732 ±(99.9%) 16.336 MB/sec [Average]
[info]   (min, avg, max) = (673.779, 680.732, 684.832), stdev = 4.242
[info]   CI (99.9%): [664.396, 697.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   664.211 ±(99.9%) 2.915 MB/sec [Average]
[info]   (min, avg, max) = (663.637, 664.211, 665.493), stdev = 0.757
[info]   CI (99.9%): [661.295, 667.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46.837 ±(99.9%) 1.161 B/op [Average]
[info]   (min, avg, max) = (46.537, 46.837, 47.322), stdev = 0.302
[info]   CI (99.9%): [45.675, 47.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.005, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.55% complete, ETA 01:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16955122.070 ops/s
[info] # Warmup Iteration   2: 23563101.819 ops/s
[info] # Warmup Iteration   3: 23717893.472 ops/s
[info] Iteration   1: 23687769.088 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23736476.852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23724191.571 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23497112.452 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23753151.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   23679740.324 ±(99.9%) 403866.154 ops/s [Average]
[info]   (min, avg, max) = (23497112.452, 23679740.324, 23753151.657), stdev = 104882.758
[info]   CI (99.9%): [23275874.169, 24083606.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.85% complete, ETA 01:06:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451049.586 ops/s
[info] # Warmup Iteration   2: 1389516.960 ops/s
[info] # Warmup Iteration   3: 1392384.352 ops/s
[info] Iteration   1: 1417210.564 ops/s
[info]                  ·gc.alloc.rate:                   2125.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2197.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1418613.501 ops/s
[info]                  ·gc.alloc.rate:                   2127.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2333.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2588.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1394132.386 ops/s
[info]                  ·gc.alloc.rate:                   2090.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2275.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1414625.029 ops/s
[info]                  ·gc.alloc.rate:                   2121.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2253.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1409619.892 ops/s
[info]                  ·gc.alloc.rate:                   2113.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2269.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1410840.274 ±(99.9%) 38312.014 ops/s [Average]
[info]   (min, avg, max) = (1394132.386, 1410840.274, 1418613.501), stdev = 9949.508
[info]   CI (99.9%): [1372528.260, 1449152.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2115.771 ±(99.9%) 57.531 MB/sec [Average]
[info]   (min, avg, max) = (2090.661, 2115.771, 2127.317), stdev = 14.941
[info]   CI (99.9%): [2058.240, 2173.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2360.000, 2360.000, 2360.000), stdev = 0.001
[info]   CI (99.9%): [2360.000, 2360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2077.624 ±(99.9%) 556.093 MB/sec [Average]
[info]   (min, avg, max) = (1979.198, 2077.624, 2333.266), stdev = 144.416
[info]   CI (99.9%): [1521.531, 2633.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2317.190 ±(99.9%) 595.889 B/op [Average]
[info]   (min, avg, max) = (2197.897, 2317.190, 2588.475), stdev = 154.750
[info]   CI (99.9%): [1721.301, 2913.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.187), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.111, 0.208), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.15% complete, ETA 01:05:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14907.985 ops/s
[info] # Warmup Iteration   2: 18861.189 ops/s
[info] # Warmup Iteration   3: 18455.235 ops/s
[info] Iteration   1: 19016.086 ops/s
[info]                  ·gc.alloc.rate:                   1346.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              111440.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109880.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.892 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19121.012 ops/s
[info]                  ·gc.alloc.rate:                   1354.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109660.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.281 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 19017.300 ops/s
[info]                  ·gc.alloc.rate:                   1346.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110750.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.336 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18895.100 ops/s
[info]                  ·gc.alloc.rate:                   1338.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              111447.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111848.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.935 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19041.461 ops/s
[info]                  ·gc.alloc.rate:                   1348.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111376.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.720 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19018.192 ±(99.9%) 312.059 ops/s [Average]
[info]   (min, avg, max) = (18895.100, 19018.192, 19121.012), stdev = 81.041
[info]   CI (99.9%): [18706.133, 19330.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1346.818 ±(99.9%) 22.077 MB/sec [Average]
[info]   (min, avg, max) = (1338.134, 1346.818, 1354.116), stdev = 5.733
[info]   CI (99.9%): [1324.741, 1368.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   111446.322 ±(99.9%) 12.932 B/op [Average]
[info]   (min, avg, max) = (111440.350, 111446.322, 111448.031), stdev = 3.358
[info]   CI (99.9%): [111433.390, 111459.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.808 ±(99.9%) 30.673 MB/sec [Average]
[info]   (min, avg, max) = (1327.718, 1337.808, 1347.607), stdev = 7.966
[info]   CI (99.9%): [1307.135, 1368.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110703.176 ±(99.9%) 3617.289 B/op [Average]
[info]   (min, avg, max) = (109660.740, 110703.176, 111848.107), stdev = 939.399
[info]   CI (99.9%): [107085.887, 114320.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.233 ±(99.9%) 13.548 B/op [Average]
[info]   (min, avg, max) = (1.720, 7.233, 10.336), stdev = 3.518
[info]   CI (99.9%): [≈ 0, 20.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.45% complete, ETA 01:05:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21293.778 ops/s
[info] # Warmup Iteration   2: 31309.329 ops/s
[info] # Warmup Iteration   3: 31615.076 ops/s
[info] Iteration   1: 32079.098 ops/s
[info]                  ·gc.alloc.rate:                   861.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              42273.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48140.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 32193.091 ops/s
[info]                  ·gc.alloc.rate:               864.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          42248.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32011.870 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 31490.163 ops/s
[info]                  ·gc.alloc.rate:                   845.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49237.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31591.995 ops/s
[info]                  ·gc.alloc.rate:                   848.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32818.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31962.507 ops/s
[info]                  ·gc.alloc.rate:                   858.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48904.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31863.371 ±(99.9%) 1183.738 ops/s [Average]
[info]   (min, avg, max) = (31490.163, 31863.371, 32193.091), stdev = 307.413
[info]   CI (99.9%): [30679.633, 33047.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   855.521 ±(99.9%) 31.809 MB/sec [Average]
[info]   (min, avg, max) = (845.616, 855.521, 864.209), stdev = 8.261
[info]   CI (99.9%): [823.712, 887.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42253.070 ±(99.9%) 43.536 B/op [Average]
[info]   (min, avg, max) = (42248.013, 42253.070, 42273.295), stdev = 11.306
[info]   CI (99.9%): [42209.534, 42296.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   854.727 ±(99.9%) 695.931 MB/sec [Average]
[info]   (min, avg, max) = (654.823, 854.727, 993.266), stdev = 180.731
[info]   CI (99.9%): [158.796, 1550.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42222.774 ±(99.9%) 34525.977 B/op [Average]
[info]   (min, avg, max) = (32011.870, 42222.774, 49237.829), stdev = 8966.286
[info]   CI (99.9%): [7696.798, 76748.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.167), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.507 ±(99.9%) 15.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.507, 8.323), stdev = 3.906
[info]   CI (99.9%): [≈ 0, 18.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.76% complete, ETA 01:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25832.691 ops/s
[info] # Warmup Iteration   2: 28156.546 ops/s
[info] # Warmup Iteration   3: 28208.774 ops/s
[info] Iteration   1: 28258.160 ops/s
[info]                  ·gc.alloc.rate:               379.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          21144.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14246.150 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 28225.616 ops/s
[info]                  ·gc.alloc.rate:                   379.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32816.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28953.608 ops/s
[info]                  ·gc.alloc.rate:                   389.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18085.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28957.383 ops/s
[info]                  ·gc.alloc.rate:               389.071 MB/sec
[info]                  ·gc.alloc.rate.norm:          21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18065.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 28189.844 ops/s
[info]                  ·gc.alloc.rate:               378.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          21144.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18557.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   28516.922 ±(99.9%) 1544.461 ops/s [Average]
[info]   (min, avg, max) = (28189.844, 28516.922, 28957.383), stdev = 401.092
[info]   CI (99.9%): [26972.461, 30061.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   383.146 ±(99.9%) 20.758 MB/sec [Average]
[info]   (min, avg, max) = (378.764, 383.146, 389.071), stdev = 5.391
[info]   CI (99.9%): [362.388, 403.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.017 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (21144.015, 21144.017, 21144.021), stdev = 0.003
[info]   CI (99.9%): [21144.007, 21144.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   368.395 ±(99.9%) 490.907 MB/sec [Average]
[info]   (min, avg, max) = (255.806, 368.395, 588.570), stdev = 127.487
[info]   CI (99.9%): [≈ 0, 859.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20354.342 ±(99.9%) 27649.374 B/op [Average]
[info]   (min, avg, max) = (14246.150, 20354.342, 32816.752), stdev = 7180.455
[info]   CI (99.9%): [≈ 0, 48003.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 2.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.667), stdev = 0.739
[info]   CI (99.9%): [≈ 0, 3.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.272 ±(99.9%) 158.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.272, 92.967), stdev = 41.223
[info]   CI (99.9%): [≈ 0, 178.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.06% complete, ETA 01:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14931.703 ops/s
[info] # Warmup Iteration   2: 25234.534 ops/s
[info] # Warmup Iteration   3: 25845.129 ops/s
[info] Iteration   1: 24901.408 ops/s
[info]                  ·gc.alloc.rate:                   1289.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82978.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.894 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25539.504 ops/s
[info]                  ·gc.alloc.rate:                   1322.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81360.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.414 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25848.705 ops/s
[info]                  ·gc.alloc.rate:                   1337.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80871.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25861.488 ops/s
[info]                  ·gc.alloc.rate:                   1338.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81297.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.800 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25557.570 ops/s
[info]                  ·gc.alloc.rate:                   1322.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82612.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.846 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25541.735 ±(99.9%) 1499.710 ops/s [Average]
[info]   (min, avg, max) = (24901.408, 25541.735, 25861.488), stdev = 389.470
[info]   CI (99.9%): [24042.025, 27041.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1322.099 ±(99.9%) 77.048 MB/sec [Average]
[info]   (min, avg, max) = (1289.210, 1322.099, 1338.553), stdev = 20.009
[info]   CI (99.9%): [1245.052, 1399.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81456.018 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (81456.017, 81456.018, 81456.023), stdev = 0.003
[info]   CI (99.9%): [81456.008, 81456.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1327.926 ±(99.9%) 43.978 MB/sec [Average]
[info]   (min, avg, max) = (1313.305, 1327.926, 1341.638), stdev = 11.421
[info]   CI (99.9%): [1283.947, 1371.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81824.233 ±(99.9%) 3525.774 B/op [Average]
[info]   (min, avg, max) = (80871.840, 81824.233, 82978.412), stdev = 915.632
[info]   CI (99.9%): [78298.458, 85350.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.658 ±(99.9%) 6.879 B/op [Average]
[info]   (min, avg, max) = (3.800, 5.658, 7.894), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 12.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.36% complete, ETA 01:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17838.974 ops/s
[info] # Warmup Iteration   2: 27633.850 ops/s
[info] # Warmup Iteration   3: 27680.227 ops/s
[info] Iteration   1: 27380.924 ops/s
[info]                  ·gc.alloc.rate:                   1875.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              107792.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114713.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.179 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27304.190 ops/s
[info]                  ·gc.alloc.rate:                   1869.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              107765.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96525.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.600 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27734.206 ops/s
[info]                  ·gc.alloc.rate:                   1899.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114624.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.544 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27616.159 ops/s
[info]                  ·gc.alloc.rate:                   1890.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115574.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.559 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27742.726 ops/s
[info]                  ·gc.alloc.rate:                   1899.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96135.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.085 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27555.641 ±(99.9%) 780.414 ops/s [Average]
[info]   (min, avg, max) = (27304.190, 27555.641, 27742.726), stdev = 202.671
[info]   CI (99.9%): [26775.227, 28336.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1887.020 ±(99.9%) 53.047 MB/sec [Average]
[info]   (min, avg, max) = (1869.709, 1887.020, 1899.562), stdev = 13.776
[info]   CI (99.9%): [1833.973, 1940.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   107762.659 ±(99.9%) 66.926 B/op [Average]
[info]   (min, avg, max) = (107752.016, 107762.659, 107792.017), stdev = 17.380
[info]   CI (99.9%): [107695.733, 107829.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1882.837 ±(99.9%) 698.620 MB/sec [Average]
[info]   (min, avg, max) = (1674.707, 1882.837, 2028.221), stdev = 181.429
[info]   CI (99.9%): [1184.217, 2581.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   107514.752 ±(99.9%) 39342.573 B/op [Average]
[info]   (min, avg, max) = (96135.842, 107514.752, 115574.167), stdev = 10217.141
[info]   CI (99.9%): [68172.178, 146857.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.993 ±(99.9%) 7.520 B/op [Average]
[info]   (min, avg, max) = (3.544, 4.993, 7.179), stdev = 1.953
[info]   CI (99.9%): [≈ 0, 12.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.67% complete, ETA 01:05:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12309.174 ops/s
[info] # Warmup Iteration   2: 26329.753 ops/s
[info] # Warmup Iteration   3: 26463.213 ops/s
[info] Iteration   1: 26335.825 ops/s
[info]                  ·gc.alloc.rate:               1544.689 MB/sec
[info]                  ·gc.alloc.rate.norm:          92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1309.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78239.167 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 25591.092 ops/s
[info]                  ·gc.alloc.rate:                   1501.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101391.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.401 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26494.973 ops/s
[info]                  ·gc.alloc.rate:                   1554.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98819.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 26348.405 ops/s
[info]                  ·gc.alloc.rate:                   1545.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79977.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.487 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26584.730 ops/s
[info]                  ·gc.alloc.rate:                   1559.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              92312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99510.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.161 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   26271.005 ±(99.9%) 1517.295 ops/s [Average]
[info]   (min, avg, max) = (25591.092, 26271.005, 26584.730), stdev = 394.037
[info]   CI (99.9%): [24753.710, 27788.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1541.034 ±(99.9%) 89.387 MB/sec [Average]
[info]   (min, avg, max) = (1501.021, 1541.034, 1559.647), stdev = 23.213
[info]   CI (99.9%): [1451.647, 1630.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   92312.018 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (92312.016, 92312.018, 92312.023), stdev = 0.003
[info]   CI (99.9%): [92312.007, 92312.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1528.397 ±(99.9%) 720.527 MB/sec [Average]
[info]   (min, avg, max) = (1309.203, 1528.397, 1681.267), stdev = 187.118
[info]   CI (99.9%): [807.871, 2248.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   91587.638 ±(99.9%) 44080.183 B/op [Average]
[info]   (min, avg, max) = (78239.167, 91587.638, 101391.842), stdev = 11447.484
[info]   CI (99.9%): [47507.454, 135667.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.246 ±(99.9%) 11.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.246, 6.401), stdev = 2.880
[info]   CI (99.9%): [≈ 0, 15.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 6.97% complete, ETA 01:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23675.318 ops/s
[info] # Warmup Iteration   2: 30857.777 ops/s
[info] # Warmup Iteration   3: 30594.459 ops/s
[info] Iteration   1: 30298.408 ops/s
[info]                  ·gc.alloc.rate:                   1681.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86452.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 31008.227 ops/s
[info]                  ·gc.alloc.rate:                   1720.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84963.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.396 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30399.003 ops/s
[info]                  ·gc.alloc.rate:                   1687.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104389.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.460 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 30466.670 ops/s
[info]                  ·gc.alloc.rate:                   1690.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87232.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 31012.601 ops/s
[info]                  ·gc.alloc.rate:                   1721.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85933.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.282 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30636.982 ±(99.9%) 1332.770 ops/s [Average]
[info]   (min, avg, max) = (30298.408, 30636.982, 31012.601), stdev = 346.116
[info]   CI (99.9%): [29304.212, 31969.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1700.422 ±(99.9%) 73.877 MB/sec [Average]
[info]   (min, avg, max) = (1681.769, 1700.422, 1721.358), stdev = 19.186
[info]   CI (99.9%): [1626.544, 1774.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   87328.016 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (87328.014, 87328.016, 87328.021), stdev = 0.003
[info]   CI (99.9%): [87328.005, 87328.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.796 ±(99.9%) 581.286 MB/sec [Average]
[info]   (min, avg, max) = (1664.915, 1747.796, 2017.055), stdev = 150.958
[info]   CI (99.9%): [1166.510, 2329.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   89794.279 ±(99.9%) 31576.214 B/op [Average]
[info]   (min, avg, max) = (84963.935, 89794.279, 104389.055), stdev = 8200.242
[info]   CI (99.9%): [58218.065, 121370.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.553 ±(99.9%) 5.225 B/op [Average]
[info]   (min, avg, max) = (4.301, 5.553, 7.396), stdev = 1.357
[info]   CI (99.9%): [0.328, 10.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.27% complete, ETA 01:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24248.113 ops/s
[info] # Warmup Iteration   2: 31092.983 ops/s
[info] # Warmup Iteration   3: 30046.725 ops/s
[info] Iteration   1: 30249.478 ops/s
[info]                  ·gc.alloc.rate:                   1619.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86607.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.166 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30002.138 ops/s
[info]                  ·gc.alloc.rate:                   1606.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70198.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.184 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 30002.832 ops/s
[info]                  ·gc.alloc.rate:                   1606.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88179.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.184 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 30439.257 ops/s
[info]                  ·gc.alloc.rate:                   1629.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87191.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30760.089 ops/s
[info]                  ·gc.alloc.rate:                   1646.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              84248.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86551.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.521 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30290.759 ±(99.9%) 1233.155 ops/s [Average]
[info]   (min, avg, max) = (30002.138, 30290.759, 30760.089), stdev = 320.246
[info]   CI (99.9%): [29057.604, 31523.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1621.697 ±(99.9%) 65.580 MB/sec [Average]
[info]   (min, avg, max) = (1606.135, 1621.697, 1646.691), stdev = 17.031
[info]   CI (99.9%): [1556.118, 1687.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   84248.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (84248.014, 84248.015, 84248.020), stdev = 0.002
[info]   CI (99.9%): [84248.006, 84248.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1612.588 ±(99.9%) 591.728 MB/sec [Average]
[info]   (min, avg, max) = (1338.291, 1612.588, 1691.724), stdev = 153.670
[info]   CI (99.9%): [1020.860, 2204.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   83745.802 ±(99.9%) 29270.019 B/op [Average]
[info]   (min, avg, max) = (70198.580, 83745.802, 88179.203), stdev = 7601.331
[info]   CI (99.9%): [54475.783, 113015.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.167), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4.087 ±(99.9%) 10.936 B/op [Average]
[info]   (min, avg, max) = (2.166, 4.087, 8.521), stdev = 2.840
[info]   CI (99.9%): [≈ 0, 15.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.58% complete, ETA 01:04:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5245.970 ops/s
[info] # Warmup Iteration   2: 8021.781 ops/s
[info] # Warmup Iteration   3: 8423.616 ops/s
[info] Iteration   1: 8351.879 ops/s
[info]                  ·gc.alloc.rate:                   1181.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247897.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.845 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8404.436 ops/s
[info]                  ·gc.alloc.rate:                   1188.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247486.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.491 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8414.768 ops/s
[info]                  ·gc.alloc.rate:                   1190.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186329.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8406.562 ops/s
[info]                  ·gc.alloc.rate:                   1188.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249735.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.589 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8404.590 ops/s
[info]                  ·gc.alloc.rate:                   1188.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              222546.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188087.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8396.447 ±(99.9%) 97.308 ops/s [Average]
[info]   (min, avg, max) = (8351.879, 8396.447, 8414.768), stdev = 25.271
[info]   CI (99.9%): [8299.139, 8493.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1187.398 ±(99.9%) 13.809 MB/sec [Average]
[info]   (min, avg, max) = (1181.075, 1187.398, 1190.008), stdev = 3.586
[info]   CI (99.9%): [1173.589, 1201.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   222544.457 ±(99.9%) 3.485 B/op [Average]
[info]   (min, avg, max) = (222544.051, 222544.457, 222546.076), stdev = 0.905
[info]   CI (99.9%): [222540.972, 222547.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1194.464 ±(99.9%) 682.555 MB/sec [Average]
[info]   (min, avg, max) = (996.356, 1194.464, 1334.073), stdev = 177.257
[info]   CI (99.9%): [511.909, 1877.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   223907.297 ±(99.9%) 129065.384 B/op [Average]
[info]   (min, avg, max) = (186329.065, 223907.297, 249735.186), stdev = 33517.870
[info]   CI (99.9%): [94841.912, 352972.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.701 ±(99.9%) 23.703 B/op [Average]
[info]   (min, avg, max) = (3.898, 11.701, 19.491), stdev = 6.155
[info]   CI (99.9%): [≈ 0, 35.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.88% complete, ETA 01:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14045.091 ops/s
[info] # Warmup Iteration   2: 18074.565 ops/s
[info] # Warmup Iteration   3: 17980.195 ops/s
[info] Iteration   1: 17871.321 ops/s
[info]                  ·gc.alloc.rate:                   1576.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              138808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146448.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.666 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17943.359 ops/s
[info]                  ·gc.alloc.rate:                   1582.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              138808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146670.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17986.556 ops/s
[info]                  ·gc.alloc.rate:                   1586.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              138808.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147027.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.286 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17841.164 ops/s
[info]                  ·gc.alloc.rate:                   1573.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              138808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118953.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.672 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17859.895 ops/s
[info]                  ·gc.alloc.rate:                   1575.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              138808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148983.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.006 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17900.459 ±(99.9%) 237.865 ops/s [Average]
[info]   (min, avg, max) = (17841.164, 17900.459, 17986.556), stdev = 61.773
[info]   CI (99.9%): [17662.594, 18138.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1578.861 ±(99.9%) 21.041 MB/sec [Average]
[info]   (min, avg, max) = (1573.643, 1578.861, 1586.450), stdev = 5.464
[info]   CI (99.9%): [1557.820, 1599.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138808.026 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (138808.024, 138808.026, 138808.033), stdev = 0.004
[info]   CI (99.9%): [138808.012, 138808.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611.010 ±(99.9%) 566.311 MB/sec [Average]
[info]   (min, avg, max) = (1348.555, 1611.010, 1690.673), stdev = 147.069
[info]   CI (99.9%): [1044.700, 2177.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   141616.820 ±(99.9%) 48937.478 B/op [Average]
[info]   (min, avg, max) = (118953.385, 141616.820, 148983.143), stdev = 12708.908
[info]   CI (99.9%): [92679.342, 190554.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.587 ±(99.9%) 11.799 B/op [Average]
[info]   (min, avg, max) = (3.666, 6.587, 11.006), stdev = 3.064
[info]   CI (99.9%): [≈ 0, 18.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.18% complete, ETA 01:04:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28405.555 ops/s
[info] # Warmup Iteration   2: 40948.223 ops/s
[info] # Warmup Iteration   3: 41460.749 ops/s
[info] Iteration   1: 42011.512 ops/s
[info]                  ·gc.alloc.rate:                   1159.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49058.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.119 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41315.326 ops/s
[info]                  ·gc.alloc.rate:                   1140.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37566.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41964.353 ops/s
[info]                  ·gc.alloc.rate:                   1158.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49590.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.342 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41309.186 ops/s
[info]                  ·gc.alloc.rate:                   1140.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37980.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.172 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41990.403 ops/s
[info]                  ·gc.alloc.rate:                   1159.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50059.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.901 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   41718.156 ±(99.9%) 1428.269 ops/s [Average]
[info]   (min, avg, max) = (41309.186, 41718.156, 42011.512), stdev = 370.917
[info]   CI (99.9%): [40289.887, 43146.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1151.724 ±(99.9%) 39.506 MB/sec [Average]
[info]   (min, avg, max) = (1140.421, 1151.724, 1159.807), stdev = 10.260
[info]   CI (99.9%): [1112.218, 1191.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43448.012 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (43448.010, 43448.012, 43448.016), stdev = 0.002
[info]   CI (99.9%): [43448.003, 43448.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.139 ±(99.9%) 699.142 MB/sec [Average]
[info]   (min, avg, max) = (986.184, 1190.139, 1335.644), stdev = 181.565
[info]   CI (99.9%): [490.998, 1889.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44851.246 ±(99.9%) 24922.502 B/op [Average]
[info]   (min, avg, max) = (37566.953, 44851.246, 50059.405), stdev = 6472.295
[info]   CI (99.9%): [19928.744, 69773.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.824 ±(99.9%) 3.408 B/op [Average]
[info]   (min, avg, max) = (1.586, 2.824, 3.901), stdev = 0.885
[info]   CI (99.9%): [≈ 0, 6.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.48% complete, ETA 01:03:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57560.496 ops/s
[info] # Warmup Iteration   2: 61382.137 ops/s
[info] # Warmup Iteration   3: 62127.264 ops/s
[info] Iteration   1: 62290.972 ops/s
[info]                  ·gc.alloc.rate:                   804.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16797.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 61629.653 ops/s
[info]                  ·gc.alloc.rate:                   796.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25466.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 60798.526 ops/s
[info]                  ·gc.alloc.rate:               785.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17226.803 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 61973.616 ops/s
[info]                  ·gc.alloc.rate:                   800.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25391.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 62270.233 ops/s
[info]                  ·gc.alloc.rate:                   804.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16885.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   61792.600 ±(99.9%) 2376.825 ops/s [Average]
[info]   (min, avg, max) = (60798.526, 61792.600, 62290.972), stdev = 617.254
[info]   CI (99.9%): [59415.775, 64169.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   798.542 ±(99.9%) 30.409 MB/sec [Average]
[info]   (min, avg, max) = (785.835, 798.542, 804.934), stdev = 7.897
[info]   CI (99.9%): [768.133, 828.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.007), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.202 ±(99.9%) 701.125 MB/sec [Average]
[info]   (min, avg, max) = (664.871, 799.202, 999.946), stdev = 182.080
[info]   CI (99.9%): [98.076, 1500.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20353.654 ±(99.9%) 17851.780 B/op [Average]
[info]   (min, avg, max) = (16797.413, 20353.654, 25466.316), stdev = 4636.051
[info]   CI (99.9%): [2501.874, 38205.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.481 ±(99.9%) 4.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.481, 3.190), stdev = 1.211
[info]   CI (99.9%): [≈ 0, 6.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 8.79% complete, ETA 01:03:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14097.300 ops/s
[info] # Warmup Iteration   2: 30673.208 ops/s
[info] # Warmup Iteration   3: 31235.678 ops/s
[info] Iteration   1: 31602.967 ops/s
[info]                  ·gc.alloc.rate:                   2143.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98637.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.220 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 31190.327 ops/s
[info]                  ·gc.alloc.rate:                   2115.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2335.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117821.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.201 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 31214.899 ops/s
[info]                  ·gc.alloc.rate:                   2117.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101693.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.050 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 31277.300 ops/s
[info]                  ·gc.alloc.rate:                   2121.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101991.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.190 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 31178.631 ops/s
[info]                  ·gc.alloc.rate:                   2115.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              106744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119613.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.199 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   31292.825 ±(99.9%) 683.550 ops/s [Average]
[info]   (min, avg, max) = (31178.631, 31292.825, 31602.967), stdev = 177.516
[info]   CI (99.9%): [30609.275, 31976.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2122.734 ±(99.9%) 45.823 MB/sec [Average]
[info]   (min, avg, max) = (2115.535, 2122.734, 2143.519), stdev = 11.900
[info]   CI (99.9%): [2076.910, 2168.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   106744.015 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (106744.014, 106744.015, 106744.019), stdev = 0.002
[info]   CI (99.9%): [106744.007, 106744.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2146.171 ±(99.9%) 731.117 MB/sec [Average]
[info]   (min, avg, max) = (1980.738, 2146.171, 2370.604), stdev = 189.869
[info]   CI (99.9%): [1415.054, 2877.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107951.680 ±(99.9%) 38256.969 B/op [Average]
[info]   (min, avg, max) = (98637.796, 107951.680, 119613.644), stdev = 9935.213
[info]   CI (99.9%): [69694.711, 146208.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.972 ±(99.9%) 7.138 B/op [Average]
[info]   (min, avg, max) = (1.050, 3.972, 6.220), stdev = 1.854
[info]   CI (99.9%): [≈ 0, 11.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.09% complete, ETA 01:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16357.978 ops/s
[info] # Warmup Iteration   2: 27708.611 ops/s
[info] # Warmup Iteration   3: 28219.388 ops/s
[info] Iteration   1: 28279.632 ops/s
[info]                  ·gc.alloc.rate:                   1648.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91471.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.475 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28262.431 ops/s
[info]                  ·gc.alloc.rate:                   1647.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92271.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.955 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28525.924 ops/s
[info]                  ·gc.alloc.rate:                   1662.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92137.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.297 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28282.945 ops/s
[info]                  ·gc.alloc.rate:                   1648.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93441.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.475 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27807.165 ops/s
[info]                  ·gc.alloc.rate:                   1620.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              91736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95515.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.534 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   28231.619 ±(99.9%) 1005.353 ops/s [Average]
[info]   (min, avg, max) = (27807.165, 28231.619, 28525.924), stdev = 261.087
[info]   CI (99.9%): [27226.266, 29236.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1645.797 ±(99.9%) 58.765 MB/sec [Average]
[info]   (min, avg, max) = (1620.920, 1645.797, 1662.851), stdev = 15.261
[info]   CI (99.9%): [1587.031, 1704.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   91736.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (91736.015, 91736.017, 91736.021), stdev = 0.002
[info]   CI (99.9%): [91736.008, 91736.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1667.712 ±(99.9%) 67.288 MB/sec [Average]
[info]   (min, avg, max) = (1644.062, 1667.712, 1687.698), stdev = 17.475
[info]   CI (99.9%): [1600.424, 1735.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92967.501 ±(99.9%) 6126.977 B/op [Average]
[info]   (min, avg, max) = (91471.445, 92967.501, 95515.309), stdev = 1591.156
[info]   CI (99.9%): [86840.524, 99094.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.947 ±(99.9%) 6.776 B/op [Average]
[info]   (min, avg, max) = (2.297, 3.947, 6.955), stdev = 1.760
[info]   CI (99.9%): [≈ 0, 10.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.39% complete, ETA 01:03:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32450.342 ops/s
[info] # Warmup Iteration   2: 37363.105 ops/s
[info] # Warmup Iteration   3: 36641.173 ops/s
[info] Iteration   1: 37404.413 ops/s
[info]                  ·gc.alloc.rate:                   1602.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70029.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.379 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 37348.695 ops/s
[info]                  ·gc.alloc.rate:                   1599.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56390.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.386 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 37154.772 ops/s
[info]                  ·gc.alloc.rate:                   1591.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71202.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.763 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 37542.860 ops/s
[info]                  ·gc.alloc.rate:                   1608.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70689.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.618 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37296.496 ops/s
[info]                  ·gc.alloc.rate:                   1597.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71396.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.270 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   37349.447 ±(99.9%) 548.405 ops/s [Average]
[info]   (min, avg, max) = (37154.772, 37349.447, 37542.860), stdev = 142.419
[info]   CI (99.9%): [36801.042, 37897.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1599.811 ±(99.9%) 23.038 MB/sec [Average]
[info]   (min, avg, max) = (1591.796, 1599.811, 1608.093), stdev = 5.983
[info]   CI (99.9%): [1576.773, 1622.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   67408.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (67408.012, 67408.012, 67408.012), stdev = 0.001
[info]   CI (99.9%): [67408.010, 67408.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.465 ±(99.9%) 591.785 MB/sec [Average]
[info]   (min, avg, max) = (1338.169, 1612.465, 1692.035), stdev = 153.685
[info]   CI (99.9%): [1020.680, 2204.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   67941.713 ±(99.9%) 24947.694 B/op [Average]
[info]   (min, avg, max) = (56390.748, 67941.713, 71396.715), stdev = 6478.837
[info]   CI (99.9%): [42994.019, 92889.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.683 ±(99.9%) 5.553 B/op [Average]
[info]   (min, avg, max) = (1.763, 3.683, 5.270), stdev = 1.442
[info]   CI (99.9%): [≈ 0, 9.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.70% complete, ETA 01:03:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32873.042 ops/s
[info] # Warmup Iteration   2: 37138.022 ops/s
[info] # Warmup Iteration   3: 37629.659 ops/s
[info] Iteration   1: 37893.171 ops/s
[info]                  ·gc.alloc.rate:                   1557.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69004.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 37899.832 ops/s
[info]                  ·gc.alloc.rate:                   1557.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69444.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37963.273 ops/s
[info]                  ·gc.alloc.rate:                   1559.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55727.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.726 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37938.613 ops/s
[info]                  ·gc.alloc.rate:                   1558.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69940.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.727 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37716.577 ops/s
[info]                  ·gc.alloc.rate:                   1549.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70546.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.080 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   37882.293 ±(99.9%) 373.421 ops/s [Average]
[info]   (min, avg, max) = (37716.577, 37882.293, 37963.273), stdev = 96.976
[info]   CI (99.9%): [37508.872, 38255.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1556.616 ±(99.9%) 15.377 MB/sec [Average]
[info]   (min, avg, max) = (1549.741, 1556.616, 1559.855), stdev = 3.993
[info]   CI (99.9%): [1541.239, 1571.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   64664.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64664.011, 64664.011, 64664.011), stdev = 0.001
[info]   CI (99.9%): [64664.011, 64664.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1611.071 ±(99.9%) 575.942 MB/sec [Average]
[info]   (min, avg, max) = (1344.283, 1611.071, 1690.715), stdev = 149.570
[info]   CI (99.9%): [1035.129, 2187.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   66932.718 ±(99.9%) 24221.233 B/op [Average]
[info]   (min, avg, max) = (55727.433, 66932.718, 70546.228), stdev = 6290.177
[info]   CI (99.9%): [42711.485, 91153.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   3.635 ±(99.9%) 7.256 B/op [Average]
[info]   (min, avg, max) = (1.726, 3.635, 6.080), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 10.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.00% complete, ETA 01:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276273.248 ops/s
[info] # Warmup Iteration   2: 328174.616 ops/s
[info] # Warmup Iteration   3: 326405.245 ops/s
[info] Iteration   1: 329025.560 ops/s
[info]                  ·gc.alloc.rate:                   1808.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9571.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 328842.508 ops/s
[info]                  ·gc.alloc.rate:                   1807.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8030.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 326414.844 ops/s
[info]                  ·gc.alloc.rate:                   1793.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9750.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 327412.802 ops/s
[info]                  ·gc.alloc.rate:                   1799.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8129.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 326863.089 ops/s
[info]                  ·gc.alloc.rate:                   1796.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8162.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   327711.761 ±(99.9%) 4513.748 ops/s [Average]
[info]   (min, avg, max) = (326414.844, 327711.761, 329025.560), stdev = 1172.206
[info]   CI (99.9%): [323198.012, 332225.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1800.960 ±(99.9%) 24.466 MB/sec [Average]
[info]   (min, avg, max) = (1793.708, 1800.960, 1808.087), stdev = 6.354
[info]   CI (99.9%): [1776.493, 1825.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8648.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8648.001, 8648.001, 8648.001), stdev = 0.001
[info]   CI (99.9%): [8648.001, 8648.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1817.810 ±(99.9%) 683.070 MB/sec [Average]
[info]   (min, avg, max) = (1678.078, 1817.810, 2022.435), stdev = 177.391
[info]   CI (99.9%): [1134.740, 2500.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8729.163 ±(99.9%) 3290.785 B/op [Average]
[info]   (min, avg, max) = (8030.729, 8729.163, 9750.760), stdev = 854.606
[info]   CI (99.9%): [5438.378, 12019.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.400 ±(99.9%) 0.268 B/op [Average]
[info]   (min, avg, max) = (0.301, 0.400, 0.498), stdev = 0.070
[info]   CI (99.9%): [0.132, 0.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.30% complete, ETA 01:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 481860.369 ops/s
[info] # Warmup Iteration   2: 685146.083 ops/s
[info] # Warmup Iteration   3: 676777.409 ops/s
[info] Iteration   1: 677516.171 ops/s
[info]                  ·gc.alloc.rate:                   561.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     758.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 669780.986 ops/s
[info]                  ·gc.alloc.rate:                   554.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1534.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 675525.019 ops/s
[info]                  ·gc.alloc.rate:                   559.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1522.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 677248.866 ops/s
[info]                  ·gc.alloc.rate:                   561.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1520.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 697621.742 ops/s
[info]                  ·gc.alloc.rate:               578.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 738.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   679538.557 ±(99.9%) 40735.599 ops/s [Average]
[info]   (min, avg, max) = (669780.986, 679538.557, 697621.742), stdev = 10578.906
[info]   CI (99.9%): [638802.958, 720274.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   563.077 ±(99.9%) 33.712 MB/sec [Average]
[info]   (min, avg, max) = (554.945, 563.077, 578.033), stdev = 8.755
[info]   CI (99.9%): [529.365, 596.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.094 ±(99.9%) 689.096 MB/sec [Average]
[info]   (min, avg, max) = (326.714, 523.094, 654.545), stdev = 178.956
[info]   CI (99.9%): [≈ 0, 1212.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1215.133 ±(99.9%) 1639.640 B/op [Average]
[info]   (min, avg, max) = (738.600, 1215.133, 1534.704), stdev = 425.809
[info]   CI (99.9%): [≈ 0, 2854.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.469 ±(99.9%) 3.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.469, 2.177), stdev = 0.955
[info]   CI (99.9%): [≈ 0, 4.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.089 ±(99.9%) 8.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.089, 5.057), stdev = 2.219
[info]   CI (99.9%): [≈ 0, 9.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.61% complete, ETA 01:02:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1595171.740 ops/s
[info] # Warmup Iteration   2: 1683258.939 ops/s
[info] # Warmup Iteration   3: 1692853.999 ops/s
[info] Iteration   1: 1704001.176 ops/s
[info]                  ·gc.alloc.rate:                   329.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     472.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1730787.763 ops/s
[info]                  ·gc.alloc.rate:               334.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232.593 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1721426.855 ops/s
[info]                  ·gc.alloc.rate:                   332.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.486 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1723969.372 ops/s
[info]                  ·gc.alloc.rate:                   333.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1705309.022 ops/s
[info]                  ·gc.alloc.rate:               329.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 306.770 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1717098.838 ±(99.9%) 45718.640 ops/s [Average]
[info]   (min, avg, max) = (1704001.176, 1717098.838, 1730787.763), stdev = 11872.986
[info]   CI (99.9%): [1671380.197, 1762817.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   331.689 ±(99.9%) 8.821 MB/sec [Average]
[info]   (min, avg, max) = (329.155, 331.689, 334.325), stdev = 2.291
[info]   CI (99.9%): [322.868, 340.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   352.935 ±(99.9%) 364.684 MB/sec [Average]
[info]   (min, avg, max) = (255.795, 352.935, 511.615), stdev = 94.707
[info]   CI (99.9%): [≈ 0, 717.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   323.848 ±(99.9%) 341.901 B/op [Average]
[info]   (min, avg, max) = (232.593, 323.848, 472.516), stdev = 88.791
[info]   CI (99.9%): [≈ 0, 665.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.352 ±(99.9%) 2.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.626), stdev = 0.713
[info]   CI (99.9%): [≈ 0, 3.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.322 ±(99.9%) 2.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.322, 1.486), stdev = 0.652
[info]   CI (99.9%): [≈ 0, 2.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.91% complete, ETA 01:02:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66165.200 ops/s
[info] # Warmup Iteration   2: 104312.734 ops/s
[info] # Warmup Iteration   3: 105481.710 ops/s
[info] Iteration   1: 104141.108 ops/s
[info]                  ·gc.alloc.rate:                   3783.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4053.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61258.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.573 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 105671.828 ops/s
[info]                  ·gc.alloc.rate:                   3839.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3734.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55615.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.790 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 104318.415 ops/s
[info]                  ·gc.alloc.rate:                   3790.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3743.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56469.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.198 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 104818.961 ops/s
[info]                  ·gc.alloc.rate:                   3809.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56218.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.813 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 104094.846 ops/s
[info]                  ·gc.alloc.rate:                   3782.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56610.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.259 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   104609.032 ±(99.9%) 2540.699 ops/s [Average]
[info]   (min, avg, max) = (104094.846, 104609.032, 105671.828), stdev = 659.811
[info]   CI (99.9%): [102068.333, 107149.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3800.907 ±(99.9%) 92.164 MB/sec [Average]
[info]   (min, avg, max) = (3782.466, 3800.907, 3839.105), stdev = 23.935
[info]   CI (99.9%): [3708.743, 3893.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3804.380 ±(99.9%) 536.638 MB/sec [Average]
[info]   (min, avg, max) = (3734.348, 3804.380, 4053.548), stdev = 139.363
[info]   CI (99.9%): [3267.742, 4341.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57234.616 ±(99.9%) 8784.133 B/op [Average]
[info]   (min, avg, max) = (55615.848, 57234.616, 61258.124), stdev = 2281.211
[info]   CI (99.9%): [48450.483, 66018.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.187), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.127 ±(99.9%) 2.706 B/op [Average]
[info]   (min, avg, max) = (1.259, 2.127, 2.813), stdev = 0.703
[info]   CI (99.9%): [≈ 0, 4.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.21% complete, ETA 01:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247903.667 ops/s
[info] # Warmup Iteration   2: 317165.469 ops/s
[info] # Warmup Iteration   3: 326066.588 ops/s
[info] Iteration   1: 324486.423 ops/s
[info]                  ·gc.alloc.rate:                   1105.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6406.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 323582.041 ops/s
[info]                  ·gc.alloc.rate:                   1102.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4835.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 324278.031 ops/s
[info]                  ·gc.alloc.rate:                   1104.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4841.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 323983.588 ops/s
[info]                  ·gc.alloc.rate:                   1103.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6488.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 325495.478 ops/s
[info]                  ·gc.alloc.rate:                   1108.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4863.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   324365.112 ±(99.9%) 2762.544 ops/s [Average]
[info]   (min, avg, max) = (323582.041, 324365.112, 325495.478), stdev = 717.424
[info]   CI (99.9%): [321602.568, 327127.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1104.750 ±(99.9%) 9.749 MB/sec [Average]
[info]   (min, avg, max) = (1102.006, 1104.750, 1108.770), stdev = 2.532
[info]   CI (99.9%): [1095.002, 1114.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.886 ±(99.9%) 694.497 MB/sec [Average]
[info]   (min, avg, max) = (994.157, 1130.886, 1335.673), stdev = 180.359
[info]   CI (99.9%): [436.389, 1825.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5487.072 ±(99.9%) 3378.064 B/op [Average]
[info]   (min, avg, max) = (4835.440, 5487.072, 6488.052), stdev = 877.272
[info]   CI (99.9%): [2109.008, 8865.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.343 ±(99.9%) 0.212 B/op [Average]
[info]   (min, avg, max) = (0.303, 0.343, 0.405), stdev = 0.055
[info]   CI (99.9%): [0.131, 0.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.52% complete, ETA 01:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 690039.811 ops/s
[info] # Warmup Iteration   2: 920783.616 ops/s
[info] # Warmup Iteration   3: 938904.551 ops/s
[info] Iteration   1: 939814.196 ops/s
[info]                  ·gc.alloc.rate:                   664.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1094.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 938133.536 ops/s
[info]                  ·gc.alloc.rate:                   662.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1097.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 938434.424 ops/s
[info]                  ·gc.alloc.rate:                   663.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1098.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 933693.153 ops/s
[info]                  ·gc.alloc.rate:                   659.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1106.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 937052.813 ops/s
[info]                  ·gc.alloc.rate:               662.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1105.938 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   937425.624 ±(99.9%) 8884.567 ops/s [Average]
[info]   (min, avg, max) = (933693.153, 937425.624, 939814.196), stdev = 2307.294
[info]   CI (99.9%): [928541.057, 946310.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   662.418 ±(99.9%) 6.268 MB/sec [Average]
[info]   (min, avg, max) = (659.740, 662.418, 664.025), stdev = 1.628
[info]   CI (99.9%): [656.150, 668.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.608 ±(99.9%) 7.569 MB/sec [Average]
[info]   (min, avg, max) = (653.800, 655.608, 658.612), stdev = 1.966
[info]   CI (99.9%): [648.039, 663.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1100.577 ±(99.9%) 20.464 B/op [Average]
[info]   (min, avg, max) = (1094.878, 1100.577, 1106.544), stdev = 5.315
[info]   CI (99.9%): [1080.113, 1121.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.105 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.174), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 11.82% complete, ETA 01:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2011714.590 ops/s
[info] # Warmup Iteration   2: 2078419.518 ops/s
[info] # Warmup Iteration   3: 2141023.450 ops/s
[info] Iteration   1: 2107289.157 ops/s
[info]                  ·gc.alloc.rate:                   974.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     742.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2103948.742 ops/s
[info]                  ·gc.alloc.rate:                   973.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2146898.188 ops/s
[info]                  ·gc.alloc.rate:                   993.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2144920.041 ops/s
[info]                  ·gc.alloc.rate:                   992.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     735.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2148599.302 ops/s
[info]                  ·gc.alloc.rate:                   994.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2130331.086 ±(99.9%) 87129.971 ops/s [Average]
[info]   (min, avg, max) = (2103948.742, 2130331.086, 2148599.302), stdev = 22627.377
[info]   CI (99.9%): [2043201.115, 2217461.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   985.538 ±(99.9%) 40.594 MB/sec [Average]
[info]   (min, avg, max) = (973.288, 985.538, 994.195), stdev = 10.542
[info]   CI (99.9%): [944.943, 1026.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.632 ±(99.9%) 18.303 MB/sec [Average]
[info]   (min, avg, max) = (994.556, 999.632, 1006.230), stdev = 4.753
[info]   CI (99.9%): [981.329, 1017.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   738.454 ±(99.9%) 20.325 B/op [Average]
[info]   (min, avg, max) = (732.285, 738.454, 744.988), stdev = 5.278
[info]   CI (99.9%): [718.129, 758.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.040, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.12% complete, ETA 01:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2022985.732 ops/s
[info] # Warmup Iteration   2: 2200066.343 ops/s
[info] # Warmup Iteration   3: 2195674.471 ops/s
[info] Iteration   1: 2196312.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2205552.734 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2209812.394 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2201848.615 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2188963.584 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2200497.998 ±(99.9%) 31323.764 ops/s [Average]
[info]   (min, avg, max) = (2188963.584, 2200497.998, 2209812.394), stdev = 8134.682
[info]   CI (99.9%): [2169174.234, 2231821.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.42% complete, ETA 01:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375801.945 ops/s
[info] # Warmup Iteration   2: 482233.436 ops/s
[info] # Warmup Iteration   3: 490318.260 ops/s
[info] Iteration   1: 489772.049 ops/s
[info]                  ·gc.alloc.rate:                   572.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2112.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 497177.973 ops/s
[info]                  ·gc.alloc.rate:               581.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1039.589 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 489984.080 ops/s
[info]                  ·gc.alloc.rate:                   572.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2109.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 488362.865 ops/s
[info]                  ·gc.alloc.rate:                   570.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2118.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 490608.980 ops/s
[info]                  ·gc.alloc.rate:               573.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2113.453 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   491181.190 ±(99.9%) 13290.376 ops/s [Average]
[info]   (min, avg, max) = (488362.865, 491181.190, 497177.973), stdev = 3451.469
[info]   CI (99.9%): [477890.813, 504471.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   574.285 ±(99.9%) 15.465 MB/sec [Average]
[info]   (min, avg, max) = (570.982, 574.285, 581.258), stdev = 4.016
[info]   CI (99.9%): [558.820, 589.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   591.831 ±(99.9%) 567.046 MB/sec [Average]
[info]   (min, avg, max) = (328.407, 591.831, 658.837), stdev = 147.260
[info]   CI (99.9%): [24.785, 1158.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1898.831 ±(99.9%) 1849.627 B/op [Average]
[info]   (min, avg, max) = (1039.589, 1898.831, 2118.765), stdev = 480.342
[info]   CI (99.9%): [49.204, 3748.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.456 ±(99.9%) 3.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.456, 2.136), stdev = 0.940
[info]   CI (99.9%): [≈ 0, 4.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.466 ±(99.9%) 11.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 6.863), stdev = 3.020
[info]   CI (99.9%): [≈ 0, 13.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 12.73% complete, ETA 01:01:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143729.580 ops/s
[info] # Warmup Iteration   2: 168276.967 ops/s
[info] # Warmup Iteration   3: 170851.314 ops/s
[info] Iteration   1: 171413.876 ops/s
[info]                  ·gc.alloc.rate:                   2103.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              19312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18437.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 170830.679 ops/s
[info]                  ·gc.alloc.rate:                   2096.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              19312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18603.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.151 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 171370.682 ops/s
[info]                  ·gc.alloc.rate:                   2102.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              19312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2365.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21727.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 167312.209 ops/s
[info]                  ·gc.alloc.rate:                   2053.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              19312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19129.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.979 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 172291.685 ops/s
[info]                  ·gc.alloc.rate:                   2114.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              19312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18620.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.951 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   170643.826 ±(99.9%) 7449.609 ops/s [Average]
[info]   (min, avg, max) = (167312.209, 170643.826, 172291.685), stdev = 1934.640
[info]   CI (99.9%): [163194.218, 178093.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2094.014 ±(99.9%) 91.335 MB/sec [Average]
[info]   (min, avg, max) = (2053.141, 2094.014, 2114.136), stdev = 23.719
[info]   CI (99.9%): [2002.679, 2185.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19312.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19312.003, 19312.003, 19312.003), stdev = 0.001
[info]   CI (99.9%): [19312.002, 19312.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2093.158 ±(99.9%) 588.962 MB/sec [Average]
[info]   (min, avg, max) = (2008.216, 2093.158, 2365.934), stdev = 152.952
[info]   CI (99.9%): [1504.195, 2682.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19303.619 ±(99.9%) 5311.924 B/op [Average]
[info]   (min, avg, max) = (18437.220, 19303.619, 21727.311), stdev = 1379.490
[info]   CI (99.9%): [13991.695, 24615.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.769 ±(99.9%) 1.485 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.769, 1.151), stdev = 0.386
[info]   CI (99.9%): [≈ 0, 2.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.03% complete, ETA 01:00:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285812.859 ops/s
[info] # Warmup Iteration   2: 424505.686 ops/s
[info] # Warmup Iteration   3: 412891.066 ops/s
[info] Iteration   1: 423279.244 ops/s
[info]                  ·gc.alloc.rate:                   350.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1902.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 426070.392 ops/s
[info]                  ·gc.alloc.rate:                   353.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     944.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 414162.621 ops/s
[info]                  ·gc.alloc.rate:                   343.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1241.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 424374.231 ops/s
[info]                  ·gc.alloc.rate:                   351.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1211.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 424385.881 ops/s
[info]                  ·gc.alloc.rate:               351.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1210.513 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   422454.474 ±(99.9%) 18257.670 ops/s [Average]
[info]   (min, avg, max) = (414162.621, 422454.474, 426070.392), stdev = 4741.459
[info]   CI (99.9%): [404196.804, 440712.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   350.040 ±(99.9%) 15.064 MB/sec [Average]
[info]   (min, avg, max) = (343.203, 350.040, 353.033), stdev = 3.912
[info]   CI (99.9%): [334.976, 365.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.472 ±(99.9%) 368.406 MB/sec [Average]
[info]   (min, avg, max) = (255.811, 349.472, 511.582), stdev = 95.674
[info]   CI (99.9%): [≈ 0, 717.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1302.202 ±(99.9%) 1372.186 B/op [Average]
[info]   (min, avg, max) = (944.891, 1302.202, 1902.219), stdev = 356.352
[info]   CI (99.9%): [≈ 0, 2674.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.457 ±(99.9%) 3.660 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 2.157), stdev = 0.950
[info]   CI (99.9%): [≈ 0, 4.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.735 ±(99.9%) 13.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.735, 8.195), stdev = 3.613
[info]   CI (99.9%): [≈ 0, 15.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.33% complete, ETA 01:00:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 939792.279 ops/s
[info] # Warmup Iteration   2: 973675.325 ops/s
[info] # Warmup Iteration   3: 986584.333 ops/s
[info] Iteration   1: 986109.423 ops/s
[info]                  ·gc.alloc.rate:                   190.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 989982.001 ops/s
[info]                  ·gc.alloc.rate:      191.237 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 945114.706 ops/s
[info]                  ·gc.alloc.rate:               182.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 425.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 986723.157 ops/s
[info]                  ·gc.alloc.rate:                   190.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 986301.029 ops/s
[info]                  ·gc.alloc.rate:                   190.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   978846.063 ±(99.9%) 72862.565 ops/s [Average]
[info]   (min, avg, max) = (945114.706, 978846.063, 989982.001), stdev = 18922.177
[info]   CI (99.9%): [905983.498, 1051708.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   189.097 ±(99.9%) 13.981 MB/sec [Average]
[info]   (min, avg, max) = (182.626, 189.097, 191.237), stdev = 3.631
[info]   CI (99.9%): [175.117, 203.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.675 ±(99.9%) 440.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.675, 255.905), stdev = 114.417
[info]   CI (99.9%): [≈ 0, 645.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   330.089 ±(99.9%) 711.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 330.089, 425.983), stdev = 184.687
[info]   CI (99.9%): [≈ 0, 1041.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.036), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.057), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 13.64% complete, ETA 01:00:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49811.996 ops/s
[info] # Warmup Iteration   2: 81966.680 ops/s
[info] # Warmup Iteration   3: 81975.363 ops/s
[info] Iteration   1: 82040.153 ops/s
[info]                  ·gc.alloc.rate:                   3386.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64596.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.997 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 82664.988 ops/s
[info]                  ·gc.alloc.rate:                   3411.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64503.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.963 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 82092.034 ops/s
[info]                  ·gc.alloc.rate:                   3388.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65128.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.995 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 82553.013 ops/s
[info]                  ·gc.alloc.rate:                   3407.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64884.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.366 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 83001.330 ops/s
[info]                  ·gc.alloc.rate:                   3425.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64544.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.974 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   82470.303 ±(99.9%) 1558.024 ops/s [Average]
[info]   (min, avg, max) = (82040.153, 82470.303, 83001.330), stdev = 404.614
[info]   CI (99.9%): [80912.280, 84028.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3403.856 ±(99.9%) 63.496 MB/sec [Average]
[info]   (min, avg, max) = (3386.683, 3403.856, 3425.687), stdev = 16.490
[info]   CI (99.9%): [3340.360, 3467.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.006), stdev = 0.001
[info]   CI (99.9%): [64952.005, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3392.274 ±(99.9%) 57.769 MB/sec [Average]
[info]   (min, avg, max) = (3368.160, 3392.274, 3404.193), stdev = 15.002
[info]   CI (99.9%): [3334.505, 3450.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64731.534 ±(99.9%) 1030.705 B/op [Average]
[info]   (min, avg, max) = (64503.169, 64731.534, 65128.944), stdev = 267.671
[info]   CI (99.9%): [63700.828, 65762.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.229), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.859 ±(99.9%) 4.622 B/op [Average]
[info]   (min, avg, max) = (1.974, 2.859, 4.366), stdev = 1.200
[info]   CI (99.9%): [≈ 0, 7.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 13.94% complete, ETA 01:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205584.812 ops/s
[info] # Warmup Iteration   2: 250702.367 ops/s
[info] # Warmup Iteration   3: 247859.361 ops/s
[info] Iteration   1: 248478.178 ops/s
[info]                  ·gc.alloc.rate:                   1370.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8389.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 251385.231 ops/s
[info]                  ·gc.alloc.rate:                   1386.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8334.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.652 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 249435.398 ops/s
[info]                  ·gc.alloc.rate:                   1375.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8439.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 251887.128 ops/s
[info]                  ·gc.alloc.rate:                   1389.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8390.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 246827.065 ops/s
[info]                  ·gc.alloc.rate:                   1361.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8594.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   249602.600 ±(99.9%) 8029.474 ops/s [Average]
[info]   (min, avg, max) = (246827.065, 249602.600, 251887.128), stdev = 2085.229
[info]   CI (99.9%): [241573.126, 257632.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1376.655 ±(99.9%) 43.899 MB/sec [Average]
[info]   (min, avg, max) = (1361.614, 1376.655, 1389.235), stdev = 11.400
[info]   CI (99.9%): [1332.756, 1420.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.002, 8680.002, 8680.002), stdev = 0.001
[info]   CI (99.9%): [8680.002, 8680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1336.906 ±(99.9%) 36.052 MB/sec [Average]
[info]   (min, avg, max) = (1324.566, 1336.906, 1348.219), stdev = 9.363
[info]   CI (99.9%): [1300.854, 1372.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8429.910 ±(99.9%) 382.610 B/op [Average]
[info]   (min, avg, max) = (8334.211, 8429.910, 8594.607), stdev = 99.363
[info]   CI (99.9%): [8047.300, 8812.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.393 ±(99.9%) 0.708 B/op [Average]
[info]   (min, avg, max) = (0.132, 0.393, 0.652), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 1.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 14.24% complete, ETA 01:00:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1116509.918 ops/s
[info] # Warmup Iteration   2: 1625491.723 ops/s
[info] # Warmup Iteration   3: 1603540.312 ops/s
[info] Iteration   1: 1628615.936 ops/s
[info]                  ·gc.alloc.rate:                   836.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     632.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1622077.327 ops/s
[info]                  ·gc.alloc.rate:                   832.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1646558.163 ops/s
[info]                  ·gc.alloc.rate:                   845.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1668017.707 ops/s
[info]                  ·gc.alloc.rate:                   856.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1668301.252 ops/s
[info]                  ·gc.alloc.rate:                   856.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     937.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1646714.077 ±(99.9%) 82909.363 ops/s [Average]
[info]   (min, avg, max) = (1622077.327, 1646714.077, 1668301.252), stdev = 21531.298
[info]   CI (99.9%): [1563804.714, 1729623.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   845.422 ±(99.9%) 42.605 MB/sec [Average]
[info]   (min, avg, max) = (832.770, 845.422, 856.518), stdev = 11.064
[info]   CI (99.9%): [802.817, 888.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   855.125 ±(99.9%) 701.907 MB/sec [Average]
[info]   (min, avg, max) = (654.137, 855.125, 993.562), stdev = 182.283
[info]   CI (99.9%): [153.218, 1557.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   816.658 ±(99.9%) 656.915 B/op [Average]
[info]   (min, avg, max) = (627.812, 816.658, 953.618), stdev = 170.599
[info]   CI (99.9%): [159.743, 1473.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.064, 0.081), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.55% complete, ETA 00:59:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1581981.167 ops/s
[info] # Warmup Iteration   2: 1751479.453 ops/s
[info] # Warmup Iteration   3: 1798666.789 ops/s
[info] Iteration   1: 1781519.921 ops/s
[info]                  ·gc.alloc.rate:                   479.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     519.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1804406.632 ops/s
[info]                  ·gc.alloc.rate:                   486.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1727653.110 ops/s
[info]                  ·gc.alloc.rate:                   465.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     604.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1793410.798 ops/s
[info]                  ·gc.alloc.rate:               483.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 291.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1793177.815 ops/s
[info]                  ·gc.alloc.rate:               483.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 291.149 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1780033.655 ±(99.9%) 116981.165 ops/s [Average]
[info]   (min, avg, max) = (1727653.110, 1780033.655, 1804406.632), stdev = 30379.637
[info]   CI (99.9%): [1663052.490, 1897014.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   479.603 ±(99.9%) 31.564 MB/sec [Average]
[info]   (min, avg, max) = (465.473, 479.603, 486.150), stdev = 8.197
[info]   CI (99.9%): [448.038, 511.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.270 ±(99.9%) 628.078 MB/sec [Average]
[info]   (min, avg, max) = (331.744, 449.270, 663.501), stdev = 163.110
[info]   CI (99.9%): [≈ 0, 1077.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   399.002 ±(99.9%) 583.613 B/op [Average]
[info]   (min, avg, max) = (289.343, 399.002, 604.384), stdev = 151.562
[info]   CI (99.9%): [≈ 0, 982.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.371 ±(99.9%) 3.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.771), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 3.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.328 ±(99.9%) 2.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 1.565), stdev = 0.692
[info]   CI (99.9%): [≈ 0, 2.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 14.85% complete, ETA 00:59:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1785319.534 ops/s
[info] # Warmup Iteration   2: 1946968.699 ops/s
[info] # Warmup Iteration   3: 1948914.102 ops/s
[info] Iteration   1: 1948732.704 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1947810.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1948017.544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1945382.256 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1936996.632 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1945387.971 ±(99.9%) 18704.997 ops/s [Average]
[info]   (min, avg, max) = (1936996.632, 1945387.971, 1948732.704), stdev = 4857.628
[info]   CI (99.9%): [1926682.974, 1964092.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 15.15% complete, ETA 00:59:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27142.395 ops/s
[info] # Warmup Iteration   2: 38262.936 ops/s
[info] # Warmup Iteration   3: 38272.058 ops/s
[info] Iteration   1: 38049.885 ops/s
[info]                  ·gc.alloc.rate:                   1660.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              68658.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68410.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.582 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38291.075 ops/s
[info]                  ·gc.alloc.rate:                   1670.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68499.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.844 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38299.979 ops/s
[info]                  ·gc.alloc.rate:                   1670.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68868.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.855 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 38480.878 ops/s
[info]                  ·gc.alloc.rate:                   1678.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68885.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.851 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38567.679 ops/s
[info]                  ·gc.alloc.rate:                   1682.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68950.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.247 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38337.899 ±(99.9%) 769.706 ops/s [Average]
[info]   (min, avg, max) = (38049.885, 38337.899, 38567.679), stdev = 199.890
[info]   CI (99.9%): [37568.194, 39107.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1672.593 ±(99.9%) 33.341 MB/sec [Average]
[info]   (min, avg, max) = (1660.209, 1672.593, 1682.573), stdev = 8.658
[info]   CI (99.9%): [1639.252, 1705.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68656.582 ±(99.9%) 4.915 B/op [Average]
[info]   (min, avg, max) = (68656.011, 68656.582, 68658.866), stdev = 1.276
[info]   CI (99.9%): [68651.667, 68661.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.232 ±(99.9%) 54.774 MB/sec [Average]
[info]   (min, avg, max) = (1654.204, 1674.232, 1689.801), stdev = 14.225
[info]   CI (99.9%): [1619.458, 1729.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68722.990 ±(99.9%) 956.826 B/op [Average]
[info]   (min, avg, max) = (68410.537, 68722.990, 68950.926), stdev = 248.485
[info]   CI (99.9%): [67766.164, 69679.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.167), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.076 ±(99.9%) 9.760 B/op [Average]
[info]   (min, avg, max) = (0.851, 3.076, 6.844), stdev = 2.535
[info]   CI (99.9%): [≈ 0, 12.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 15.45% complete, ETA 00:59:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19638.510 ops/s
[info] # Warmup Iteration   2: 25306.067 ops/s
[info] # Warmup Iteration   3: 25189.005 ops/s
[info] Iteration   1: 25067.327 ops/s
[info]                  ·gc.alloc.rate:                   1578.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104405.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.921 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24783.707 ops/s
[info]                  ·gc.alloc.rate:                   1560.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              99119.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106194.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.931 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25316.199 ops/s
[info]                  ·gc.alloc.rate:                   1594.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104497.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.176 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24935.605 ops/s
[info]                  ·gc.alloc.rate:                   1570.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85156.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25294.330 ops/s
[info]                  ·gc.alloc.rate:                   1593.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105193.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.590 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25079.434 ±(99.9%) 883.397 ops/s [Average]
[info]   (min, avg, max) = (24783.707, 25079.434, 25316.199), stdev = 229.415
[info]   CI (99.9%): [24196.037, 25962.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1579.620 ±(99.9%) 55.688 MB/sec [Average]
[info]   (min, avg, max) = (1560.979, 1579.620, 1594.552), stdev = 14.462
[info]   CI (99.9%): [1523.932, 1635.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   99119.891 ±(99.9%) 1.089 B/op [Average]
[info]   (min, avg, max) = (99119.385, 99119.891, 99120.018), stdev = 0.283
[info]   CI (99.9%): [99118.802, 99120.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611.316 ±(99.9%) 565.308 MB/sec [Average]
[info]   (min, avg, max) = (1349.344, 1611.316, 1690.807), stdev = 146.809
[info]   CI (99.9%): [1046.008, 2176.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   101089.494 ±(99.9%) 34407.267 B/op [Average]
[info]   (min, avg, max) = (85156.597, 101089.494, 106194.282), stdev = 8935.458
[info]   CI (99.9%): [66682.227, 135496.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.712 ±(99.9%) 7.773 B/op [Average]
[info]   (min, avg, max) = (2.590, 4.712, 7.931), stdev = 2.019
[info]   CI (99.9%): [≈ 0, 12.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 15.76% complete, ETA 00:59:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38247.831 ops/s
[info] # Warmup Iteration   2: 57419.133 ops/s
[info] # Warmup Iteration   3: 56653.763 ops/s
[info] Iteration   1: 57308.598 ops/s
[info]                  ·gc.alloc.rate:                   1004.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26946.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 57769.335 ops/s
[info]                  ·gc.alloc.rate:                   1012.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26814.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58059.102 ops/s
[info]                  ·gc.alloc.rate:                   1017.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26770.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57143.967 ops/s
[info]                  ·gc.alloc.rate:                   1001.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27353.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.720 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 58393.749 ops/s
[info]                  ·gc.alloc.rate:                   1023.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35872.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.805 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   57734.950 ±(99.9%) 1992.788 ops/s [Average]
[info]   (min, avg, max) = (57143.967, 57734.950, 58393.749), stdev = 517.521
[info]   CI (99.9%): [55742.163, 59727.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1012.048 ±(99.9%) 34.866 MB/sec [Average]
[info]   (min, avg, max) = (1001.627, 1012.048, 1023.484), stdev = 9.055
[info]   CI (99.9%): [977.182, 1046.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27584.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27584.007, 27584.008, 27584.008), stdev = 0.001
[info]   CI (99.9%): [27584.006, 27584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1055.580 ±(99.9%) 593.142 MB/sec [Average]
[info]   (min, avg, max) = (981.488, 1055.580, 1331.017), stdev = 154.037
[info]   CI (99.9%): [462.439, 1648.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28751.397 ±(99.9%) 15354.070 B/op [Average]
[info]   (min, avg, max) = (26770.117, 28751.397, 35872.384), stdev = 3987.403
[info]   CI (99.9%): [13397.327, 44105.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.153 ±(99.9%) 1.753 B/op [Average]
[info]   (min, avg, max) = (1.715, 2.153, 2.805), stdev = 0.455
[info]   CI (99.9%): [0.400, 3.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 16.06% complete, ETA 00:58:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60470.529 ops/s
[info] # Warmup Iteration   2: 67947.899 ops/s
[info] # Warmup Iteration   3: 66471.008 ops/s
[info] Iteration   1: 66051.076 ops/s
[info]                  ·gc.alloc.rate:                   444.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6094.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 66121.984 ops/s
[info]                  ·gc.alloc.rate:                   444.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15839.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 65969.986 ops/s
[info]                  ·gc.alloc.rate:                   443.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7929.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 66111.957 ops/s
[info]                  ·gc.alloc.rate:                   444.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7912.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 66060.027 ops/s
[info]                  ·gc.alloc.rate:                   444.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15838.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   66063.006 ±(99.9%) 233.262 ops/s [Average]
[info]   (min, avg, max) = (65969.986, 66063.006, 66121.984), stdev = 60.577
[info]   CI (99.9%): [65829.744, 66296.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   444.321 ±(99.9%) 1.587 MB/sec [Average]
[info]   (min, avg, max) = (443.679, 444.321, 444.709), stdev = 0.412
[info]   CI (99.9%): [442.734, 445.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10584.007, 10584.007, 10584.007), stdev = 0.001
[info]   CI (99.9%): [10584.006, 10584.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.228 ±(99.9%) 765.375 MB/sec [Average]
[info]   (min, avg, max) = (255.797, 450.228, 665.518), stdev = 198.765
[info]   CI (99.9%): [≈ 0, 1215.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10723.029 ±(99.9%) 18210.202 B/op [Average]
[info]   (min, avg, max) = (6094.896, 10723.029, 15839.229), stdev = 4729.132
[info]   CI (99.9%): [≈ 0, 28933.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.341 ±(99.9%) 2.744 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.341, 1.615), stdev = 0.713
[info]   CI (99.9%): [≈ 0, 3.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.108 ±(99.9%) 65.313 B/op [Average]
[info]   (min, avg, max) = (0.111, 8.108, 38.445), stdev = 16.962
[info]   CI (99.9%): [≈ 0, 73.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 16.36% complete, ETA 00:58:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19445.067 ops/s
[info] # Warmup Iteration   2: 32902.067 ops/s
[info] # Warmup Iteration   3: 33087.596 ops/s
[info] Iteration   1: 33690.292 ops/s
[info]                  ·gc.alloc.rate:                   1724.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92578.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.945 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33648.388 ops/s
[info]                  ·gc.alloc.rate:                   1721.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77842.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.842 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33395.414 ops/s
[info]                  ·gc.alloc.rate:                   1709.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78905.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.943 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33794.269 ops/s
[info]                  ·gc.alloc.rate:                   1729.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78379.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.878 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33661.660 ops/s
[info]                  ·gc.alloc.rate:                   1722.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78995.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.866 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33638.004 ±(99.9%) 566.811 ops/s [Average]
[info]   (min, avg, max) = (33395.414, 33638.004, 33794.269), stdev = 147.199
[info]   CI (99.9%): [33071.194, 34204.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1721.502 ±(99.9%) 28.466 MB/sec [Average]
[info]   (min, avg, max) = (1709.361, 1721.502, 1729.422), stdev = 7.393
[info]   CI (99.9%): [1693.036, 1749.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80536.014 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (80536.013, 80536.014, 80536.019), stdev = 0.002
[info]   CI (99.9%): [80536.005, 80536.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1738.772 ±(99.9%) 524.728 MB/sec [Average]
[info]   (min, avg, max) = (1664.358, 1738.772, 1981.949), stdev = 136.270
[info]   CI (99.9%): [1214.044, 2263.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81340.278 ±(99.9%) 24255.669 B/op [Average]
[info]   (min, avg, max) = (77842.499, 81340.278, 92578.158), stdev = 6299.120
[info]   CI (99.9%): [57084.610, 105595.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.895 ±(99.9%) 5.916 B/op [Average]
[info]   (min, avg, max) = (1.945, 3.895, 5.842), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 9.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 16.67% complete, ETA 00:58:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29853.906 ops/s
[info] # Warmup Iteration   2: 38809.143 ops/s
[info] # Warmup Iteration   3: 39070.387 ops/s
[info] Iteration   1: 39165.206 ops/s
[info]                  ·gc.alloc.rate:                   617.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              24825.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26527.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39518.470 ops/s
[info]                  ·gc.alloc.rate:                   623.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26263.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 39388.135 ops/s
[info]                  ·gc.alloc.rate:                   621.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26376.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39344.295 ops/s
[info]                  ·gc.alloc.rate:                   620.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26432.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39356.725 ops/s
[info]                  ·gc.alloc.rate:                   620.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26504.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39354.566 ±(99.9%) 486.916 ops/s [Average]
[info]   (min, avg, max) = (39165.206, 39354.566, 39518.470), stdev = 126.451
[info]   CI (99.9%): [38867.650, 39841.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   620.824 ±(99.9%) 7.574 MB/sec [Average]
[info]   (min, avg, max) = (617.861, 620.824, 623.352), stdev = 1.967
[info]   CI (99.9%): [613.250, 628.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24824.373 ±(99.9%) 3.119 B/op [Average]
[info]   (min, avg, max) = (24824.011, 24824.373, 24825.823), stdev = 0.810
[info]   CI (99.9%): [24821.254, 24827.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   660.743 ±(99.9%) 5.213 MB/sec [Average]
[info]   (min, avg, max) = (659.498, 660.743, 663.012), stdev = 1.354
[info]   CI (99.9%): [655.530, 665.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26420.828 ±(99.9%) 409.490 B/op [Average]
[info]   (min, avg, max) = (26263.478, 26420.828, 26527.592), stdev = 106.343
[info]   CI (99.9%): [26011.338, 26830.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.391 ±(99.9%) 2.916 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.391, 1.745), stdev = 0.757
[info]   CI (99.9%): [≈ 0, 3.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.686 ±(99.9%) 117.170 B/op [Average]
[info]   (min, avg, max) = (1.658, 15.686, 70.113), stdev = 30.429
[info]   CI (99.9%): [≈ 0, 132.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 16.97% complete, ETA 00:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27789.136 ops/s
[info] # Warmup Iteration   2: 41371.532 ops/s
[info] # Warmup Iteration   3: 41324.778 ops/s
[info] Iteration   1: 40851.507 ops/s
[info]                  ·gc.alloc.rate:                   410.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19709.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 41082.249 ops/s
[info]                  ·gc.alloc.rate:                   413.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12517.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41400.793 ops/s
[info]                  ·gc.alloc.rate:                   416.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12420.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.583 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41469.938 ops/s
[info]                  ·gc.alloc.rate:                   416.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12412.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41153.522 ops/s
[info]                  ·gc.alloc.rate:                   413.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25029.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41191.602 ±(99.9%) 963.248 ops/s [Average]
[info]   (min, avg, max) = (40851.507, 41191.602, 41469.938), stdev = 250.152
[info]   CI (99.9%): [40228.354, 42154.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   414.217 ±(99.9%) 9.552 MB/sec [Average]
[info]   (min, avg, max) = (410.872, 414.217, 416.990), stdev = 2.481
[info]   CI (99.9%): [404.665, 423.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15824.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15824.010, 15824.011, 15824.011), stdev = 0.001
[info]   CI (99.9%): [15824.009, 15824.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.404 ±(99.9%) 574.609 MB/sec [Average]
[info]   (min, avg, max) = (326.741, 429.404, 654.666), stdev = 149.224
[info]   CI (99.9%): [≈ 0, 1004.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16418.063 ±(99.9%) 22140.035 B/op [Average]
[info]   (min, avg, max) = (12412.325, 16418.063, 25029.784), stdev = 5749.697
[info]   CI (99.9%): [≈ 0, 38558.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.517 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.450, 2.084), stdev = 0.913
[info]   CI (99.9%): [≈ 0, 3.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.235 ±(99.9%) 134.741 B/op [Average]
[info]   (min, avg, max) = (0.803, 17.235, 79.823), stdev = 34.992
[info]   CI (99.9%): [≈ 0, 151.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 17.27% complete, ETA 00:58:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37303.288 ops/s
[info] # Warmup Iteration   2: 43660.696 ops/s
[info] # Warmup Iteration   3: 43518.169 ops/s
[info] Iteration   1: 43984.029 ops/s
[info]                  ·gc.alloc.rate:                   431.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18306.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43070.650 ops/s
[info]                  ·gc.alloc.rate:                   422.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12121.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.586 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43583.026 ops/s
[info]                  ·gc.alloc.rate:                   427.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23959.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 43454.528 ops/s
[info]                  ·gc.alloc.rate:                   426.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12014.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43849.275 ops/s
[info]                  ·gc.alloc.rate:               430.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11894.174 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   43588.302 ±(99.9%) 1375.755 ops/s [Average]
[info]   (min, avg, max) = (43070.650, 43588.302, 43984.029), stdev = 357.279
[info]   CI (99.9%): [42212.546, 44964.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   427.655 ±(99.9%) 13.469 MB/sec [Average]
[info]   (min, avg, max) = (422.589, 427.655, 431.550), stdev = 3.498
[info]   CI (99.9%): [414.186, 441.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   15440.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15440.010, 15440.010, 15440.011), stdev = 0.001
[info]   CI (99.9%): [15440.009, 15440.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.025 ±(99.9%) 578.098 MB/sec [Average]
[info]   (min, avg, max) = (331.391, 434.025, 663.548), stdev = 150.130
[info]   CI (99.9%): [≈ 0, 1012.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15659.171 ±(99.9%) 20724.628 B/op [Average]
[info]   (min, avg, max) = (11894.174, 15659.171, 23959.204), stdev = 5382.120
[info]   CI (99.9%): [≈ 0, 36383.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 2.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.740), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.618 ±(99.9%) 107.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.618, 63.586), stdev = 27.955
[info]   CI (99.9%): [≈ 0, 121.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.58% complete, ETA 00:57:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36881.776 ops/s
[info] # Warmup Iteration   2: 43970.084 ops/s
[info] # Warmup Iteration   3: 43087.075 ops/s
[info] Iteration   1: 43924.367 ops/s
[info]                  ·gc.alloc.rate:                   380.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9164.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 43888.429 ops/s
[info]                  ·gc.alloc.rate:                   380.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21068.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.264 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 44120.977 ops/s
[info]                  ·gc.alloc.rate:                   382.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11832.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 44382.269 ops/s
[info]                  ·gc.alloc.rate:                   384.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11763.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.214 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43455.568 ops/s
[info]                  ·gc.alloc.rate:               376.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12014.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   43954.322 ±(99.9%) 1312.764 ops/s [Average]
[info]   (min, avg, max) = (43455.568, 43954.322, 44382.269), stdev = 340.921
[info]   CI (99.9%): [42641.558, 45267.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   380.989 ±(99.9%) 11.210 MB/sec [Average]
[info]   (min, avg, max) = (376.758, 380.989, 384.670), stdev = 2.911
[info]   CI (99.9%): [369.779, 392.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13640.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13640.010, 13640.010, 13640.010), stdev = 0.001
[info]   CI (99.9%): [13640.010, 13640.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.743 ±(99.9%) 489.832 MB/sec [Average]
[info]   (min, avg, max) = (255.804, 367.743, 587.556), stdev = 127.208
[info]   CI (99.9%): [≈ 0, 857.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   13168.756 ±(99.9%) 17595.465 B/op [Average]
[info]   (min, avg, max) = (9164.956, 13168.756, 21068.022), stdev = 4569.486
[info]   CI (99.9%): [≈ 0, 30764.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.382 ±(99.9%) 3.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.792), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   13.700 ±(99.9%) 108.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.700, 64.264), stdev = 28.279
[info]   CI (99.9%): [≈ 0, 122.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 17.88% complete, ETA 00:57:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10537.998 ops/s
[info] # Warmup Iteration   2: 14681.920 ops/s
[info] # Warmup Iteration   3: 14971.036 ops/s
[info] Iteration   1: 15064.163 ops/s
[info]                  ·gc.alloc.rate:                   1075.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              112320.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103799.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14785.443 ops/s
[info]                  ·gc.alloc.rate:                   1055.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              112338.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105970.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.648 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14956.459 ops/s
[info]                  ·gc.alloc.rate:                   1067.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105109.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.381 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14738.586 ops/s
[info]                  ·gc.alloc.rate:                   1052.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142719.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.446 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14746.529 ops/s
[info]                  ·gc.alloc.rate:                   1052.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              112341.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107416.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   14858.236 ±(99.9%) 558.500 ops/s [Average]
[info]   (min, avg, max) = (14738.586, 14858.236, 15064.163), stdev = 145.041
[info]   CI (99.9%): [14299.736, 15416.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1060.681 ±(99.9%) 39.649 MB/sec [Average]
[info]   (min, avg, max) = (1052.207, 1060.681, 1075.204), stdev = 10.297
[info]   CI (99.9%): [1021.033, 1100.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112340.818 ±(99.9%) 50.519 B/op [Average]
[info]   (min, avg, max) = (112320.029, 112340.818, 112352.029), stdev = 13.120
[info]   CI (99.9%): [112290.298, 112391.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1066.287 ±(99.9%) 582.185 MB/sec [Average]
[info]   (min, avg, max) = (993.643, 1066.287, 1336.605), stdev = 151.192
[info]   CI (99.9%): [484.102, 1648.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   113003.337 ±(99.9%) 64165.929 B/op [Average]
[info]   (min, avg, max) = (103799.768, 113003.337, 142719.288), stdev = 16663.688
[info]   CI (99.9%): [48837.408, 177169.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.298 ±(99.9%) 4.777 B/op [Average]
[info]   (min, avg, max) = (4.350, 5.298, 6.665), stdev = 1.241
[info]   CI (99.9%): [0.521, 10.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 18.18% complete, ETA 00:57:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9794.249 ops/s
[info] # Warmup Iteration   2: 15896.122 ops/s
[info] # Warmup Iteration   3: 15493.258 ops/s
[info] Iteration   1: 16061.613 ops/s
[info]                  ·gc.alloc.rate:                   974.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              95464.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96143.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15986.970 ops/s
[info]                  ·gc.alloc.rate:                   970.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              95487.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96955.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15521.207 ops/s
[info]                  ·gc.alloc.rate:                   941.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66768.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15897.483 ops/s
[info]                  ·gc.alloc.rate:                   964.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98124.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15652.450 ops/s
[info]                  ·gc.alloc.rate:                   949.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              95476.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100235.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.186 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15823.945 ±(99.9%) 881.309 ops/s [Average]
[info]   (min, avg, max) = (15521.207, 15823.945, 16061.613), stdev = 228.873
[info]   CI (99.9%): [14942.635, 16705.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   960.142 ±(99.9%) 53.307 MB/sec [Average]
[info]   (min, avg, max) = (941.834, 960.142, 974.273), stdev = 13.844
[info]   CI (99.9%): [906.835, 1013.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   95484.167 ±(99.9%) 52.798 B/op [Average]
[info]   (min, avg, max) = (95464.029, 95484.167, 95496.037), stdev = 13.712
[info]   CI (99.9%): [95431.368, 95536.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   922.626 ±(99.9%) 569.009 MB/sec [Average]
[info]   (min, avg, max) = (658.509, 922.626, 996.948), stdev = 147.770
[info]   CI (99.9%): [353.617, 1491.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   91645.780 ±(99.9%) 53876.827 B/op [Average]
[info]   (min, avg, max) = (66768.705, 91645.780, 100235.962), stdev = 13991.641
[info]   CI (99.9%): [37768.953, 145522.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.357 ±(99.9%) 11.856 B/op [Average]
[info]   (min, avg, max) = (2.111, 5.357, 10.246), stdev = 3.079
[info]   CI (99.9%): [≈ 0, 17.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 18.48% complete, ETA 00:57:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71319.228 ops/s
[info] # Warmup Iteration   2: 73290.475 ops/s
[info] # Warmup Iteration   3: 74628.177 ops/s
[info] Iteration   1: 74619.792 ops/s
[info]                  ·gc.alloc.rate:                   194.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5395.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 74837.509 ops/s
[info]                  ·gc.alloc.rate:      194.765 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74842.273 ops/s
[info]                  ·gc.alloc.rate:               194.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5378.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 74299.475 ops/s
[info]                  ·gc.alloc.rate:                   193.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5418.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 74509.867 ops/s
[info]                  ·gc.alloc.rate:                   193.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5403.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   74621.783 ±(99.9%) 885.574 ops/s [Average]
[info]   (min, avg, max) = (74299.475, 74621.783, 74842.273), stdev = 229.981
[info]   CI (99.9%): [73736.209, 75507.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   194.214 ±(99.9%) 2.289 MB/sec [Average]
[info]   (min, avg, max) = (193.380, 194.214, 194.792), stdev = 0.595
[info]   CI (99.9%): [191.924, 196.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.006, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.643 ±(99.9%) 440.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.643, 255.811), stdev = 114.399
[info]   CI (99.9%): [≈ 0, 645.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4319.054 ±(99.9%) 9297.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4319.054, 5418.195), stdev = 2414.466
[info]   CI (99.9%): [≈ 0, 13616.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.094), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.703 ±(99.9%) 3.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.703, 1.976), stdev = 0.813
[info]   CI (99.9%): [≈ 0, 3.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 18.79% complete, ETA 00:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7000.270 ops/s
[info] # Warmup Iteration   2: 12912.513 ops/s
[info] # Warmup Iteration   3: 13510.591 ops/s
[info] Iteration   1: 13327.066 ops/s
[info]                  ·gc.alloc.rate:                   1277.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              150848.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155162.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.375 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13395.573 ops/s
[info]                  ·gc.alloc.rate:                   1283.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              150848.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155196.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.783 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13451.755 ops/s
[info]                  ·gc.alloc.rate:                   1289.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              150848.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155435.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13511.718 ops/s
[info]                  ·gc.alloc.rate:                   1295.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              150848.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116620.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13484.635 ops/s
[info]                  ·gc.alloc.rate:                   1292.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              150848.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156415.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.147 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13434.149 ±(99.9%) 284.469 ops/s [Average]
[info]   (min, avg, max) = (13327.066, 13434.149, 13511.718), stdev = 73.876
[info]   CI (99.9%): [13149.680, 13718.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1287.758 ±(99.9%) 27.380 MB/sec [Average]
[info]   (min, avg, max) = (1277.417, 1287.758, 1295.098), stdev = 7.110
[info]   CI (99.9%): [1260.378, 1315.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   150848.059 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (150848.032, 150848.059, 150848.162), stdev = 0.058
[info]   CI (99.9%): [150847.836, 150848.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1261.082 ±(99.9%) 560.595 MB/sec [Average]
[info]   (min, avg, max) = (1001.240, 1261.082, 1340.229), stdev = 145.585
[info]   CI (99.9%): [700.487, 1821.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   147766.199 ±(99.9%) 67072.093 B/op [Average]
[info]   (min, avg, max) = (116620.522, 147766.199, 156415.696), stdev = 17418.410
[info]   CI (99.9%): [80694.106, 214838.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.290 ±(99.9%) 10.662 B/op [Average]
[info]   (min, avg, max) = (4.871, 8.290, 12.147), stdev = 2.769
[info]   CI (99.9%): [≈ 0, 18.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 19.09% complete, ETA 00:56:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43410.206 ops/s
[info] # Warmup Iteration   2: 56906.393 ops/s
[info] # Warmup Iteration   3: 56253.199 ops/s
[info] Iteration   1: 56776.075 ops/s
[info]                  ·gc.alloc.rate:                   1407.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36746.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 57437.707 ops/s
[info]                  ·gc.alloc.rate:                   1423.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36475.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.422 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 56763.832 ops/s
[info]                  ·gc.alloc.rate:                   1407.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46378.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.732 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 56965.515 ops/s
[info]                  ·gc.alloc.rate:                   1412.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37137.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.300 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57449.451 ops/s
[info]                  ·gc.alloc.rate:                   1424.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36954.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.141 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   57078.516 ±(99.9%) 1319.761 ops/s [Average]
[info]   (min, avg, max) = (56763.832, 57078.516, 57449.451), stdev = 342.738
[info]   CI (99.9%): [55758.755, 58398.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1415.206 ±(99.9%) 32.018 MB/sec [Average]
[info]   (min, avg, max) = (1407.644, 1415.206, 1424.225), stdev = 8.315
[info]   CI (99.9%): [1383.188, 1447.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39016.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39016.008, 39016.008, 39016.008), stdev = 0.001
[info]   CI (99.9%): [39016.007, 39016.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1404.762 ±(99.9%) 579.142 MB/sec [Average]
[info]   (min, avg, max) = (1325.966, 1404.762, 1673.286), stdev = 150.401
[info]   CI (99.9%): [825.620, 1983.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   38738.601 ±(99.9%) 16473.543 B/op [Average]
[info]   (min, avg, max) = (36475.938, 38738.601, 46378.861), stdev = 4278.127
[info]   CI (99.9%): [22265.058, 55212.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.950 ±(99.9%) 3.666 B/op [Average]
[info]   (min, avg, max) = (1.141, 1.950, 3.422), stdev = 0.952
[info]   CI (99.9%): [≈ 0, 5.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 19.39% complete, ETA 00:56:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53039.182 ops/s
[info] # Warmup Iteration   2: 76711.904 ops/s
[info] # Warmup Iteration   3: 77410.907 ops/s
[info] Iteration   1: 79451.162 ops/s
[info]                  ·gc.alloc.rate:                   1203.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19463.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.412 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 77268.672 ops/s
[info]                  ·gc.alloc.rate:                   1170.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26822.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 79031.044 ops/s
[info]                  ·gc.alloc.rate:                   1196.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19786.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.829 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 78669.495 ops/s
[info]                  ·gc.alloc.rate:                   1191.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26633.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.249 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 78660.845 ops/s
[info]                  ·gc.alloc.rate:                   1191.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26782.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   78616.244 ±(99.9%) 3157.718 ops/s [Average]
[info]   (min, avg, max) = (77268.672, 78616.244, 79451.162), stdev = 820.049
[info]   CI (99.9%): [75458.526, 81773.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1190.577 ±(99.9%) 48.023 MB/sec [Average]
[info]   (min, avg, max) = (1170.083, 1190.577, 1203.325), stdev = 12.471
[info]   CI (99.9%): [1142.554, 1238.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23832.005, 23832.006, 23832.006), stdev = 0.001
[info]   CI (99.9%): [23832.005, 23832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.702 ±(99.9%) 719.753 MB/sec [Average]
[info]   (min, avg, max) = (982.739, 1192.702, 1338.948), stdev = 186.918
[info]   CI (99.9%): [472.948, 1912.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23897.659 ±(99.9%) 15029.016 B/op [Average]
[info]   (min, avg, max) = (19463.281, 23897.659, 26822.901), stdev = 3902.988
[info]   CI (99.9%): [8868.643, 38926.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.508 ±(99.9%) 3.941 B/op [Average]
[info]   (min, avg, max) = (0.412, 1.508, 2.968), stdev = 1.023
[info]   CI (99.9%): [≈ 0, 5.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 19.70% complete, ETA 00:56:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249764.398 ops/s
[info] # Warmup Iteration   2: 284172.323 ops/s
[info] # Warmup Iteration   3: 288041.074 ops/s
[info] Iteration   1: 278890.608 ops/s
[info]                  ·gc.alloc.rate:               442.363 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1443.512 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 287626.595 ops/s
[info]                  ·gc.alloc.rate:                   456.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3630.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 280503.130 ops/s
[info]                  ·gc.alloc.rate:                   444.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1857.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 289599.574 ops/s
[info]                  ·gc.alloc.rate:               459.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1799.145 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 288661.729 ops/s
[info]                  ·gc.alloc.rate:                   457.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3613.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   285056.327 ±(99.9%) 19156.130 ops/s [Average]
[info]   (min, avg, max) = (278890.608, 285056.327, 289599.574), stdev = 4974.786
[info]   CI (99.9%): [265900.197, 304212.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   452.155 ±(99.9%) 30.462 MB/sec [Average]
[info]   (min, avg, max) = (442.363, 452.155, 459.314), stdev = 7.911
[info]   CI (99.9%): [421.693, 482.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.001, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.933 ±(99.9%) 762.873 MB/sec [Average]
[info]   (min, avg, max) = (255.832, 448.933, 663.673), stdev = 198.116
[info]   CI (99.9%): [≈ 0, 1211.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2468.888 ±(99.9%) 4099.471 B/op [Average]
[info]   (min, avg, max) = (1443.512, 2468.888, 3630.447), stdev = 1064.620
[info]   CI (99.9%): [≈ 0, 6568.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.390 ±(99.9%) 3.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.845), stdev = 0.814
[info]   CI (99.9%): [≈ 0, 3.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.132 ±(99.9%) 17.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.132, 10.091), stdev = 4.453
[info]   CI (99.9%): [≈ 0, 19.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 20.00% complete, ETA 00:56:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298188.769 ops/s
[info] # Warmup Iteration   2: 325588.506 ops/s
[info] # Warmup Iteration   3: 336652.680 ops/s
[info] Iteration   1: 336349.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 333131.352 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 335146.767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 335035.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 335042.642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   334941.337 ±(99.9%) 4441.447 ops/s [Average]
[info]   (min, avg, max) = (333131.352, 334941.337, 336349.928), stdev = 1153.430
[info]   CI (99.9%): [330499.889, 339382.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 20.30% complete, ETA 00:55:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52133.430 ops/s
[info] # Warmup Iteration   2: 72060.994 ops/s
[info] # Warmup Iteration   3: 72087.500 ops/s
[info] Iteration   1: 71157.964 ops/s
[info]                  ·gc.alloc.rate:                   1343.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29172.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.381 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 70945.361 ops/s
[info]                  ·gc.alloc.rate:                   1339.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29392.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.771 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 71438.710 ops/s
[info]                  ·gc.alloc.rate:                   1349.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29351.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.752 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 69939.992 ops/s
[info]                  ·gc.alloc.rate:                   1320.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30130.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 70105.665 ops/s
[info]                  ·gc.alloc.rate:                   1323.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30178.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   70717.538 ±(99.9%) 2543.272 ops/s [Average]
[info]   (min, avg, max) = (69939.992, 70717.538, 71438.710), stdev = 660.480
[info]   CI (99.9%): [68174.267, 73260.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1335.195 ±(99.9%) 48.280 MB/sec [Average]
[info]   (min, avg, max) = (1320.522, 1335.195, 1349.168), stdev = 12.538
[info]   CI (99.9%): [1286.915, 1383.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29712.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29712.006, 29712.006, 29712.007), stdev = 0.001
[info]   CI (99.9%): [29712.005, 29712.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1332.040 ±(99.9%) 39.684 MB/sec [Average]
[info]   (min, avg, max) = (1318.939, 1332.040, 1344.374), stdev = 10.306
[info]   CI (99.9%): [1292.356, 1371.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29645.140 ±(99.9%) 1820.154 B/op [Average]
[info]   (min, avg, max) = (29172.130, 29645.140, 30178.507), stdev = 472.688
[info]   CI (99.9%): [27824.986, 31465.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.222 ±(99.9%) 3.870 B/op [Average]
[info]   (min, avg, max) = (0.937, 2.222, 3.271), stdev = 1.005
[info]   CI (99.9%): [≈ 0, 6.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 20.61% complete, ETA 00:55:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18991.665 ops/s
[info] # Warmup Iteration   2: 27110.472 ops/s
[info] # Warmup Iteration   3: 27028.652 ops/s
[info] Iteration   1: 27278.024 ops/s
[info]                  ·gc.alloc.rate:                   605.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38010.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26772.959 ops/s
[info]                  ·gc.alloc.rate:                   594.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38688.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 27260.078 ops/s
[info]                  ·gc.alloc.rate:                   605.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          329.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19017.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.404 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27152.534 ops/s
[info]                  ·gc.alloc.rate:                   603.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38225.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27151.516 ops/s
[info]                  ·gc.alloc.rate:                   603.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38301.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27123.022 ±(99.9%) 786.883 ops/s [Average]
[info]   (min, avg, max) = (26772.959, 27123.022, 27278.024), stdev = 204.351
[info]   CI (99.9%): [26336.139, 27909.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   602.543 ±(99.9%) 17.510 MB/sec [Average]
[info]   (min, avg, max) = (594.726, 602.543, 605.948), stdev = 4.547
[info]   CI (99.9%): [585.034, 620.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34960.021 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (34960.016, 34960.021, 34960.042), stdev = 0.012
[info]   CI (99.9%): [34959.976, 34960.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   593.376 ±(99.9%) 568.230 MB/sec [Average]
[info]   (min, avg, max) = (329.406, 593.376, 661.002), stdev = 147.568
[info]   CI (99.9%): [25.146, 1161.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34448.684 ±(99.9%) 33229.482 B/op [Average]
[info]   (min, avg, max) = (19017.819, 34448.684, 38688.217), stdev = 8629.591
[info]   CI (99.9%): [1219.201, 67678.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.392 ±(99.9%) 2.970 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.392, 1.771), stdev = 0.771
[info]   CI (99.9%): [≈ 0, 3.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22.617 ±(99.9%) 171.320 B/op [Average]
[info]   (min, avg, max) = (2.404, 22.617, 102.200), stdev = 44.491
[info]   CI (99.9%): [≈ 0, 193.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 20.91% complete, ETA 00:55:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19073.375 ops/s
[info] # Warmup Iteration   2: 27573.179 ops/s
[info] # Warmup Iteration   3: 28192.888 ops/s
[info] Iteration   1: 28445.826 ops/s
[info]                  ·gc.alloc.rate:                   392.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              21712.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14152.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.303 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27962.109 ops/s
[info]                  ·gc.alloc.rate:                   385.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              21688.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32787.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28462.281 ops/s
[info]                  ·gc.alloc.rate:                   392.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18066.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.151 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28449.914 ops/s
[info]                  ·gc.alloc.rate:                   391.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18056.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.303 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28421.393 ops/s
[info]                  ·gc.alloc.rate:               391.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          21680.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18073.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28348.305 ±(99.9%) 833.276 ops/s [Average]
[info]   (min, avg, max) = (27962.109, 28348.305, 28462.281), stdev = 216.399
[info]   CI (99.9%): [27515.029, 29181.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   390.675 ±(99.9%) 11.597 MB/sec [Average]
[info]   (min, avg, max) = (385.322, 390.675, 392.491), stdev = 3.012
[info]   CI (99.9%): [379.078, 402.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21688.029 ±(99.9%) 53.366 B/op [Average]
[info]   (min, avg, max) = (21680.015, 21688.029, 21712.021), stdev = 13.859
[info]   CI (99.9%): [21634.664, 21741.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.588 ±(99.9%) 485.800 MB/sec [Average]
[info]   (min, avg, max) = (255.837, 363.588, 582.528), stdev = 126.161
[info]   CI (99.9%): [≈ 0, 849.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20227.419 ±(99.9%) 27813.523 B/op [Average]
[info]   (min, avg, max) = (14152.514, 20227.419, 32787.918), stdev = 7223.084
[info]   CI (99.9%): [≈ 0, 48040.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.457 ±(99.9%) 3.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 2.182), stdev = 0.964
[info]   CI (99.9%): [≈ 0, 4.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.713 ±(99.9%) 209.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.713, 122.808), stdev = 54.286
[info]   CI (99.9%): [≈ 0, 234.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 21.21% complete, ETA 00:55:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108189.562 ops/s
[info] # Warmup Iteration   2: 120885.349 ops/s
[info] # Warmup Iteration   3: 124872.118 ops/s
[info] Iteration   1: 119269.027 ops/s
[info]                  ·gc.alloc.rate:                   465.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7757.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 121443.984 ops/s
[info]                  ·gc.alloc.rate:               474.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4303.280 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 123514.489 ops/s
[info]                  ·gc.alloc.rate:                   482.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4226.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 118662.712 ops/s
[info]                  ·gc.alloc.rate:                   463.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8799.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.828 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 124705.863 ops/s
[info]                  ·gc.alloc.rate:               486.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4186.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   121519.215 ±(99.9%) 10071.561 ops/s [Average]
[info]   (min, avg, max) = (118662.712, 121519.215, 124705.863), stdev = 2615.552
[info]   CI (99.9%): [111447.654, 131590.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   474.437 ±(99.9%) 39.230 MB/sec [Average]
[info]   (min, avg, max) = (463.395, 474.437, 486.867), stdev = 10.188
[info]   CI (99.9%): [435.207, 513.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.413 ±(99.9%) 628.372 MB/sec [Average]
[info]   (min, avg, max) = (331.749, 449.413, 663.658), stdev = 163.186
[info]   CI (99.9%): [≈ 0, 1077.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5854.605 ±(99.9%) 8637.921 B/op [Average]
[info]   (min, avg, max) = (4186.570, 5854.605, 8799.239), stdev = 2243.241
[info]   CI (99.9%): [≈ 0, 14492.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 2.756 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.626), stdev = 0.716
[info]   CI (99.9%): [≈ 0, 3.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.562 ±(99.9%) 36.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.562, 21.451), stdev = 9.448
[info]   CI (99.9%): [≈ 0, 40.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 21.52% complete, ETA 00:55:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10038.174 ops/s
[info] # Warmup Iteration   2: 21677.060 ops/s
[info] # Warmup Iteration   3: 21780.331 ops/s
[info] Iteration   1: 21738.534 ops/s
[info]                  ·gc.alloc.rate:                   1214.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94329.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21880.418 ops/s
[info]                  ·gc.alloc.rate:                   1222.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94297.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.492 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 21666.305 ops/s
[info]                  ·gc.alloc.rate:                   1210.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71877.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.536 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21878.320 ops/s
[info]                  ·gc.alloc.rate:                   1222.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95499.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.492 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 21938.896 ops/s
[info]                  ·gc.alloc.rate:                   1226.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95763.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.987 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21820.495 ±(99.9%) 436.695 ops/s [Average]
[info]   (min, avg, max) = (21666.305, 21820.495, 21938.896), stdev = 113.408
[info]   CI (99.9%): [21383.800, 22257.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1219.409 ±(99.9%) 24.474 MB/sec [Average]
[info]   (min, avg, max) = (1210.780, 1219.409, 1226.015), stdev = 6.356
[info]   CI (99.9%): [1194.935, 1243.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87944.033 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (87944.020, 87944.033, 87944.079), stdev = 0.026
[info]   CI (99.9%): [87943.934, 87944.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1253.290 ±(99.9%) 569.789 MB/sec [Average]
[info]   (min, avg, max) = (989.583, 1253.290, 1335.031), stdev = 147.973
[info]   CI (99.9%): [683.501, 1823.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   90353.555 ±(99.9%) 39853.407 B/op [Average]
[info]   (min, avg, max) = (71877.608, 90353.555, 95763.857), stdev = 10349.803
[info]   CI (99.9%): [50500.148, 130206.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.904 ±(99.9%) 3.178 B/op [Average]
[info]   (min, avg, max) = (2.987, 3.904, 4.536), stdev = 0.825
[info]   CI (99.9%): [0.726, 7.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 21.82% complete, ETA 00:54:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135965.763 ops/s
[info] # Warmup Iteration   2: 165543.875 ops/s
[info] # Warmup Iteration   3: 165990.943 ops/s
[info] Iteration   1: 165262.722 ops/s
[info]                  ·gc.alloc.rate:                   1081.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12579.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 165704.821 ops/s
[info]                  ·gc.alloc.rate:                   1084.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9442.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 167677.901 ops/s
[info]                  ·gc.alloc.rate:                   1097.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9362.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 167311.111 ops/s
[info]                  ·gc.alloc.rate:                   1094.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9417.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.587 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 165191.861 ops/s
[info]                  ·gc.alloc.rate:                   1080.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12768.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   166229.683 ±(99.9%) 4537.552 ops/s [Average]
[info]   (min, avg, max) = (165191.861, 166229.683, 167677.901), stdev = 1178.388
[info]   CI (99.9%): [161692.131, 170767.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1087.514 ±(99.9%) 29.751 MB/sec [Average]
[info]   (min, avg, max) = (1080.745, 1087.514, 1097.020), stdev = 7.726
[info]   CI (99.9%): [1057.763, 1117.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1130.848 ±(99.9%) 702.811 MB/sec [Average]
[info]   (min, avg, max) = (994.172, 1130.848, 1340.322), stdev = 182.518
[info]   CI (99.9%): [428.037, 1833.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10714.246 ±(99.9%) 6895.021 B/op [Average]
[info]   (min, avg, max) = (9362.621, 10714.246, 12768.937), stdev = 1790.615
[info]   CI (99.9%): [3819.225, 17609.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.433 ±(99.9%) 0.332 B/op [Average]
[info]   (min, avg, max) = (0.391, 0.433, 0.587), stdev = 0.086
[info]   CI (99.9%): [0.102, 0.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 22.12% complete, ETA 00:54:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 372812.765 ops/s
[info] # Warmup Iteration   2: 544026.601 ops/s
[info] # Warmup Iteration   3: 535598.475 ops/s
[info] Iteration   1: 548382.059 ops/s
[info]                  ·gc.alloc.rate:                   554.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1671.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 541660.114 ops/s
[info]                  ·gc.alloc.rate:                   547.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1899.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 549324.885 ops/s
[info]                  ·gc.alloc.rate:                   555.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1874.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 548821.210 ops/s
[info]                  ·gc.alloc.rate:               555.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 937.944 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 547297.047 ops/s
[info]                  ·gc.alloc.rate:                   553.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1884.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   547097.063 ±(99.9%) 12052.500 ops/s [Average]
[info]   (min, avg, max) = (541660.114, 547097.063, 549324.885), stdev = 3129.996
[info]   CI (99.9%): [535044.563, 559149.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   553.420 ±(99.9%) 12.188 MB/sec [Average]
[info]   (min, avg, max) = (547.916, 553.420, 555.679), stdev = 3.165
[info]   CI (99.9%): [541.232, 565.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   574.632 ±(99.9%) 546.249 MB/sec [Average]
[info]   (min, avg, max) = (327.075, 574.632, 655.543), stdev = 141.859
[info]   CI (99.9%): [28.383, 1120.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1653.751 ±(99.9%) 1582.161 B/op [Average]
[info]   (min, avg, max) = (937.944, 1653.751, 1899.808), stdev = 410.882
[info]   CI (99.9%): [71.589, 3235.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.467 ±(99.9%) 3.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 2.146), stdev = 0.939
[info]   CI (99.9%): [≈ 0, 4.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.340 ±(99.9%) 10.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.340, 6.159), stdev = 2.696
[info]   CI (99.9%): [≈ 0, 11.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 22.42% complete, ETA 00:54:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520988.576 ops/s
[info] # Warmup Iteration   2: 566351.301 ops/s
[info] # Warmup Iteration   3: 553101.654 ops/s
[info] Iteration   1: 567900.218 ops/s
[info]                  ·gc.alloc.rate:                   435.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 568792.538 ops/s
[info]                  ·gc.alloc.rate:                   436.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 566382.648 ops/s
[info]                  ·gc.alloc.rate:                   434.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1841.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 565537.092 ops/s
[info]                  ·gc.alloc.rate:                   434.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     921.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 567996.647 ops/s
[info]                  ·gc.alloc.rate:               435.982 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 917.330 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   567321.828 ±(99.9%) 5101.284 ops/s [Average]
[info]   (min, avg, max) = (565537.092, 567321.828, 568792.538), stdev = 1324.787
[info]   CI (99.9%): [562220.545, 572423.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   435.517 ±(99.9%) 3.807 MB/sec [Average]
[info]   (min, avg, max) = (434.209, 435.517, 436.689), stdev = 0.989
[info]   CI (99.9%): [431.710, 439.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   382.559 ±(99.9%) 616.613 MB/sec [Average]
[info]   (min, avg, max) = (255.785, 382.559, 662.969), stdev = 160.133
[info]   CI (99.9%): [≈ 0, 999.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1061.440 ±(99.9%) 1715.910 B/op [Average]
[info]   (min, avg, max) = (708.881, 1061.440, 1841.812), stdev = 445.616
[info]   CI (99.9%): [≈ 0, 2777.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 2.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.741), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.032 ±(99.9%) 8.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.032, 4.815), stdev = 2.116
[info]   CI (99.9%): [≈ 0, 9.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.73% complete, ETA 00:54:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 553953.268 ops/s
[info] # Warmup Iteration   2: 600781.225 ops/s
[info] # Warmup Iteration   3: 600033.523 ops/s
[info] Iteration   1: 599961.656 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 600202.827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 600981.179 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 600847.682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 600903.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   600579.272 ±(99.9%) 1787.071 ops/s [Average]
[info]   (min, avg, max) = (599961.656, 600579.272, 600981.179), stdev = 464.097
[info]   CI (99.9%): [598792.201, 602366.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.03% complete, ETA 00:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189537.604 ops/s
[info] # Warmup Iteration   2: 321485.440 ops/s
[info] # Warmup Iteration   3: 324590.249 ops/s
[info] Iteration   1: 326319.366 ops/s
[info]                  ·gc.alloc.rate:                   902.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4713.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 327352.126 ops/s
[info]                  ·gc.alloc.rate:                   905.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4707.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 324341.091 ops/s
[info]                  ·gc.alloc.rate:                   896.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3177.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 325262.461 ops/s
[info]                  ·gc.alloc.rate:                   899.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4778.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 324917.785 ops/s
[info]                  ·gc.alloc.rate:                   898.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4802.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   325638.566 ±(99.9%) 4614.430 ops/s [Average]
[info]   (min, avg, max) = (324341.091, 325638.566, 327352.126), stdev = 1198.353
[info]   CI (99.9%): [321024.136, 330252.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   900.502 ±(99.9%) 12.664 MB/sec [Average]
[info]   (min, avg, max) = (896.925, 900.502, 905.188), stdev = 3.289
[info]   CI (99.9%): [887.837, 913.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   918.100 ±(99.9%) 567.115 MB/sec [Average]
[info]   (min, avg, max) = (654.851, 918.100, 991.578), stdev = 147.278
[info]   CI (99.9%): [350.984, 1485.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4435.888 ±(99.9%) 2713.523 B/op [Average]
[info]   (min, avg, max) = (3177.425, 4435.888, 4802.759), stdev = 704.693
[info]   CI (99.9%): [1722.366, 7149.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.241 ±(99.9%) 0.518 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.241, 0.400), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 23.33% complete, ETA 00:53:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29192.998 ops/s
[info] # Warmup Iteration   2: 36164.824 ops/s
[info] # Warmup Iteration   3: 36238.010 ops/s
[info] Iteration   1: 36139.033 ops/s
[info]                  ·gc.alloc.rate:                   1703.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87042.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.626 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 36033.088 ops/s
[info]                  ·gc.alloc.rate:                   1698.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73200.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.455 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35766.171 ops/s
[info]                  ·gc.alloc.rate:                   1685.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74039.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.580 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36287.437 ops/s
[info]                  ·gc.alloc.rate:                   1710.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73237.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.708 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 36042.890 ops/s
[info]                  ·gc.alloc.rate:                   1698.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73940.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.636 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36053.724 ±(99.9%) 733.468 ops/s [Average]
[info]   (min, avg, max) = (35766.171, 36053.724, 36287.437), stdev = 190.479
[info]   CI (99.9%): [35320.256, 36787.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1699.217 ±(99.9%) 34.088 MB/sec [Average]
[info]   (min, avg, max) = (1685.927, 1699.217, 1710.054), stdev = 8.853
[info]   CI (99.9%): [1665.128, 1733.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74160.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (74160.012, 74160.012, 74160.013), stdev = 0.001
[info]   CI (99.9%): [74160.011, 74160.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1748.197 ±(99.9%) 541.176 MB/sec [Average]
[info]   (min, avg, max) = (1676.030, 1748.197, 1999.331), stdev = 140.542
[info]   CI (99.9%): [1207.021, 2289.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   76292.157 ±(99.9%) 23189.821 B/op [Average]
[info]   (min, avg, max) = (73200.444, 76292.157, 87042.890), stdev = 6022.323
[info]   CI (99.9%): [53102.336, 99481.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.001 ±(99.9%) 4.036 B/op [Average]
[info]   (min, avg, max) = (2.708, 4.001, 5.455), stdev = 1.048
[info]   CI (99.9%): [≈ 0, 8.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 23.64% complete, ETA 00:53:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63721.274 ops/s
[info] # Warmup Iteration   2: 92440.411 ops/s
[info] # Warmup Iteration   3: 94149.598 ops/s
[info] Iteration   1: 93697.026 ops/s
[info]                  ·gc.alloc.rate:                   1093.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16493.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 94634.032 ops/s
[info]                  ·gc.alloc.rate:                   1104.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21863.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.731 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 93613.728 ops/s
[info]                  ·gc.alloc.rate:                   1092.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16658.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 93013.218 ops/s
[info]                  ·gc.alloc.rate:                   1085.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16856.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 93866.548 ops/s
[info]                  ·gc.alloc.rate:                   1095.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22381.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.396 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   93764.910 ±(99.9%) 2243.812 ops/s [Average]
[info]   (min, avg, max) = (93013.218, 93764.910, 94634.032), stdev = 582.711
[info]   CI (99.9%): [91521.099, 96008.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1094.386 ±(99.9%) 26.113 MB/sec [Average]
[info]   (min, avg, max) = (1085.614, 1094.386, 1104.443), stdev = 6.781
[info]   CI (99.9%): [1068.273, 1120.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18368.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18368.005, 18368.005, 18368.005), stdev = 0.001
[info]   CI (99.9%): [18368.004, 18368.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.782 ±(99.9%) 707.811 MB/sec [Average]
[info]   (min, avg, max) = (981.915, 1123.782, 1335.200), stdev = 183.816
[info]   CI (99.9%): [415.971, 1831.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18850.666 ±(99.9%) 11533.189 B/op [Average]
[info]   (min, avg, max) = (16493.272, 18850.666, 22381.654), stdev = 2995.133
[info]   CI (99.9%): [7317.477, 30383.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.116 ±(99.9%) 1.726 B/op [Average]
[info]   (min, avg, max) = (0.700, 1.116, 1.731), stdev = 0.448
[info]   CI (99.9%): [≈ 0, 2.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 23.94% complete, ETA 00:53:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153938.073 ops/s
[info] # Warmup Iteration   2: 160415.134 ops/s
[info] # Warmup Iteration   3: 157215.928 ops/s
[info] Iteration   1: 159939.064 ops/s
[info]                  ·gc.alloc.rate:      104.071 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 157088.226 ops/s
[info]                  ·gc.alloc.rate:                   102.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2562.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.974 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 158759.365 ops/s
[info]                  ·gc.alloc.rate:      103.300 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 159272.350 ops/s
[info]                  ·gc.alloc.rate:      103.660 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 159190.975 ops/s
[info]                  ·gc.alloc.rate:                   103.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2528.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   158849.996 ±(99.9%) 4126.108 ops/s [Average]
[info]   (min, avg, max) = (157088.226, 158849.996, 159939.064), stdev = 1071.537
[info]   CI (99.9%): [154723.888, 162976.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   103.366 ±(99.9%) 2.687 MB/sec [Average]
[info]   (min, avg, max) = (102.220, 103.366, 104.071), stdev = 0.698
[info]   CI (99.9%): [100.679, 106.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.325 ±(99.9%) 539.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.325, 255.816), stdev = 140.114
[info]   CI (99.9%): [≈ 0, 641.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1018.327 ±(99.9%) 5369.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1018.327, 2562.679), stdev = 1394.453
[info]   CI (99.9%): [≈ 0, 6387.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.500 ±(99.9%) 4.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.500, 2.493), stdev = 1.114
[info]   CI (99.9%): [≈ 0, 4.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.006 ±(99.9%) 42.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.006, 24.974), stdev = 11.163
[info]   CI (99.9%): [≈ 0, 47.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 24.24% complete, ETA 00:53:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22600.695 ops/s
[info] # Warmup Iteration   2: 38789.434 ops/s
[info] # Warmup Iteration   3: 38995.471 ops/s
[info] Iteration   1: 38071.823 ops/s
[info]                  ·gc.alloc.rate:                   1996.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82262.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.442 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38751.067 ops/s
[info]                  ·gc.alloc.rate:                   2031.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81485.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.073 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 39171.096 ops/s
[info]                  ·gc.alloc.rate:                   2053.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81134.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.673 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 38063.422 ops/s
[info]                  ·gc.alloc.rate:                   1995.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83853.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.025 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 37991.839 ops/s
[info]                  ·gc.alloc.rate:                   1991.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84249.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.587 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38409.850 ±(99.9%) 2023.816 ops/s [Average]
[info]   (min, avg, max) = (37991.839, 38409.850, 39171.096), stdev = 525.579
[info]   CI (99.9%): [36386.033, 40433.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2013.682 ±(99.9%) 106.034 MB/sec [Average]
[info]   (min, avg, max) = (1991.736, 2013.682, 2053.576), stdev = 27.537
[info]   CI (99.9%): [1907.648, 2119.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82504.012 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (82504.011, 82504.012, 82504.016), stdev = 0.002
[info]   CI (99.9%): [82504.005, 82504.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.633 ±(99.9%) 67.765 MB/sec [Average]
[info]   (min, avg, max) = (1990.147, 2015.633, 2033.867), stdev = 17.598
[info]   CI (99.9%): [1947.868, 2083.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82596.993 ±(99.9%) 5375.535 B/op [Average]
[info]   (min, avg, max) = (81134.234, 82596.993, 84249.238), stdev = 1396.009
[info]   CI (99.9%): [77221.458, 87972.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.760 ±(99.9%) 6.858 B/op [Average]
[info]   (min, avg, max) = (1.673, 3.760, 6.025), stdev = 1.781
[info]   CI (99.9%): [≈ 0, 10.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 24.55% complete, ETA 00:52:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69264.305 ops/s
[info] # Warmup Iteration   2: 87550.579 ops/s
[info] # Warmup Iteration   3: 88195.738 ops/s
[info] Iteration   1: 88869.520 ops/s
[info]                  ·gc.alloc.rate:                   710.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11684.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 88936.089 ops/s
[info]                  ·gc.alloc.rate:                   710.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11682.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 86787.492 ops/s
[info]                  ·gc.alloc.rate:                   693.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11988.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 88275.113 ops/s
[info]                  ·gc.alloc.rate:               705.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11804.570 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 88208.621 ops/s
[info]                  ·gc.alloc.rate:                   705.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17761.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.857 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   88215.367 ±(99.9%) 3329.082 ops/s [Average]
[info]   (min, avg, max) = (86787.492, 88215.367, 88936.089), stdev = 864.552
[info]   CI (99.9%): [84886.285, 91544.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   705.003 ±(99.9%) 26.374 MB/sec [Average]
[info]   (min, avg, max) = (693.662, 705.003, 710.672), stdev = 6.849
[info]   CI (99.9%): [678.628, 731.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12576.005, 12576.005, 12576.005), stdev = 0.001
[info]   CI (99.9%): [12576.004, 12576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   727.845 ±(99.9%) 576.854 MB/sec [Average]
[info]   (min, avg, max) = (659.816, 727.845, 995.823), stdev = 149.807
[info]   CI (99.9%): [150.990, 1304.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12984.284 ±(99.9%) 10294.586 B/op [Average]
[info]   (min, avg, max) = (11682.149, 12984.284, 17761.496), stdev = 2673.471
[info]   CI (99.9%): [2689.698, 23278.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.263 ±(99.9%) 3.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.263, 2.212), stdev = 0.892
[info]   CI (99.9%): [≈ 0, 4.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 24.85% complete, ETA 00:52:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71098.402 ops/s
[info] # Warmup Iteration   2: 97583.295 ops/s
[info] # Warmup Iteration   3: 96921.952 ops/s
[info] Iteration   1: 95615.744 ops/s
[info]                  ·gc.alloc.rate:               377.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4210.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 98116.333 ops/s
[info]                  ·gc.alloc.rate:                   387.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9344.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 98596.986 ops/s
[info]                  ·gc.alloc.rate:                   388.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5215.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.997 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 98443.644 ops/s
[info]                  ·gc.alloc.rate:               388.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5228.770 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 95937.464 ops/s
[info]                  ·gc.alloc.rate:               378.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5365.544 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   97342.034 ±(99.9%) 5560.443 ops/s [Average]
[info]   (min, avg, max) = (95615.744, 97342.034, 98596.986), stdev = 1444.029
[info]   CI (99.9%): [91781.592, 102902.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   384.012 ±(99.9%) 21.845 MB/sec [Average]
[info]   (min, avg, max) = (377.261, 384.012, 388.946), stdev = 5.673
[info]   CI (99.9%): [362.168, 405.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6208.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.004, 6208.005, 6208.005), stdev = 0.001
[info]   CI (99.9%): [6208.004, 6208.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.877 ±(99.9%) 485.458 MB/sec [Average]
[info]   (min, avg, max) = (255.867, 363.877, 582.570), stdev = 126.072
[info]   CI (99.9%): [≈ 0, 849.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5872.860 ±(99.9%) 7681.939 B/op [Average]
[info]   (min, avg, max) = (4210.400, 5872.860, 9344.350), stdev = 1994.975
[info]   CI (99.9%): [≈ 0, 13554.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.435 ±(99.9%) 3.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.435, 2.115), stdev = 0.939
[info]   CI (99.9%): [≈ 0, 4.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.984 ±(99.9%) 58.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.984, 33.923), stdev = 15.066
[info]   CI (99.9%): [≈ 0, 64.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 25.15% complete, ETA 00:52:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98830.539 ops/s
[info] # Warmup Iteration   2: 110000.100 ops/s
[info] # Warmup Iteration   3: 108762.474 ops/s
[info] Iteration   1: 110066.446 ops/s
[info]                  ·gc.alloc.rate:                   407.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7315.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 111426.520 ops/s
[info]                  ·gc.alloc.rate:                   412.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4685.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.284 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 109262.018 ops/s
[info]                  ·gc.alloc.rate:                   404.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4778.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 110903.156 ops/s
[info]                  ·gc.alloc.rate:                   410.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9395.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 110801.626 ops/s
[info]                  ·gc.alloc.rate:               410.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4707.120 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   110491.953 ±(99.9%) 3240.150 ops/s [Average]
[info]   (min, avg, max) = (109262.018, 110491.953, 111426.520), stdev = 841.457
[info]   CI (99.9%): [107251.803, 113732.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   408.946 ±(99.9%) 12.118 MB/sec [Average]
[info]   (min, avg, max) = (404.336, 408.946, 412.363), stdev = 3.147
[info]   CI (99.9%): [396.827, 421.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5824.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5824.004, 5824.004), stdev = 0.001
[info]   CI (99.9%): [5824.003, 5824.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   433.785 ±(99.9%) 576.215 MB/sec [Average]
[info]   (min, avg, max) = (331.494, 433.785, 662.320), stdev = 149.641
[info]   CI (99.9%): [≈ 0, 1010.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6176.316 ±(99.9%) 8167.128 B/op [Average]
[info]   (min, avg, max) = (4685.511, 6176.316, 9395.368), stdev = 2120.977
[info]   CI (99.9%): [≈ 0, 14343.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.367 ±(99.9%) 2.913 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.719), stdev = 0.757
[info]   CI (99.9%): [≈ 0, 3.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.185 ±(99.9%) 41.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.185, 24.284), stdev = 10.683
[info]   CI (99.9%): [≈ 0, 46.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 25.45% complete, ETA 00:52:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102560.483 ops/s
[info] # Warmup Iteration   2: 113347.744 ops/s
[info] # Warmup Iteration   3: 112753.613 ops/s
[info] Iteration   1: 112501.215 ops/s
[info]                  ·gc.alloc.rate:                   327.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7156.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 110680.456 ops/s
[info]                  ·gc.alloc.rate:               322.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3637.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 112808.568 ops/s
[info]                  ·gc.alloc.rate:                   328.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4628.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 113043.004 ops/s
[info]                  ·gc.alloc.rate:                   329.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4618.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 112108.906 ops/s
[info]                  ·gc.alloc.rate:               326.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4656.847 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   112228.430 ±(99.9%) 3594.226 ops/s [Average]
[info]   (min, avg, max) = (110680.456, 112228.430, 113043.004), stdev = 933.409
[info]   CI (99.9%): [108634.204, 115822.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   326.914 ±(99.9%) 10.304 MB/sec [Average]
[info]   (min, avg, max) = (322.490, 326.914, 329.270), stdev = 2.676
[info]   CI (99.9%): [316.610, 337.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4584.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4584.004, 4584.004), stdev = 0.001
[info]   CI (99.9%): [4584.004, 4584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   352.543 ±(99.9%) 364.968 MB/sec [Average]
[info]   (min, avg, max) = (255.884, 352.543, 511.583), stdev = 94.781
[info]   CI (99.9%): [≈ 0, 717.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4939.529 ±(99.9%) 5054.543 B/op [Average]
[info]   (min, avg, max) = (3637.238, 4939.529, 7156.816), stdev = 1312.649
[info]   CI (99.9%): [≈ 0, 9994.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 3.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.803), stdev = 0.797
[info]   CI (99.9%): [≈ 0, 3.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.262 ±(99.9%) 42.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.262, 25.148), stdev = 11.122
[info]   CI (99.9%): [≈ 0, 48.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 25.76% complete, ETA 00:52:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6089.771 ops/s
[info] # Warmup Iteration   2: 9145.141 ops/s
[info] # Warmup Iteration   3: 9193.372 ops/s
[info] Iteration   1: 9163.247 ops/s
[info]                  ·gc.alloc.rate:                   1519.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285283.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.877 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9194.250 ops/s
[info]                  ·gc.alloc.rate:                   1524.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228481.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.940 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9081.557 ops/s
[info]                  ·gc.alloc.rate:                   1505.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290482.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.822 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9177.659 ops/s
[info]                  ·gc.alloc.rate:                   1521.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230903.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.708 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9105.224 ops/s
[info]                  ·gc.alloc.rate:                   1509.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              260943.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291846.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.989 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9144.387 ±(99.9%) 186.969 ops/s [Average]
[info]   (min, avg, max) = (9081.557, 9144.387, 9194.250), stdev = 48.555
[info]   CI (99.9%): [8957.419, 9331.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1516.185 ±(99.9%) 30.918 MB/sec [Average]
[info]   (min, avg, max) = (1505.720, 1516.185, 1524.395), stdev = 8.029
[info]   CI (99.9%): [1485.267, 1547.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260931.112 ±(99.9%) 26.377 B/op [Average]
[info]   (min, avg, max) = (260928.047, 260931.112, 260943.366), stdev = 6.850
[info]   CI (99.9%): [260904.736, 260957.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1541.487 ±(99.9%) 706.892 MB/sec [Average]
[info]   (min, avg, max) = (1334.836, 1541.487, 1688.605), stdev = 183.578
[info]   CI (99.9%): [834.595, 2248.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   265399.628 ±(99.9%) 125911.687 B/op [Average]
[info]   (min, avg, max) = (228481.712, 265399.628, 291846.746), stdev = 32698.865
[info]   CI (99.9%): [139487.942, 391311.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.467 ±(99.9%) 22.872 B/op [Average]
[info]   (min, avg, max) = (10.708, 16.467, 24.940), stdev = 5.940
[info]   CI (99.9%): [≈ 0, 39.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 26.06% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5129.433 ops/s
[info] # Warmup Iteration   2: 9257.510 ops/s
[info] # Warmup Iteration   3: 9527.272 ops/s
[info] Iteration   1: 9433.806 ops/s
[info]                  ·gc.alloc.rate:                   1451.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274034.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9540.981 ops/s
[info]                  ·gc.alloc.rate:                   1468.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218219.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.169 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9293.703 ops/s
[info]                  ·gc.alloc.rate:                   1429.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225371.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9523.521 ops/s
[info]                  ·gc.alloc.rate:                   1465.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276618.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.759 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9506.203 ops/s
[info]                  ·gc.alloc.rate:                   1462.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              242136.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222772.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.678 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9459.643 ±(99.9%) 390.170 ops/s [Average]
[info]   (min, avg, max) = (9293.703, 9459.643, 9540.981), stdev = 101.326
[info]   CI (99.9%): [9069.472, 9849.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1455.403 ±(99.9%) 60.330 MB/sec [Average]
[info]   (min, avg, max) = (1429.803, 1455.403, 1468.088), stdev = 15.668
[info]   CI (99.9%): [1395.073, 1515.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242110.682 ±(99.9%) 56.135 B/op [Average]
[info]   (min, avg, max) = (242104.045, 242110.682, 242136.757), stdev = 14.578
[info]   CI (99.9%): [242054.547, 242166.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1463.336 ±(99.9%) 687.617 MB/sec [Average]
[info]   (min, avg, max) = (1323.257, 1463.336, 1674.073), stdev = 178.572
[info]   CI (99.9%): [775.719, 2150.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   243403.505 ±(99.9%) 112701.314 B/op [Average]
[info]   (min, avg, max) = (218219.840, 243403.505, 276618.884), stdev = 29268.173
[info]   CI (99.9%): [130702.191, 356104.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.815 ±(99.9%) 20.706 B/op [Average]
[info]   (min, avg, max) = (7.050, 13.815, 20.678), stdev = 5.377
[info]   CI (99.9%): [≈ 0, 34.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 26.36% complete, ETA 00:51:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94011.633 ops/s
[info] # Warmup Iteration   2: 103045.566 ops/s
[info] # Warmup Iteration   3: 103355.237 ops/s
[info] Iteration   1: 102959.679 ops/s
[info]                  ·gc.alloc.rate:                   268.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3910.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 103685.256 ops/s
[info]                  ·gc.alloc.rate:               269.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3882.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 103602.159 ops/s
[info]                  ·gc.alloc.rate:               269.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3885.901 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 103211.756 ops/s
[info]                  ·gc.alloc.rate:                   268.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5073.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 103783.301 ops/s
[info]                  ·gc.alloc.rate:      270.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   103448.430 ±(99.9%) 1343.249 ops/s [Average]
[info]   (min, avg, max) = (102959.679, 103448.430, 103783.301), stdev = 348.838
[info]   CI (99.9%): [102105.181, 104791.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   269.256 ±(99.9%) 3.470 MB/sec [Average]
[info]   (min, avg, max) = (268.028, 269.256, 270.121), stdev = 0.901
[info]   CI (99.9%): [265.786, 272.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   220.045 ±(99.9%) 490.703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.045, 332.717), stdev = 127.434
[info]   CI (99.9%): [≈ 0, 710.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3350.494 ±(99.9%) 7476.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3350.494, 5073.804), stdev = 1941.561
[info]   CI (99.9%): [≈ 0, 10826.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.323 ±(99.9%) 2.756 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.323, 1.603), stdev = 0.716
[info]   CI (99.9%): [≈ 0, 3.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.920 ±(99.9%) 42.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.920, 24.443), stdev = 10.914
[info]   CI (99.9%): [≈ 0, 46.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 26.67% complete, ETA 00:51:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2677.806 ops/s
[info] # Warmup Iteration   2: 5214.199 ops/s
[info] # Warmup Iteration   3: 5392.113 ops/s
[info] Iteration   1: 5452.404 ops/s
[info]                  ·gc.alloc.rate:                   1450.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379709.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5465.105 ops/s
[info]                  ·gc.alloc.rate:                   1453.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     476616.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.974 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5456.969 ops/s
[info]                  ·gc.alloc.rate:                   1451.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384164.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5464.219 ops/s
[info]                  ·gc.alloc.rate:                   1453.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385590.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5419.011 ops/s
[info]                  ·gc.alloc.rate:                   1441.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488116.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5451.542 ±(99.9%) 72.887 ops/s [Average]
[info]   (min, avg, max) = (5419.011, 5451.542, 5465.105), stdev = 18.928
[info]   CI (99.9%): [5378.655, 5524.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1450.317 ±(99.9%) 19.446 MB/sec [Average]
[info]   (min, avg, max) = (1441.675, 1450.317, 1453.937), stdev = 5.050
[info]   CI (99.9%): [1430.871, 1469.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418664.080 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (418664.079, 418664.080, 418664.085), stdev = 0.003
[info]   CI (99.9%): [418664.070, 418664.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.509 ±(99.9%) 716.704 MB/sec [Average]
[info]   (min, avg, max) = (1315.455, 1464.509, 1680.837), stdev = 186.126
[info]   CI (99.9%): [747.804, 2181.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   422839.623 ±(99.9%) 209997.488 B/op [Average]
[info]   (min, avg, max) = (379709.864, 422839.623, 488116.867), stdev = 54535.681
[info]   CI (99.9%): [212842.135, 632837.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22.827 ±(99.9%) 19.196 B/op [Average]
[info]   (min, avg, max) = (17.985, 22.827, 29.974), stdev = 4.985
[info]   CI (99.9%): [3.631, 42.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 26.97% complete, ETA 00:51:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17148.390 ops/s
[info] # Warmup Iteration   2: 24454.791 ops/s
[info] # Warmup Iteration   3: 23771.931 ops/s
[info] Iteration   1: 24470.800 ops/s
[info]                  ·gc.alloc.rate:                   1802.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106978.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.711 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24081.288 ops/s
[info]                  ·gc.alloc.rate:                   1773.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              115884.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109311.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.442 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 24491.955 ops/s
[info]                  ·gc.alloc.rate:                   1802.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129696.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.688 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24173.652 ops/s
[info]                  ·gc.alloc.rate:                   1779.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109940.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.066 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24489.871 ops/s
[info]                  ·gc.alloc.rate:                   1802.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108821.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.689 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24341.513 ±(99.9%) 763.487 ops/s [Average]
[info]   (min, avg, max) = (24081.288, 24341.513, 24491.955), stdev = 198.275
[info]   CI (99.9%): [23578.026, 25105.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1792.151 ±(99.9%) 54.939 MB/sec [Average]
[info]   (min, avg, max) = (1773.683, 1792.151, 1802.712), stdev = 14.268
[info]   CI (99.9%): [1737.211, 1847.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115855.291 ±(99.9%) 123.733 B/op [Average]
[info]   (min, avg, max) = (115832.018, 115855.291, 115896.019), stdev = 32.133
[info]   CI (99.9%): [115731.559, 115979.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1747.530 ±(99.9%) 585.128 MB/sec [Average]
[info]   (min, avg, max) = (1663.467, 1747.530, 2018.493), stdev = 151.956
[info]   CI (99.9%): [1162.401, 2332.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112949.690 ±(99.9%) 36299.448 B/op [Average]
[info]   (min, avg, max) = (106978.316, 112949.690, 129696.913), stdev = 9426.851
[info]   CI (99.9%): [76650.241, 149249.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.719 ±(99.9%) 9.551 B/op [Average]
[info]   (min, avg, max) = (4.066, 6.719, 10.711), stdev = 2.480
[info]   CI (99.9%): [≈ 0, 16.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 27.27% complete, ETA 00:51:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17087.004 ops/s
[info] # Warmup Iteration   2: 28629.218 ops/s
[info] # Warmup Iteration   3: 28292.685 ops/s
[info] Iteration   1: 28726.883 ops/s
[info]                  ·gc.alloc.rate:                   1776.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              97320.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90376.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.562 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28740.117 ops/s
[info]                  ·gc.alloc.rate:                   1777.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              97320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109358.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.259 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28830.557 ops/s
[info]                  ·gc.alloc.rate:                   1782.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              97320.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91505.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28541.222 ops/s
[info]                  ·gc.alloc.rate:                   1765.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              97320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92872.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.443 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28546.004 ops/s
[info]                  ·gc.alloc.rate:                   1765.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              97320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111860.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.329 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   28676.957 ±(99.9%) 493.302 ops/s [Average]
[info]   (min, avg, max) = (28541.222, 28676.957, 28830.557), stdev = 128.109
[info]   CI (99.9%): [28183.655, 29170.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1773.398 ±(99.9%) 30.433 MB/sec [Average]
[info]   (min, avg, max) = (1765.034, 1773.398, 1782.952), stdev = 7.903
[info]   CI (99.9%): [1742.965, 1803.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   97320.017 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (97320.015, 97320.017, 97320.022), stdev = 0.003
[info]   CI (99.9%): [97320.006, 97320.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1807.335 ±(99.9%) 726.234 MB/sec [Average]
[info]   (min, avg, max) = (1649.712, 1807.335, 2029.113), stdev = 188.601
[info]   CI (99.9%): [1081.101, 2533.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99194.904 ±(99.9%) 40413.027 B/op [Average]
[info]   (min, avg, max) = (90376.865, 99194.904, 111860.838), stdev = 10495.135
[info]   CI (99.9%): [58781.877, 139607.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.400 ±(99.9%) 13.803 B/op [Average]
[info]   (min, avg, max) = (3.409, 6.400, 10.329), stdev = 3.584
[info]   CI (99.9%): [≈ 0, 20.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 27.58% complete, ETA 00:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315172.853 ops/s
[info] # Warmup Iteration   2: 342077.365 ops/s
[info] # Warmup Iteration   3: 336755.727 ops/s
[info] Iteration   1: 331565.843 ops/s
[info]                  ·gc.alloc.rate:                   731.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3149.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 329825.892 ops/s
[info]                  ·gc.alloc.rate:                   727.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3165.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 325954.372 ops/s
[info]                  ·gc.alloc.rate:                   719.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3203.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 336632.153 ops/s
[info]                  ·gc.alloc.rate:                   742.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3108.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 338630.577 ops/s
[info]                  ·gc.alloc.rate:                   747.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4642.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   332521.767 ±(99.9%) 19777.943 ops/s [Average]
[info]   (min, avg, max) = (325954.372, 332521.767, 338630.577), stdev = 5136.269
[info]   CI (99.9%): [312743.824, 352299.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   733.718 ±(99.9%) 44.017 MB/sec [Average]
[info]   (min, avg, max) = (719.118, 733.718, 747.288), stdev = 11.431
[info]   CI (99.9%): [689.700, 777.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.960 ±(99.9%) 577.341 MB/sec [Average]
[info]   (min, avg, max) = (663.500, 730.960, 999.167), stdev = 149.934
[info]   CI (99.9%): [153.619, 1308.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3453.778 ±(99.9%) 2561.700 B/op [Average]
[info]   (min, avg, max) = (3108.119, 3453.778, 4642.265), stdev = 665.265
[info]   CI (99.9%): [892.078, 6015.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.335 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (0.292, 0.335, 0.395), stdev = 0.052
[info]   CI (99.9%): [0.136, 0.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.483
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.88% complete, ETA 00:50:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349790.254 ops/s
[info] # Warmup Iteration   2: 365834.234 ops/s
[info] # Warmup Iteration   3: 386265.092 ops/s
[info] Iteration   1: 386317.918 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 386185.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 386004.297 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 385402.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 386161.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   386014.131 ±(99.9%) 1385.466 ops/s [Average]
[info]   (min, avg, max) = (385402.109, 386014.131, 386317.918), stdev = 359.801
[info]   CI (99.9%): [384628.666, 387399.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 28.18% complete, ETA 00:50:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20496.231 ops/s
[info] # Warmup Iteration   2: 28334.316 ops/s
[info] # Warmup Iteration   3: 28864.496 ops/s
[info] Iteration   1: 29012.741 ops/s
[info]                  ·gc.alloc.rate:                   1902.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90028.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.646 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28933.665 ops/s
[info]                  ·gc.alloc.rate:                   1897.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109096.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.529 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 28725.943 ops/s
[info]                  ·gc.alloc.rate:                   1883.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110580.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.281 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28822.533 ops/s
[info]                  ·gc.alloc.rate:                   1890.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92276.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.547 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28652.568 ops/s
[info]                  ·gc.alloc.rate:                   1878.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111670.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.717 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28829.490 ±(99.9%) 566.271 ops/s [Average]
[info]   (min, avg, max) = (28652.568, 28829.490, 29012.741), stdev = 147.059
[info]   CI (99.9%): [28263.219, 29395.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1890.567 ±(99.9%) 36.940 MB/sec [Average]
[info]   (min, avg, max) = (1878.879, 1890.567, 1902.438), stdev = 9.593
[info]   CI (99.9%): [1853.627, 1927.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103200.016 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (103200.015, 103200.016, 103200.020), stdev = 0.002
[info]   CI (99.9%): [103200.007, 103200.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1881.448 ±(99.9%) 727.777 MB/sec [Average]
[info]   (min, avg, max) = (1659.622, 1881.448, 2033.095), stdev = 189.001
[info]   CI (99.9%): [1153.671, 2609.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   102730.395 ±(99.9%) 40964.876 B/op [Average]
[info]   (min, avg, max) = (90028.158, 102730.395, 111670.527), stdev = 10638.448
[info]   CI (99.9%): [61765.520, 143695.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.544 ±(99.9%) 5.347 B/op [Average]
[info]   (min, avg, max) = (2.281, 4.544, 5.717), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 9.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 28.48% complete, ETA 00:50:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107546.714 ops/s
[info] # Warmup Iteration   2: 130074.518 ops/s
[info] # Warmup Iteration   3: 129015.542 ops/s
[info] Iteration   1: 128824.357 ops/s
[info]                  ·gc.alloc.rate:                   2218.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2346.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28665.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.272 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 128916.179 ops/s
[info]                  ·gc.alloc.rate:                   2220.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24685.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.779 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 128542.504 ops/s
[info]                  ·gc.alloc.rate:                   2213.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28995.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.020 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 128465.039 ops/s
[info]                  ·gc.alloc.rate:                   2212.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24940.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.530 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 129395.830 ops/s
[info]                  ·gc.alloc.rate:                   2228.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28925.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.026 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   128828.782 ±(99.9%) 1419.349 ops/s [Average]
[info]   (min, avg, max) = (128465.039, 128828.782, 129395.830), stdev = 368.600
[info]   CI (99.9%): [127409.433, 130248.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2218.911 ±(99.9%) 24.138 MB/sec [Average]
[info]   (min, avg, max) = (2212.927, 2218.911, 2228.636), stdev = 6.269
[info]   CI (99.9%): [2194.773, 2243.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27104.003, 27104.003, 27104.004), stdev = 0.001
[info]   CI (99.9%): [27104.003, 27104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2230.377 ±(99.9%) 708.658 MB/sec [Average]
[info]   (min, avg, max) = (2022.229, 2230.377, 2378.442), stdev = 184.036
[info]   CI (99.9%): [1521.719, 2939.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27242.504 ±(99.9%) 8561.282 B/op [Average]
[info]   (min, avg, max) = (24685.149, 27242.504, 28995.704), stdev = 2223.338
[info]   CI (99.9%): [18681.222, 35803.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.525 ±(99.9%) 1.534 B/op [Average]
[info]   (min, avg, max) = (1.020, 1.525, 2.026), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 3.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 28.79% complete, ETA 00:50:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209946.966 ops/s
[info] # Warmup Iteration   2: 306800.595 ops/s
[info] # Warmup Iteration   3: 307116.967 ops/s
[info] Iteration   1: 305776.502 ops/s
[info]                  ·gc.alloc.rate:                   432.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2633.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 302665.623 ops/s
[info]                  ·gc.alloc.rate:                   427.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1698.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 299006.718 ops/s
[info]                  ·gc.alloc.rate:                   422.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3441.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 302568.307 ops/s
[info]                  ·gc.alloc.rate:                   427.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1701.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 305238.614 ops/s
[info]                  ·gc.alloc.rate:                   431.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1686.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   303051.153 ±(99.9%) 10359.546 ops/s [Average]
[info]   (min, avg, max) = (299006.718, 303051.153, 305776.502), stdev = 2690.341
[info]   CI (99.9%): [292691.607, 313410.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   428.265 ±(99.9%) 14.559 MB/sec [Average]
[info]   (min, avg, max) = (422.588, 428.265, 432.101), stdev = 3.781
[info]   CI (99.9%): [413.706, 442.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.278 ±(99.9%) 573.207 MB/sec [Average]
[info]   (min, avg, max) = (326.726, 429.278, 653.911), stdev = 148.860
[info]   CI (99.9%): [≈ 0, 1002.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2232.226 ±(99.9%) 3036.279 B/op [Average]
[info]   (min, avg, max) = (1686.443, 2232.226, 3441.409), stdev = 788.512
[info]   CI (99.9%): [≈ 0, 5268.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.606 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.450, 2.125), stdev = 0.936
[info]   CI (99.9%): [≈ 0, 4.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.340 ±(99.9%) 18.751 B/op [Average]
[info]   (min, avg, max) = (0.107, 2.340, 11.050), stdev = 4.870
[info]   CI (99.9%): [≈ 0, 21.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 29.09% complete, ETA 00:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 640272.369 ops/s
[info] # Warmup Iteration   2: 681474.530 ops/s
[info] # Warmup Iteration   3: 636456.970 ops/s
[info] Iteration   1: 669545.012 ops/s
[info]                  ·gc.alloc.rate:                   435.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     601.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 674237.314 ops/s
[info]                  ·gc.alloc.rate:                   438.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 669988.319 ops/s
[info]                  ·gc.alloc.rate:                   435.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1561.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 671604.443 ops/s
[info]                  ·gc.alloc.rate:                   436.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 673445.422 ops/s
[info]                  ·gc.alloc.rate:               438.210 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 776.793 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   671764.102 ±(99.9%) 7949.243 ops/s [Average]
[info]   (min, avg, max) = (669545.012, 671764.102, 674237.314), stdev = 2064.393
[info]   CI (99.9%): [663814.859, 679713.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   437.104 ±(99.9%) 5.137 MB/sec [Average]
[info]   (min, avg, max) = (435.678, 437.104, 438.691), stdev = 1.334
[info]   CI (99.9%): [431.968, 442.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.579 ±(99.9%) 618.756 MB/sec [Average]
[info]   (min, avg, max) = (255.813, 383.579, 664.837), stdev = 160.689
[info]   CI (99.9%): [≈ 0, 1002.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   898.907 ±(99.9%) 1456.425 B/op [Average]
[info]   (min, avg, max) = (601.252, 898.907, 1561.629), stdev = 378.229
[info]   CI (99.9%): [≈ 0, 2355.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.340 ±(99.9%) 2.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.340, 1.568), stdev = 0.687
[info]   CI (99.9%): [≈ 0, 2.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.793 ±(99.9%) 6.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.660), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 6.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 29.39% complete, ETA 00:49:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42692.551 ops/s
[info] # Warmup Iteration   2: 70620.960 ops/s
[info] # Warmup Iteration   3: 70389.599 ops/s
[info] Iteration   1: 71088.445 ops/s
[info]                  ·gc.alloc.rate:                   3019.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3021.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66902.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.609 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 71283.042 ops/s
[info]                  ·gc.alloc.rate:                   3028.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3042.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67184.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.677 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 71130.175 ops/s
[info]                  ·gc.alloc.rate:                   3021.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67575.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.224 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 71206.269 ops/s
[info]                  ·gc.alloc.rate:                   3025.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60100.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.301 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 69601.010 ops/s
[info]                  ·gc.alloc.rate:                   2956.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69276.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.295 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70861.788 ±(99.9%) 2728.996 ops/s [Average]
[info]   (min, avg, max) = (69601.010, 70861.788, 71283.042), stdev = 708.712
[info]   CI (99.9%): [68132.792, 73590.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3010.326 ±(99.9%) 115.778 MB/sec [Average]
[info]   (min, avg, max) = (2956.833, 3010.326, 3028.017), stdev = 30.067
[info]   CI (99.9%): [2894.548, 3126.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66856.006, 66856.007), stdev = 0.001
[info]   CI (99.9%): [66856.005, 66856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.499 ±(99.9%) 565.151 MB/sec [Average]
[info]   (min, avg, max) = (2719.447, 2980.499, 3063.880), stdev = 146.768
[info]   CI (99.9%): [2415.347, 3545.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66207.859 ±(99.9%) 13617.377 B/op [Average]
[info]   (min, avg, max) = (60100.356, 66207.859, 69276.422), stdev = 3536.389
[info]   CI (99.9%): [52590.482, 79825.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.154, 0.208), stdev = 0.038
[info]   CI (99.9%): [0.008, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.421 ±(99.9%) 3.214 B/op [Average]
[info]   (min, avg, max) = (2.301, 3.421, 4.609), stdev = 0.835
[info]   CI (99.9%): [0.207, 6.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 29.70% complete, ETA 00:49:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166258.623 ops/s
[info] # Warmup Iteration   2: 207988.149 ops/s
[info] # Warmup Iteration   3: 206106.846 ops/s
[info] Iteration   1: 209466.710 ops/s
[info]                  ·gc.alloc.rate:                   1702.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12479.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 206217.851 ops/s
[info]                  ·gc.alloc.rate:                   1676.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12755.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.953 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 208960.908 ops/s
[info]                  ·gc.alloc.rate:                   1698.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15187.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.470 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 210723.067 ops/s
[info]                  ·gc.alloc.rate:                   1712.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12602.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.622 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 208938.078 ops/s
[info]                  ·gc.alloc.rate:                   1698.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12755.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.627 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   208861.323 ±(99.9%) 6337.888 ops/s [Average]
[info]   (min, avg, max) = (206217.851, 208861.323, 210723.067), stdev = 1645.929
[info]   CI (99.9%): [202523.435, 215199.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1697.697 ±(99.9%) 51.526 MB/sec [Average]
[info]   (min, avg, max) = (1676.113, 1697.697, 1712.714), stdev = 13.381
[info]   CI (99.9%): [1646.171, 1749.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12792.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12792.002, 12792.002, 12792.002), stdev = 0.001
[info]   CI (99.9%): [12792.002, 12792.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.963 ±(99.9%) 584.509 MB/sec [Average]
[info]   (min, avg, max) = (1660.941, 1745.963, 2016.512), stdev = 151.795
[info]   CI (99.9%): [1161.454, 2330.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13155.889 ±(99.9%) 4395.203 B/op [Average]
[info]   (min, avg, max) = (12479.532, 13155.889, 15187.228), stdev = 1141.420
[info]   CI (99.9%): [8760.687, 17551.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.660 ±(99.9%) 0.682 B/op [Average]
[info]   (min, avg, max) = (0.470, 0.660, 0.953), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 1.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 30.00% complete, ETA 00:49:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588406.733 ops/s
[info] # Warmup Iteration   2: 817776.880 ops/s
[info] # Warmup Iteration   3: 833483.177 ops/s
[info] Iteration   1: 838649.143 ops/s
[info]                  ·gc.alloc.rate:                   660.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 826599.986 ops/s
[info]                  ·gc.alloc.rate:                   651.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1245.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 844355.177 ops/s
[info]                  ·gc.alloc.rate:                   665.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1219.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 846948.366 ops/s
[info]                  ·gc.alloc.rate:                   667.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1219.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 846305.911 ops/s
[info]                  ·gc.alloc.rate:                   666.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1835.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   840571.717 ±(99.9%) 32603.539 ops/s [Average]
[info]   (min, avg, max) = (826599.986, 840571.717, 846948.366), stdev = 8467.036
[info]   CI (99.9%): [807968.177, 873175.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   662.328 ±(99.9%) 25.908 MB/sec [Average]
[info]   (min, avg, max) = (651.248, 662.328, 667.353), stdev = 6.728
[info]   CI (99.9%): [636.420, 688.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.022 ±(99.9%) 572.878 MB/sec [Average]
[info]   (min, avg, max) = (653.470, 721.022, 987.152), stdev = 148.775
[info]   CI (99.9%): [148.144, 1293.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1349.110 ±(99.9%) 1047.157 B/op [Average]
[info]   (min, avg, max) = (1219.230, 1349.110, 1835.197), stdev = 271.943
[info]   CI (99.9%): [301.953, 2396.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.463 ±(99.9%) 3.624 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.463, 2.146), stdev = 0.941
[info]   CI (99.9%): [≈ 0, 4.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.868 ±(99.9%) 6.802 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.868, 4.027), stdev = 1.766
[info]   CI (99.9%): [≈ 0, 7.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 30.30% complete, ETA 00:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 928616.000 ops/s
[info] # Warmup Iteration   2: 1004248.584 ops/s
[info] # Warmup Iteration   3: 1010310.642 ops/s
[info] Iteration   1: 1011123.954 ops/s
[info]                  ·gc.alloc.rate:                   550.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1031.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1009523.891 ops/s
[info]                  ·gc.alloc.rate:                   549.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1010334.485 ops/s
[info]                  ·gc.alloc.rate:                   549.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1033.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1009136.407 ops/s
[info]                  ·gc.alloc.rate:               548.895 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517.352 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1009787.772 ops/s
[info]                  ·gc.alloc.rate:                   549.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1034.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1009981.302 ±(99.9%) 2977.047 ops/s [Average]
[info]   (min, avg, max) = (1009136.407, 1009981.302, 1011123.954), stdev = 773.130
[info]   CI (99.9%): [1007004.255, 1012958.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   549.377 ±(99.9%) 1.834 MB/sec [Average]
[info]   (min, avg, max) = (548.895, 549.377, 550.110), stdev = 0.476
[info]   CI (99.9%): [547.543, 551.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.721 ±(99.9%) 699.469 MB/sec [Average]
[info]   (min, avg, max) = (331.724, 530.721, 663.496), stdev = 181.650
[info]   CI (99.9%): [≈ 0, 1230.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   826.785 ±(99.9%) 1088.061 B/op [Average]
[info]   (min, avg, max) = (517.150, 826.785, 1034.057), stdev = 282.566
[info]   CI (99.9%): [≈ 0, 1914.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.989 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.775), stdev = 0.776
[info]   CI (99.9%): [≈ 0, 3.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.604 ±(99.9%) 4.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.762), stdev = 1.208
[info]   CI (99.9%): [≈ 0, 5.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 30.61% complete, ETA 00:48:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964377.551 ops/s
[info] # Warmup Iteration   2: 1043438.889 ops/s
[info] # Warmup Iteration   3: 1058126.810 ops/s
[info] Iteration   1: 1057163.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1057568.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1058783.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1055760.267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1059053.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1057665.749 ±(99.9%) 5118.019 ops/s [Average]
[info]   (min, avg, max) = (1055760.267, 1057665.749, 1059053.196), stdev = 1329.133
[info]   CI (99.9%): [1052547.730, 1062783.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 30.91% complete, ETA 00:48:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20993.485 ops/s
[info] # Warmup Iteration   2: 29216.634 ops/s
[info] # Warmup Iteration   3: 29358.944 ops/s
[info] Iteration   1: 29922.096 ops/s
[info]                  ·gc.alloc.rate:                   1646.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              86600.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86963.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.190 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 29865.112 ops/s
[info]                  ·gc.alloc.rate:                   1643.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87688.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.388 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 29836.055 ops/s
[info]                  ·gc.alloc.rate:                   1641.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88335.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30038.347 ops/s
[info]                  ·gc.alloc.rate:                   1653.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88160.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.453 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 29256.545 ops/s
[info]                  ·gc.alloc.rate:                   1609.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90836.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.240 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29783.631 ±(99.9%) 1173.120 ops/s [Average]
[info]   (min, avg, max) = (29256.545, 29783.631, 30038.347), stdev = 304.656
[info]   CI (99.9%): [28610.511, 30956.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1638.855 ±(99.9%) 64.932 MB/sec [Average]
[info]   (min, avg, max) = (1609.725, 1638.855, 1653.095), stdev = 16.863
[info]   CI (99.9%): [1573.923, 1703.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86587.331 ±(99.9%) 27.330 B/op [Average]
[info]   (min, avg, max) = (86584.014, 86587.331, 86600.020), stdev = 7.097
[info]   CI (99.9%): [86560.002, 86614.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1672.904 ±(99.9%) 54.995 MB/sec [Average]
[info]   (min, avg, max) = (1653.376, 1672.904, 1688.779), stdev = 14.282
[info]   CI (99.9%): [1617.909, 1727.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88397.041 ±(99.9%) 5634.765 B/op [Average]
[info]   (min, avg, max) = (86963.800, 88397.041, 90836.215), stdev = 1463.331
[info]   CI (99.9%): [82762.276, 94031.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.733 ±(99.9%) 5.592 B/op [Average]
[info]   (min, avg, max) = (2.190, 3.733, 5.453), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 9.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 31.21% complete, ETA 00:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98735.180 ops/s
[info] # Warmup Iteration   2: 130930.302 ops/s
[info] # Warmup Iteration   3: 130918.622 ops/s
[info] Iteration   1: 131194.894 ops/s
[info]                  ·gc.alloc.rate:                   1804.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19942.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.249 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 130626.625 ops/s
[info]                  ·gc.alloc.rate:                   1796.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24184.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 130055.740 ops/s
[info]                  ·gc.alloc.rate:                   1789.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20362.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.260 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 131509.688 ops/s
[info]                  ·gc.alloc.rate:                   1808.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24259.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.246 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 132019.863 ops/s
[info]                  ·gc.alloc.rate:                   1816.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              21648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20193.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.993 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   131081.362 ±(99.9%) 2942.546 ops/s [Average]
[info]   (min, avg, max) = (130055.740, 131081.362, 132019.863), stdev = 764.170
[info]   CI (99.9%): [128138.816, 134023.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1803.087 ±(99.9%) 40.480 MB/sec [Average]
[info]   (min, avg, max) = (1789.006, 1803.087, 1816.036), stdev = 10.513
[info]   CI (99.9%): [1762.607, 1843.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21648.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21648.003, 21648.003, 21648.004), stdev = 0.001
[info]   CI (99.9%): [21648.003, 21648.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1814.741 ±(99.9%) 713.726 MB/sec [Average]
[info]   (min, avg, max) = (1662.442, 1814.741, 2027.153), stdev = 185.352
[info]   CI (99.9%): [1101.016, 2528.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21788.364 ±(99.9%) 8574.461 B/op [Average]
[info]   (min, avg, max) = (19942.395, 21788.364, 24259.232), stdev = 2226.760
[info]   CI (99.9%): [13213.903, 30362.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.150 ±(99.9%) 0.535 B/op [Average]
[info]   (min, avg, max) = (0.993, 1.150, 1.260), stdev = 0.139
[info]   CI (99.9%): [0.615, 1.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 31.52% complete, ETA 00:48:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120544.551 ops/s
[info] # Warmup Iteration   2: 191893.645 ops/s
[info] # Warmup Iteration   3: 197497.205 ops/s
[info] Iteration   1: 196908.004 ops/s
[info]                  ·gc.alloc.rate:                   1175.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10451.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.333 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 195973.717 ops/s
[info]                  ·gc.alloc.rate:                   1169.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7915.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 191495.624 ops/s
[info]                  ·gc.alloc.rate:                   1142.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10862.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 192813.961 ops/s
[info]                  ·gc.alloc.rate:               1150.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      996.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8131.215 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 196242.527 ops/s
[info]                  ·gc.alloc.rate:                   1171.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10710.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   194686.766 ±(99.9%) 9173.370 ops/s [Average]
[info]   (min, avg, max) = (191495.624, 194686.766, 196908.004), stdev = 2382.295
[info]   CI (99.9%): [185513.397, 203860.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1161.933 ±(99.9%) 54.824 MB/sec [Average]
[info]   (min, avg, max) = (1142.875, 1161.933, 1175.156), stdev = 14.238
[info]   CI (99.9%): [1107.108, 1216.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9392.002, 9392.002, 9392.002), stdev = 0.001
[info]   CI (99.9%): [9392.002, 9392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1189.448 ±(99.9%) 698.675 MB/sec [Average]
[info]   (min, avg, max) = (985.811, 1189.448, 1335.645), stdev = 181.444
[info]   CI (99.9%): [490.773, 1888.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9614.274 ±(99.9%) 5629.212 B/op [Average]
[info]   (min, avg, max) = (7915.063, 9614.274, 10862.158), stdev = 1461.888
[info]   CI (99.9%): [3985.062, 15243.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.504 ±(99.9%) 1.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 1.002), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 31.82% complete, ETA 00:47:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248976.343 ops/s
[info] # Warmup Iteration   2: 259830.602 ops/s
[info] # Warmup Iteration   3: 261855.056 ops/s
[info] Iteration   1: 263745.885 ops/s
[info]                  ·gc.alloc.rate:               857.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3967.046 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 263677.773 ops/s
[info]                  ·gc.alloc.rate:                   857.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5952.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 263430.088 ops/s
[info]                  ·gc.alloc.rate:                   857.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3979.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 259665.286 ops/s
[info]                  ·gc.alloc.rate:                   844.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6070.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 258864.328 ops/s
[info]                  ·gc.alloc.rate:                   842.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4066.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   261876.672 ±(99.9%) 9256.669 ops/s [Average]
[info]   (min, avg, max) = (258864.328, 261876.672, 263745.885), stdev = 2403.928
[info]   CI (99.9%): [252620.003, 271133.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   852.005 ±(99.9%) 29.762 MB/sec [Average]
[info]   (min, avg, max) = (842.404, 852.005, 857.995), stdev = 7.729
[info]   CI (99.9%): [822.242, 881.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.754 ±(99.9%) 701.789 MB/sec [Average]
[info]   (min, avg, max) = (664.786, 799.754, 1001.578), stdev = 182.252
[info]   CI (99.9%): [97.965, 1501.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4807.095 ±(99.9%) 4238.372 B/op [Average]
[info]   (min, avg, max) = (3967.046, 4807.095, 6070.246), stdev = 1100.692
[info]   CI (99.9%): [568.723, 9045.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.301 ±(99.9%) 0.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.301, 0.505), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 1.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 32.12% complete, ETA 00:47:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29686.298 ops/s
[info] # Warmup Iteration   2: 65803.498 ops/s
[info] # Warmup Iteration   3: 66778.883 ops/s
[info] Iteration   1: 66899.248 ops/s
[info]                  ·gc.alloc.rate:                   2780.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62763.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.959 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 66208.861 ops/s
[info]                  ·gc.alloc.rate:                   2751.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64015.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.969 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 65677.887 ops/s
[info]                  ·gc.alloc.rate:                   2730.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64871.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.496 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 67264.894 ops/s
[info]                  ·gc.alloc.rate:                   2795.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63541.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.461 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 65615.961 ops/s
[info]                  ·gc.alloc.rate:                   2727.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73367.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.997 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66333.370 ±(99.9%) 2821.626 ops/s [Average]
[info]   (min, avg, max) = (65615.961, 66333.370, 67264.894), stdev = 732.767
[info]   CI (99.9%): [63511.745, 69154.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2757.137 ±(99.9%) 116.359 MB/sec [Average]
[info]   (min, avg, max) = (2727.404, 2757.137, 2795.738), stdev = 30.218
[info]   CI (99.9%): [2640.779, 2873.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65408.006, 65408.007, 65408.007), stdev = 0.001
[info]   CI (99.9%): [65408.006, 65408.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2768.877 ±(99.9%) 629.084 MB/sec [Average]
[info]   (min, avg, max) = (2667.929, 2768.877, 3059.285), stdev = 163.371
[info]   CI (99.9%): [2139.793, 3397.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65711.775 ±(99.9%) 16739.431 B/op [Average]
[info]   (min, avg, max) = (62763.176, 65711.775, 73367.095), stdev = 4347.177
[info]   CI (99.9%): [48972.344, 82451.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.976 ±(99.9%) 2.343 B/op [Average]
[info]   (min, avg, max) = (1.461, 1.976, 2.969), stdev = 0.609
[info]   CI (99.9%): [≈ 0, 4.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 14.000), stdev = 2.950
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 32.42% complete, ETA 00:47:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135565.897 ops/s
[info] # Warmup Iteration   2: 165421.897 ops/s
[info] # Warmup Iteration   3: 166092.646 ops/s
[info] Iteration   1: 164457.337 ops/s
[info]                  ·gc.alloc.rate:                   1075.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12640.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.598 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 165928.374 ops/s
[info]                  ·gc.alloc.rate:                   1085.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9429.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 165567.523 ops/s
[info]                  ·gc.alloc.rate:                   1083.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9482.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 163570.314 ops/s
[info]                  ·gc.alloc.rate:                   1070.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9633.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 163254.689 ops/s
[info]                  ·gc.alloc.rate:                   1068.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9683.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   164555.647 ±(99.9%) 4548.534 ops/s [Average]
[info]   (min, avg, max) = (163254.689, 164555.647, 165928.374), stdev = 1181.240
[info]   CI (99.9%): [160007.114, 169104.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1076.606 ±(99.9%) 29.409 MB/sec [Average]
[info]   (min, avg, max) = (1068.336, 1076.606, 1085.480), stdev = 7.637
[info]   CI (99.9%): [1047.196, 1106.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1063.737 ±(99.9%) 553.776 MB/sec [Average]
[info]   (min, avg, max) = (994.142, 1063.737, 1320.899), stdev = 143.814
[info]   CI (99.9%): [509.961, 1617.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10173.936 ±(99.9%) 5325.404 B/op [Average]
[info]   (min, avg, max) = (9429.640, 10173.936, 12640.819), stdev = 1382.990
[info]   CI (99.9%): [4848.533, 15499.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.677 ±(99.9%) 0.420 B/op [Average]
[info]   (min, avg, max) = (0.592, 0.677, 0.801), stdev = 0.109
[info]   CI (99.9%): [0.257, 1.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 32.73% complete, ETA 00:47:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 383635.620 ops/s
[info] # Warmup Iteration   2: 555302.657 ops/s
[info] # Warmup Iteration   3: 559354.200 ops/s
[info] Iteration   1: 545177.307 ops/s
[info]                  ·gc.alloc.rate:                   551.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 567099.133 ops/s
[info]                  ·gc.alloc.rate:                   573.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1810.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 565238.719 ops/s
[info]                  ·gc.alloc.rate:                   571.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1818.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 565772.866 ops/s
[info]                  ·gc.alloc.rate:                   572.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1819.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 565357.607 ops/s
[info]                  ·gc.alloc.rate:               571.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 911.389 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   561729.127 ±(99.9%) 35742.328 ops/s [Average]
[info]   (min, avg, max) = (545177.307, 561729.127, 567099.133), stdev = 9282.169
[info]   CI (99.9%): [525986.798, 597471.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   568.281 ±(99.9%) 36.321 MB/sec [Average]
[info]   (min, avg, max) = (551.461, 568.281, 573.750), stdev = 9.432
[info]   CI (99.9%): [531.960, 604.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   522.720 ±(99.9%) 688.916 MB/sec [Average]
[info]   (min, avg, max) = (326.062, 522.720, 654.188), stdev = 178.909
[info]   CI (99.9%): [≈ 0, 1211.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1460.345 ±(99.9%) 1877.571 B/op [Average]
[info]   (min, avg, max) = (911.389, 1460.345, 1819.682), stdev = 487.599
[info]   CI (99.9%): [≈ 0, 3337.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.467 ±(99.9%) 3.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 2.146), stdev = 0.939
[info]   CI (99.9%): [≈ 0, 4.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.343 ±(99.9%) 10.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.343, 6.195), stdev = 2.713
[info]   CI (99.9%): [≈ 0, 11.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 33.03% complete, ETA 00:47:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505001.372 ops/s
[info] # Warmup Iteration   2: 555220.024 ops/s
[info] # Warmup Iteration   3: 556495.266 ops/s
[info] Iteration   1: 547907.461 ops/s
[info]                  ·gc.alloc.rate:                   420.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 561577.870 ops/s
[info]                  ·gc.alloc.rate:                   431.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.919 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 557091.525 ops/s
[info]                  ·gc.alloc.rate:                   427.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1872.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 560179.989 ops/s
[info]                  ·gc.alloc.rate:                   429.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 561791.578 ops/s
[info]                  ·gc.alloc.rate:               431.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 927.486 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   557709.684 ±(99.9%) 22303.243 ops/s [Average]
[info]   (min, avg, max) = (547907.461, 557709.684, 561791.578), stdev = 5792.081
[info]   CI (99.9%): [535406.442, 580012.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   428.100 ±(99.9%) 17.135 MB/sec [Average]
[info]   (min, avg, max) = (420.527, 428.100, 431.207), stdev = 4.450
[info]   CI (99.9%): [410.964, 445.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   382.550 ±(99.9%) 616.855 MB/sec [Average]
[info]   (min, avg, max) = (255.781, 382.550, 663.083), stdev = 160.195
[info]   CI (99.9%): [≈ 0, 999.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1078.933 ±(99.9%) 1738.810 B/op [Average]
[info]   (min, avg, max) = (734.754, 1078.933, 1872.558), stdev = 451.563
[info]   CI (99.9%): [≈ 0, 2817.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.378 ±(99.9%) 2.967 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.755), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.060 ±(99.9%) 8.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.060, 4.919), stdev = 2.159
[info]   CI (99.9%): [≈ 0, 9.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.33% complete, ETA 00:46:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 539994.579 ops/s
[info] # Warmup Iteration   2: 585605.024 ops/s
[info] # Warmup Iteration   3: 588435.239 ops/s
[info] Iteration   1: 588762.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 585993.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 587009.040 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 586228.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 586998.226 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   586998.196 ±(99.9%) 4180.800 ops/s [Average]
[info]   (min, avg, max) = (585993.177, 586998.196, 588762.348), stdev = 1085.740
[info]   CI (99.9%): [582817.396, 591178.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 33.64% complete, ETA 00:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186979.375 ops/s
[info] # Warmup Iteration   2: 323451.019 ops/s
[info] # Warmup Iteration   3: 327808.496 ops/s
[info] Iteration   1: 329079.251 ops/s
[info]                  ·gc.alloc.rate:                   906.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4673.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 328225.493 ops/s
[info]                  ·gc.alloc.rate:                   904.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4695.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 323232.556 ops/s
[info]                  ·gc.alloc.rate:                   890.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3188.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 324751.810 ops/s
[info]                  ·gc.alloc.rate:                   894.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4785.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 323896.671 ops/s
[info]                  ·gc.alloc.rate:                   892.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4817.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   325837.156 ±(99.9%) 10177.423 ops/s [Average]
[info]   (min, avg, max) = (323232.556, 325837.156, 329079.251), stdev = 2643.044
[info]   CI (99.9%): [315659.733, 336014.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   897.729 ±(99.9%) 27.946 MB/sec [Average]
[info]   (min, avg, max) = (890.567, 897.729, 906.651), stdev = 7.258
[info]   CI (99.9%): [869.783, 925.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   918.086 ±(99.9%) 567.111 MB/sec [Average]
[info]   (min, avg, max) = (654.841, 918.086, 991.606), stdev = 147.277
[info]   CI (99.9%): [350.975, 1485.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4432.168 ±(99.9%) 2687.577 B/op [Average]
[info]   (min, avg, max) = (3188.295, 4432.168, 4817.836), stdev = 697.955
[info]   CI (99.9%): [1744.591, 7119.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.361 ±(99.9%) 0.696 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.361, 0.599), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 1.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 33.94% complete, ETA 00:46:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6608.247 ops/s
[info] # Warmup Iteration   2: 9105.167 ops/s
[info] # Warmup Iteration   3: 9240.458 ops/s
[info] Iteration   1: 9260.082 ops/s
[info]                  ·gc.alloc.rate:                   1212.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225349.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9098.022 ops/s
[info]                  ·gc.alloc.rate:                   1192.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172554.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8904.940 ops/s
[info]                  ·gc.alloc.rate:                   1166.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235920.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9115.456 ops/s
[info]                  ·gc.alloc.rate:                   1194.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173478.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.781 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8908.536 ops/s
[info]                  ·gc.alloc.rate:                   1167.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              206159.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237462.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.355 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9057.407 ±(99.9%) 582.406 ops/s [Average]
[info]   (min, avg, max) = (8904.940, 9057.407, 9260.082), stdev = 151.249
[info]   CI (99.9%): [8475.001, 9639.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1186.527 ±(99.9%) 76.279 MB/sec [Average]
[info]   (min, avg, max) = (1166.449, 1186.527, 1212.960), stdev = 19.809
[info]   CI (99.9%): [1110.248, 1262.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206147.216 ±(99.9%) 27.270 B/op [Average]
[info]   (min, avg, max) = (206144.047, 206147.216, 206159.885), stdev = 7.082
[info]   CI (99.9%): [206119.946, 206174.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.574 ±(99.9%) 704.280 MB/sec [Average]
[info]   (min, avg, max) = (997.848, 1201.574, 1344.241), stdev = 182.899
[info]   CI (99.9%): [497.294, 1905.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   208953.109 ±(99.9%) 127598.390 B/op [Average]
[info]   (min, avg, max) = (172554.127, 208953.109, 237462.279), stdev = 33136.897
[info]   CI (99.9%): [81354.719, 336551.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.690 ±(99.9%) 7.817 B/op [Average]
[info]   (min, avg, max) = (7.076, 8.690, 11.037), stdev = 2.030
[info]   CI (99.9%): [0.873, 16.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 34.24% complete, ETA 00:46:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5888.497 ops/s
[info] # Warmup Iteration   2: 9473.998 ops/s
[info] # Warmup Iteration   3: 9628.879 ops/s
[info] Iteration   1: 9536.900 ops/s
[info]                  ·gc.alloc.rate:                   1143.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216090.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.870 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9604.395 ops/s
[info]                  ·gc.alloc.rate:                   1150.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161701.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9595.834 ops/s
[info]                  ·gc.alloc.rate:                   1149.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216914.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.242 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9613.744 ops/s
[info]                  ·gc.alloc.rate:                   1152.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              188598.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163240.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.815 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9624.579 ops/s
[info]                  ·gc.alloc.rate:                   1153.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218603.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.808 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9595.090 ±(99.9%) 131.865 ops/s [Average]
[info]   (min, avg, max) = (9536.900, 9595.090, 9624.579), stdev = 34.245
[info]   CI (99.9%): [9463.226, 9726.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1149.936 ±(99.9%) 15.686 MB/sec [Average]
[info]   (min, avg, max) = (1143.064, 1149.936, 1153.593), stdev = 4.074
[info]   CI (99.9%): [1134.250, 1165.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   188599.720 ±(99.9%) 53.434 B/op [Average]
[info]   (min, avg, max) = (188592.045, 188599.720, 188624.048), stdev = 13.877
[info]   CI (99.9%): [188546.286, 188653.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.675 ±(99.9%) 699.417 MB/sec [Average]
[info]   (min, avg, max) = (986.835, 1190.675, 1336.939), stdev = 181.636
[info]   CI (99.9%): [491.258, 1890.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   195309.936 ±(99.9%) 115505.778 B/op [Average]
[info]   (min, avg, max) = (161701.399, 195309.936, 218603.099), stdev = 29996.484
[info]   CI (99.9%): [79804.158, 310815.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.193 ±(99.9%) 7.185 B/op [Average]
[info]   (min, avg, max) = (6.808, 8.193, 10.242), stdev = 1.866
[info]   CI (99.9%): [1.008, 15.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 34.55% complete, ETA 00:45:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139022.717 ops/s
[info] # Warmup Iteration   2: 143846.408 ops/s
[info] # Warmup Iteration   3: 147092.408 ops/s
[info] Iteration   1: 143640.402 ops/s
[info]                  ·gc.alloc.rate:                   934.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10926.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 144564.195 ops/s
[info]                  ·gc.alloc.rate:                   940.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10870.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 143005.392 ops/s
[info]                  ·gc.alloc.rate:                   930.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11011.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 146321.745 ops/s
[info]                  ·gc.alloc.rate:                   952.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10798.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.672 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 145259.474 ops/s
[info]                  ·gc.alloc.rate:                   945.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10905.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   144558.242 ±(99.9%) 5041.065 ops/s [Average]
[info]   (min, avg, max) = (143005.392, 144558.242, 146321.745), stdev = 1309.149
[info]   CI (99.9%): [139517.176, 149599.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   940.737 ±(99.9%) 32.627 MB/sec [Average]
[info]   (min, avg, max) = (930.784, 940.737, 952.022), stdev = 8.473
[info]   CI (99.9%): [908.110, 973.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.003, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1001.536 ±(99.9%) 15.077 MB/sec [Average]
[info]   (min, avg, max) = (997.163, 1001.536, 1006.892), stdev = 3.915
[info]   CI (99.9%): [986.459, 1016.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10902.318 ±(99.9%) 300.935 B/op [Average]
[info]   (min, avg, max) = (10798.021, 10902.318, 11011.789), stdev = 78.152
[info]   CI (99.9%): [10601.384, 11203.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.634 ±(99.9%) 0.727 B/op [Average]
[info]   (min, avg, max) = (0.451, 0.634, 0.906), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 1.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 34.85% complete, ETA 00:45:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4327.948 ops/s
[info] # Warmup Iteration   2: 7333.818 ops/s
[info] # Warmup Iteration   3: 7622.222 ops/s
[info] Iteration   1: 7638.600 ops/s
[info]                  ·gc.alloc.rate:                   1422.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271029.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7608.402 ops/s
[info]                  ·gc.alloc.rate:                   1416.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     342292.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7570.906 ops/s
[info]                  ·gc.alloc.rate:                   1409.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276924.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7617.336 ops/s
[info]                  ·gc.alloc.rate:                   1418.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276629.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.301 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7513.731 ops/s
[info]                  ·gc.alloc.rate:                   1399.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281536.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.799 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7589.795 ±(99.9%) 188.930 ops/s [Average]
[info]   (min, avg, max) = (7513.731, 7589.795, 7638.600), stdev = 49.064
[info]   CI (99.9%): [7400.865, 7778.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1413.534 ±(99.9%) 35.328 MB/sec [Average]
[info]   (min, avg, max) = (1399.292, 1413.534, 1422.482), stdev = 9.175
[info]   CI (99.9%): [1378.206, 1448.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293080.059 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (293080.057, 293080.059, 293080.061), stdev = 0.002
[info]   CI (99.9%): [293080.050, 293080.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1397.218 ±(99.9%) 556.246 MB/sec [Average]
[info]   (min, avg, max) = (1315.459, 1397.218, 1654.895), stdev = 144.455
[info]   CI (99.9%): [840.972, 1953.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   289682.459 ±(99.9%) 114151.180 B/op [Average]
[info]   (min, avg, max) = (271029.656, 289682.459, 342292.349), stdev = 29644.699
[info]   CI (99.9%): [175531.278, 403833.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.682 ±(99.9%) 38.317 B/op [Average]
[info]   (min, avg, max) = (4.301, 14.682, 25.832), stdev = 9.951
[info]   CI (99.9%): [≈ 0, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 35.15% complete, ETA 00:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14953.363 ops/s
[info] # Warmup Iteration   2: 19466.350 ops/s
[info] # Warmup Iteration   3: 19794.422 ops/s
[info] Iteration   1: 19626.578 ops/s
[info]                  ·gc.alloc.rate:                   1042.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              83616.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79431.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19454.132 ops/s
[info]                  ·gc.alloc.rate:                   1033.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              83640.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80344.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19506.288 ops/s
[info]                  ·gc.alloc.rate:                   1036.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              83629.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80426.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19799.026 ops/s
[info]                  ·gc.alloc.rate:                   1051.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79500.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19709.260 ops/s
[info]                  ·gc.alloc.rate:                   1046.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80160.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   19619.057 ±(99.9%) 546.259 ops/s [Average]
[info]   (min, avg, max) = (19454.132, 19619.057, 19799.026), stdev = 141.862
[info]   CI (99.9%): [19072.797, 20165.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1042.372 ±(99.9%) 27.604 MB/sec [Average]
[info]   (min, avg, max) = (1033.917, 1042.372, 1051.553), stdev = 7.169
[info]   CI (99.9%): [1014.769, 1069.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83607.583 ±(99.9%) 115.488 B/op [Average]
[info]   (min, avg, max) = (83576.022, 83607.583, 83640.022), stdev = 29.992
[info]   CI (99.9%): [83492.094, 83723.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   997.033 ±(99.9%) 20.648 MB/sec [Average]
[info]   (min, avg, max) = (990.592, 997.033, 1003.971), stdev = 5.362
[info]   CI (99.9%): [976.385, 1017.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79972.668 ±(99.9%) 1821.532 B/op [Average]
[info]   (min, avg, max) = (79431.101, 79972.668, 80426.118), stdev = 473.046
[info]   CI (99.9%): [78151.136, 81794.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.679 ±(99.9%) 9.754 B/op [Average]
[info]   (min, avg, max) = (3.325, 5.679, 10.016), stdev = 2.533
[info]   CI (99.9%): [≈ 0, 15.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 35.45% complete, ETA 00:45:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14817.814 ops/s
[info] # Warmup Iteration   2: 21996.790 ops/s
[info] # Warmup Iteration   3: 22318.901 ops/s
[info] Iteration   1: 22637.983 ops/s
[info]                  ·gc.alloc.rate:                   959.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68213.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.341 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22518.920 ops/s
[info]                  ·gc.alloc.rate:                   954.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68786.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22289.333 ops/s
[info]                  ·gc.alloc.rate:               944.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46467.508 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 22647.966 ops/s
[info]                  ·gc.alloc.rate:                   959.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68854.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.340 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22550.431 ops/s
[info]                  ·gc.alloc.rate:                   955.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69522.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.811 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   22528.927 ±(99.9%) 558.115 ops/s [Average]
[info]   (min, avg, max) = (22289.333, 22528.927, 22647.966), stdev = 144.941
[info]   CI (99.9%): [21970.812, 23087.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   954.797 ±(99.9%) 23.632 MB/sec [Average]
[info]   (min, avg, max) = (944.681, 954.797, 959.907), stdev = 6.137
[info]   CI (99.9%): [931.165, 978.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (66696.019, 66696.021, 66696.028), stdev = 0.004
[info]   CI (99.9%): [66696.006, 66696.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   922.152 ±(99.9%) 568.699 MB/sec [Average]
[info]   (min, avg, max) = (658.165, 922.152, 996.230), stdev = 147.689
[info]   CI (99.9%): [353.453, 1490.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64368.712 ±(99.9%) 38575.103 B/op [Average]
[info]   (min, avg, max) = (46467.508, 64368.712, 69522.318), stdev = 10017.832
[info]   CI (99.9%): [25793.609, 102943.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.062 ±(99.9%) 9.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.062, 5.819), stdev = 2.388
[info]   CI (99.9%): [≈ 0, 13.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 35.76% complete, ETA 00:45:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 602630.253 ops/s
[info] # Warmup Iteration   2: 688934.064 ops/s
[info] # Warmup Iteration   3: 700951.554 ops/s
[info] Iteration   1: 699866.946 ops/s
[info]                  ·gc.alloc.rate:                   1262.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2986.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 702808.464 ops/s
[info]                  ·gc.alloc.rate:                   1268.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2239.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 699328.172 ops/s
[info]                  ·gc.alloc.rate:                   1262.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3010.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 701619.291 ops/s
[info]                  ·gc.alloc.rate:                   1266.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3012.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 698198.963 ops/s
[info]                  ·gc.alloc.rate:                   1259.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3037.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   700364.367 ±(99.9%) 7089.407 ops/s [Average]
[info]   (min, avg, max) = (698198.963, 700364.367, 702808.464), stdev = 1841.096
[info]   CI (99.9%): [693274.960, 707453.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1263.979 ±(99.9%) 12.834 MB/sec [Average]
[info]   (min, avg, max) = (1259.967, 1263.979, 1268.433), stdev = 3.333
[info]   CI (99.9%): [1251.145, 1276.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1271.329 ±(99.9%) 584.674 MB/sec [Average]
[info]   (min, avg, max) = (1000.013, 1271.329, 1347.384), stdev = 151.838
[info]   CI (99.9%): [686.655, 1856.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2857.071 ±(99.9%) 1332.167 B/op [Average]
[info]   (min, avg, max) = (2239.014, 2857.071, 3037.040), stdev = 345.960
[info]   CI (99.9%): [1524.904, 4189.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.168 ±(99.9%) 0.272 B/op [Average]
[info]   (min, avg, max) = (0.094, 0.168, 0.280), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 36.06% complete, ETA 00:44:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 508609.190 ops/s
[info] # Warmup Iteration   2: 547610.691 ops/s
[info] # Warmup Iteration   3: 549086.598 ops/s
[info] Iteration   1: 548880.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 549247.899 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 549172.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 548363.805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 550153.198 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   549163.705 ±(99.9%) 2514.785 ops/s [Average]
[info]   (min, avg, max) = (548363.805, 549163.705, 550153.198), stdev = 653.082
[info]   CI (99.9%): [546648.920, 551678.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 36.36% complete, ETA 00:44:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15619.262 ops/s
[info] # Warmup Iteration   2: 21224.277 ops/s
[info] # Warmup Iteration   3: 20923.341 ops/s
[info] Iteration   1: 21319.466 ops/s
[info]                  ·gc.alloc.rate:                   983.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72776.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21276.897 ops/s
[info]                  ·gc.alloc.rate:                   981.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73092.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 21520.650 ops/s
[info]                  ·gc.alloc.rate:                   992.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              72567.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72507.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21590.089 ops/s
[info]                  ·gc.alloc.rate:                   995.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72619.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 21680.203 ops/s
[info]                  ·gc.alloc.rate:                   999.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72556.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   21477.461 ±(99.9%) 669.289 ops/s [Average]
[info]   (min, avg, max) = (21276.897, 21477.461, 21680.203), stdev = 173.812
[info]   CI (99.9%): [20808.172, 22146.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   990.398 ±(99.9%) 30.494 MB/sec [Average]
[info]   (min, avg, max) = (981.282, 990.398, 999.605), stdev = 7.919
[info]   CI (99.9%): [959.904, 1020.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72567.929 ±(99.9%) 30.816 B/op [Average]
[info]   (min, avg, max) = (72560.020, 72567.929, 72576.020), stdev = 8.003
[info]   CI (99.9%): [72537.114, 72598.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   992.330 ±(99.9%) 21.721 MB/sec [Average]
[info]   (min, avg, max) = (985.880, 992.330, 999.557), stdev = 5.641
[info]   CI (99.9%): [970.609, 1014.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72710.722 ±(99.9%) 910.483 B/op [Average]
[info]   (min, avg, max) = (72507.915, 72710.722, 73092.872), stdev = 236.450
[info]   CI (99.9%): [71800.239, 73621.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.675 ±(99.9%) 12.332 B/op [Average]
[info]   (min, avg, max) = (1.517, 3.675, 9.238), stdev = 3.203
[info]   CI (99.9%): [≈ 0, 16.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 36.67% complete, ETA 00:44:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18923.914 ops/s
[info] # Warmup Iteration   2: 24693.492 ops/s
[info] # Warmup Iteration   3: 24717.103 ops/s
[info] Iteration   1: 24748.343 ops/s
[info]                  ·gc.alloc.rate:                   1386.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84465.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.324 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24637.093 ops/s
[info]                  ·gc.alloc.rate:                   1379.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              88143.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85182.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.978 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25426.544 ops/s
[info]                  ·gc.alloc.rate:                   1424.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82935.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25139.282 ops/s
[info]                  ·gc.alloc.rate:                   1408.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84177.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.606 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24731.946 ops/s
[info]                  ·gc.alloc.rate:                   1385.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85813.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.974 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24936.642 ±(99.9%) 1288.893 ops/s [Average]
[info]   (min, avg, max) = (24637.093, 24936.642, 25426.544), stdev = 334.721
[info]   CI (99.9%): [23647.749, 26225.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1396.836 ±(99.9%) 72.694 MB/sec [Average]
[info]   (min, avg, max) = (1379.974, 1396.836, 1424.612), stdev = 18.879
[info]   CI (99.9%): [1324.142, 1469.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   88143.890 ±(99.9%) 1.098 B/op [Average]
[info]   (min, avg, max) = (88143.380, 88143.890, 88144.019), stdev = 0.285
[info]   CI (99.9%): [88142.792, 88144.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1339.159 ±(99.9%) 31.395 MB/sec [Average]
[info]   (min, avg, max) = (1328.476, 1339.159, 1348.612), stdev = 8.153
[info]   CI (99.9%): [1307.764, 1370.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   84514.802 ±(99.9%) 4193.058 B/op [Average]
[info]   (min, avg, max) = (82935.303, 84514.802, 85813.005), stdev = 1088.924
[info]   CI (99.9%): [80321.743, 88707.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.692 ±(99.9%) 9.907 B/op [Average]
[info]   (min, avg, max) = (1.324, 3.692, 7.978), stdev = 2.573
[info]   CI (99.9%): [≈ 0, 13.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 36.97% complete, ETA 00:44:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16502.687 ops/s
[info] # Warmup Iteration   2: 25970.663 ops/s
[info] # Warmup Iteration   3: 26265.115 ops/s
[info] Iteration   1: 26310.477 ops/s
[info]                  ·gc.alloc.rate:               1219.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          72912.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      982.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58772.215 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 25891.290 ops/s
[info]                  ·gc.alloc.rate:                   1199.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              72899.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80052.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.531 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 26274.077 ops/s
[info]                  ·gc.alloc.rate:                   1216.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79361.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25998.028 ops/s
[info]                  ·gc.alloc.rate:               1203.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      999.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60487.790 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 25804.257 ops/s
[info]                  ·gc.alloc.rate:                   1195.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81642.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   26055.626 ±(99.9%) 874.232 ops/s [Average]
[info]   (min, avg, max) = (25804.257, 26055.626, 26310.477), stdev = 227.035
[info]   CI (99.9%): [25181.394, 26929.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1206.936 ±(99.9%) 41.078 MB/sec [Average]
[info]   (min, avg, max) = (1195.002, 1206.936, 1219.296), stdev = 10.668
[info]   CI (99.9%): [1165.858, 1248.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72890.213 ±(99.9%) 56.610 B/op [Average]
[info]   (min, avg, max) = (72880.016, 72890.213, 72912.016), stdev = 14.701
[info]   CI (99.9%): [72833.604, 72946.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.624 ±(99.9%) 709.595 MB/sec [Average]
[info]   (min, avg, max) = (982.838, 1192.624, 1338.681), stdev = 184.279
[info]   CI (99.9%): [483.029, 1902.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72063.261 ±(99.9%) 43882.761 B/op [Average]
[info]   (min, avg, max) = (58772.215, 72063.261, 81642.585), stdev = 11396.214
[info]   CI (99.9%): [28180.500, 115946.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.012 ±(99.9%) 8.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.012, 4.988), stdev = 2.091
[info]   CI (99.9%): [≈ 0, 10.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 37.27% complete, ETA 00:44:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239820.105 ops/s
[info] # Warmup Iteration   2: 249602.873 ops/s
[info] # Warmup Iteration   3: 250219.062 ops/s
[info] Iteration   1: 251224.506 ops/s
[info]                  ·gc.alloc.rate:                   653.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4166.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 245152.361 ops/s
[info]                  ·gc.alloc.rate:                   638.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4267.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 250894.117 ops/s
[info]                  ·gc.alloc.rate:                   653.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4172.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 244567.645 ops/s
[info]                  ·gc.alloc.rate:               636.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4284.477 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 248561.731 ops/s
[info]                  ·gc.alloc.rate:                   647.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4222.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   248080.072 ±(99.9%) 12015.450 ops/s [Average]
[info]   (min, avg, max) = (244567.645, 248080.072, 251224.506), stdev = 3120.374
[info]   CI (99.9%): [236064.622, 260095.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   645.830 ±(99.9%) 31.240 MB/sec [Average]
[info]   (min, avg, max) = (636.722, 645.830, 653.970), stdev = 8.113
[info]   CI (99.9%): [614.591, 677.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.718 ±(99.9%) 3.169 MB/sec [Average]
[info]   (min, avg, max) = (664.950, 665.718, 667.015), stdev = 0.823
[info]   CI (99.9%): [662.549, 668.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4222.672 ±(99.9%) 206.672 B/op [Average]
[info]   (min, avg, max) = (4166.795, 4222.672, 4284.477), stdev = 53.672
[info]   CI (99.9%): [4016.000, 4429.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.341 ±(99.9%) 1.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.341, 0.782), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 37.58% complete, ETA 00:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9231.881 ops/s
[info] # Warmup Iteration   2: 15971.263 ops/s
[info] # Warmup Iteration   3: 15879.968 ops/s
[info] Iteration   1: 16043.500 ops/s
[info]                  ·gc.alloc.rate:                   1641.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161879.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16017.485 ops/s
[info]                  ·gc.alloc.rate:                   1638.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              160985.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163265.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.363 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16111.747 ops/s
[info]                  ·gc.alloc.rate:                   1648.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163419.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15993.848 ops/s
[info]                  ·gc.alloc.rate:                   1636.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165411.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.048 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15882.051 ops/s
[info]                  ·gc.alloc.rate:                   1624.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133794.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.188 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   16009.726 ±(99.9%) 323.100 ops/s [Average]
[info]   (min, avg, max) = (15882.051, 16009.726, 16111.747), stdev = 83.908
[info]   CI (99.9%): [15686.626, 16332.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1637.670 ±(99.9%) 33.108 MB/sec [Average]
[info]   (min, avg, max) = (1624.587, 1637.670, 1648.147), stdev = 8.598
[info]   CI (99.9%): [1604.562, 1670.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160984.262 ±(99.9%) 1.998 B/op [Average]
[info]   (min, avg, max) = (160984.027, 160984.262, 160985.190), stdev = 0.519
[info]   CI (99.9%): [160982.265, 160986.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.245 ±(99.9%) 546.540 MB/sec [Average]
[info]   (min, avg, max) = (1350.204, 1603.245, 1681.089), stdev = 141.935
[info]   CI (99.9%): [1056.705, 2149.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   157554.005 ±(99.9%) 51372.774 B/op [Average]
[info]   (min, avg, max) = (133794.760, 157554.005, 165411.111), stdev = 13341.346
[info]   CI (99.9%): [106181.232, 208926.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.167), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.775 ±(99.9%) 21.845 B/op [Average]
[info]   (min, avg, max) = (2.048, 7.775, 16.363), stdev = 5.673
[info]   CI (99.9%): [≈ 0, 29.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 37.88% complete, ETA 00:43:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33093.891 ops/s
[info] # Warmup Iteration   2: 42622.404 ops/s
[info] # Warmup Iteration   3: 41668.206 ops/s
[info] Iteration   1: 42538.964 ops/s
[info]                  ·gc.alloc.rate:                   1352.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48993.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 43005.699 ops/s
[info]                  ·gc.alloc.rate:                   1367.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60869.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 42730.122 ops/s
[info]                  ·gc.alloc.rate:                   1358.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49267.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.300 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42300.740 ops/s
[info]                  ·gc.alloc.rate:                   1345.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49965.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.324 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42151.222 ops/s
[info]                  ·gc.alloc.rate:                   1340.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50339.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.886 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   42545.349 ±(99.9%) 1307.625 ops/s [Average]
[info]   (min, avg, max) = (42151.222, 42545.349, 43005.699), stdev = 339.586
[info]   CI (99.9%): [41237.725, 43852.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1352.915 ±(99.9%) 40.786 MB/sec [Average]
[info]   (min, avg, max) = (1340.649, 1352.915, 1367.360), stdev = 10.592
[info]   CI (99.9%): [1312.130, 1393.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (50040.010, 50040.010, 50040.011), stdev = 0.001
[info]   CI (99.9%): [50040.009, 50040.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.448 ±(99.9%) 560.395 MB/sec [Average]
[info]   (min, avg, max) = (1324.245, 1403.448, 1663.275), stdev = 145.533
[info]   CI (99.9%): [843.053, 1963.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51886.984 ±(99.9%) 19445.315 B/op [Average]
[info]   (min, avg, max) = (48993.351, 51886.984, 60869.331), stdev = 5049.886
[info]   CI (99.9%): [32441.669, 71332.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.619 ±(99.9%) 3.412 B/op [Average]
[info]   (min, avg, max) = (1.540, 2.619, 3.886), stdev = 0.886
[info]   CI (99.9%): [≈ 0, 6.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 38.18% complete, ETA 00:43:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83985.212 ops/s
[info] # Warmup Iteration   2: 126074.207 ops/s
[info] # Warmup Iteration   3: 126668.526 ops/s
[info] Iteration   1: 123838.404 ops/s
[info]                  ·gc.alloc.rate:                   968.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12470.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 123522.430 ops/s
[info]                  ·gc.alloc.rate:                   966.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12539.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.796 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 126687.871 ops/s
[info]                  ·gc.alloc.rate:                   991.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12277.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 124315.102 ops/s
[info]                  ·gc.alloc.rate:                   972.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12574.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 124042.989 ops/s
[info]                  ·gc.alloc.rate:                   970.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              12312.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12652.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   124481.359 ±(99.9%) 4878.875 ops/s [Average]
[info]   (min, avg, max) = (123522.430, 124481.359, 126687.871), stdev = 1267.028
[info]   CI (99.9%): [119602.484, 129360.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   973.988 ±(99.9%) 38.047 MB/sec [Average]
[info]   (min, avg, max) = (966.592, 973.988, 991.182), stdev = 9.881
[info]   CI (99.9%): [935.941, 1012.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12312.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12312.003, 12312.004, 12312.004), stdev = 0.001
[info]   CI (99.9%): [12312.003, 12312.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   988.999 ±(99.9%) 25.192 MB/sec [Average]
[info]   (min, avg, max) = (981.252, 988.999, 997.355), stdev = 6.542
[info]   CI (99.9%): [963.807, 1014.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12502.702 ±(99.9%) 547.172 B/op [Average]
[info]   (min, avg, max) = (12277.041, 12502.702, 12652.080), stdev = 142.099
[info]   CI (99.9%): [11955.530, 13049.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.843 ±(99.9%) 0.465 B/op [Average]
[info]   (min, avg, max) = (0.776, 0.843, 1.058), stdev = 0.121
[info]   CI (99.9%): [0.377, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 38.48% complete, ETA 00:43:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 922723.041 ops/s
[info] # Warmup Iteration   2: 1082626.766 ops/s
[info] # Warmup Iteration   3: 1068277.847 ops/s
[info] Iteration   1: 1082829.911 ops/s
[info]                  ·gc.alloc.rate:                   1161.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1446.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1069193.100 ops/s
[info]                  ·gc.alloc.rate:                   1146.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1959.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1076832.172 ops/s
[info]                  ·gc.alloc.rate:                   1154.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1464.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1082521.644 ops/s
[info]                  ·gc.alloc.rate:                   1161.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1948.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1072396.525 ops/s
[info]                  ·gc.alloc.rate:                   1150.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1480.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1076754.671 ±(99.9%) 23291.090 ops/s [Average]
[info]   (min, avg, max) = (1069193.100, 1076754.671, 1082829.911), stdev = 6048.622
[info]   CI (99.9%): [1053463.580, 1100045.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1154.898 ±(99.9%) 24.901 MB/sec [Average]
[info]   (min, avg, max) = (1146.770, 1154.898, 1161.319), stdev = 6.467
[info]   CI (99.9%): [1129.997, 1179.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1135.370 ±(99.9%) 704.177 MB/sec [Average]
[info]   (min, avg, max) = (995.168, 1135.370, 1340.297), stdev = 182.872
[info]   CI (99.9%): [431.193, 1839.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1659.665 ±(99.9%) 1034.859 B/op [Average]
[info]   (min, avg, max) = (1446.496, 1659.665, 1959.024), stdev = 268.750
[info]   CI (99.9%): [624.806, 2694.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.146), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.301 B/op [Average]
[info]   (min, avg, max) = (0.030, 0.092, 0.214), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 38.79% complete, ETA 00:43:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 637454.057 ops/s
[info] # Warmup Iteration   2: 693894.986 ops/s
[info] # Warmup Iteration   3: 691499.402 ops/s
[info] Iteration   1: 691943.024 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 691761.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 692107.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 690877.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 689286.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   691195.234 ±(99.9%) 4496.034 ops/s [Average]
[info]   (min, avg, max) = (689286.987, 691195.234, 692107.095), stdev = 1167.606
[info]   CI (99.9%): [686699.199, 695691.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 39.09% complete, ETA 00:42:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35623.876 ops/s
[info] # Warmup Iteration   2: 47721.227 ops/s
[info] # Warmup Iteration   3: 47397.558 ops/s
[info] Iteration   1: 47476.035 ops/s
[info]                  ·gc.alloc.rate:                   1259.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32780.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 48131.903 ops/s
[info]                  ·gc.alloc.rate:                   1276.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43267.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.723 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 47241.283 ops/s
[info]                  ·gc.alloc.rate:                   1252.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44327.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 48674.216 ops/s
[info]                  ·gc.alloc.rate:                   1290.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43238.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 47840.230 ops/s
[info]                  ·gc.alloc.rate:                   1268.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44178.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   47872.733 ±(99.9%) 2166.906 ops/s [Average]
[info]   (min, avg, max) = (47241.283, 47872.733, 48674.216), stdev = 562.739
[info]   CI (99.9%): [45705.827, 50039.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1269.520 ±(99.9%) 57.399 MB/sec [Average]
[info]   (min, avg, max) = (1252.534, 1269.520, 1290.563), stdev = 14.906
[info]   CI (99.9%): [1212.121, 1326.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41728.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41728.009, 41728.009, 41728.010), stdev = 0.001
[info]   CI (99.9%): [41728.008, 41728.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1264.794 ±(99.9%) 594.053 MB/sec [Average]
[info]   (min, avg, max) = (989.136, 1264.794, 1343.366), stdev = 154.274
[info]   CI (99.9%): [670.741, 1858.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41558.507 ±(99.9%) 18994.449 B/op [Average]
[info]   (min, avg, max) = (32780.421, 41558.507, 44327.751), stdev = 4932.798
[info]   CI (99.9%): [22564.058, 60552.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.321 ±(99.9%) 2.898 B/op [Average]
[info]   (min, avg, max) = (1.380, 2.321, 3.365), stdev = 0.753
[info]   CI (99.9%): [≈ 0, 5.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 39.39% complete, ETA 00:42:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10907.438 ops/s
[info] # Warmup Iteration   2: 14679.161 ops/s
[info] # Warmup Iteration   3: 14774.015 ops/s
[info] Iteration   1: 14760.136 ops/s
[info]                  ·gc.alloc.rate:                   1340.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              142896.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141486.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.659 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14406.369 ops/s
[info]                  ·gc.alloc.rate:                   1308.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              142914.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145534.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.096 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14479.320 ops/s
[info]                  ·gc.alloc.rate:                   1315.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145462.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14616.133 ops/s
[info]                  ·gc.alloc.rate:                   1327.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144673.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.724 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14575.532 ops/s
[info]                  ·gc.alloc.rate:                   1324.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              142925.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145511.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14567.498 ±(99.9%) 521.180 ops/s [Average]
[info]   (min, avg, max) = (14406.369, 14567.498, 14760.136), stdev = 135.349
[info]   CI (99.9%): [14046.318, 15088.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1323.126 ±(99.9%) 46.875 MB/sec [Average]
[info]   (min, avg, max) = (1308.655, 1323.126, 1340.373), stdev = 12.173
[info]   CI (99.9%): [1276.251, 1370.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142918.388 ±(99.9%) 53.059 B/op [Average]
[info]   (min, avg, max) = (142896.031, 142918.388, 142928.032), stdev = 13.779
[info]   CI (99.9%): [142865.329, 142971.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.978 ±(99.9%) 32.247 MB/sec [Average]
[info]   (min, avg, max) = (1327.151, 1337.978, 1348.095), stdev = 8.374
[info]   CI (99.9%): [1305.731, 1370.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   144533.670 ±(99.9%) 6704.571 B/op [Average]
[info]   (min, avg, max) = (141486.378, 144533.670, 145534.490), stdev = 1741.156
[info]   CI (99.9%): [137829.100, 151238.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.104 ±(99.9%) 4.968 B/op [Average]
[info]   (min, avg, max) = (6.659, 8.104, 9.096), stdev = 1.290
[info]   CI (99.9%): [3.136, 13.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 39.70% complete, ETA 00:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9608.207 ops/s
[info] # Warmup Iteration   2: 15541.432 ops/s
[info] # Warmup Iteration   3: 15849.307 ops/s
[info] Iteration   1: 15873.213 ops/s
[info]                  ·gc.alloc.rate:                   1293.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              128176.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130007.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.255 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15800.440 ops/s
[info]                  ·gc.alloc.rate:                   1287.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              128198.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131312.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.368 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15773.004 ops/s
[info]                  ·gc.alloc.rate:                   1285.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132401.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15918.698 ops/s
[info]                  ·gc.alloc.rate:                   1296.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131977.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.174 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15832.951 ops/s
[info]                  ·gc.alloc.rate:                   1289.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              128189.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133347.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.069 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15839.661 ±(99.9%) 222.864 ops/s [Average]
[info]   (min, avg, max) = (15773.004, 15839.661, 15918.698), stdev = 57.877
[info]   CI (99.9%): [15616.797, 16062.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1290.465 ±(99.9%) 17.829 MB/sec [Average]
[info]   (min, avg, max) = (1285.228, 1290.465, 1296.866), stdev = 4.630
[info]   CI (99.9%): [1272.635, 1308.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   128196.056 ±(99.9%) 52.370 B/op [Average]
[info]   (min, avg, max) = (128176.029, 128196.056, 128208.037), stdev = 13.600
[info]   CI (99.9%): [128143.687, 128248.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1326.826 ±(99.9%) 46.603 MB/sec [Average]
[info]   (min, avg, max) = (1311.605, 1326.826, 1341.653), stdev = 12.103
[info]   CI (99.9%): [1280.223, 1373.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   131809.285 ±(99.9%) 4809.939 B/op [Average]
[info]   (min, avg, max) = (130007.045, 131809.285, 133347.987), stdev = 1249.126
[info]   CI (99.9%): [126999.346, 136619.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.204 ±(99.9%) 12.602 B/op [Average]
[info]   (min, avg, max) = (2.069, 6.204, 10.368), stdev = 3.273
[info]   CI (99.9%): [≈ 0, 18.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 40.00% complete, ETA 00:42:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253417.080 ops/s
[info] # Warmup Iteration   2: 257445.528 ops/s
[info] # Warmup Iteration   3: 265806.441 ops/s
[info] Iteration   1: 266212.957 ops/s
[info]                  ·gc.alloc.rate:                   692.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3934.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 266317.490 ops/s
[info]                  ·gc.alloc.rate:                   693.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3928.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 265733.280 ops/s
[info]                  ·gc.alloc.rate:                   691.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3939.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 259089.005 ops/s
[info]                  ·gc.alloc.rate:                   674.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4044.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 265913.572 ops/s
[info]                  ·gc.alloc.rate:               692.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3946.580 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   264653.261 ±(99.9%) 12010.996 ops/s [Average]
[info]   (min, avg, max) = (259089.005, 264653.261, 266317.490), stdev = 3119.218
[info]   CI (99.9%): [252642.264, 276664.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   688.845 ±(99.9%) 31.352 MB/sec [Average]
[info]   (min, avg, max) = (674.322, 688.845, 693.253), stdev = 8.142
[info]   CI (99.9%): [657.493, 720.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.678 ±(99.9%) 2.942 MB/sec [Average]
[info]   (min, avg, max) = (664.961, 665.678, 666.921), stdev = 0.764
[info]   CI (99.9%): [662.736, 668.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3958.701 ±(99.9%) 186.108 B/op [Average]
[info]   (min, avg, max) = (3928.843, 3958.701, 4044.361), stdev = 48.332
[info]   CI (99.9%): [3772.593, 4144.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.321 ±(99.9%) 0.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.321, 0.492), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 1.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 40.30% complete, ETA 00:41:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6617.962 ops/s
[info] # Warmup Iteration   2: 11133.363 ops/s
[info] # Warmup Iteration   3: 11306.682 ops/s
[info] Iteration   1: 11263.082 ops/s
[info]                  ·gc.alloc.rate:                   1547.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230172.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.909 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11302.194 ops/s
[info]                  ·gc.alloc.rate:                   1553.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231068.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.595 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11110.910 ops/s
[info]                  ·gc.alloc.rate:                   1527.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              216282.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189213.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11268.936 ops/s
[info]                  ·gc.alloc.rate:                   1548.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234376.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.628 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11202.826 ops/s
[info]                  ·gc.alloc.rate:                   1539.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189391.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11229.590 ±(99.9%) 290.350 ops/s [Average]
[info]   (min, avg, max) = (11110.910, 11229.590, 11302.194), stdev = 75.403
[info]   CI (99.9%): [10939.240, 11519.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1543.352 ±(99.9%) 39.486 MB/sec [Average]
[info]   (min, avg, max) = (1527.162, 1543.352, 1553.142), stdev = 10.254
[info]   CI (99.9%): [1503.866, 1582.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216280.522 ±(99.9%) 4.156 B/op [Average]
[info]   (min, avg, max) = (216280.038, 216280.522, 216282.453), stdev = 1.079
[info]   CI (99.9%): [216276.367, 216284.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1533.882 ±(99.9%) 675.363 MB/sec [Average]
[info]   (min, avg, max) = (1336.029, 1533.882, 1678.380), stdev = 175.390
[info]   CI (99.9%): [858.518, 2209.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   214844.533 ±(99.9%) 89986.760 B/op [Average]
[info]   (min, avg, max) = (189213.530, 214844.533, 234376.085), stdev = 23369.276
[info]   CI (99.9%): [124857.773, 304831.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.330 ±(99.9%) 18.409 B/op [Average]
[info]   (min, avg, max) = (2.909, 9.330, 14.621), stdev = 4.781
[info]   CI (99.9%): [≈ 0, 27.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 40.61% complete, ETA 00:41:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31542.513 ops/s
[info] # Warmup Iteration   2: 40862.796 ops/s
[info] # Warmup Iteration   3: 41782.945 ops/s
[info] Iteration   1: 41497.213 ops/s
[info]                  ·gc.alloc.rate:                   1576.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62946.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.948 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 42478.084 ops/s
[info]                  ·gc.alloc.rate:                   1613.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61838.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.856 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 42480.530 ops/s
[info]                  ·gc.alloc.rate:                   1613.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62168.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42433.798 ops/s
[info]                  ·gc.alloc.rate:                   1611.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49995.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.772 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42372.825 ops/s
[info]                  ·gc.alloc.rate:                   1609.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62760.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.866 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   42252.490 ±(99.9%) 1634.473 ops/s [Average]
[info]   (min, avg, max) = (41497.213, 42252.490, 42480.530), stdev = 424.468
[info]   CI (99.9%): [40618.017, 43886.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1604.733 ±(99.9%) 62.137 MB/sec [Average]
[info]   (min, avg, max) = (1576.020, 1604.733, 1613.436), stdev = 16.137
[info]   CI (99.9%): [1542.597, 1666.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59768.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (59768.010, 59768.010, 59768.011), stdev = 0.001
[info]   CI (99.9%): [59768.009, 59768.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.042 ±(99.9%) 563.264 MB/sec [Average]
[info]   (min, avg, max) = (1348.128, 1609.042, 1689.873), stdev = 146.278
[info]   CI (99.9%): [1045.778, 2172.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   59941.778 ±(99.9%) 21479.507 B/op [Average]
[info]   (min, avg, max) = (49995.135, 59941.778, 62946.393), stdev = 5578.160
[info]   CI (99.9%): [38462.271, 81421.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.951 ±(99.9%) 5.379 B/op [Average]
[info]   (min, avg, max) = (0.772, 2.951, 3.948), stdev = 1.397
[info]   CI (99.9%): [≈ 0, 8.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 40.91% complete, ETA 00:41:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27384.083 ops/s
[info] # Warmup Iteration   2: 38801.429 ops/s
[info] # Warmup Iteration   3: 40281.128 ops/s
[info] Iteration   1: 40476.456 ops/s
[info]                  ·gc.alloc.rate:                   1205.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38230.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40496.621 ops/s
[info]                  ·gc.alloc.rate:                   1206.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51182.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.472 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40318.333 ops/s
[info]                  ·gc.alloc.rate:                   1200.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51718.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.438 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 40496.780 ops/s
[info]                  ·gc.alloc.rate:                   1206.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38833.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 40184.424 ops/s
[info]                  ·gc.alloc.rate:                   1196.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52424.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.446 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   40394.523 ±(99.9%) 536.125 ops/s [Average]
[info]   (min, avg, max) = (40184.424, 40394.523, 40496.780), stdev = 139.230
[info]   CI (99.9%): [39858.398, 40930.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1203.105 ±(99.9%) 15.877 MB/sec [Average]
[info]   (min, avg, max) = (1196.868, 1203.105, 1206.134), stdev = 4.123
[info]   CI (99.9%): [1187.228, 1218.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46872.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (46872.011, 46872.011, 46872.012), stdev = 0.001
[info]   CI (99.9%): [46872.009, 46872.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.659 ±(99.9%) 708.810 MB/sec [Average]
[info]   (min, avg, max) = (983.298, 1192.659, 1338.660), stdev = 184.076
[info]   CI (99.9%): [483.849, 1901.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46478.032 ±(99.9%) 27994.785 B/op [Average]
[info]   (min, avg, max) = (38230.817, 46478.032, 52424.887), stdev = 7270.157
[info]   CI (99.9%): [18483.247, 74472.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.167), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.757 ±(99.9%) 8.413 B/op [Average]
[info]   (min, avg, max) = (0.809, 2.757, 6.472), stdev = 2.185
[info]   CI (99.9%): [≈ 0, 11.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 41.21% complete, ETA 00:41:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 992381.827 ops/s
[info] # Warmup Iteration   2: 1081138.908 ops/s
[info] # Warmup Iteration   3: 1096138.733 ops/s
[info] Iteration   1: 1069858.507 ops/s
[info]                  ·gc.alloc.rate:                   973.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1463.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1095479.602 ops/s
[info]                  ·gc.alloc.rate:                   996.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1431.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1093271.445 ops/s
[info]                  ·gc.alloc.rate:                   994.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1439.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1093463.261 ops/s
[info]                  ·gc.alloc.rate:                   994.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1442.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1096793.249 ops/s
[info]                  ·gc.alloc.rate:                   998.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1443.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1089773.213 ±(99.9%) 43235.950 ops/s [Average]
[info]   (min, avg, max) = (1069858.507, 1089773.213, 1096793.249), stdev = 11228.239
[info]   CI (99.9%): [1046537.263, 1133009.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   991.652 ±(99.9%) 39.456 MB/sec [Average]
[info]   (min, avg, max) = (973.493, 991.652, 998.212), stdev = 10.247
[info]   CI (99.9%): [952.195, 1031.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1000.083 ±(99.9%) 17.086 MB/sec [Average]
[info]   (min, avg, max) = (995.239, 1000.083, 1006.150), stdev = 4.437
[info]   CI (99.9%): [982.997, 1017.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1444.266 ±(99.9%) 46.113 B/op [Average]
[info]   (min, avg, max) = (1431.704, 1444.266, 1463.988), stdev = 11.975
[info]   CI (99.9%): [1398.153, 1490.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.120 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.120, 0.180), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 41.52% complete, ETA 00:41:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1099571.553 ops/s
[info] # Warmup Iteration   2: 1257904.100 ops/s
[info] # Warmup Iteration   3: 1247938.720 ops/s
[info] Iteration   1: 1251505.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1249252.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1248487.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1247039.202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1254576.951 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1250172.382 ±(99.9%) 11337.850 ops/s [Average]
[info]   (min, avg, max) = (1247039.202, 1250172.382, 1254576.951), stdev = 2944.404
[info]   CI (99.9%): [1238834.532, 1261510.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 41.82% complete, ETA 00:40:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2585.582 ops/s
[info] # Warmup Iteration   2: 3246.272 ops/s
[info] # Warmup Iteration   3: 3529.503 ops/s
[info] Iteration   1: 3552.968 ops/s
[info]                  ·gc.alloc.rate:                   479.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113295.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.275 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3511.607 ops/s
[info]                  ·gc.alloc.rate:                   474.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294604.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 910.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3507.800 ops/s
[info]                  ·gc.alloc.rate:                   473.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147320.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3559.077 ops/s
[info]                  ·gc.alloc.rate:                   480.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290567.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3485.569 ops/s
[info]                  ·gc.alloc.rate:               470.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          212496.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148400.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3523.404 ±(99.9%) 121.169 ops/s [Average]
[info]   (min, avg, max) = (3485.569, 3523.404, 3559.077), stdev = 31.467
[info]   CI (99.9%): [3402.235, 3644.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   475.783 ±(99.9%) 16.203 MB/sec [Average]
[info]   (min, avg, max) = (470.779, 475.783, 480.581), stdev = 4.208
[info]   CI (99.9%): [459.581, 491.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   212496.126 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (212496.123, 212496.126, 212496.131), stdev = 0.004
[info]   CI (99.9%): [212496.111, 212496.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   445.494 ±(99.9%) 753.169 MB/sec [Average]
[info]   (min, avg, max) = (255.778, 445.494, 657.393), stdev = 195.596
[info]   CI (99.9%): [≈ 0, 1198.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   198837.691 ±(99.9%) 334036.009 B/op [Average]
[info]   (min, avg, max) = (113295.775, 198837.691, 294604.188), stdev = 86748.091
[info]   CI (99.9%): [≈ 0, 532873.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.432 ±(99.9%) 3.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.432, 2.031), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   193.600 ±(99.9%) 1543.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 193.600, 910.303), stdev = 400.780
[info]   CI (99.9%): [≈ 0, 1736.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 42.12% complete, ETA 00:40:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98132.868 ops/s
[info] # Warmup Iteration   2: 115290.996 ops/s
[info] # Warmup Iteration   3: 115938.252 ops/s
[info] Iteration   1: 115161.564 ops/s
[info]                  ·gc.alloc.rate:                   2139.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2343.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32031.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.138 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 117276.428 ops/s
[info]                  ·gc.alloc.rate:                   2178.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27121.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.514 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 117015.964 ops/s
[info]                  ·gc.alloc.rate:                   2174.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31836.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.240 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 117234.640 ops/s
[info]                  ·gc.alloc.rate:                   2178.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27315.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.397 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 115530.583 ops/s
[info]                  ·gc.alloc.rate:                   2146.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32395.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.985 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   116443.836 ±(99.9%) 3909.951 ops/s [Average]
[info]   (min, avg, max) = (115161.564, 116443.836, 117276.428), stdev = 1015.402
[info]   CI (99.9%): [112533.885, 120353.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2163.477 ±(99.9%) 72.657 MB/sec [Average]
[info]   (min, avg, max) = (2139.631, 2163.477, 2178.928), stdev = 18.869
[info]   CI (99.9%): [2090.820, 2236.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29240.004, 29240.004, 29240.004), stdev = 0.001
[info]   CI (99.9%): [29240.003, 29240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2229.022 ±(99.9%) 708.643 MB/sec [Average]
[info]   (min, avg, max) = (2021.094, 2229.022, 2378.140), stdev = 184.032
[info]   CI (99.9%): [1520.379, 2937.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30140.040 ±(99.9%) 10300.829 B/op [Average]
[info]   (min, avg, max) = (27121.967, 30140.040, 32395.105), stdev = 2675.093
[info]   CI (99.9%): [19839.210, 40440.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.187), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.855 ±(99.9%) 2.215 B/op [Average]
[info]   (min, avg, max) = (1.138, 1.855, 2.514), stdev = 0.575
[info]   CI (99.9%): [≈ 0, 4.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 42.42% complete, ETA 00:40:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168023.754 ops/s
[info] # Warmup Iteration   2: 250217.385 ops/s
[info] # Warmup Iteration   3: 250558.482 ops/s
[info] Iteration   1: 248220.957 ops/s
[info]                  ·gc.alloc.rate:                   545.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2071.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.571 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 242441.104 ops/s
[info]                  ·gc.alloc.rate:                   532.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4239.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 242506.243 ops/s
[info]                  ·gc.alloc.rate:                   532.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2118.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 241970.419 ops/s
[info]                  ·gc.alloc.rate:                   531.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4254.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 242023.793 ops/s
[info]                  ·gc.alloc.rate:                   531.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4262.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   243432.503 ±(99.9%) 10348.902 ops/s [Average]
[info]   (min, avg, max) = (241970.419, 243432.503, 248220.957), stdev = 2687.577
[info]   CI (99.9%): [233083.602, 253781.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   534.576 ±(99.9%) 22.717 MB/sec [Average]
[info]   (min, avg, max) = (531.380, 534.576, 545.089), stdev = 5.899
[info]   CI (99.9%): [511.860, 557.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.002, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.184 ±(99.9%) 691.091 MB/sec [Average]
[info]   (min, avg, max) = (326.406, 523.184, 655.482), stdev = 179.474
[info]   CI (99.9%): [≈ 0, 1214.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3389.305 ±(99.9%) 4550.242 B/op [Average]
[info]   (min, avg, max) = (2071.725, 3389.305, 4262.275), stdev = 1181.684
[info]   CI (99.9%): [≈ 0, 7939.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.470 ±(99.9%) 3.596 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.470, 2.140), stdev = 0.934
[info]   CI (99.9%): [≈ 0, 4.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.985 ±(99.9%) 22.789 B/op [Average]
[info]   (min, avg, max) = (0.270, 2.985, 13.571), stdev = 5.918
[info]   CI (99.9%): [≈ 0, 25.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 42.73% complete, ETA 00:40:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456470.863 ops/s
[info] # Warmup Iteration   2: 459542.739 ops/s
[info] # Warmup Iteration   3: 479706.187 ops/s
[info] Iteration   1: 484547.135 ops/s
[info]                  ·gc.alloc.rate:                   610.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2161.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 483550.596 ops/s
[info]                  ·gc.alloc.rate:                   609.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2163.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 483984.432 ops/s
[info]                  ·gc.alloc.rate:                   610.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2161.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 465289.041 ops/s
[info]                  ·gc.alloc.rate:               586.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2248.664 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 483474.442 ops/s
[info]                  ·gc.alloc.rate:               609.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1084.252 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   480169.129 ±(99.9%) 32072.646 ops/s [Average]
[info]   (min, avg, max) = (465289.041, 480169.129, 484547.135), stdev = 8329.164
[info]   CI (99.9%): [448096.483, 512241.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   605.321 ±(99.9%) 40.373 MB/sec [Average]
[info]   (min, avg, max) = (586.591, 605.321, 610.824), stdev = 10.485
[info]   CI (99.9%): [564.949, 645.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   598.589 ±(99.9%) 571.515 MB/sec [Average]
[info]   (min, avg, max) = (333.087, 598.589, 665.454), stdev = 148.421
[info]   CI (99.9%): [27.074, 1170.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1963.956 ±(99.9%) 1899.101 B/op [Average]
[info]   (min, avg, max) = (1084.252, 1963.956, 2248.664), stdev = 493.191
[info]   CI (99.9%): [64.855, 3863.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.358, 1.646), stdev = 0.722
[info]   CI (99.9%): [≈ 0, 3.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.164 ±(99.9%) 9.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.164, 5.348), stdev = 2.345
[info]   CI (99.9%): [≈ 0, 10.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 43.03% complete, ETA 00:40:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42054.650 ops/s
[info] # Warmup Iteration   2: 68929.895 ops/s
[info] # Warmup Iteration   3: 68223.522 ops/s
[info] Iteration   1: 68957.236 ops/s
[info]                  ·gc.alloc.rate:                   2986.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              68170.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61268.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.851 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 69136.418 ops/s
[info]                  ·gc.alloc.rate:                   2999.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3030.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68863.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.300 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 68672.041 ops/s
[info]                  ·gc.alloc.rate:                   2974.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3053.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69979.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.725 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 69682.153 ops/s
[info]                  ·gc.alloc.rate:                   3018.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69071.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.231 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 68354.476 ops/s
[info]                  ·gc.alloc.rate:                   2960.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70539.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.834 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68960.465 ±(99.9%) 1927.452 ops/s [Average]
[info]   (min, avg, max) = (68354.476, 68960.465, 69682.153), stdev = 500.553
[info]   CI (99.9%): [67033.013, 70887.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2988.122 ±(99.9%) 85.771 MB/sec [Average]
[info]   (min, avg, max) = (2960.843, 2988.122, 3018.488), stdev = 22.274
[info]   CI (99.9%): [2902.352, 3073.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68168.474 ±(99.9%) 4.023 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68168.474, 68170.342), stdev = 1.045
[info]   CI (99.9%): [68164.451, 68172.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2978.174 ±(99.9%) 634.254 MB/sec [Average]
[info]   (min, avg, max) = (2684.410, 2978.174, 3063.828), stdev = 164.714
[info]   CI (99.9%): [2343.920, 3612.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67944.443 ±(99.9%) 14606.330 B/op [Average]
[info]   (min, avg, max) = (61268.668, 67944.443, 70539.033), stdev = 3793.218
[info]   CI (99.9%): [53338.112, 82550.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.175, 0.250), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.988 ±(99.9%) 4.247 B/op [Average]
[info]   (min, avg, max) = (2.851, 3.988, 5.725), stdev = 1.103
[info]   CI (99.9%): [≈ 0, 8.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 11.000), stdev = 1.517
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 43.33% complete, ETA 00:39:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136511.167 ops/s
[info] # Warmup Iteration   2: 170920.545 ops/s
[info] # Warmup Iteration   3: 170956.599 ops/s
[info] Iteration   1: 173545.783 ops/s
[info]                  ·gc.alloc.rate:                   1770.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15084.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 171858.060 ops/s
[info]                  ·gc.alloc.rate:                   1753.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15317.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.334 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 173178.240 ops/s
[info]                  ·gc.alloc.rate:                   1766.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18343.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 172027.993 ops/s
[info]                  ·gc.alloc.rate:                   1755.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15449.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.571 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 169405.594 ops/s
[info]                  ·gc.alloc.rate:                   1728.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15737.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.967 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   172003.134 ±(99.9%) 6247.521 ops/s [Average]
[info]   (min, avg, max) = (169405.594, 172003.134, 173545.783), stdev = 1622.461
[info]   CI (99.9%): [165755.613, 178250.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1754.906 ±(99.9%) 63.988 MB/sec [Average]
[info]   (min, avg, max) = (1728.361, 1754.906, 1770.772), stdev = 16.617
[info]   CI (99.9%): [1690.918, 1818.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   16056.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16056.002, 16056.003, 16056.003), stdev = 0.001
[info]   CI (99.9%): [16056.002, 16056.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1747.549 ±(99.9%) 585.581 MB/sec [Average]
[info]   (min, avg, max) = (1663.620, 1747.549, 2018.708), stdev = 152.074
[info]   CI (99.9%): [1161.968, 2333.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15986.223 ±(99.9%) 5154.803 B/op [Average]
[info]   (min, avg, max) = (15084.426, 15986.223, 18343.496), stdev = 1338.686
[info]   CI (99.9%): [10831.419, 21141.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.801 ±(99.9%) 1.326 B/op [Average]
[info]   (min, avg, max) = (0.566, 0.801, 1.334), stdev = 0.344
[info]   CI (99.9%): [≈ 0, 2.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 43.64% complete, ETA 00:39:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 340100.856 ops/s
[info] # Warmup Iteration   2: 481871.190 ops/s
[info] # Warmup Iteration   3: 470717.803 ops/s
[info] Iteration   1: 467411.715 ops/s
[info]                  ·gc.alloc.rate:                   479.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1961.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 483239.458 ops/s
[info]                  ·gc.alloc.rate:               496.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1064.120 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 483116.257 ops/s
[info]                  ·gc.alloc.rate:                   496.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2131.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 484917.897 ops/s
[info]                  ·gc.alloc.rate:               497.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1061.524 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 484506.293 ops/s
[info]                  ·gc.alloc.rate:                   497.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2127.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   480638.324 ±(99.9%) 28630.073 ops/s [Average]
[info]   (min, avg, max) = (467411.715, 480638.324, 484917.897), stdev = 7435.139
[info]   CI (99.9%): [452008.251, 509268.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   493.535 ±(99.9%) 29.455 MB/sec [Average]
[info]   (min, avg, max) = (479.927, 493.535, 497.938), stdev = 7.649
[info]   CI (99.9%): [464.080, 522.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.088 ±(99.9%) 650.295 MB/sec [Average]
[info]   (min, avg, max) = (326.737, 509.088, 654.861), stdev = 168.880
[info]   CI (99.9%): [≈ 0, 1159.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1669.056 ±(99.9%) 2147.214 B/op [Average]
[info]   (min, avg, max) = (1061.524, 1669.056, 2131.005), stdev = 557.625
[info]   CI (99.9%): [≈ 0, 3816.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.467 ±(99.9%) 3.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 2.146), stdev = 0.940
[info]   CI (99.9%): [≈ 0, 4.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.567 ±(99.9%) 12.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.567, 7.226), stdev = 3.168
[info]   CI (99.9%): [≈ 0, 13.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 43.94% complete, ETA 00:39:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538905.700 ops/s
[info] # Warmup Iteration   2: 581659.648 ops/s
[info] # Warmup Iteration   3: 546095.987 ops/s
[info] Iteration   1: 551136.236 ops/s
[info]                  ·gc.alloc.rate:                   431.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 561526.869 ops/s
[info]                  ·gc.alloc.rate:                   439.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1859.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 560786.352 ops/s
[info]                  ·gc.alloc.rate:               439.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 929.135 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 551695.444 ops/s
[info]                  ·gc.alloc.rate:               432.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944.494 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 554325.792 ops/s
[info]                  ·gc.alloc.rate:                   433.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1881.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   555894.139 ±(99.9%) 19097.387 ops/s [Average]
[info]   (min, avg, max) = (551136.236, 555894.139, 561526.869), stdev = 4959.531
[info]   CI (99.9%): [536796.751, 574991.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   435.209 ±(99.9%) 14.828 MB/sec [Average]
[info]   (min, avg, max) = (431.451, 435.209, 439.564), stdev = 3.851
[info]   CI (99.9%): [420.381, 450.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   448.905 ±(99.9%) 762.527 MB/sec [Average]
[info]   (min, avg, max) = (255.818, 448.905, 663.483), stdev = 198.026
[info]   CI (99.9%): [≈ 0, 1211.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1269.129 ±(99.9%) 2139.885 B/op [Average]
[info]   (min, avg, max) = (730.486, 1269.129, 1881.934), stdev = 555.721
[info]   CI (99.9%): [≈ 0, 3409.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 3.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.813), stdev = 0.801
[info]   CI (99.9%): [≈ 0, 3.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.070 ±(99.9%) 8.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.070, 5.081), stdev = 2.245
[info]   CI (99.9%): [≈ 0, 9.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.24% complete, ETA 00:39:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 557127.181 ops/s
[info] # Warmup Iteration   2: 607046.243 ops/s
[info] # Warmup Iteration   3: 615053.153 ops/s
[info] Iteration   1: 641889.086 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 624767.921 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 641761.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 641341.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 641403.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   638232.689 ±(99.9%) 28997.694 ops/s [Average]
[info]   (min, avg, max) = (624767.921, 638232.689, 641889.086), stdev = 7530.609
[info]   CI (99.9%): [609234.995, 667230.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 44.55% complete, ETA 00:38:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19511.076 ops/s
[info] # Warmup Iteration   2: 26645.900 ops/s
[info] # Warmup Iteration   3: 27161.001 ops/s
[info] Iteration   1: 27111.698 ops/s
[info]                  ·gc.alloc.rate:                   1490.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              86528.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95782.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.417 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27286.219 ops/s
[info]                  ·gc.alloc.rate:                   1500.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              86517.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76610.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.602 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27387.882 ops/s
[info]                  ·gc.alloc.rate:                   1505.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96000.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27163.840 ops/s
[info]                  ·gc.alloc.rate:                   1493.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77806.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.206 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27275.150 ops/s
[info]                  ·gc.alloc.rate:                   1499.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97243.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.603 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27244.958 ±(99.9%) 419.082 ops/s [Average]
[info]   (min, avg, max) = (27111.698, 27244.958, 27387.882), stdev = 108.834
[info]   CI (99.9%): [26825.876, 27664.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1497.968 ±(99.9%) 22.598 MB/sec [Average]
[info]   (min, avg, max) = (1490.622, 1497.968, 1505.622), stdev = 5.869
[info]   CI (99.9%): [1475.370, 1520.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86516.407 ±(99.9%) 26.890 B/op [Average]
[info]   (min, avg, max) = (86512.016, 86516.407, 86528.016), stdev = 6.983
[info]   CI (99.9%): [86489.517, 86543.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1535.671 ±(99.9%) 704.416 MB/sec [Average]
[info]   (min, avg, max) = (1328.239, 1535.671, 1685.868), stdev = 182.935
[info]   CI (99.9%): [831.256, 2240.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88688.613 ±(99.9%) 40443.323 B/op [Average]
[info]   (min, avg, max) = (76610.748, 88688.613, 97243.403), stdev = 10503.003
[info]   CI (99.9%): [48245.290, 129131.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.644 ±(99.9%) 3.861 B/op [Average]
[info]   (min, avg, max) = (1.206, 2.644, 3.603), stdev = 1.003
[info]   CI (99.9%): [≈ 0, 6.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 44.85% complete, ETA 00:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5150.759 ops/s
[info] # Warmup Iteration   2: 6885.766 ops/s
[info] # Warmup Iteration   3: 7229.949 ops/s
[info] Iteration   1: 7064.879 ops/s
[info]                  ·gc.alloc.rate:                   1117.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              248848.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     295120.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.910 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7136.415 ops/s
[info]                  ·gc.alloc.rate:                   1128.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              248848.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219836.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.772 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7192.975 ops/s
[info]                  ·gc.alloc.rate:                   1137.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              248848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218678.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.217 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7175.412 ops/s
[info]                  ·gc.alloc.rate:                   1134.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              248848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293373.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.697 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7185.750 ops/s
[info]                  ·gc.alloc.rate:                   1136.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              248848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220495.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7151.086 ±(99.9%) 203.711 ops/s [Average]
[info]   (min, avg, max) = (7064.879, 7151.086, 7192.975), stdev = 52.903
[info]   CI (99.9%): [6947.376, 7354.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1130.888 ±(99.9%) 32.091 MB/sec [Average]
[info]   (min, avg, max) = (1117.211, 1130.888, 1137.427), stdev = 8.334
[info]   CI (99.9%): [1098.797, 1162.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248848.061 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (248848.060, 248848.061, 248848.065), stdev = 0.002
[info]   CI (99.9%): [248848.053, 248848.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1133.250 ±(99.9%) 696.683 MB/sec [Average]
[info]   (min, avg, max) = (997.213, 1133.250, 1337.736), stdev = 180.926
[info]   CI (99.9%): [436.567, 1829.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   249500.861 ±(99.9%) 157326.946 B/op [Average]
[info]   (min, avg, max) = (218678.011, 249500.861, 295120.654), stdev = 40857.308
[info]   CI (99.9%): [92173.915, 406827.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.478 ±(99.9%) 15.470 B/op [Average]
[info]   (min, avg, max) = (13.697, 16.478, 22.794), stdev = 4.017
[info]   CI (99.9%): [1.008, 31.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 45.15% complete, ETA 00:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3802.325 ops/s
[info] # Warmup Iteration   2: 6871.777 ops/s
[info] # Warmup Iteration   3: 7181.537 ops/s
[info] Iteration   1: 7199.536 ops/s
[info]                  ·gc.alloc.rate:                   1051.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214491.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7175.006 ops/s
[info]                  ·gc.alloc.rate:                   1048.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215866.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7158.208 ops/s
[info]                  ·gc.alloc.rate:                   1045.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289822.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.730 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7036.449 ops/s
[info]                  ·gc.alloc.rate:                   1027.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222364.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7103.570 ops/s
[info]                  ·gc.alloc.rate:                   1037.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221343.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   7134.554 ±(99.9%) 251.055 ops/s [Average]
[info]   (min, avg, max) = (7036.449, 7134.554, 7199.536), stdev = 65.198
[info]   CI (99.9%): [6883.498, 7385.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1042.149 ±(99.9%) 36.273 MB/sec [Average]
[info]   (min, avg, max) = (1027.982, 1042.149, 1051.437), stdev = 9.420
[info]   CI (99.9%): [1005.877, 1078.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   229848.061 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (229848.060, 229848.061, 229848.065), stdev = 0.002
[info]   CI (99.9%): [229848.054, 229848.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1055.537 ±(99.9%) 566.423 MB/sec [Average]
[info]   (min, avg, max) = (981.188, 1055.537, 1318.348), stdev = 147.098
[info]   CI (99.9%): [489.114, 1621.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   232777.547 ±(99.9%) 123487.084 B/op [Average]
[info]   (min, avg, max) = (214491.383, 232777.547, 289822.892), stdev = 32069.204
[info]   CI (99.9%): [109290.462, 356264.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.323 ±(99.9%) 32.549 B/op [Average]
[info]   (min, avg, max) = (9.223, 18.323, 27.394), stdev = 8.453
[info]   CI (99.9%): [≈ 0, 50.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 45.45% complete, ETA 00:38:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89980.839 ops/s
[info] # Warmup Iteration   2: 98944.734 ops/s
[info] # Warmup Iteration   3: 100980.105 ops/s
[info] Iteration   1: 98933.818 ops/s
[info]                  ·gc.alloc.rate:                   958.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15863.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 97111.783 ops/s
[info]                  ·gc.alloc.rate:                   940.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16182.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 97663.159 ops/s
[info]                  ·gc.alloc.rate:                   946.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16124.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.671 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 98428.204 ops/s
[info]                  ·gc.alloc.rate:                   953.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16051.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.999 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100043.250 ops/s
[info]                  ·gc.alloc.rate:                   969.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15833.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   98436.043 ±(99.9%) 4382.791 ops/s [Average]
[info]   (min, avg, max) = (97111.783, 98436.043, 100043.250), stdev = 1138.197
[info]   CI (99.9%): [94053.252, 102818.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   953.841 ±(99.9%) 42.889 MB/sec [Average]
[info]   (min, avg, max) = (940.907, 953.841, 969.551), stdev = 11.138
[info]   CI (99.9%): [910.953, 996.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.005, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1001.485 ±(99.9%) 14.799 MB/sec [Average]
[info]   (min, avg, max) = (997.525, 1001.485, 1006.802), stdev = 3.843
[info]   CI (99.9%): [986.686, 1016.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16011.007 ±(99.9%) 599.327 B/op [Average]
[info]   (min, avg, max) = (15833.850, 16011.007, 16182.261), stdev = 155.643
[info]   CI (99.9%): [15411.680, 16610.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.064 ±(99.9%) 1.064 B/op [Average]
[info]   (min, avg, max) = (0.671, 1.064, 1.349), stdev = 0.276
[info]   CI (99.9%): [≈ 0, 2.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 45.76% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3469.569 ops/s
[info] # Warmup Iteration   2: 6696.670 ops/s
[info] # Warmup Iteration   3: 6827.883 ops/s
[info] Iteration   1: 6785.515 ops/s
[info]                  ·gc.alloc.rate:                   1238.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304360.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6850.113 ops/s
[info]                  ·gc.alloc.rate:                   1250.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303003.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6905.942 ops/s
[info]                  ·gc.alloc.rate:                   1260.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302368.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.717 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6856.405 ops/s
[info]                  ·gc.alloc.rate:                   1251.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306255.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.556 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6960.369 ops/s
[info]                  ·gc.alloc.rate:                   1270.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227168.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.530 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6871.669 ±(99.9%) 252.227 ops/s [Average]
[info]   (min, avg, max) = (6785.515, 6871.669, 6960.369), stdev = 65.503
[info]   CI (99.9%): [6619.441, 7123.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1254.180 ±(99.9%) 46.171 MB/sec [Average]
[info]   (min, avg, max) = (1238.409, 1254.180, 1270.393), stdev = 11.990
[info]   CI (99.9%): [1208.009, 1300.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   287232.064 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (287232.062, 287232.064, 287232.068), stdev = 0.003
[info]   CI (99.9%): [287232.054, 287232.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1259.410 ±(99.9%) 549.122 MB/sec [Average]
[info]   (min, avg, max) = (1004.741, 1259.410, 1334.266), stdev = 142.605
[info]   CI (99.9%): [710.287, 1808.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   288631.370 ±(99.9%) 132426.841 B/op [Average]
[info]   (min, avg, max) = (227168.878, 288631.370, 306255.137), stdev = 34390.830
[info]   CI (99.9%): [156204.529, 421058.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.067 ±(99.9%) 34.459 B/op [Average]
[info]   (min, avg, max) = (9.556, 19.067, 28.968), stdev = 8.949
[info]   CI (99.9%): [≈ 0, 53.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 46.06% complete, ETA 00:37:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12149.404 ops/s
[info] # Warmup Iteration   2: 16309.360 ops/s
[info] # Warmup Iteration   3: 16719.736 ops/s
[info] Iteration   1: 16641.270 ops/s
[info]                  ·gc.alloc.rate:                   981.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              92809.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93612.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16547.200 ops/s
[info]                  ·gc.alloc.rate:                   976.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94334.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.899 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16702.203 ops/s
[info]                  ·gc.alloc.rate:                   985.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93767.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.884 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16339.553 ops/s
[info]                  ·gc.alloc.rate:                   964.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              92864.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96208.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15835.966 ops/s
[info]                  ·gc.alloc.rate:                   933.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99594.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   16413.239 ±(99.9%) 1350.634 ops/s [Average]
[info]   (min, avg, max) = (15835.966, 16413.239, 16702.203), stdev = 350.755
[info]   CI (99.9%): [15062.604, 17763.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   968.332 ±(99.9%) 80.262 MB/sec [Average]
[info]   (min, avg, max) = (933.935, 968.332, 985.681), stdev = 20.844
[info]   CI (99.9%): [888.070, 1048.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92845.274 ±(99.9%) 128.802 B/op [Average]
[info]   (min, avg, max) = (92808.029, 92845.274, 92872.046), stdev = 33.450
[info]   CI (99.9%): [92716.472, 92974.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   995.609 ±(99.9%) 19.442 MB/sec [Average]
[info]   (min, avg, max) = (989.882, 995.609, 1002.231), stdev = 5.049
[info]   CI (99.9%): [976.168, 1015.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   95503.649 ±(99.9%) 9663.542 B/op [Average]
[info]   (min, avg, max) = (93612.733, 95503.649, 99594.861), stdev = 2509.591
[info]   CI (99.9%): [85840.107, 105167.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.802 ±(99.9%) 8.913 B/op [Average]
[info]   (min, avg, max) = (3.937, 6.802, 9.899), stdev = 2.315
[info]   CI (99.9%): [≈ 0, 15.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 46.36% complete, ETA 00:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12656.444 ops/s
[info] # Warmup Iteration   2: 18445.006 ops/s
[info] # Warmup Iteration   3: 18440.782 ops/s
[info] Iteration   1: 18637.442 ops/s
[info]                  ·gc.alloc.rate:                   874.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82857.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18327.724 ops/s
[info]                  ·gc.alloc.rate:                   859.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56229.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18815.585 ops/s
[info]                  ·gc.alloc.rate:                   882.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82404.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18786.991 ops/s
[info]                  ·gc.alloc.rate:                   881.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82893.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18391.777 ops/s
[info]                  ·gc.alloc.rate:                   862.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56686.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   18591.904 ±(99.9%) 861.046 ops/s [Average]
[info]   (min, avg, max) = (18327.724, 18591.904, 18815.585), stdev = 223.611
[info]   CI (99.9%): [17730.858, 19452.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   871.946 ±(99.9%) 40.458 MB/sec [Average]
[info]   (min, avg, max) = (859.521, 871.946, 882.482), stdev = 10.507
[info]   CI (99.9%): [831.488, 912.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   73808.026 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (73808.023, 73808.026, 73808.033), stdev = 0.004
[info]   CI (99.9%): [73808.009, 73808.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   854.669 ±(99.9%) 689.210 MB/sec [Average]
[info]   (min, avg, max) = (654.817, 854.669, 989.573), stdev = 178.986
[info]   CI (99.9%): [165.459, 1543.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72214.475 ±(99.9%) 55393.635 B/op [Average]
[info]   (min, avg, max) = (56229.895, 72214.475, 82893.920), stdev = 14385.551
[info]   CI (99.9%): [16820.840, 127608.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.987 ±(99.9%) 3.578 B/op [Average]
[info]   (min, avg, max) = (5.223, 5.987, 7.031), stdev = 0.929
[info]   CI (99.9%): [2.409, 9.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 46.67% complete, ETA 00:37:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381129.811 ops/s
[info] # Warmup Iteration   2: 421222.564 ops/s
[info] # Warmup Iteration   3: 418427.869 ops/s
[info] Iteration   1: 420115.016 ops/s
[info]                  ·gc.alloc.rate:                   952.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3728.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 415831.607 ops/s
[info]                  ·gc.alloc.rate:                   942.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3768.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 420993.274 ops/s
[info]                  ·gc.alloc.rate:                   954.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3730.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 419566.199 ops/s
[info]                  ·gc.alloc.rate:                   951.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3757.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 418737.245 ops/s
[info]                  ·gc.alloc.rate:                   949.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3775.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   419048.668 ±(99.9%) 7612.426 ops/s [Average]
[info]   (min, avg, max) = (415831.607, 419048.668, 420993.274), stdev = 1976.923
[info]   CI (99.9%): [411436.242, 426661.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   950.073 ±(99.9%) 17.449 MB/sec [Average]
[info]   (min, avg, max) = (942.726, 950.073, 954.618), stdev = 4.531
[info]   CI (99.9%): [932.624, 967.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.092 ±(99.9%) 15.483 MB/sec [Average]
[info]   (min, avg, max) = (995.148, 999.092, 1004.512), stdev = 4.021
[info]   CI (99.9%): [983.609, 1014.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3752.154 ±(99.9%) 84.193 B/op [Average]
[info]   (min, avg, max) = (3728.079, 3752.154, 3775.413), stdev = 21.865
[info]   CI (99.9%): [3667.962, 3836.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.219 ±(99.9%) 0.394 B/op [Average]
[info]   (min, avg, max) = (0.078, 0.219, 0.315), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 46.97% complete, ETA 00:37:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 439896.974 ops/s
[info] # Warmup Iteration   2: 479105.777 ops/s
[info] # Warmup Iteration   3: 481283.522 ops/s
[info] Iteration   1: 482309.398 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 483158.200 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 480915.459 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 480007.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 480418.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   481361.724 ±(99.9%) 5111.766 ops/s [Average]
[info]   (min, avg, max) = (480007.326, 481361.724, 483158.200), stdev = 1327.509
[info]   CI (99.9%): [476249.959, 486473.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 47.27% complete, ETA 00:37:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13608.757 ops/s
[info] # Warmup Iteration   2: 17847.361 ops/s
[info] # Warmup Iteration   3: 18066.028 ops/s
[info] Iteration   1: 18542.367 ops/s
[info]                  ·gc.alloc.rate:                   939.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83531.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18718.023 ops/s
[info]                  ·gc.alloc.rate:               947.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55338.555 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 18626.005 ops/s
[info]                  ·gc.alloc.rate:                   943.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83662.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18289.117 ops/s
[info]                  ·gc.alloc.rate:                   926.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              79676.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85494.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17938.734 ops/s
[info]                  ·gc.alloc.rate:                   908.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              79672.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87639.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.653 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18422.849 ±(99.9%) 1209.948 ops/s [Average]
[info]   (min, avg, max) = (17938.734, 18422.849, 18718.023), stdev = 314.220
[info]   CI (99.9%): [17212.901, 19632.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   932.914 ±(99.9%) 61.470 MB/sec [Average]
[info]   (min, avg, max) = (908.184, 932.914, 947.713), stdev = 15.964
[info]   CI (99.9%): [871.444, 994.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79682.525 ±(99.9%) 29.647 B/op [Average]
[info]   (min, avg, max) = (79672.024, 79682.525, 79688.033), stdev = 7.699
[info]   CI (99.9%): [79652.878, 79712.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   925.156 ±(99.9%) 575.154 MB/sec [Average]
[info]   (min, avg, max) = (658.130, 925.156, 999.005), stdev = 149.366
[info]   CI (99.9%): [350.002, 1500.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79133.203 ±(99.9%) 51620.999 B/op [Average]
[info]   (min, avg, max) = (55338.555, 79133.203, 87639.469), stdev = 13405.810
[info]   CI (99.9%): [27512.203, 130754.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.572 ±(99.9%) 10.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.572, 7.165), stdev = 2.822
[info]   CI (99.9%): [≈ 0, 14.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 47.58% complete, ETA 00:36:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8620.883 ops/s
[info] # Warmup Iteration   2: 11435.230 ops/s
[info] # Warmup Iteration   3: 11854.530 ops/s
[info] Iteration   1: 11891.978 ops/s
[info]                  ·gc.alloc.rate:                   1226.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175335.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11896.573 ops/s
[info]                  ·gc.alloc.rate:                   1226.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131832.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11820.576 ops/s
[info]                  ·gc.alloc.rate:                   1218.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              162256.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177733.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.315 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11819.989 ops/s
[info]                  ·gc.alloc.rate:                   1219.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178443.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.086 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11583.633 ops/s
[info]                  ·gc.alloc.rate:                   1194.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137056.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11802.550 ±(99.9%) 492.339 ops/s [Average]
[info]   (min, avg, max) = (11583.633, 11802.550, 11896.573), stdev = 127.859
[info]   CI (99.9%): [11310.211, 12294.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1217.088 ±(99.9%) 51.103 MB/sec [Average]
[info]   (min, avg, max) = (1194.361, 1217.088, 1226.799), stdev = 13.271
[info]   CI (99.9%): [1165.985, 1268.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   162256.086 ±(99.9%) 30.809 B/op [Average]
[info]   (min, avg, max) = (162248.036, 162256.086, 162264.039), stdev = 8.001
[info]   CI (99.9%): [162225.277, 162286.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.330 ±(99.9%) 698.319 MB/sec [Average]
[info]   (min, avg, max) = (996.816, 1201.330, 1340.683), stdev = 181.351
[info]   CI (99.9%): [503.012, 1899.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   160080.162 ±(99.9%) 90503.432 B/op [Average]
[info]   (min, avg, max) = (131832.061, 160080.162, 178443.281), stdev = 23503.454
[info]   CI (99.9%): [69576.730, 250583.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.100 ±(99.9%) 12.952 B/op [Average]
[info]   (min, avg, max) = (8.264, 11.100, 16.523), stdev = 3.364
[info]   CI (99.9%): [≈ 0, 24.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 47.88% complete, ETA 00:36:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7673.951 ops/s
[info] # Warmup Iteration   2: 12833.822 ops/s
[info] # Warmup Iteration   3: 12905.046 ops/s
[info] Iteration   1: 12889.656 ops/s
[info]                  ·gc.alloc.rate:                   1154.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              140928.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159892.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.625 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12829.183 ops/s
[info]                  ·gc.alloc.rate:                   1148.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              140928.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121052.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 12926.166 ops/s
[info]                  ·gc.alloc.rate:                   1157.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              140954.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161029.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.069 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12821.923 ops/s
[info]                  ·gc.alloc.rate:                   1148.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              140960.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122395.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12953.522 ops/s
[info]                  ·gc.alloc.rate:                   1160.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              140960.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162340.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12884.090 ±(99.9%) 223.717 ops/s [Average]
[info]   (min, avg, max) = (12821.923, 12884.090, 12953.522), stdev = 58.099
[info]   CI (99.9%): [12660.373, 13107.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1153.920 ±(99.9%) 20.274 MB/sec [Average]
[info]   (min, avg, max) = (1148.473, 1153.920, 1160.298), stdev = 5.265
[info]   CI (99.9%): [1133.647, 1174.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   140946.096 ±(99.9%) 64.116 B/op [Average]
[info]   (min, avg, max) = (140928.034, 140946.096, 140960.034), stdev = 16.651
[info]   CI (99.9%): [140881.981, 141010.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.505 ±(99.9%) 698.792 MB/sec [Average]
[info]   (min, avg, max) = (986.826, 1190.505, 1336.287), stdev = 181.474
[info]   CI (99.9%): [491.712, 1889.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   145342.035 ±(99.9%) 83108.513 B/op [Average]
[info]   (min, avg, max) = (121052.392, 145342.035, 162340.315), stdev = 21583.017
[info]   CI (99.9%): [62233.522, 228450.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.658 ±(99.9%) 16.533 B/op [Average]
[info]   (min, avg, max) = (5.058, 8.658, 15.321), stdev = 4.294
[info]   CI (99.9%): [≈ 0, 25.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 48.18% complete, ETA 00:36:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159398.506 ops/s
[info] # Warmup Iteration   2: 163580.229 ops/s
[info] # Warmup Iteration   3: 170281.443 ops/s
[info] Iteration   1: 169783.539 ops/s
[info]                  ·gc.alloc.rate:                   982.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9243.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.386 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 165348.197 ops/s
[info]                  ·gc.alloc.rate:                   956.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6333.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.991 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 163921.847 ops/s
[info]                  ·gc.alloc.rate:                   948.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9600.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 164167.488 ops/s
[info]                  ·gc.alloc.rate:                   949.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9613.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 167913.390 ops/s
[info]                  ·gc.alloc.rate:                   971.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9424.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.976 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   166226.892 ±(99.9%) 9783.307 ops/s [Average]
[info]   (min, avg, max) = (163921.847, 166226.892, 169783.539), stdev = 2540.694
[info]   CI (99.9%): [156443.585, 176010.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   961.629 ±(99.9%) 56.327 MB/sec [Average]
[info]   (min, avg, max) = (948.244, 961.629, 982.113), stdev = 14.628
[info]   CI (99.9%): [905.302, 1017.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.003, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   934.251 ±(99.9%) 578.723 MB/sec [Average]
[info]   (min, avg, max) = (665.460, 934.251, 1005.552), stdev = 150.292
[info]   CI (99.9%): [355.528, 1512.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8843.227 ±(99.9%) 5432.602 B/op [Average]
[info]   (min, avg, max) = (6333.910, 8843.227, 9613.958), stdev = 1410.830
[info]   CI (99.9%): [3410.624, 14275.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.710 ±(99.9%) 1.154 B/op [Average]
[info]   (min, avg, max) = (0.386, 0.710, 0.991), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 48.48% complete, ETA 00:36:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4785.298 ops/s
[info] # Warmup Iteration   2: 10778.307 ops/s
[info] # Warmup Iteration   3: 11173.744 ops/s
[info] Iteration   1: 11044.050 ops/s
[info]                  ·gc.alloc.rate:                   1382.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              196944.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1633.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232647.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.932 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11127.542 ops/s
[info]                  ·gc.alloc.rate:                   1392.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              196944.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186068.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.553 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11129.582 ops/s
[info]                  ·gc.alloc.rate:                   1392.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              196944.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187447.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.887 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11019.316 ops/s
[info]                  ·gc.alloc.rate:                   1379.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              196944.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190459.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.946 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11103.680 ops/s
[info]                  ·gc.alloc.rate:                   1389.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              196944.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189946.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.851 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   11084.834 ±(99.9%) 193.851 ops/s [Average]
[info]   (min, avg, max) = (11019.316, 11084.834, 11129.582), stdev = 50.342
[info]   CI (99.9%): [10890.983, 11278.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1387.296 ±(99.9%) 23.990 MB/sec [Average]
[info]   (min, avg, max) = (1379.046, 1387.296, 1392.831), stdev = 6.230
[info]   CI (99.9%): [1363.306, 1411.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   196944.077 ±(99.9%) 0.321 B/op [Average]
[info]   (min, avg, max) = (196944.039, 196944.077, 196944.226), stdev = 0.083
[info]   CI (99.9%): [196943.756, 196944.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1389.652 ±(99.9%) 525.142 MB/sec [Average]
[info]   (min, avg, max) = (1315.644, 1389.652, 1633.058), stdev = 136.378
[info]   CI (99.9%): [864.509, 1914.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   197313.944 ±(99.9%) 76373.709 B/op [Average]
[info]   (min, avg, max) = (186068.068, 197313.944, 232647.757), stdev = 19834.010
[info]   CI (99.9%): [120940.235, 273687.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.034 ±(99.9%) 29.508 B/op [Average]
[info]   (min, avg, max) = (5.887, 10.034, 23.553), stdev = 7.663
[info]   CI (99.9%): [≈ 0, 39.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 48.79% complete, ETA 00:35:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20298.551 ops/s
[info] # Warmup Iteration   2: 26781.103 ops/s
[info] # Warmup Iteration   3: 26529.942 ops/s
[info] Iteration   1: 27001.476 ops/s
[info]                  ·gc.alloc.rate:                   1185.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              69120.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57734.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 26560.626 ops/s
[info]                  ·gc.alloc.rate:                   1165.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              69077.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78543.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 26974.468 ops/s
[info]                  ·gc.alloc.rate:                   1184.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77637.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.852 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27008.678 ops/s
[info]                  ·gc.alloc.rate:                   1185.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58456.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27083.365 ops/s
[info]                  ·gc.alloc.rate:                   1188.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78036.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.839 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   26925.723 ±(99.9%) 801.134 ops/s [Average]
[info]   (min, avg, max) = (26560.626, 26925.723, 27083.365), stdev = 208.052
[info]   CI (99.9%): [26124.588, 27726.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1181.864 ±(99.9%) 35.118 MB/sec [Average]
[info]   (min, avg, max) = (1165.808, 1181.864, 1188.452), stdev = 9.120
[info]   CI (99.9%): [1146.746, 1216.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   69073.124 ±(99.9%) 107.137 B/op [Average]
[info]   (min, avg, max) = (69056.016, 69073.124, 69120.016), stdev = 27.823
[info]   CI (99.9%): [68965.987, 69180.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1198.708 ±(99.9%) 710.091 MB/sec [Average]
[info]   (min, avg, max) = (990.530, 1198.708, 1343.005), stdev = 184.408
[info]   CI (99.9%): [488.617, 1908.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   70081.817 ±(99.9%) 42162.649 B/op [Average]
[info]   (min, avg, max) = (57734.384, 70081.817, 78543.540), stdev = 10949.506
[info]   CI (99.9%): [27919.169, 112244.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.117 ±(99.9%) 5.313 B/op [Average]
[info]   (min, avg, max) = (3.640, 5.117, 7.400), stdev = 1.380
[info]   CI (99.9%): [≈ 0, 10.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 49.09% complete, ETA 00:35:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57156.710 ops/s
[info] # Warmup Iteration   2: 94635.178 ops/s
[info] # Warmup Iteration   3: 94949.198 ops/s
[info] Iteration   1: 94125.785 ops/s
[info]                  ·gc.alloc.rate:                   1740.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27571.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 95139.231 ops/s
[info]                  ·gc.alloc.rate:                   1759.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33024.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.066 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 95452.740 ops/s
[info]                  ·gc.alloc.rate:                   1764.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27638.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 95003.199 ops/s
[info]                  ·gc.alloc.rate:                   1756.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27890.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.379 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 94981.990 ops/s
[info]                  ·gc.alloc.rate:                   1755.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              29096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28003.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.725 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   94940.589 ±(99.9%) 1897.489 ops/s [Average]
[info]   (min, avg, max) = (94125.785, 94940.589, 95452.740), stdev = 492.772
[info]   CI (99.9%): [93043.100, 96838.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1755.324 ±(99.9%) 35.129 MB/sec [Average]
[info]   (min, avg, max) = (1740.241, 1755.324, 1764.765), stdev = 9.123
[info]   CI (99.9%): [1720.196, 1790.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29096.005, 29096.005, 29096.005), stdev = 0.001
[info]   CI (99.9%): [29096.004, 29096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1739.166 ±(99.9%) 557.440 MB/sec [Average]
[info]   (min, avg, max) = (1649.080, 1739.166, 1996.618), stdev = 144.765
[info]   CI (99.9%): [1181.726, 2296.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28825.665 ±(99.9%) 9063.345 B/op [Average]
[info]   (min, avg, max) = (27571.829, 28825.665, 33024.194), stdev = 2353.722
[info]   CI (99.9%): [19762.320, 37889.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.381 ±(99.9%) 2.484 B/op [Average]
[info]   (min, avg, max) = (0.343, 1.381, 2.066), stdev = 0.645
[info]   CI (99.9%): [≈ 0, 3.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 49.39% complete, ETA 00:35:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617250.116 ops/s
[info] # Warmup Iteration   2: 680994.563 ops/s
[info] # Warmup Iteration   3: 695886.304 ops/s
[info] Iteration   1: 698397.929 ops/s
[info]                  ·gc.alloc.rate:                   958.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2242.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 694199.085 ops/s
[info]                  ·gc.alloc.rate:                   952.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2257.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 687529.919 ops/s
[info]                  ·gc.alloc.rate:                   943.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2284.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 686709.112 ops/s
[info]                  ·gc.alloc.rate:                   942.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2294.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 692960.136 ops/s
[info]                  ·gc.alloc.rate:                   951.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2281.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   691959.236 ±(99.9%) 18731.923 ops/s [Average]
[info]   (min, avg, max) = (686709.112, 691959.236, 698397.929), stdev = 4864.621
[info]   CI (99.9%): [673227.314, 710691.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   949.677 ±(99.9%) 25.593 MB/sec [Average]
[info]   (min, avg, max) = (942.509, 949.677, 958.484), stdev = 6.646
[info]   CI (99.9%): [924.084, 975.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   998.942 ±(99.9%) 15.062 MB/sec [Average]
[info]   (min, avg, max) = (995.194, 998.942, 1004.548), stdev = 3.912
[info]   CI (99.9%): [983.880, 1014.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2272.163 ±(99.9%) 81.823 B/op [Average]
[info]   (min, avg, max) = (2242.728, 2272.163, 2294.530), stdev = 21.249
[info]   CI (99.9%): [2190.340, 2353.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.170 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.170, 0.236), stdev = 0.042
[info]   CI (99.9%): [0.009, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 49.70% complete, ETA 00:35:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 690099.792 ops/s
[info] # Warmup Iteration   2: 757402.762 ops/s
[info] # Warmup Iteration   3: 757459.629 ops/s
[info] Iteration   1: 757203.601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 755807.911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 753993.826 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 754064.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 755772.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   755368.510 ±(99.9%) 5207.311 ops/s [Average]
[info]   (min, avg, max) = (753993.826, 755368.510, 757203.601), stdev = 1352.322
[info]   CI (99.9%): [750161.199, 760575.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 50.00% complete, ETA 00:35:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40731.630 ops/s
[info] # Warmup Iteration   2: 71105.742 ops/s
[info] # Warmup Iteration   3: 71619.790 ops/s
[info] Iteration   1: 73806.867 ops/s
[info]                  ·gc.alloc.rate:                   1925.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              41056.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42199.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.219 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 73165.358 ops/s
[info]                  ·gc.alloc.rate:                   1908.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              41056.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35799.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 72305.859 ops/s
[info]                  ·gc.alloc.rate:                   1886.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              41056.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43780.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.265 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 73007.790 ops/s
[info]                  ·gc.alloc.rate:                   1905.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              41056.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43610.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.795 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 72470.209 ops/s
[info]                  ·gc.alloc.rate:                   1891.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              41056.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36743.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.712 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   72951.217 ±(99.9%) 2301.584 ops/s [Average]
[info]   (min, avg, max) = (72305.859, 72951.217, 73806.867), stdev = 597.714
[info]   CI (99.9%): [70649.632, 75252.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1903.438 ±(99.9%) 60.255 MB/sec [Average]
[info]   (min, avg, max) = (1886.335, 1903.438, 1925.916), stdev = 15.648
[info]   CI (99.9%): [1843.183, 1963.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41056.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41056.006, 41056.006, 41056.006), stdev = 0.001
[info]   CI (99.9%): [41056.005, 41056.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.306 ±(99.9%) 692.402 MB/sec [Average]
[info]   (min, avg, max) = (1664.349, 1874.306, 2023.618), stdev = 179.815
[info]   CI (99.9%): [1181.904, 2566.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40426.731 ±(99.9%) 14851.245 B/op [Average]
[info]   (min, avg, max) = (35799.827, 40426.731, 43780.078), stdev = 3856.821
[info]   CI (99.9%): [25575.486, 55277.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.425 ±(99.9%) 1.973 B/op [Average]
[info]   (min, avg, max) = (1.795, 2.425, 3.134), stdev = 0.512
[info]   CI (99.9%): [0.452, 4.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 50.30% complete, ETA 00:34:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4978.293 ops/s
[info] # Warmup Iteration   2: 21215.517 ops/s
[info] # Warmup Iteration   3: 21823.369 ops/s
[info] Iteration   1: 21249.298 ops/s
[info]                  ·gc.alloc.rate:                   1055.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              78173.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73559.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21909.547 ops/s
[info]                  ·gc.alloc.rate:                   1088.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95244.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 21063.140 ops/s
[info]                  ·gc.alloc.rate:                   1046.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              78181.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74535.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.666 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21504.816 ops/s
[info]                  ·gc.alloc.rate:                   1068.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73244.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 21407.843 ops/s
[info]                  ·gc.alloc.rate:                   1063.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73771.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   21426.929 ±(99.9%) 1222.610 ops/s [Average]
[info]   (min, avg, max) = (21063.140, 21426.929, 21909.547), stdev = 317.508
[info]   CI (99.9%): [20204.318, 22649.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1064.410 ±(99.9%) 60.789 MB/sec [Average]
[info]   (min, avg, max) = (1046.410, 1064.410, 1088.473), stdev = 15.787
[info]   CI (99.9%): [1003.621, 1125.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78175.197 ±(99.9%) 29.106 B/op [Average]
[info]   (min, avg, max) = (78168.020, 78175.197, 78184.020), stdev = 7.559
[info]   CI (99.9%): [78146.091, 78204.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1064.272 ±(99.9%) 563.565 MB/sec [Average]
[info]   (min, avg, max) = (993.223, 1064.272, 1325.990), stdev = 146.356
[info]   CI (99.9%): [500.707, 1627.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   78071.154 ±(99.9%) 37012.608 B/op [Average]
[info]   (min, avg, max) = (73244.325, 78071.154, 95244.617), stdev = 9612.057
[info]   CI (99.9%): [41058.546, 115083.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.184 ±(99.9%) 6.435 B/op [Average]
[info]   (min, avg, max) = (3.061, 5.184, 7.476), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 11.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 50.61% complete, ETA 00:34:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3430.520 ops/s
[info] # Warmup Iteration   2: 17473.460 ops/s
[info] # Warmup Iteration   3: 18768.255 ops/s
[info] Iteration   1: 19218.352 ops/s
[info]                  ·gc.alloc.rate:                   766.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53511.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19203.131 ops/s
[info]                  ·gc.alloc.rate:                   766.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              62828.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80411.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.412 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19101.960 ops/s
[info]                  ·gc.alloc.rate:                   762.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              62832.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53949.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.860 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18607.646 ops/s
[info]                  ·gc.alloc.rate:                   742.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              62823.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55524.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18672.280 ops/s
[info]                  ·gc.alloc.rate:               745.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          62800.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55468.924 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18960.674 ±(99.9%) 1143.818 ops/s [Average]
[info]   (min, avg, max) = (18607.646, 18960.674, 19218.352), stdev = 297.046
[info]   CI (99.9%): [17816.856, 20104.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   756.848 ±(99.9%) 45.784 MB/sec [Average]
[info]   (min, avg, max) = (742.842, 756.848, 766.934), stdev = 11.890
[info]   CI (99.9%): [711.063, 802.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   62816.946 ±(99.9%) 60.572 B/op [Average]
[info]   (min, avg, max) = (62800.022, 62816.946, 62832.024), stdev = 15.730
[info]   CI (99.9%): [62756.374, 62877.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   720.852 ±(99.9%) 560.593 MB/sec [Average]
[info]   (min, avg, max) = (653.501, 720.852, 981.263), stdev = 145.584
[info]   CI (99.9%): [160.259, 1281.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   59773.249 ±(99.9%) 44560.374 B/op [Average]
[info]   (min, avg, max) = (53511.578, 59773.249, 80411.935), stdev = 11572.188
[info]   CI (99.9%): [15212.875, 104333.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.468 ±(99.9%) 3.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.468, 2.192), stdev = 0.965
[info]   CI (99.9%): [≈ 0, 4.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38.311 ±(99.9%) 304.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.311, 179.522), stdev = 78.980
[info]   CI (99.9%): [≈ 0, 342.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 50.91% complete, ETA 00:34:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166613.549 ops/s
[info] # Warmup Iteration   2: 175545.292 ops/s
[info] # Warmup Iteration   3: 176290.480 ops/s
[info] Iteration   1: 174022.023 ops/s
[info]                  ·gc.alloc.rate:                   452.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2313.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.565 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 177278.726 ops/s
[info]                  ·gc.alloc.rate:                   461.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5914.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 174209.827 ops/s
[info]                  ·gc.alloc.rate:               453.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3003.119 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 171623.641 ops/s
[info]                  ·gc.alloc.rate:                   446.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6096.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 174240.205 ops/s
[info]                  ·gc.alloc.rate:               453.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3002.602 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   174274.884 ±(99.9%) 7730.480 ops/s [Average]
[info]   (min, avg, max) = (171623.641, 174274.884, 177278.726), stdev = 2007.581
[info]   CI (99.9%): [166544.405, 182005.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   453.626 ±(99.9%) 20.258 MB/sec [Average]
[info]   (min, avg, max) = (446.714, 453.626, 461.526), stdev = 5.261
[info]   CI (99.9%): [433.368, 473.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.003, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.406 ±(99.9%) 766.141 MB/sec [Average]
[info]   (min, avg, max) = (255.819, 450.406, 666.380), stdev = 198.964
[info]   CI (99.9%): [≈ 0, 1216.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4066.001 ±(99.9%) 6907.330 B/op [Average]
[info]   (min, avg, max) = (2313.487, 4066.001, 6096.727), stdev = 1793.812
[info]   CI (99.9%): [≈ 0, 10973.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.339 ±(99.9%) 2.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 1.572), stdev = 0.690
[info]   CI (99.9%): [≈ 0, 2.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.018 ±(99.9%) 23.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.018, 13.954), stdev = 6.120
[info]   CI (99.9%): [≈ 0, 26.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 51.21% complete, ETA 00:34:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2767.661 ops/s
[info] # Warmup Iteration   2: 14557.993 ops/s
[info] # Warmup Iteration   3: 15310.121 ops/s
[info] Iteration   1: 15371.106 ops/s
[info]                  ·gc.alloc.rate:                   1154.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100663.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15502.869 ops/s
[info]                  ·gc.alloc.rate:                   1163.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              118149.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133557.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.566 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15869.490 ops/s
[info]                  ·gc.alloc.rate:                   1191.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98337.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15943.975 ops/s
[info]                  ·gc.alloc.rate:                   1196.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              118136.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131137.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15752.749 ops/s
[info]                  ·gc.alloc.rate:                   1182.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              118137.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100019.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15688.038 ±(99.9%) 937.988 ops/s [Average]
[info]   (min, avg, max) = (15371.106, 15688.038, 15943.975), stdev = 243.593
[info]   CI (99.9%): [14750.050, 16626.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1177.800 ±(99.9%) 70.444 MB/sec [Average]
[info]   (min, avg, max) = (1154.036, 1177.800, 1196.919), stdev = 18.294
[info]   CI (99.9%): [1107.356, 1248.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118142.208 ±(99.9%) 30.927 B/op [Average]
[info]   (min, avg, max) = (118136.027, 118142.208, 118152.030), stdev = 8.032
[info]   CI (99.9%): [118111.281, 118173.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1124.123 ±(99.9%) 696.701 MB/sec [Average]
[info]   (min, avg, max) = (983.217, 1124.123, 1328.648), stdev = 180.931
[info]   CI (99.9%): [427.421, 1820.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   112742.982 ±(99.9%) 69068.666 B/op [Average]
[info]   (min, avg, max) = (98337.032, 112742.982, 133557.178), stdev = 17936.913
[info]   CI (99.9%): [43674.316, 181811.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.703 ±(99.9%) 10.717 B/op [Average]
[info]   (min, avg, max) = (4.109, 6.703, 10.566), stdev = 2.783
[info]   CI (99.9%): [≈ 0, 17.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 51.52% complete, ETA 00:34:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63068.093 ops/s
[info] # Warmup Iteration   2: 79486.203 ops/s
[info] # Warmup Iteration   3: 82042.212 ops/s
[info] Iteration   1: 81587.274 ops/s
[info]                  ·gc.alloc.rate:                   1611.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32015.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 81566.022 ops/s
[info]                  ·gc.alloc.rate:                   1611.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32202.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81166.626 ops/s
[info]                  ·gc.alloc.rate:                   1603.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32536.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 80597.875 ops/s
[info]                  ·gc.alloc.rate:                   1592.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32907.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 81246.434 ops/s
[info]                  ·gc.alloc.rate:                   1605.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26194.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.823 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   81232.846 ±(99.9%) 1545.523 ops/s [Average]
[info]   (min, avg, max) = (80597.875, 81232.846, 81587.274), stdev = 401.367
[info]   CI (99.9%): [79687.323, 82778.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1605.072 ±(99.9%) 30.423 MB/sec [Average]
[info]   (min, avg, max) = (1592.534, 1605.072, 1611.983), stdev = 7.901
[info]   CI (99.9%): [1574.649, 1635.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   31096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31096.005, 31096.005, 31096.006), stdev = 0.001
[info]   CI (99.9%): [31096.005, 31096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.884 ±(99.9%) 553.552 MB/sec [Average]
[info]   (min, avg, max) = (1352.306, 1608.884, 1685.324), stdev = 143.756
[info]   CI (99.9%): [1055.332, 2162.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31171.394 ±(99.9%) 10793.728 B/op [Average]
[info]   (min, avg, max) = (26194.077, 31171.394, 32907.826), stdev = 2803.097
[info]   CI (99.9%): [20377.666, 41965.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.936 ±(99.9%) 2.777 B/op [Average]
[info]   (min, avg, max) = (0.807, 1.936, 2.823), stdev = 0.721
[info]   CI (99.9%): [≈ 0, 4.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 51.82% complete, ETA 00:33:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83137.922 ops/s
[info] # Warmup Iteration   2: 127826.625 ops/s
[info] # Warmup Iteration   3: 127606.316 ops/s
[info] Iteration   1: 128860.467 ops/s
[info]                  ·gc.alloc.rate:                   1361.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16043.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.508 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 126671.916 ops/s
[info]                  ·gc.alloc.rate:                   1338.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16412.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.069 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 128789.343 ops/s
[info]                  ·gc.alloc.rate:                   1360.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16248.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 127740.274 ops/s
[info]                  ·gc.alloc.rate:                   1349.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16471.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 126468.424 ops/s
[info]                  ·gc.alloc.rate:                   1336.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16711.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   127706.085 ±(99.9%) 4351.622 ops/s [Average]
[info]   (min, avg, max) = (126468.424, 127706.085, 128860.467), stdev = 1130.102
[info]   CI (99.9%): [123354.463, 132057.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1349.136 ±(99.9%) 45.215 MB/sec [Average]
[info]   (min, avg, max) = (1336.330, 1349.136, 1361.106), stdev = 11.742
[info]   CI (99.9%): [1303.921, 1394.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16624.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16624.003, 16624.003, 16624.004), stdev = 0.001
[info]   CI (99.9%): [16624.003, 16624.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1329.019 ±(99.9%) 45.769 MB/sec [Average]
[info]   (min, avg, max) = (1313.603, 1329.019, 1343.358), stdev = 11.886
[info]   CI (99.9%): [1283.250, 1374.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16377.617 ±(99.9%) 961.813 B/op [Average]
[info]   (min, avg, max) = (16043.821, 16377.617, 16711.431), stdev = 249.780
[info]   CI (99.9%): [15415.804, 17339.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.977 ±(99.9%) 2.488 B/op [Average]
[info]   (min, avg, max) = (0.508, 0.977, 2.069), stdev = 0.646
[info]   CI (99.9%): [≈ 0, 3.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 52.12% complete, ETA 00:33:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 394935.102 ops/s
[info] # Warmup Iteration   2: 420694.888 ops/s
[info] # Warmup Iteration   3: 440748.467 ops/s
[info] Iteration   1: 441636.070 ops/s
[info]                  ·gc.alloc.rate:                   489.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2093.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 441229.850 ops/s
[info]                  ·gc.alloc.rate:               488.951 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1183.301 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 435107.453 ops/s
[info]                  ·gc.alloc.rate:                   482.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2399.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 440290.017 ops/s
[info]                  ·gc.alloc.rate:               488.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1185.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 440153.298 ops/s
[info]                  ·gc.alloc.rate:                   487.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2372.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   439683.338 ±(99.9%) 10139.066 ops/s [Average]
[info]   (min, avg, max) = (435107.453, 439683.338, 441636.070), stdev = 2633.083
[info]   CI (99.9%): [429544.271, 449822.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   487.283 ±(99.9%) 11.270 MB/sec [Average]
[info]   (min, avg, max) = (482.171, 487.283, 489.388), stdev = 2.927
[info]   CI (99.9%): [476.013, 498.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.654 ±(99.9%) 657.246 MB/sec [Average]
[info]   (min, avg, max) = (331.752, 515.654, 663.656), stdev = 170.685
[info]   CI (99.9%): [≈ 0, 1172.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1847.025 ±(99.9%) 2373.898 B/op [Average]
[info]   (min, avg, max) = (1183.301, 1847.025, 2399.813), stdev = 616.494
[info]   CI (99.9%): [≈ 0, 4220.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.385 ±(99.9%) 3.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.782), stdev = 0.781
[info]   CI (99.9%): [≈ 0, 3.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.375 ±(99.9%) 10.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.375, 6.350), stdev = 2.784
[info]   CI (99.9%): [≈ 0, 12.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 52.42% complete, ETA 00:33:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472365.840 ops/s
[info] # Warmup Iteration   2: 510307.682 ops/s
[info] # Warmup Iteration   3: 528878.241 ops/s
[info] Iteration   1: 528582.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 527113.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 527545.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 526531.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 526143.706 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   527183.401 ±(99.9%) 3653.323 ops/s [Average]
[info]   (min, avg, max) = (526143.706, 527183.401, 528582.596), stdev = 948.756
[info]   CI (99.9%): [523530.077, 530836.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 52.73% complete, ETA 00:33:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82994.130 ops/s
[info] # Warmup Iteration   2: 109771.294 ops/s
[info] # Warmup Iteration   3: 108315.544 ops/s
[info] Iteration   1: 108951.154 ops/s
[info]                  ·gc.alloc.rate:                   1557.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23882.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.601 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 109851.159 ops/s
[info]                  ·gc.alloc.rate:                   1570.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23839.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.789 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 110390.631 ops/s
[info]                  ·gc.alloc.rate:                   1578.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19088.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.890 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 109567.624 ops/s
[info]                  ·gc.alloc.rate:                   1567.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24151.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.897 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 108578.469 ops/s
[info]                  ·gc.alloc.rate:                   1552.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24476.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   109467.807 ±(99.9%) 2767.631 ops/s [Average]
[info]   (min, avg, max) = (108578.469, 109467.807, 110390.631), stdev = 718.745
[info]   CI (99.9%): [106700.176, 112235.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1565.448 ±(99.9%) 40.180 MB/sec [Average]
[info]   (min, avg, max) = (1552.644, 1565.448, 1578.981), stdev = 10.435
[info]   CI (99.9%): [1525.268, 1605.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   22504.005 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (22504.004, 22504.005, 22504.010), stdev = 0.003
[info]   CI (99.9%): [22503.994, 22504.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1605.406 ±(99.9%) 575.293 MB/sec [Average]
[info]   (min, avg, max) = (1339.334, 1605.406, 1688.744), stdev = 149.402
[info]   CI (99.9%): [1030.114, 2180.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23087.657 ±(99.9%) 8664.081 B/op [Average]
[info]   (min, avg, max) = (19088.501, 23087.657, 24476.654), stdev = 2250.034
[info]   CI (99.9%): [14423.576, 31751.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.077 ±(99.9%) 1.741 B/op [Average]
[info]   (min, avg, max) = (0.601, 1.077, 1.789), stdev = 0.452
[info]   CI (99.9%): [≈ 0, 2.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 53.03% complete, ETA 00:33:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119122.881 ops/s
[info] # Warmup Iteration   2: 149359.087 ops/s
[info] # Warmup Iteration   3: 148591.590 ops/s
[info] Iteration   1: 150697.188 ops/s
[info]                  ·gc.alloc.rate:                   2598.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2352.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24571.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.870 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 150169.988 ops/s
[info]                  ·gc.alloc.rate:                   2589.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28329.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.527 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 147721.711 ops/s
[info]                  ·gc.alloc.rate:                   2547.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28907.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.887 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 149465.525 ops/s
[info]                  ·gc.alloc.rate:                   2577.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25040.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.658 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 150680.840 ops/s
[info]                  ·gc.alloc.rate:                   2598.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28435.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.522 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   149747.050 ±(99.9%) 4768.761 ops/s [Average]
[info]   (min, avg, max) = (147721.711, 149747.050, 150697.188), stdev = 1238.432
[info]   CI (99.9%): [144978.290, 154515.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2582.088 ±(99.9%) 82.147 MB/sec [Average]
[info]   (min, avg, max) = (2547.204, 2582.088, 2598.487), stdev = 21.333
[info]   CI (99.9%): [2499.941, 2664.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27136.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27136.003, 27136.003, 27136.003), stdev = 0.001
[info]   CI (99.9%): [27136.003, 27136.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2574.071 ±(99.9%) 734.356 MB/sec [Average]
[info]   (min, avg, max) = (2352.889, 2574.071, 2722.484), stdev = 190.710
[info]   CI (99.9%): [1839.714, 3308.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27056.698 ±(99.9%) 7982.210 B/op [Average]
[info]   (min, avg, max) = (24571.217, 27056.698, 28907.096), stdev = 2072.955
[info]   CI (99.9%): [19074.488, 35038.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.093 ±(99.9%) 1.557 B/op [Average]
[info]   (min, avg, max) = (0.658, 1.093, 1.527), stdev = 0.404
[info]   CI (99.9%): [≈ 0, 2.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 53.33% complete, ETA 00:32:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230347.845 ops/s
[info] # Warmup Iteration   2: 358545.845 ops/s
[info] # Warmup Iteration   3: 357684.072 ops/s
[info] Iteration   1: 359122.497 ops/s
[info]                  ·gc.alloc.rate:               366.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1121.060 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 359401.342 ops/s
[info]                  ·gc.alloc.rate:               367.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1120.196 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 344406.668 ops/s
[info]                  ·gc.alloc.rate:                   351.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1493.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 359578.098 ops/s
[info]                  ·gc.alloc.rate:                   367.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1430.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 359107.825 ops/s
[info]                  ·gc.alloc.rate:                   367.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2861.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   356323.286 ±(99.9%) 25662.689 ops/s [Average]
[info]   (min, avg, max) = (344406.668, 356323.286, 359578.098), stdev = 6664.519
[info]   CI (99.9%): [330660.597, 381985.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   364.104 ±(99.9%) 26.254 MB/sec [Average]
[info]   (min, avg, max) = (351.912, 364.104, 367.424), stdev = 6.818
[info]   CI (99.9%): [337.850, 390.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.647 ±(99.9%) 637.736 MB/sec [Average]
[info]   (min, avg, max) = (255.819, 363.647, 653.036), stdev = 165.618
[info]   CI (99.9%): [≈ 0, 1001.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1605.124 ±(99.9%) 2783.494 B/op [Average]
[info]   (min, avg, max) = (1120.196, 1605.124, 2861.109), stdev = 722.865
[info]   CI (99.9%): [≈ 0, 4388.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.452 ±(99.9%) 3.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.198), stdev = 0.976
[info]   CI (99.9%): [≈ 0, 4.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.064 ±(99.9%) 17.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.064, 10.044), stdev = 4.462
[info]   CI (99.9%): [≈ 0, 19.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 53.64% complete, ETA 00:32:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 843454.579 ops/s
[info] # Warmup Iteration   2: 894723.267 ops/s
[info] # Warmup Iteration   3: 873822.217 ops/s
[info] Iteration   1: 895728.248 ops/s
[info]                  ·gc.alloc.rate:               309.600 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449.454 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 873645.930 ops/s
[info]                  ·gc.alloc.rate:                   301.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     921.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 895808.003 ops/s
[info]                  ·gc.alloc.rate:                   309.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     584.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.773 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 898041.843 ops/s
[info]                  ·gc.alloc.rate:      310.445 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 897677.098 ops/s
[info]                  ·gc.alloc.rate:                   310.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     583.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   892180.224 ±(99.9%) 40102.358 ops/s [Average]
[info]   (min, avg, max) = (873645.930, 892180.224, 898041.843), stdev = 10414.455
[info]   CI (99.9%): [852077.867, 932282.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   308.397 ±(99.9%) 13.898 MB/sec [Average]
[info]   (min, avg, max) = (301.976, 308.397, 310.445), stdev = 3.609
[info]   CI (99.9%): [294.499, 322.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.589 ±(99.9%) 715.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.589, 511.603), stdev = 185.728
[info]   CI (99.9%): [≈ 0, 1001.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   507.819 ±(99.9%) 1283.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 507.819, 921.638), stdev = 333.219
[info]   CI (99.9%): [≈ 0, 1790.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.340 ±(99.9%) 2.670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.340, 1.578), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 3.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.597 ±(99.9%) 4.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.597, 2.773), stdev = 1.218
[info]   CI (99.9%): [≈ 0, 5.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 53.94% complete, ETA 00:32:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45937.991 ops/s
[info] # Warmup Iteration   2: 77070.743 ops/s
[info] # Warmup Iteration   3: 76074.570 ops/s
[info] Iteration   1: 77551.837 ops/s
[info]                  ·gc.alloc.rate:                   3326.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68287.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.957 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 77309.934 ops/s
[info]                  ·gc.alloc.rate:                   3316.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              67513.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68940.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.814 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 77672.754 ops/s
[info]                  ·gc.alloc.rate:                   3332.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61937.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.952 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 75938.479 ops/s
[info]                  ·gc.alloc.rate:                   3257.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70517.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.588 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 77017.269 ops/s
[info]                  ·gc.alloc.rate:                   3304.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69557.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.552 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   77098.054 ±(99.9%) 2676.289 ops/s [Average]
[info]   (min, avg, max) = (75938.479, 77098.054, 77672.754), stdev = 695.024
[info]   CI (99.9%): [74421.765, 79774.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3307.436 ±(99.9%) 114.799 MB/sec [Average]
[info]   (min, avg, max) = (3257.702, 3307.436, 3332.231), stdev = 29.813
[info]   CI (99.9%): [3192.638, 3422.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67512.312 ±(99.9%) 2.636 B/op [Average]
[info]   (min, avg, max) = (67512.006, 67512.312, 67513.536), stdev = 0.685
[info]   CI (99.9%): [67509.676, 67514.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3323.094 ±(99.9%) 575.833 MB/sec [Average]
[info]   (min, avg, max) = (3057.081, 3323.094, 3404.111), stdev = 149.542
[info]   CI (99.9%): [2747.261, 3898.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67848.058 ±(99.9%) 13110.417 B/op [Average]
[info]   (min, avg, max) = (61937.383, 67848.058, 70517.098), stdev = 3404.734
[info]   CI (99.9%): [54737.641, 80958.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.146, 0.187), stdev = 0.025
[info]   CI (99.9%): [0.048, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.973 ±(99.9%) 1.956 B/op [Average]
[info]   (min, avg, max) = (2.552, 2.973, 3.814), stdev = 0.508
[info]   CI (99.9%): [1.016, 4.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 11.000), stdev = 1.225
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 54.24% complete, ETA 00:32:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191745.168 ops/s
[info] # Warmup Iteration   2: 236276.238 ops/s
[info] # Warmup Iteration   3: 237216.004 ops/s
[info] Iteration   1: 238030.984 ops/s
[info]                  ·gc.alloc.rate:                   1823.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13204.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.688 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 239346.758 ops/s
[info]                  ·gc.alloc.rate:                   1833.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11011.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.958 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 238812.746 ops/s
[info]                  ·gc.alloc.rate:                   1829.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13314.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.686 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 238134.467 ops/s
[info]                  ·gc.alloc.rate:                   1824.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11168.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 238988.579 ops/s
[info]                  ·gc.alloc.rate:                   1831.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13392.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.685 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   238662.707 ±(99.9%) 2173.774 ops/s [Average]
[info]   (min, avg, max) = (238030.984, 238662.707, 239346.758), stdev = 564.522
[info]   CI (99.9%): [236488.933, 240836.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1828.436 ±(99.9%) 17.109 MB/sec [Average]
[info]   (min, avg, max) = (1823.510, 1828.436, 1833.793), stdev = 4.443
[info]   CI (99.9%): [1811.327, 1845.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12056.002, 12056.002, 12056.002), stdev = 0.001
[info]   CI (99.9%): [12056.002, 12056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1883.350 ±(99.9%) 708.316 MB/sec [Average]
[info]   (min, avg, max) = (1674.889, 1883.350, 2034.192), stdev = 183.947
[info]   CI (99.9%): [1175.035, 2591.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12418.373 ±(99.9%) 4681.160 B/op [Average]
[info]   (min, avg, max) = (11011.316, 12418.373, 13392.554), stdev = 1215.682
[info]   CI (99.9%): [7737.213, 17099.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.686 ±(99.9%) 0.743 B/op [Average]
[info]   (min, avg, max) = (0.413, 0.686, 0.958), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 1.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 54.55% complete, ETA 00:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 884108.923 ops/s
[info] # Warmup Iteration   2: 1211315.282 ops/s
[info] # Warmup Iteration   3: 1200160.165 ops/s
[info] Iteration   1: 1243897.532 ops/s
[info]                  ·gc.alloc.rate:                   815.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     827.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1235917.020 ops/s
[info]                  ·gc.alloc.rate:                   810.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1250.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1239467.506 ops/s
[info]                  ·gc.alloc.rate:                   812.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1243285.399 ops/s
[info]                  ·gc.alloc.rate:                   815.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1250.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1234153.969 ops/s
[info]                  ·gc.alloc.rate:                   809.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1239344.285 ±(99.9%) 16669.903 ops/s [Average]
[info]   (min, avg, max) = (1234153.969, 1239344.285, 1243897.532), stdev = 4329.121
[info]   CI (99.9%): [1222674.383, 1256014.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   812.684 ±(99.9%) 10.887 MB/sec [Average]
[info]   (min, avg, max) = (809.295, 812.684, 815.626), stdev = 2.827
[info]   CI (99.9%): [801.796, 823.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.432 ±(99.9%) 691.248 MB/sec [Average]
[info]   (min, avg, max) = (654.087, 788.432, 988.214), stdev = 179.515
[info]   CI (99.9%): [97.185, 1479.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1001.179 ±(99.9%) 877.009 B/op [Average]
[info]   (min, avg, max) = (827.607, 1001.179, 1250.890), stdev = 227.756
[info]   CI (99.9%): [124.170, 1878.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.085, 0.132), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 54.85% complete, ETA 00:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1156254.713 ops/s
[info] # Warmup Iteration   2: 1237494.304 ops/s
[info] # Warmup Iteration   3: 1244360.822 ops/s
[info] Iteration   1: 1264096.473 ops/s
[info]                  ·gc.alloc.rate:                   520.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     413.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1258862.398 ops/s
[info]                  ·gc.alloc.rate:                   518.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     828.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1228669.802 ops/s
[info]                  ·gc.alloc.rate:                   505.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     424.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1228101.956 ops/s
[info]                  ·gc.alloc.rate:                   505.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1249846.101 ops/s
[info]                  ·gc.alloc.rate:               514.708 MB/sec
[info]                  ·gc.alloc.rate.norm:          648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 417.716 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1245915.346 ±(99.9%) 64673.511 ops/s [Average]
[info]   (min, avg, max) = (1228101.956, 1245915.346, 1264096.473), stdev = 16795.505
[info]   CI (99.9%): [1181241.835, 1310588.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   513.028 ±(99.9%) 26.633 MB/sec [Average]
[info]   (min, avg, max) = (505.693, 513.028, 520.489), stdev = 6.917
[info]   CI (99.9%): [486.395, 539.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   464.073 ±(99.9%) 698.786 MB/sec [Average]
[info]   (min, avg, max) = (331.078, 464.073, 662.877), stdev = 181.473
[info]   CI (99.9%): [≈ 0, 1162.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   586.580 ±(99.9%) 887.994 B/op [Average]
[info]   (min, avg, max) = (413.040, 586.580, 849.389), stdev = 230.609
[info]   CI (99.9%): [≈ 0, 1474.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.761), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 3.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.476 ±(99.9%) 3.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.476, 2.193), stdev = 0.960
[info]   CI (99.9%): [≈ 0, 4.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.15% complete, ETA 00:31:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1264891.520 ops/s
[info] # Warmup Iteration   2: 1372463.994 ops/s
[info] # Warmup Iteration   3: 1373158.090 ops/s
[info] Iteration   1: 1373235.899 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1368121.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1377424.145 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1371185.724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1372798.863 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1372553.270 ±(99.9%) 13024.135 ops/s [Average]
[info]   (min, avg, max) = (1368121.720, 1372553.270, 1377424.145), stdev = 3382.327
[info]   CI (99.9%): [1359529.135, 1385577.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 55.45% complete, ETA 00:31:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23542.160 ops/s
[info] # Warmup Iteration   2: 33789.030 ops/s
[info] # Warmup Iteration   3: 33970.420 ops/s
[info] Iteration   1: 33945.291 ops/s
[info]                  ·gc.alloc.rate:                   1717.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              79641.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76713.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.825 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34111.995 ops/s
[info]                  ·gc.alloc.rate:                   1725.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76893.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.762 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33952.573 ops/s
[info]                  ·gc.alloc.rate:                   1718.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93281.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.895 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33937.376 ops/s
[info]                  ·gc.alloc.rate:                   1717.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78155.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.965 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33979.679 ops/s
[info]                  ·gc.alloc.rate:                   1719.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78303.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.857 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   33985.383 ±(99.9%) 279.349 ops/s [Average]
[info]   (min, avg, max) = (33937.376, 33985.383, 34111.995), stdev = 72.546
[info]   CI (99.9%): [33706.034, 34264.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1719.675 ±(99.9%) 13.956 MB/sec [Average]
[info]   (min, avg, max) = (1717.223, 1719.675, 1725.997), stdev = 3.624
[info]   CI (99.9%): [1705.720, 1733.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79633.830 ±(99.9%) 15.649 B/op [Average]
[info]   (min, avg, max) = (79632.013, 79633.830, 79641.101), stdev = 4.064
[info]   CI (99.9%): [79618.181, 79649.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1741.965 ±(99.9%) 584.991 MB/sec [Average]
[info]   (min, avg, max) = (1654.609, 1741.965, 2012.492), stdev = 151.920
[info]   CI (99.9%): [1156.974, 2326.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80669.444 ±(99.9%) 27288.691 B/op [Average]
[info]   (min, avg, max) = (76713.774, 80669.444, 93281.548), stdev = 7086.786
[info]   CI (99.9%): [53380.754, 107958.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.661 ±(99.9%) 7.117 B/op [Average]
[info]   (min, avg, max) = (0.965, 3.661, 5.762), stdev = 1.848
[info]   CI (99.9%): [≈ 0, 10.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 55.76% complete, ETA 00:31:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14867.310 ops/s
[info] # Warmup Iteration   2: 18600.785 ops/s
[info] # Warmup Iteration   3: 18666.089 ops/s
[info] Iteration   1: 18540.871 ops/s
[info]                  ·gc.alloc.rate:                   1945.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              165168.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141864.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18580.197 ops/s
[info]                  ·gc.alloc.rate:                   1950.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170756.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.105 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 18706.558 ops/s
[info]                  ·gc.alloc.rate:                   1963.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170391.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.254 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18298.485 ops/s
[info]                  ·gc.alloc.rate:                   1920.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              165161.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174791.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.742 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18619.518 ops/s
[info]                  ·gc.alloc.rate:                   1954.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              165160.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143402.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.797 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   18549.126 ±(99.9%) 589.017 ops/s [Average]
[info]   (min, avg, max) = (18298.485, 18549.126, 18706.558), stdev = 152.966
[info]   CI (99.9%): [17960.108, 19138.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1946.830 ±(99.9%) 62.104 MB/sec [Average]
[info]   (min, avg, max) = (1920.462, 1946.830, 1963.541), stdev = 16.128
[info]   CI (99.9%): [1884.727, 2008.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165168.298 ±(99.9%) 29.549 B/op [Average]
[info]   (min, avg, max) = (165160.023, 165168.298, 165176.033), stdev = 7.674
[info]   CI (99.9%): [165138.750, 165197.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888.411 ±(99.9%) 719.794 MB/sec [Average]
[info]   (min, avg, max) = (1671.258, 1888.411, 2032.436), stdev = 186.928
[info]   CI (99.9%): [1168.617, 2608.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   160241.269 ±(99.9%) 62285.471 B/op [Average]
[info]   (min, avg, max) = (141864.502, 160241.269, 174791.312), stdev = 16175.339
[info]   CI (99.9%): [97955.798, 222526.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.840 ±(99.9%) 14.501 B/op [Average]
[info]   (min, avg, max) = (5.254, 8.840, 14.105), stdev = 3.766
[info]   CI (99.9%): [≈ 0, 23.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 56.06% complete, ETA 00:30:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65419.168 ops/s
[info] # Warmup Iteration   2: 83871.995 ops/s
[info] # Warmup Iteration   3: 96285.370 ops/s
[info] Iteration   1: 94222.683 ops/s
[info]                  ·gc.alloc.rate:                   1236.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21903.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 96349.725 ops/s
[info]                  ·gc.alloc.rate:                   1264.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21532.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.360 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 96342.780 ops/s
[info]                  ·gc.alloc.rate:                   1264.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16240.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 93442.815 ops/s
[info]                  ·gc.alloc.rate:                   1226.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22439.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.052 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 92872.539 ops/s
[info]                  ·gc.alloc.rate:                   1218.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22700.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.411 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   94646.108 ±(99.9%) 6254.707 ops/s [Average]
[info]   (min, avg, max) = (92872.539, 94646.108, 96349.725), stdev = 1624.327
[info]   CI (99.9%): [88391.402, 100900.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1242.243 ±(99.9%) 82.182 MB/sec [Average]
[info]   (min, avg, max) = (1218.979, 1242.243, 1264.621), stdev = 21.343
[info]   CI (99.9%): [1160.061, 1324.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.005, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1259.160 ±(99.9%) 571.864 MB/sec [Average]
[info]   (min, avg, max) = (994.244, 1259.160, 1339.626), stdev = 148.511
[info]   CI (99.9%): [687.296, 1831.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20963.322 ±(99.9%) 10315.765 B/op [Average]
[info]   (min, avg, max) = (16240.670, 20963.322, 22700.408), stdev = 2678.971
[info]   CI (99.9%): [10647.557, 31279.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.108 ±(99.9%) 1.117 B/op [Average]
[info]   (min, avg, max) = (0.695, 1.108, 1.411), stdev = 0.290
[info]   CI (99.9%): [≈ 0, 2.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 56.36% complete, ETA 00:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 218383.706 ops/s
[info] # Warmup Iteration   2: 231325.520 ops/s
[info] # Warmup Iteration   3: 233369.978 ops/s
[info] Iteration   1: 234332.071 ops/s
[info]                  ·gc.alloc.rate:                   762.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4464.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 234520.073 ops/s
[info]                  ·gc.alloc.rate:                   762.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4461.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 233790.609 ops/s
[info]                  ·gc.alloc.rate:                   760.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6717.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 233958.827 ops/s
[info]                  ·gc.alloc.rate:               761.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4485.633 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 234542.626 ops/s
[info]                  ·gc.alloc.rate:                   763.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4483.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   234228.841 ±(99.9%) 1304.238 ops/s [Average]
[info]   (min, avg, max) = (233790.609, 234228.841, 234542.626), stdev = 338.706
[info]   CI (99.9%): [232924.604, 235533.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   762.050 ±(99.9%) 4.390 MB/sec [Average]
[info]   (min, avg, max) = (760.609, 762.050, 763.199), stdev = 1.140
[info]   CI (99.9%): [757.660, 766.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.002, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.527 ±(99.9%) 571.304 MB/sec [Average]
[info]   (min, avg, max) = (664.773, 732.527, 997.919), stdev = 148.366
[info]   CI (99.9%): [161.223, 1303.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4922.499 ±(99.9%) 3863.977 B/op [Average]
[info]   (min, avg, max) = (4461.360, 4922.499, 6717.444), stdev = 1003.463
[info]   CI (99.9%): [1058.522, 8786.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.335 ±(99.9%) 0.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 0.559), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 56.67% complete, ETA 00:30:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10228.755 ops/s
[info] # Warmup Iteration   2: 16946.460 ops/s
[info] # Warmup Iteration   3: 17056.999 ops/s
[info] Iteration   1: 17066.143 ops/s
[info]                  ·gc.alloc.rate:                   2198.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2327.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214586.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.517 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17025.669 ops/s
[info]                  ·gc.alloc.rate:                   2192.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              202705.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2347.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217011.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.621 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17168.928 ops/s
[info]                  ·gc.alloc.rate:                   2211.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185488.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.724 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17053.503 ops/s
[info]                  ·gc.alloc.rate:                   2196.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218776.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.526 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 17124.431 ops/s
[info]                  ·gc.alloc.rate:                   2205.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              202704.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187138.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.652 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   17087.735 ±(99.9%) 223.115 ops/s [Average]
[info]   (min, avg, max) = (17025.669, 17087.735, 17168.928), stdev = 57.942
[info]   CI (99.9%): [16864.620, 17310.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2200.980 ±(99.9%) 28.863 MB/sec [Average]
[info]   (min, avg, max) = (2192.943, 2200.980, 2211.532), stdev = 7.496
[info]   CI (99.9%): [2172.117, 2229.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202704.272 ±(99.9%) 2.103 B/op [Average]
[info]   (min, avg, max) = (202704.025, 202704.272, 202705.249), stdev = 0.546
[info]   CI (99.9%): [202702.170, 202706.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2221.098 ±(99.9%) 674.624 MB/sec [Average]
[info]   (min, avg, max) = (2023.705, 2221.098, 2370.773), stdev = 175.198
[info]   CI (99.9%): [1546.473, 2895.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   204600.097 ±(99.9%) 64574.177 B/op [Average]
[info]   (min, avg, max) = (185488.173, 204600.097, 218776.057), stdev = 16769.709
[info]   CI (99.9%): [140025.920, 269174.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.208 ±(99.9%) 9.710 B/op [Average]
[info]   (min, avg, max) = (5.724, 9.208, 11.526), stdev = 2.522
[info]   CI (99.9%): [≈ 0, 18.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 56.97% complete, ETA 00:30:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15435.350 ops/s
[info] # Warmup Iteration   2: 20434.957 ops/s
[info] # Warmup Iteration   3: 20385.346 ops/s
[info] Iteration   1: 20745.331 ops/s
[info]                  ·gc.alloc.rate:                   1679.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              127382.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125980.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.317 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20720.596 ops/s
[info]                  ·gc.alloc.rate:                   1677.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126891.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20453.285 ops/s
[info]                  ·gc.alloc.rate:                   1655.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              127376.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129214.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.203 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 20612.938 ops/s
[info]                  ·gc.alloc.rate:                   1668.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128776.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.536 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 20862.118 ops/s
[info]                  ·gc.alloc.rate:                   1688.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127591.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   20678.854 ±(99.9%) 593.342 ops/s [Average]
[info]   (min, avg, max) = (20453.285, 20678.854, 20862.118), stdev = 154.089
[info]   CI (99.9%): [20085.512, 21272.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1673.796 ±(99.9%) 47.306 MB/sec [Average]
[info]   (min, avg, max) = (1655.928, 1673.796, 1688.183), stdev = 12.285
[info]   CI (99.9%): [1626.490, 1721.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.898 ±(99.9%) 69.769 B/op [Average]
[info]   (min, avg, max) = (127352.021, 127370.898, 127392.021), stdev = 18.119
[info]   CI (99.9%): [127301.129, 127440.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.930 ±(99.9%) 47.131 MB/sec [Average]
[info]   (min, avg, max) = (1661.067, 1677.930, 1691.364), stdev = 12.240
[info]   CI (99.9%): [1630.800, 1725.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127691.056 ±(99.9%) 5120.312 B/op [Average]
[info]   (min, avg, max) = (125980.721, 127691.056, 129214.004), stdev = 1329.729
[info]   CI (99.9%): [122570.743, 132811.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.593 ±(99.9%) 10.824 B/op [Average]
[info]   (min, avg, max) = (3.203, 7.593, 9.536), stdev = 2.811
[info]   CI (99.9%): [≈ 0, 18.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 57.27% complete, ETA 00:30:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63989.994 ops/s
[info] # Warmup Iteration   2: 96043.453 ops/s
[info] # Warmup Iteration   3: 98003.339 ops/s
[info] Iteration   1: 95440.493 ops/s
[info]                  ·gc.alloc.rate:                   1307.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21617.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 98054.400 ops/s
[info]                  ·gc.alloc.rate:                   1343.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21181.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.671 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 96643.424 ops/s
[info]                  ·gc.alloc.rate:                   1323.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21630.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 98102.659 ops/s
[info]                  ·gc.alloc.rate:                   1343.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21426.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 97759.602 ops/s
[info]                  ·gc.alloc.rate:                   1339.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21609.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   97200.115 ±(99.9%) 4417.172 ops/s [Average]
[info]   (min, avg, max) = (95440.493, 97200.115, 98102.659), stdev = 1147.126
[info]   CI (99.9%): [92782.943, 101617.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1331.670 ±(99.9%) 60.186 MB/sec [Average]
[info]   (min, avg, max) = (1307.796, 1331.670, 1343.987), stdev = 15.630
[info]   CI (99.9%): [1271.483, 1391.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21560.004, 21560.005, 21560.005), stdev = 0.001
[info]   CI (99.9%): [21560.004, 21560.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.464 ±(99.9%) 47.725 MB/sec [Average]
[info]   (min, avg, max) = (1311.305, 1327.464, 1342.468), stdev = 12.394
[info]   CI (99.9%): [1279.739, 1375.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21493.063 ±(99.9%) 745.219 B/op [Average]
[info]   (min, avg, max) = (21181.086, 21493.063, 21630.636), stdev = 193.531
[info]   CI (99.9%): [20747.844, 22238.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.011 ±(99.9%) 1.820 B/op [Average]
[info]   (min, avg, max) = (0.334, 1.011, 1.671), stdev = 0.473
[info]   CI (99.9%): [≈ 0, 2.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 57.58% complete, ETA 00:29:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210550.659 ops/s
[info] # Warmup Iteration   2: 229544.646 ops/s
[info] # Warmup Iteration   3: 225451.942 ops/s
[info] Iteration   1: 226602.016 ops/s
[info]                  ·gc.alloc.rate:                   722.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6911.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.867 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 227362.109 ops/s
[info]                  ·gc.alloc.rate:                   724.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4592.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 224113.263 ops/s
[info]                  ·gc.alloc.rate:               714.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4659.298 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 226410.284 ops/s
[info]                  ·gc.alloc.rate:                   721.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4621.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 226176.043 ops/s
[info]                  ·gc.alloc.rate:                   720.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4630.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   226132.743 ±(99.9%) 4672.135 ops/s [Average]
[info]   (min, avg, max) = (224113.263, 226132.743, 227362.109), stdev = 1213.339
[info]   CI (99.9%): [221460.608, 230804.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   720.754 ±(99.9%) 14.944 MB/sec [Average]
[info]   (min, avg, max) = (714.276, 720.754, 724.630), stdev = 3.881
[info]   CI (99.9%): [705.810, 735.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.002, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.537 ±(99.9%) 570.018 MB/sec [Average]
[info]   (min, avg, max) = (663.474, 730.537, 995.339), stdev = 148.032
[info]   CI (99.9%): [160.519, 1300.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5083.187 ±(99.9%) 3937.549 B/op [Average]
[info]   (min, avg, max) = (4592.667, 5083.187, 6911.919), stdev = 1022.569
[info]   CI (99.9%): [1145.638, 9020.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.549 ±(99.9%) 1.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 0.867), stdev = 0.359
[info]   CI (99.9%): [≈ 0, 1.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 57.88% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229539.082 ops/s
[info] # Warmup Iteration   2: 244985.911 ops/s
[info] # Warmup Iteration   3: 250124.123 ops/s
[info] Iteration   1: 252188.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 252684.124 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 252149.531 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 251894.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 252352.024 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   252253.676 ±(99.9%) 1121.125 ops/s [Average]
[info]   (min, avg, max) = (251894.533, 252253.676, 252684.124), stdev = 291.153
[info]   CI (99.9%): [251132.551, 253374.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 58.18% complete, ETA 00:29:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17882.853 ops/s
[info] # Warmup Iteration   2: 25232.533 ops/s
[info] # Warmup Iteration   3: 25699.976 ops/s
[info] Iteration   1: 25887.122 ops/s
[info]                  ·gc.alloc.rate:                   1765.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120846.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.328 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25694.091 ops/s
[info]                  ·gc.alloc.rate:                   1751.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102189.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.925 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25870.519 ops/s
[info]                  ·gc.alloc.rate:                   1764.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102077.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.533 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25953.087 ops/s
[info]                  ·gc.alloc.rate:                   1769.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102236.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.787 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25819.617 ops/s
[info]                  ·gc.alloc.rate:                   1760.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123763.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.807 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   25844.887 ±(99.9%) 372.967 ops/s [Average]
[info]   (min, avg, max) = (25694.091, 25844.887, 25953.087), stdev = 96.858
[info]   CI (99.9%): [25471.920, 26217.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1762.305 ±(99.9%) 25.559 MB/sec [Average]
[info]   (min, avg, max) = (1751.955, 1762.305, 1769.730), stdev = 6.638
[info]   CI (99.9%): [1736.746, 1787.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107312.040 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (107312.017, 107312.040, 107312.094), stdev = 0.034
[info]   CI (99.9%): [107311.907, 107312.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1810.129 ±(99.9%) 702.292 MB/sec [Average]
[info]   (min, avg, max) = (1668.319, 1810.129, 2030.519), stdev = 182.383
[info]   CI (99.9%): [1107.837, 2512.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110222.460 ±(99.9%) 42656.584 B/op [Average]
[info]   (min, avg, max) = (102077.715, 110222.460, 123763.152), stdev = 11077.779
[info]   CI (99.9%): [67565.876, 152879.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.076 ±(99.9%) 9.841 B/op [Average]
[info]   (min, avg, max) = (2.533, 5.076, 8.925), stdev = 2.556
[info]   CI (99.9%): [≈ 0, 14.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 58.48% complete, ETA 00:29:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49000.837 ops/s
[info] # Warmup Iteration   2: 67926.371 ops/s
[info] # Warmup Iteration   3: 67880.911 ops/s
[info] Iteration   1: 69853.348 ops/s
[info]                  ·gc.alloc.rate:                   1570.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29807.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 68034.507 ops/s
[info]                  ·gc.alloc.rate:                   1529.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38478.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.926 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 68866.637 ops/s
[info]                  ·gc.alloc.rate:                   1548.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38239.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.903 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 69341.075 ops/s
[info]                  ·gc.alloc.rate:                   1559.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30510.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.417 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 69375.438 ops/s
[info]                  ·gc.alloc.rate:                   1559.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              35384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38286.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.889 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   69094.201 ±(99.9%) 2647.637 ops/s [Average]
[info]   (min, avg, max) = (68034.507, 69094.201, 69853.348), stdev = 687.583
[info]   CI (99.9%): [66446.564, 71741.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1553.554 ±(99.9%) 59.276 MB/sec [Average]
[info]   (min, avg, max) = (1529.832, 1553.554, 1570.600), stdev = 15.394
[info]   CI (99.9%): [1494.278, 1612.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35384.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35384.006, 35384.006, 35384.007), stdev = 0.001
[info]   CI (99.9%): [35384.006, 35384.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1538.433 ±(99.9%) 721.072 MB/sec [Average]
[info]   (min, avg, max) = (1323.055, 1538.433, 1687.717), stdev = 187.260
[info]   CI (99.9%): [817.361, 2259.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35064.268 ±(99.9%) 17274.155 B/op [Average]
[info]   (min, avg, max) = (29807.084, 35064.268, 38478.298), stdev = 4486.043
[info]   CI (99.9%): [17790.113, 52338.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.615 ±(99.9%) 1.670 B/op [Average]
[info]   (min, avg, max) = (0.938, 1.615, 1.926), stdev = 0.434
[info]   CI (99.9%): [≈ 0, 3.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 58.79% complete, ETA 00:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59816.322 ops/s
[info] # Warmup Iteration   2: 92692.434 ops/s
[info] # Warmup Iteration   3: 94553.053 ops/s
[info] Iteration   1: 93569.455 ops/s
[info]                  ·gc.alloc.rate:                   1165.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21937.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 94655.543 ops/s
[info]                  ·gc.alloc.rate:                   1179.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21808.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 94727.272 ops/s
[info]                  ·gc.alloc.rate:                   1180.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16440.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 94530.015 ops/s
[info]                  ·gc.alloc.rate:                   1177.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22102.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.693 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 94592.182 ops/s
[info]                  ·gc.alloc.rate:                   1178.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16641.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   94414.893 ±(99.9%) 1841.623 ops/s [Average]
[info]   (min, avg, max) = (93569.455, 94414.893, 94727.272), stdev = 478.264
[info]   CI (99.9%): [92573.271, 96256.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1176.372 ±(99.9%) 23.006 MB/sec [Average]
[info]   (min, avg, max) = (1165.795, 1176.372, 1180.244), stdev = 5.975
[info]   CI (99.9%): [1153.366, 1199.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   19608.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19608.005, 19608.005, 19608.005), stdev = 0.001
[info]   CI (99.9%): [19608.004, 19608.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1186.708 ±(99.9%) 675.083 MB/sec [Average]
[info]   (min, avg, max) = (989.579, 1186.708, 1327.762), stdev = 175.317
[info]   CI (99.9%): [511.625, 1861.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19785.947 ±(99.9%) 11417.593 B/op [Average]
[info]   (min, avg, max) = (16440.374, 19785.947, 22102.250), stdev = 2965.113
[info]   CI (99.9%): [8368.354, 31203.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.832 ±(99.9%) 1.515 B/op [Average]
[info]   (min, avg, max) = (0.350, 0.832, 1.384), stdev = 0.393
[info]   CI (99.9%): [≈ 0, 2.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 59.09% complete, ETA 00:28:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92449.176 ops/s
[info] # Warmup Iteration   2: 101939.202 ops/s
[info] # Warmup Iteration   3: 101540.301 ops/s
[info] Iteration   1: 99590.907 ops/s
[info]                  ·gc.alloc.rate:                   1196.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15701.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 102131.921 ops/s
[info]                  ·gc.alloc.rate:                   1227.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20467.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 101200.866 ops/s
[info]                  ·gc.alloc.rate:                   1216.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20755.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 102116.057 ops/s
[info]                  ·gc.alloc.rate:                   1227.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15482.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 102150.232 ops/s
[info]                  ·gc.alloc.rate:                   1227.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              18912.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20710.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   101437.996 ±(99.9%) 4269.072 ops/s [Average]
[info]   (min, avg, max) = (99590.907, 101437.996, 102150.232), stdev = 1108.665
[info]   CI (99.9%): [97168.924, 105707.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1219.056 ±(99.9%) 51.245 MB/sec [Average]
[info]   (min, avg, max) = (1196.786, 1219.056, 1227.546), stdev = 13.308
[info]   CI (99.9%): [1167.811, 1270.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18912.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18912.004, 18912.004, 18912.005), stdev = 0.001
[info]   CI (99.9%): [18912.004, 18912.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1201.164 ±(99.9%) 710.757 MB/sec [Average]
[info]   (min, avg, max) = (993.592, 1201.164, 1344.306), stdev = 184.581
[info]   CI (99.9%): [490.407, 1911.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18623.425 ±(99.9%) 10669.499 B/op [Average]
[info]   (min, avg, max) = (15482.289, 18623.425, 20755.009), stdev = 2770.835
[info]   CI (99.9%): [7953.926, 29292.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.772 ±(99.9%) 1.863 B/op [Average]
[info]   (min, avg, max) = (0.324, 0.772, 1.283), stdev = 0.484
[info]   CI (99.9%): [≈ 0, 2.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 59.39% complete, ETA 00:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26543.493 ops/s
[info] # Warmup Iteration   2: 46827.672 ops/s
[info] # Warmup Iteration   3: 47443.957 ops/s
[info] Iteration   1: 47915.042 ops/s
[info]                  ·gc.alloc.rate:                   2282.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2322.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76261.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.102 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 47972.554 ops/s
[info]                  ·gc.alloc.rate:                   2285.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65887.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.463 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 47787.236 ops/s
[info]                  ·gc.alloc.rate:                   2275.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77708.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.485 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 47055.265 ops/s
[info]                  ·gc.alloc.rate:                   2241.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79247.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.570 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 47421.528 ops/s
[info]                  ·gc.alloc.rate:                   2258.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67583.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.454 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   47630.325 ±(99.9%) 1487.734 ops/s [Average]
[info]   (min, avg, max) = (47055.265, 47630.325, 47972.554), stdev = 386.360
[info]   CI (99.9%): [46142.591, 49118.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2268.656 ±(99.9%) 70.398 MB/sec [Average]
[info]   (min, avg, max) = (2241.420, 2268.656, 2285.017), stdev = 18.282
[info]   CI (99.9%): [2198.259, 2339.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   74944.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (74944.009, 74944.009, 74944.010), stdev = 0.001
[info]   CI (99.9%): [74944.008, 74944.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2219.608 ±(99.9%) 695.660 MB/sec [Average]
[info]   (min, avg, max) = (2008.873, 2219.608, 2370.129), stdev = 180.661
[info]   CI (99.9%): [1523.947, 2915.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73337.480 ±(99.9%) 23673.854 B/op [Average]
[info]   (min, avg, max) = (65887.015, 73337.480, 79247.526), stdev = 6148.025
[info]   CI (99.9%): [49663.626, 97011.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.167), stdev = 0.029
[info]   CI (99.9%): [0.032, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.815 ±(99.9%) 3.752 B/op [Average]
[info]   (min, avg, max) = (3.454, 4.815, 5.570), stdev = 0.974
[info]   CI (99.9%): [1.063, 8.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 59.70% complete, ETA 00:28:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96456.678 ops/s
[info] # Warmup Iteration   2: 116177.426 ops/s
[info] # Warmup Iteration   3: 117823.937 ops/s
[info] Iteration   1: 113115.111 ops/s
[info]                  ·gc.alloc.rate:                   1061.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18286.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.869 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 117605.342 ops/s
[info]                  ·gc.alloc.rate:                   1103.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13237.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 117755.131 ops/s
[info]                  ·gc.alloc.rate:                   1105.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13274.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 116036.718 ops/s
[info]                  ·gc.alloc.rate:                   1089.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18043.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 117309.747 ops/s
[info]                  ·gc.alloc.rate:                   1100.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13454.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.559 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   116364.410 ±(99.9%) 7464.939 ops/s [Average]
[info]   (min, avg, max) = (113115.111, 116364.410, 117755.131), stdev = 1938.621
[info]   CI (99.9%): [108899.471, 123829.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1092.021 ±(99.9%) 70.062 MB/sec [Average]
[info]   (min, avg, max) = (1061.447, 1092.021, 1105.051), stdev = 18.195
[info]   CI (99.9%): [1021.959, 1162.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14768.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14768.004, 14768.004, 14768.004), stdev = 0.001
[info]   CI (99.9%): [14768.003, 14768.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1126.107 ±(99.9%) 691.123 MB/sec [Average]
[info]   (min, avg, max) = (989.237, 1126.107, 1330.738), stdev = 179.482
[info]   CI (99.9%): [434.985, 1817.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15259.303 ±(99.9%) 10223.925 B/op [Average]
[info]   (min, avg, max) = (13237.683, 15259.303, 18286.638), stdev = 2655.121
[info]   CI (99.9%): [5035.378, 25483.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.733 ±(99.9%) 0.970 B/op [Average]
[info]   (min, avg, max) = (0.556, 0.733, 1.114), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 60.00% complete, ETA 00:28:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241913.816 ops/s
[info] # Warmup Iteration   2: 339494.450 ops/s
[info] # Warmup Iteration   3: 332482.240 ops/s
[info] Iteration   1: 339641.767 ops/s
[info]                  ·gc.alloc.rate:                   504.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2696.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 341830.591 ops/s
[info]                  ·gc.alloc.rate:               507.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1501.247 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 335790.913 ops/s
[info]                  ·gc.alloc.rate:                   498.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3053.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 341746.687 ops/s
[info]                  ·gc.alloc.rate:               507.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1500.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 340251.747 ops/s
[info]                  ·gc.alloc.rate:                   505.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3016.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   339852.341 ±(99.9%) 9471.545 ops/s [Average]
[info]   (min, avg, max) = (335790.913, 339852.341, 341830.591), stdev = 2459.730
[info]   CI (99.9%): [330380.796, 349323.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   504.497 ±(99.9%) 14.024 MB/sec [Average]
[info]   (min, avg, max) = (498.458, 504.497, 507.385), stdev = 3.642
[info]   CI (99.9%): [490.473, 518.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2336.001, 2336.001), stdev = 0.001
[info]   CI (99.9%): [2336.001, 2336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507.533 ±(99.9%) 647.740 MB/sec [Average]
[info]   (min, avg, max) = (325.787, 507.533, 652.232), stdev = 168.216
[info]   CI (99.9%): [≈ 0, 1155.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2353.537 ±(99.9%) 3045.158 B/op [Average]
[info]   (min, avg, max) = (1500.179, 2353.537, 3053.477), stdev = 790.818
[info]   CI (99.9%): [≈ 0, 5398.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.546 ±(99.9%) 4.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.563), stdev = 1.128
[info]   CI (99.9%): [≈ 0, 4.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.530 ±(99.9%) 20.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.530, 11.873), stdev = 5.227
[info]   CI (99.9%): [≈ 0, 22.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 60.30% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603197.099 ops/s
[info] # Warmup Iteration   2: 647639.343 ops/s
[info] # Warmup Iteration   3: 630934.774 ops/s
[info] Iteration   1: 624766.269 ops/s
[info]                  ·gc.alloc.rate:                   774.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1664.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 616046.638 ops/s
[info]                  ·gc.alloc.rate:                   764.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2533.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 632572.167 ops/s
[info]                  ·gc.alloc.rate:                   784.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1647.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 642787.946 ops/s
[info]                  ·gc.alloc.rate:                   797.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2437.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 634239.812 ops/s
[info]                  ·gc.alloc.rate:                   786.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1651.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   630082.566 ±(99.9%) 38993.249 ops/s [Average]
[info]   (min, avg, max) = (616046.638, 630082.566, 642787.946), stdev = 10126.423
[info]   CI (99.9%): [591089.318, 669075.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   781.539 ±(99.9%) 48.131 MB/sec [Average]
[info]   (min, avg, max) = (764.280, 781.539, 797.257), stdev = 12.499
[info]   CI (99.9%): [733.408, 829.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   795.153 ±(99.9%) 697.862 MB/sec [Average]
[info]   (min, avg, max) = (660.811, 795.153, 995.537), stdev = 181.233
[info]   CI (99.9%): [97.291, 1493.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1986.761 ±(99.9%) 1757.376 B/op [Average]
[info]   (min, avg, max) = (1647.357, 1986.761, 2533.096), stdev = 456.385
[info]   CI (99.9%): [229.384, 3744.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.187 ±(99.9%) 0.303 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.187, 0.258), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 60.61% complete, ETA 00:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679940.022 ops/s
[info] # Warmup Iteration   2: 713316.596 ops/s
[info] # Warmup Iteration   3: 711843.082 ops/s
[info] Iteration   1: 716738.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 671621.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 710708.240 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 720855.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 714979.067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   706980.708 ±(99.9%) 77393.203 ops/s [Average]
[info]   (min, avg, max) = (671621.912, 706980.708, 720855.348), stdev = 20098.769
[info]   CI (99.9%): [629587.505, 784373.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 60.91% complete, ETA 00:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201952.424 ops/s
[info] # Warmup Iteration   2: 252309.687 ops/s
[info] # Warmup Iteration   3: 234583.920 ops/s
[info] Iteration   1: 236430.223 ops/s
[info]                  ·gc.alloc.rate:                   772.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4354.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 226101.185 ops/s
[info]                  ·gc.alloc.rate:                   739.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          980.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6824.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.724 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 236118.129 ops/s
[info]                  ·gc.alloc.rate:                   771.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4371.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 237305.660 ops/s
[info]                  ·gc.alloc.rate:               775.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4362.514 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 232248.178 ops/s
[info]                  ·gc.alloc.rate:                   759.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6710.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   233640.675 ±(99.9%) 17868.651 ops/s [Average]
[info]   (min, avg, max) = (226101.185, 233640.675, 237305.660), stdev = 4640.432
[info]   CI (99.9%): [215772.024, 251509.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   763.744 ±(99.9%) 57.806 MB/sec [Average]
[info]   (min, avg, max) = (739.415, 763.744, 775.679), stdev = 15.012
[info]   CI (99.9%): [705.939, 821.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   787.792 ±(99.9%) 695.378 MB/sec [Average]
[info]   (min, avg, max) = (654.137, 787.792, 990.252), stdev = 180.588
[info]   CI (99.9%): [92.414, 1483.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5324.507 ±(99.9%) 5073.604 B/op [Average]
[info]   (min, avg, max) = (4354.434, 5324.507, 6824.001), stdev = 1317.599
[info]   CI (99.9%): [250.903, 10398.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.452 ±(99.9%) 1.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 0.724), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 61.21% complete, ETA 00:27:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100288.893 ops/s
[info] # Warmup Iteration   2: 130919.837 ops/s
[info] # Warmup Iteration   3: 132537.261 ops/s
[info] Iteration   1: 132258.756 ops/s
[info]                  ·gc.alloc.rate:                   1811.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              21544.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23748.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.239 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 131245.372 ops/s
[info]                  ·gc.alloc.rate:                   1797.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              21544.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20082.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.997 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 132108.632 ops/s
[info]                  ·gc.alloc.rate:                   1809.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              21544.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20045.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.992 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 133026.598 ops/s
[info]                  ·gc.alloc.rate:                   1821.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              21544.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23982.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.493 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 132510.079 ops/s
[info]                  ·gc.alloc.rate:                   1814.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              21544.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20120.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.484 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   132229.887 ±(99.9%) 2508.882 ops/s [Average]
[info]   (min, avg, max) = (131245.372, 132229.887, 133026.598), stdev = 651.549
[info]   CI (99.9%): [129721.005, 134738.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1810.627 ±(99.9%) 33.857 MB/sec [Average]
[info]   (min, avg, max) = (1797.131, 1810.627, 1821.090), stdev = 8.793
[info]   CI (99.9%): [1776.769, 1844.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21544.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21544.003, 21544.003, 21544.004), stdev = 0.001
[info]   CI (99.9%): [21544.003, 21544.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1815.383 ±(99.9%) 692.544 MB/sec [Average]
[info]   (min, avg, max) = (1675.198, 1815.383, 2027.224), stdev = 179.852
[info]   CI (99.9%): [1122.839, 2507.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21595.816 ±(99.9%) 7985.340 B/op [Average]
[info]   (min, avg, max) = (20045.279, 21595.816, 23982.628), stdev = 2073.768
[info]   CI (99.9%): [13610.476, 29581.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.241 ±(99.9%) 2.155 B/op [Average]
[info]   (min, avg, max) = (0.493, 1.241, 1.997), stdev = 0.560
[info]   CI (99.9%): [≈ 0, 3.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 61.52% complete, ETA 00:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118861.098 ops/s
[info] # Warmup Iteration   2: 186896.275 ops/s
[info] # Warmup Iteration   3: 189725.821 ops/s
[info] Iteration   1: 187305.045 ops/s
[info]                  ·gc.alloc.rate:                   1116.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8250.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 190335.405 ops/s
[info]                  ·gc.alloc.rate:                   1134.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10870.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 190395.401 ops/s
[info]                  ·gc.alloc.rate:                   1135.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8190.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.860 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 188477.846 ops/s
[info]                  ·gc.alloc.rate:                   1123.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11097.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 189991.672 ops/s
[info]                  ·gc.alloc.rate:                   1132.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8301.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   189301.074 ±(99.9%) 5239.618 ops/s [Average]
[info]   (min, avg, max) = (187305.045, 189301.074, 190395.401), stdev = 1360.712
[info]   CI (99.9%): [184061.456, 194540.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1128.778 ±(99.9%) 31.176 MB/sec [Average]
[info]   (min, avg, max) = (1116.944, 1128.778, 1135.310), stdev = 8.096
[info]   CI (99.9%): [1097.602, 1159.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.002, 9384.002, 9384.002), stdev = 0.001
[info]   CI (99.9%): [9384.002, 9384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.795 ±(99.9%) 697.065 MB/sec [Average]
[info]   (min, avg, max) = (982.049, 1123.795, 1328.980), stdev = 181.026
[info]   CI (99.9%): [426.730, 1820.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9342.251 ±(99.9%) 5781.066 B/op [Average]
[info]   (min, avg, max) = (8190.795, 9342.251, 11097.190), stdev = 1501.324
[info]   CI (99.9%): [3561.185, 15123.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.795 ±(99.9%) 0.994 B/op [Average]
[info]   (min, avg, max) = (0.525, 0.795, 1.205), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 61.82% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308055.141 ops/s
[info] # Warmup Iteration   2: 309606.669 ops/s
[info] # Warmup Iteration   3: 321718.480 ops/s
[info] Iteration   1: 322238.722 ops/s
[info]                  ·gc.alloc.rate:                   625.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1623.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 323092.215 ops/s
[info]                  ·gc.alloc.rate:                   627.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3238.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 322326.211 ops/s
[info]                  ·gc.alloc.rate:                   626.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3246.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 312900.664 ops/s
[info]                  ·gc.alloc.rate:               607.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3343.917 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 321331.726 ops/s
[info]                  ·gc.alloc.rate:                   623.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3262.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   320377.907 ±(99.9%) 16273.802 ops/s [Average]
[info]   (min, avg, max) = (312900.664, 320377.907, 323092.215), stdev = 4226.255
[info]   CI (99.9%): [304104.105, 336651.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   622.139 ±(99.9%) 31.640 MB/sec [Average]
[info]   (min, avg, max) = (607.598, 622.139, 627.356), stdev = 8.217
[info]   CI (99.9%): [590.499, 653.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   598.633 ±(99.9%) 573.122 MB/sec [Average]
[info]   (min, avg, max) = (332.386, 598.633, 666.155), stdev = 148.838
[info]   CI (99.9%): [25.512, 1171.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2942.860 ±(99.9%) 2844.812 B/op [Average]
[info]   (min, avg, max) = (1623.414, 2942.860, 3343.917), stdev = 738.789
[info]   CI (99.9%): [98.048, 5787.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.285 ±(99.9%) 0.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.285, 0.510), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 1.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 62.12% complete, ETA 00:26:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28685.106 ops/s
[info] # Warmup Iteration   2: 67503.649 ops/s
[info] # Warmup Iteration   3: 67111.136 ops/s
[info] Iteration   1: 68078.346 ops/s
[info]                  ·gc.alloc.rate:                   2828.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61676.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.925 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 67895.983 ops/s
[info]                  ·gc.alloc.rate:                   2821.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3030.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70242.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.860 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 68123.463 ops/s
[info]                  ·gc.alloc.rate:                   2831.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62571.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.405 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 68509.153 ops/s
[info]                  ·gc.alloc.rate:                   2847.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62386.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.391 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 67441.519 ops/s
[info]                  ·gc.alloc.rate:                   2802.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3060.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71412.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.943 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   68009.693 ±(99.9%) 1494.910 ops/s [Average]
[info]   (min, avg, max) = (67441.519, 68009.693, 68509.153), stdev = 388.223
[info]   CI (99.9%): [66514.783, 69504.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2826.304 ±(99.9%) 62.147 MB/sec [Average]
[info]   (min, avg, max) = (2802.636, 2826.304, 2847.081), stdev = 16.139
[info]   CI (99.9%): [2764.157, 2888.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65400.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65400.006, 65400.006, 65400.007), stdev = 0.001
[info]   CI (99.9%): [65400.006, 65400.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2836.692 ±(99.9%) 738.559 MB/sec [Average]
[info]   (min, avg, max) = (2667.859, 2836.692, 3060.312), stdev = 191.801
[info]   CI (99.9%): [2098.133, 3575.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65658.075 ±(99.9%) 18287.399 B/op [Average]
[info]   (min, avg, max) = (61676.412, 65658.075, 71412.914), stdev = 4749.179
[info]   CI (99.9%): [47370.676, 83945.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.505 ±(99.9%) 3.052 B/op [Average]
[info]   (min, avg, max) = (1.925, 2.505, 3.860), stdev = 0.792
[info]   CI (99.9%): [≈ 0, 5.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 62.42% complete, ETA 00:26:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136578.189 ops/s
[info] # Warmup Iteration   2: 166652.443 ops/s
[info] # Warmup Iteration   3: 166980.280 ops/s
[info] Iteration   1: 166895.846 ops/s
[info]                  ·gc.alloc.rate:                   1067.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9340.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 166321.004 ops/s
[info]                  ·gc.alloc.rate:                   1063.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12534.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.788 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 165441.699 ops/s
[info]                  ·gc.alloc.rate:                   1057.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9488.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 163947.073 ops/s
[info]                  ·gc.alloc.rate:                   1048.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9610.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 166838.296 ops/s
[info]                  ·gc.alloc.rate:                   1066.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9475.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   165888.783 ±(99.9%) 4744.537 ops/s [Average]
[info]   (min, avg, max) = (163947.073, 165888.783, 166895.846), stdev = 1232.141
[info]   CI (99.9%): [161144.246, 170633.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1060.823 ±(99.9%) 30.081 MB/sec [Average]
[info]   (min, avg, max) = (1048.528, 1060.823, 1067.186), stdev = 7.812
[info]   CI (99.9%): [1030.742, 1090.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10064.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10064.003, 10064.003, 10064.003), stdev = 0.001
[info]   CI (99.9%): [10064.002, 10064.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1063.690 ±(99.9%) 561.967 MB/sec [Average]
[info]   (min, avg, max) = (990.487, 1063.690, 1324.589), stdev = 145.941
[info]   CI (99.9%): [501.723, 1625.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10090.133 ±(99.9%) 5274.637 B/op [Average]
[info]   (min, avg, max) = (9340.693, 10090.133, 12534.526), stdev = 1369.806
[info]   CI (99.9%): [4815.496, 15364.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.631 ±(99.9%) 0.986 B/op [Average]
[info]   (min, avg, max) = (0.200, 0.631, 0.792), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 62.73% complete, ETA 00:26:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 383603.102 ops/s
[info] # Warmup Iteration   2: 524045.970 ops/s
[info] # Warmup Iteration   3: 534842.995 ops/s
[info] Iteration   1: 525110.874 ops/s
[info]                  ·gc.alloc.rate:                   517.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1745.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 530519.574 ops/s
[info]                  ·gc.alloc.rate:                   523.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1939.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 533483.725 ops/s
[info]                  ·gc.alloc.rate:                   526.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 512612.123 ops/s
[info]                  ·gc.alloc.rate:                   505.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2008.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 534055.274 ops/s
[info]                  ·gc.alloc.rate:               526.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 965.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   527156.314 ±(99.9%) 34152.662 ops/s [Average]
[info]   (min, avg, max) = (512612.123, 527156.314, 534055.274), stdev = 8869.338
[info]   CI (99.9%): [493003.652, 561308.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   519.885 ±(99.9%) 33.626 MB/sec [Average]
[info]   (min, avg, max) = (505.537, 519.885, 526.663), stdev = 8.733
[info]   CI (99.9%): [486.259, 553.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.092 ±(99.9%) 648.432 MB/sec [Average]
[info]   (min, avg, max) = (327.074, 509.092, 654.183), stdev = 168.396
[info]   CI (99.9%): [≈ 0, 1157.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1524.886 ±(99.9%) 2001.535 B/op [Average]
[info]   (min, avg, max) = (964.865, 1524.886, 2008.347), stdev = 519.792
[info]   CI (99.9%): [≈ 0, 3526.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.461 ±(99.9%) 3.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.461, 2.141), stdev = 0.939
[info]   CI (99.9%): [≈ 0, 4.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.383 ±(99.9%) 10.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.383, 6.414), stdev = 2.814
[info]   CI (99.9%): [≈ 0, 12.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 63.03% complete, ETA 00:25:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 909225.904 ops/s
[info] # Warmup Iteration   2: 991066.627 ops/s
[info] # Warmup Iteration   3: 994443.579 ops/s
[info] Iteration   1: 986609.508 ops/s
[info]                  ·gc.alloc.rate:                   732.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1585.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1002106.475 ops/s
[info]                  ·gc.alloc.rate:                   743.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1039.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 994876.201 ops/s
[info]                  ·gc.alloc.rate:                   738.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1049.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 975687.210 ops/s
[info]                  ·gc.alloc.rate:                   724.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1071.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1000495.706 ops/s
[info]                  ·gc.alloc.rate:                   742.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1571.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   991955.020 ±(99.9%) 42082.482 ops/s [Average]
[info]   (min, avg, max) = (975687.210, 991955.020, 1002106.475), stdev = 10928.687
[info]   CI (99.9%): [949872.538, 1034037.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   736.270 ±(99.9%) 30.876 MB/sec [Average]
[info]   (min, avg, max) = (724.320, 736.270, 743.706), stdev = 8.018
[info]   CI (99.9%): [705.394, 767.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   796.610 ±(99.9%) 702.780 MB/sec [Average]
[info]   (min, avg, max) = (662.128, 796.610, 998.906), stdev = 182.510
[info]   CI (99.9%): [93.831, 1499.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1263.487 ±(99.9%) 1107.769 B/op [Average]
[info]   (min, avg, max) = (1039.881, 1263.487, 1585.456), stdev = 287.684
[info]   CI (99.9%): [155.717, 2371.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.145 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.145, 0.232), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.33% complete, ETA 00:25:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1031594.404 ops/s
[info] # Warmup Iteration   2: 1143346.387 ops/s
[info] # Warmup Iteration   3: 1137542.663 ops/s
[info] Iteration   1: 1136396.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1133736.936 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1134331.747 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1130594.364 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1135300.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1134072.028 ±(99.9%) 8433.554 ops/s [Average]
[info]   (min, avg, max) = (1130594.364, 1134072.028, 1136396.915), stdev = 2190.167
[info]   CI (99.9%): [1125638.473, 1142505.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 63.64% complete, ETA 00:25:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204328.167 ops/s
[info] # Warmup Iteration   2: 347203.927 ops/s
[info] # Warmup Iteration   3: 350032.629 ops/s
[info] Iteration   1: 351560.408 ops/s
[info]                  ·gc.alloc.rate:                   959.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2916.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 349862.925 ops/s
[info]                  ·gc.alloc.rate:                   954.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4401.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 349339.638 ops/s
[info]                  ·gc.alloc.rate:               953.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      983.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4430.886 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 348289.337 ops/s
[info]                  ·gc.alloc.rate:                   950.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4465.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 350758.986 ops/s
[info]                  ·gc.alloc.rate:                   957.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4458.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   349962.259 ±(99.9%) 4865.028 ops/s [Average]
[info]   (min, avg, max) = (348289.337, 349962.259, 351560.408), stdev = 1263.432
[info]   CI (99.9%): [345097.231, 354827.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   955.327 ±(99.9%) 13.204 MB/sec [Average]
[info]   (min, avg, max) = (950.778, 955.327, 959.651), stdev = 3.429
[info]   CI (99.9%): [942.123, 968.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   919.129 ±(99.9%) 576.504 MB/sec [Average]
[info]   (min, avg, max) = (651.496, 919.129, 993.672), stdev = 149.716
[info]   CI (99.9%): [342.625, 1495.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4134.613 ±(99.9%) 2623.840 B/op [Average]
[info]   (min, avg, max) = (2916.505, 4134.613, 4465.542), stdev = 681.403
[info]   CI (99.9%): [1510.773, 6758.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.206 ±(99.9%) 0.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.375), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 63.94% complete, ETA 00:25:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491.956 ops/s
[info] # Warmup Iteration   2: 673.745 ops/s
[info] # Warmup Iteration   3: 687.336 ops/s
[info] Iteration   1: 683.839 ops/s
[info]                  ·gc.alloc.rate:                   1427.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3038417.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.813 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 689.497 ops/s
[info]                  ·gc.alloc.rate:                   1439.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3024913.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237.449 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 683.020 ops/s
[info]                  ·gc.alloc.rate:                   1426.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3837113.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.906 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 688.251 ops/s
[info]                  ·gc.alloc.rate:                   1437.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3065068.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.118 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 683.071 ops/s
[info]                  ·gc.alloc.rate:                   1426.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3099737.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.626 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   685.536 ±(99.9%) 11.923 ops/s [Average]
[info]   (min, avg, max) = (683.020, 685.536, 689.497), stdev = 3.096
[info]   CI (99.9%): [673.613, 697.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1431.395 ±(99.9%) 24.786 MB/sec [Average]
[info]   (min, avg, max) = (1426.364, 1431.395, 1439.591), stdev = 6.437
[info]   CI (99.9%): [1406.609, 1456.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3284912.727 ±(99.9%) 0.486 B/op [Average]
[info]   (min, avg, max) = (3284912.627, 3284912.727, 3284912.928), stdev = 0.126
[info]   CI (99.9%): [3284912.241, 3284913.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1399.820 ±(99.9%) 574.738 MB/sec [Average]
[info]   (min, avg, max) = (1320.388, 1399.820, 1666.154), stdev = 149.258
[info]   CI (99.9%): [825.083, 1974.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3213050.234 ±(99.9%) 1347842.758 B/op [Average]
[info]   (min, avg, max) = (3024913.809, 3213050.234, 3837113.637), stdev = 350030.484
[info]   CI (99.9%): [1865207.476, 4560892.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   133.582 ±(99.9%) 300.768 B/op [Average]
[info]   (min, avg, max) = (47.906, 133.582, 237.449), stdev = 78.109
[info]   CI (99.9%): [≈ 0, 434.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 64.24% complete, ETA 00:25:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381.512 ops/s
[info] # Warmup Iteration   2: 643.596 ops/s
[info] # Warmup Iteration   3: 673.272 ops/s
[info] Iteration   1: 663.738 ops/s
[info]                  ·gc.alloc.rate:                   1376.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263016.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3096773.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.349 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 665.797 ops/s
[info]                  ·gc.alloc.rate:                   1380.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263016.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3107941.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 295.207 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 661.878 ops/s
[info]                  ·gc.alloc.rate:                   1373.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263045.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3142564.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 669.765 ops/s
[info]                  ·gc.alloc.rate:                   1388.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263016.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3915727.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195.630 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 672.640 ops/s
[info]                  ·gc.alloc.rate:                   1394.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              3263016.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3137158.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.758 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   666.764 ±(99.9%) 16.950 ops/s [Average]
[info]   (min, avg, max) = (661.878, 666.764, 672.640), stdev = 4.402
[info]   CI (99.9%): [649.814, 683.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1382.781 ±(99.9%) 34.476 MB/sec [Average]
[info]   (min, avg, max) = (1373.023, 1382.781, 1394.794), stdev = 8.953
[info]   CI (99.9%): [1348.306, 1417.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3263022.408 ±(99.9%) 48.936 B/op [Average]
[info]   (min, avg, max) = (3263016.642, 3263022.408, 3263045.140), stdev = 12.709
[info]   CI (99.9%): [3262973.471, 3263071.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1390.294 ±(99.9%) 596.819 MB/sec [Average]
[info]   (min, avg, max) = (1306.217, 1390.294, 1666.609), stdev = 154.992
[info]   CI (99.9%): [793.475, 1987.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3280033.100 ±(99.9%) 1370387.204 B/op [Average]
[info]   (min, avg, max) = (3096773.398, 3280033.100, 3915727.093), stdev = 355885.205
[info]   CI (99.9%): [1909645.896, 4650420.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   186.528 ±(99.9%) 338.465 B/op [Average]
[info]   (min, avg, max) = (49.349, 186.528, 295.207), stdev = 87.898
[info]   CI (99.9%): [≈ 0, 524.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 64.55% complete, ETA 00:24:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16657.564 ops/s
[info] # Warmup Iteration   2: 28882.962 ops/s
[info] # Warmup Iteration   3: 29708.858 ops/s
[info] Iteration   1: 28860.878 ops/s
[info]                  ·gc.alloc.rate:                   521.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          586.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32002.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 29766.425 ops/s
[info]                  ·gc.alloc.rate:               537.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          28432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17504.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 29789.641 ops/s
[info]                  ·gc.alloc.rate:                   538.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34910.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28699.862 ops/s
[info]                  ·gc.alloc.rate:                   518.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36234.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 29820.312 ops/s
[info]                  ·gc.alloc.rate:               538.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      330.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17438.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   29387.424 ±(99.9%) 2146.372 ops/s [Average]
[info]   (min, avg, max) = (28699.862, 29387.424, 29820.312), stdev = 557.406
[info]   CI (99.9%): [27241.052, 31533.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   530.949 ±(99.9%) 38.713 MB/sec [Average]
[info]   (min, avg, max) = (518.516, 530.949, 538.736), stdev = 10.054
[info]   CI (99.9%): [492.236, 569.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28432.016 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (28432.014, 28432.016, 28432.021), stdev = 0.002
[info]   CI (99.9%): [28432.007, 28432.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.029 ±(99.9%) 654.565 MB/sec [Average]
[info]   (min, avg, max) = (330.422, 514.029, 660.816), stdev = 169.989
[info]   CI (99.9%): [≈ 0, 1168.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27618.088 ±(99.9%) 36151.168 B/op [Average]
[info]   (min, avg, max) = (17438.179, 27618.088, 36234.625), stdev = 9388.344
[info]   CI (99.9%): [≈ 0, 63769.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.465 ±(99.9%) 3.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.199), stdev = 0.970
[info]   CI (99.9%): [≈ 0, 4.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.301 ±(99.9%) 203.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.301, 119.867), stdev = 52.912
[info]   CI (99.9%): [≈ 0, 229.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 64.85% complete, ETA 00:24:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 370.553 ops/s
[info] # Warmup Iteration   2: 633.866 ops/s
[info] # Warmup Iteration   3: 672.371 ops/s
[info] Iteration   1: 669.459 ops/s
[info]                  ·gc.alloc.rate:                   1433.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368480.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3072171.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.815 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 669.419 ops/s
[info]                  ·gc.alloc.rate:                   1433.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368504.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3867993.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244.537 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 662.786 ops/s
[info]                  ·gc.alloc.rate:                   1418.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368464.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3150472.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 667.416 ops/s
[info]                  ·gc.alloc.rate:                   1428.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368464.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3145728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.108 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 674.122 ops/s
[info]                  ·gc.alloc.rate:                   1443.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368466.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3912353.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.545 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   668.640 ±(99.9%) 15.771 ops/s [Average]
[info]   (min, avg, max) = (662.786, 668.640, 674.122), stdev = 4.096
[info]   CI (99.9%): [652.869, 684.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1431.538 ±(99.9%) 34.483 MB/sec [Average]
[info]   (min, avg, max) = (1418.756, 1431.538, 1443.564), stdev = 8.955
[info]   CI (99.9%): [1397.055, 1466.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3368476.132 ±(99.9%) 66.339 B/op [Average]
[info]   (min, avg, max) = (3368464.647, 3368476.132, 3368504.501), stdev = 17.228
[info]   CI (99.9%): [3368409.793, 3368542.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1458.183 ±(99.9%) 715.864 MB/sec [Average]
[info]   (min, avg, max) = (1307.185, 1458.183, 1676.649), stdev = 185.908
[info]   CI (99.9%): [742.320, 2174.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3429743.767 ±(99.9%) 1624006.982 B/op [Average]
[info]   (min, avg, max) = (3072171.176, 3429743.767, 3912353.564), stdev = 421749.456
[info]   CI (99.9%): [1805736.785, 5053750.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   127.455 ±(99.9%) 286.272 B/op [Average]
[info]   (min, avg, max) = (48.545, 127.455, 244.537), stdev = 74.344
[info]   CI (99.9%): [≈ 0, 413.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 65.15% complete, ETA 00:24:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9745.064 ops/s
[info] # Warmup Iteration   2: 13328.458 ops/s
[info] # Warmup Iteration   3: 13472.844 ops/s
[info] Iteration   1: 13458.181 ops/s
[info]                  ·gc.alloc.rate:                   1083.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115132.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13438.064 ops/s
[info]                  ·gc.alloc.rate:                   1082.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              126721.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154259.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.626 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13425.256 ops/s
[info]                  ·gc.alloc.rate:                   1081.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116304.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13109.673 ops/s
[info]                  ·gc.alloc.rate:                   1056.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119676.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13119.173 ops/s
[info]                  ·gc.alloc.rate:                   1056.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120073.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13310.069 ±(99.9%) 689.329 ops/s [Average]
[info]   (min, avg, max) = (13109.673, 13310.069, 13458.181), stdev = 179.017
[info]   CI (99.9%): [12620.740, 13999.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1072.084 ±(99.9%) 54.430 MB/sec [Average]
[info]   (min, avg, max) = (1056.396, 1072.084, 1083.557), stdev = 14.135
[info]   CI (99.9%): [1017.654, 1126.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126752.359 ±(99.9%) 125.536 B/op [Average]
[info]   (min, avg, max) = (126712.034, 126752.359, 126776.045), stdev = 32.601
[info]   CI (99.9%): [126626.822, 126877.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1058.435 ±(99.9%) 557.545 MB/sec [Average]
[info]   (min, avg, max) = (984.534, 1058.435, 1317.214), stdev = 144.793
[info]   CI (99.9%): [500.890, 1615.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   125089.257 ±(99.9%) 63321.922 B/op [Average]
[info]   (min, avg, max) = (115132.258, 125089.257, 154259.711), stdev = 16444.502
[info]   CI (99.9%): [61767.334, 188411.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.348 ±(99.9%) 17.055 B/op [Average]
[info]   (min, avg, max) = (2.499, 8.348, 14.626), stdev = 4.429
[info]   CI (99.9%): [≈ 0, 25.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 65.45% complete, ETA 00:24:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10225.779 ops/s
[info] # Warmup Iteration   2: 15111.488 ops/s
[info] # Warmup Iteration   3: 15503.917 ops/s
[info] Iteration   1: 15499.356 ops/s
[info]                  ·gc.alloc.rate:                   969.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99223.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.455 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15123.219 ops/s
[info]                  ·gc.alloc.rate:                   945.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101904.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.832 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15298.480 ops/s
[info]                  ·gc.alloc.rate:                   956.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              98399.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101143.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15229.659 ops/s
[info]                  ·gc.alloc.rate:                   952.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102255.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15272.392 ops/s
[info]                  ·gc.alloc.rate:                   955.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              98400.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68230.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   15284.621 ±(99.9%) 529.111 ops/s [Average]
[info]   (min, avg, max) = (15123.219, 15284.621, 15499.356), stdev = 137.408
[info]   CI (99.9%): [14755.510, 15813.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   955.726 ±(99.9%) 33.013 MB/sec [Average]
[info]   (min, avg, max) = (945.537, 955.726, 969.042), stdev = 8.573
[info]   CI (99.9%): [922.713, 988.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98400.031 ±(99.9%) 0.340 B/op [Average]
[info]   (min, avg, max) = (98399.920, 98400.031, 98400.167), stdev = 0.088
[info]   CI (99.9%): [98399.691, 98400.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   918.307 ±(99.9%) 551.339 MB/sec [Average]
[info]   (min, avg, max) = (662.318, 918.307, 989.597), stdev = 143.181
[info]   CI (99.9%): [366.968, 1469.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94551.444 ±(99.9%) 56838.156 B/op [Average]
[info]   (min, avg, max) = (68230.201, 94551.444, 102255.606), stdev = 14760.689
[info]   CI (99.9%): [37713.288, 151389.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.863 ±(99.9%) 10.845 B/op [Average]
[info]   (min, avg, max) = (4.283, 6.863, 10.832), stdev = 2.816
[info]   CI (99.9%): [≈ 0, 17.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 65.76% complete, ETA 00:24:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256808.795 ops/s
[info] # Warmup Iteration   2: 280416.801 ops/s
[info] # Warmup Iteration   3: 279883.233 ops/s
[info] Iteration   1: 270489.937 ops/s
[info]                  ·gc.alloc.rate:                   954.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5767.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 274020.338 ops/s
[info]                  ·gc.alloc.rate:                   966.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5700.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 279444.918 ops/s
[info]                  ·gc.alloc.rate:                   985.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5610.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 281936.415 ops/s
[info]                  ·gc.alloc.rate:                   994.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5578.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 282748.622 ops/s
[info]                  ·gc.alloc.rate:                   997.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3718.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   277728.046 ±(99.9%) 20375.831 ops/s [Average]
[info]   (min, avg, max) = (270489.937, 277728.046, 282748.622), stdev = 5291.538
[info]   CI (99.9%): [257352.216, 298103.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   979.909 ±(99.9%) 72.068 MB/sec [Average]
[info]   (min, avg, max) = (954.440, 979.909, 997.655), stdev = 18.716
[info]   CI (99.9%): [907.841, 1051.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   929.650 ±(99.9%) 562.815 MB/sec [Average]
[info]   (min, avg, max) = (668.254, 929.650, 999.745), stdev = 146.161
[info]   CI (99.9%): [366.835, 1492.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5275.249 ±(99.9%) 3362.454 B/op [Average]
[info]   (min, avg, max) = (3718.867, 5275.249, 5767.327), stdev = 873.219
[info]   CI (99.9%): [1912.795, 8637.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.519 ±(99.9%) 0.704 B/op [Average]
[info]   (min, avg, max) = (0.363, 0.519, 0.837), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 1.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.06% complete, ETA 00:23:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276435.834 ops/s
[info] # Warmup Iteration   2: 291477.586 ops/s
[info] # Warmup Iteration   3: 299836.506 ops/s
[info] Iteration   1: 299135.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 298685.255 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 297785.099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 297393.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 298542.444 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   298308.354 ±(99.9%) 2717.712 ops/s [Average]
[info]   (min, avg, max) = (297393.277, 298308.354, 299135.695), stdev = 705.781
[info]   CI (99.9%): [295590.643, 301026.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 66.36% complete, ETA 00:23:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10239.602 ops/s
[info] # Warmup Iteration   2: 14295.466 ops/s
[info] # Warmup Iteration   3: 14515.163 ops/s
[info] Iteration   1: 14780.122 ops/s
[info]                  ·gc.alloc.rate:                   979.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104474.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14562.905 ops/s
[info]                  ·gc.alloc.rate:                   964.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              104279.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106210.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.748 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14747.848 ops/s
[info]                  ·gc.alloc.rate:                   977.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105241.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.664 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14736.678 ops/s
[info]                  ·gc.alloc.rate:                   976.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105889.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14802.100 ops/s
[info]                  ·gc.alloc.rate:                   980.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              104277.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105849.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14725.931 ±(99.9%) 364.856 ops/s [Average]
[info]   (min, avg, max) = (14562.905, 14725.931, 14802.100), stdev = 94.752
[info]   CI (99.9%): [14361.075, 15090.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   975.745 ±(99.9%) 24.148 MB/sec [Average]
[info]   (min, avg, max) = (964.946, 975.745, 980.805), stdev = 6.271
[info]   CI (99.9%): [951.597, 999.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   104279.576 ±(99.9%) 3.926 B/op [Average]
[info]   (min, avg, max) = (104277.758, 104279.576, 104280.146), stdev = 1.020
[info]   CI (99.9%): [104275.650, 104283.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   987.455 ±(99.9%) 23.308 MB/sec [Average]
[info]   (min, avg, max) = (981.089, 987.455, 995.585), stdev = 6.053
[info]   CI (99.9%): [964.147, 1010.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105533.040 ±(99.9%) 2647.930 B/op [Average]
[info]   (min, avg, max) = (104474.597, 105533.040, 106210.880), stdev = 687.659
[info]   CI (99.9%): [102885.110, 108180.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.343 ±(99.9%) 7.697 B/op [Average]
[info]   (min, avg, max) = (2.216, 5.343, 6.748), stdev = 1.999
[info]   CI (99.9%): [≈ 0, 13.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 66.67% complete, ETA 00:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587767.935 ops/s
[info] # Warmup Iteration   2: 871973.628 ops/s
[info] # Warmup Iteration   3: 877381.280 ops/s
[info] Iteration   1: 877365.020 ops/s
[info]                  ·gc.alloc.rate:                   2860.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3026.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5425.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 883574.161 ops/s
[info]                  ·gc.alloc.rate:                   2879.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4822.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 880197.247 ops/s
[info]                  ·gc.alloc.rate:                   2868.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4856.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 883923.555 ops/s
[info]                  ·gc.alloc.rate:                   2880.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3060.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5448.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 879872.786 ops/s
[info]                  ·gc.alloc.rate:                   2867.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4871.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   880986.554 ±(99.9%) 10598.137 ops/s [Average]
[info]   (min, avg, max) = (877365.020, 880986.554, 883923.555), stdev = 2752.303
[info]   CI (99.9%): [870388.416, 891584.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2871.136 ±(99.9%) 32.979 MB/sec [Average]
[info]   (min, avg, max) = (2860.044, 2871.136, 2880.327), stdev = 8.565
[info]   CI (99.9%): [2838.157, 2904.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5128.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.000, 5128.001, 5128.001), stdev = 0.001
[info]   CI (99.9%): [5128.000, 5128.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2846.918 ±(99.9%) 692.308 MB/sec [Average]
[info]   (min, avg, max) = (2707.628, 2846.918, 3060.563), stdev = 179.790
[info]   CI (99.9%): [2154.610, 3539.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5084.829 ±(99.9%) 1241.167 B/op [Average]
[info]   (min, avg, max) = (4822.294, 5084.829, 5448.886), stdev = 322.327
[info]   CI (99.9%): [3843.662, 6325.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.029
[info]   CI (99.9%): [0.012, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.223 ±(99.9%) 0.201 B/op [Average]
[info]   (min, avg, max) = (0.149, 0.223, 0.297), stdev = 0.052
[info]   CI (99.9%): [0.022, 0.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 66.97% complete, ETA 00:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 779448.494 ops/s
[info] # Warmup Iteration   2: 1605955.802 ops/s
[info] # Warmup Iteration   3: 1661000.171 ops/s
[info] Iteration   1: 1658852.122 ops/s
[info]                  ·gc.alloc.rate:                   1559.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1243.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1658181.529 ops/s
[info]                  ·gc.alloc.rate:                   1559.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1566.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1657812.027 ops/s
[info]                  ·gc.alloc.rate:                   1559.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1580.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1635950.358 ops/s
[info]                  ·gc.alloc.rate:                   1538.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1289.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1653466.411 ops/s
[info]                  ·gc.alloc.rate:                   1554.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1601.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1652852.489 ±(99.9%) 37286.196 ops/s [Average]
[info]   (min, avg, max) = (1635950.358, 1652852.489, 1658852.122), stdev = 9683.107
[info]   CI (99.9%): [1615566.293, 1690138.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1554.357 ±(99.9%) 35.036 MB/sec [Average]
[info]   (min, avg, max) = (1538.468, 1554.357, 1559.949), stdev = 9.099
[info]   CI (99.9%): [1519.322, 1589.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1529.954 ±(99.9%) 721.161 MB/sec [Average]
[info]   (min, avg, max) = (1310.933, 1529.954, 1682.725), stdev = 187.283
[info]   CI (99.9%): [808.793, 2251.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1456.418 ±(99.9%) 672.397 B/op [Average]
[info]   (min, avg, max) = (1243.746, 1456.418, 1601.606), stdev = 174.619
[info]   CI (99.9%): [784.021, 2128.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.079, 0.158), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 67.27% complete, ETA 00:23:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6549531.087 ops/s
[info] # Warmup Iteration   2: 7527122.970 ops/s
[info] # Warmup Iteration   3: 7723771.395 ops/s
[info] Iteration   1: 7731524.629 ops/s
[info]                  ·gc.alloc.rate:                   2319.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2354.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7690889.186 ops/s
[info]                  ·gc.alloc.rate:                   2307.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7566230.548 ops/s
[info]                  ·gc.alloc.rate:                   2269.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     493.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7662284.504 ops/s
[info]                  ·gc.alloc.rate:                   2298.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7721855.117 ops/s
[info]                  ·gc.alloc.rate:                   2315.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     485.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7674556.797 ±(99.9%) 255672.299 ops/s [Average]
[info]   (min, avg, max) = (7566230.548, 7674556.797, 7731524.629), stdev = 66397.284
[info]   CI (99.9%): [7418884.498, 7930229.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2301.973 ±(99.9%) 77.033 MB/sec [Average]
[info]   (min, avg, max) = (2269.384, 2301.973, 2319.351), stdev = 20.005
[info]   CI (99.9%): [2224.940, 2379.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2302.319 ±(99.9%) 592.702 MB/sec [Average]
[info]   (min, avg, max) = (2027.580, 2302.319, 2380.184), stdev = 153.923
[info]   CI (99.9%): [1709.617, 2895.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   472.136 ±(99.9%) 125.034 B/op [Average]
[info]   (min, avg, max) = (414.801, 472.136, 493.397), stdev = 32.471
[info]   CI (99.9%): [347.102, 597.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.017, 0.030), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 67.58% complete, ETA 00:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84429.838 ops/s
[info] # Warmup Iteration   2: 311621.093 ops/s
[info] # Warmup Iteration   3: 314207.168 ops/s
[info] Iteration   1: 315421.126 ops/s
[info]                  ·gc.alloc.rate:                   1926.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9828.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 316654.219 ops/s
[info]                  ·gc.alloc.rate:                   1933.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9895.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 320173.806 ops/s
[info]                  ·gc.alloc.rate:                   1954.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9872.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 321306.667 ops/s
[info]                  ·gc.alloc.rate:                   1961.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9896.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 319812.362 ops/s
[info]                  ·gc.alloc.rate:                   1952.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8319.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   318673.636 ±(99.9%) 9652.936 ops/s [Average]
[info]   (min, avg, max) = (315421.126, 318673.636, 321306.667), stdev = 2506.837
[info]   CI (99.9%): [309020.700, 328326.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1945.606 ±(99.9%) 58.412 MB/sec [Average]
[info]   (min, avg, max) = (1926.113, 1945.606, 1961.616), stdev = 15.169
[info]   CI (99.9%): [1887.194, 2004.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9608.001, 9608.001, 9608.001), stdev = 0.001
[info]   CI (99.9%): [9608.001, 9608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1936.190 ±(99.9%) 533.536 MB/sec [Average]
[info]   (min, avg, max) = (1690.646, 1936.190, 2020.462), stdev = 138.558
[info]   CI (99.9%): [1402.654, 2469.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9562.501 ±(99.9%) 2677.572 B/op [Average]
[info]   (min, avg, max) = (8319.586, 9562.501, 9896.228), stdev = 695.357
[info]   CI (99.9%): [6884.928, 12240.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.392 ±(99.9%) 0.916 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.392, 0.727), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 67.88% complete, ETA 00:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603064.726 ops/s
[info] # Warmup Iteration   2: 1014511.096 ops/s
[info] # Warmup Iteration   3: 1014283.810 ops/s
[info] Iteration   1: 1020064.491 ops/s
[info]                  ·gc.alloc.rate:                   2348.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2339.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3609.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1022841.000 ops/s
[info]                  ·gc.alloc.rate:                   2355.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2355.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3624.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1013607.194 ops/s
[info]                  ·gc.alloc.rate:                   2334.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3674.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1013769.028 ops/s
[info]                  ·gc.alloc.rate:                   2334.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3687.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1020411.152 ops/s
[info]                  ·gc.alloc.rate:                   2349.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3667.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1018138.573 ±(99.9%) 16178.766 ops/s [Average]
[info]   (min, avg, max) = (1013607.194, 1018138.573, 1022841.000), stdev = 4201.574
[info]   CI (99.9%): [1001959.807, 1034317.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2344.644 ±(99.9%) 35.960 MB/sec [Average]
[info]   (min, avg, max) = (2334.623, 2344.644, 2355.154), stdev = 9.339
[info]   CI (99.9%): [2308.684, 2380.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3624.000, 3624.000, 3624.000), stdev = 0.001
[info]   CI (99.9%): [3624.000, 3624.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2363.148 ±(99.9%) 61.303 MB/sec [Average]
[info]   (min, avg, max) = (2339.243, 2363.148, 2378.105), stdev = 15.920
[info]   CI (99.9%): [2301.846, 2424.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3652.684 ±(99.9%) 130.069 B/op [Average]
[info]   (min, avg, max) = (3609.024, 3652.684, 3687.027), stdev = 33.779
[info]   CI (99.9%): [3522.615, 3782.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.135 ±(99.9%) 0.163 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.135, 0.194), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 68.18% complete, ETA 00:22:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1370658.316 ops/s
[info] # Warmup Iteration   2: 3234875.268 ops/s
[info] # Warmup Iteration   3: 3316862.262 ops/s
[info] Iteration   1: 3253170.368 ops/s
[info]                  ·gc.alloc.rate:                   1885.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     955.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3321346.021 ops/s
[info]                  ·gc.alloc.rate:                   1925.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     945.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3288411.380 ops/s
[info]                  ·gc.alloc.rate:                   1905.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3317136.886 ops/s
[info]                  ·gc.alloc.rate:                   1922.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3287749.533 ops/s
[info]                  ·gc.alloc.rate:                   1905.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3293562.838 ±(99.9%) 105796.831 ops/s [Average]
[info]   (min, avg, max) = (3253170.368, 3293562.838, 3321346.021), stdev = 27475.101
[info]   CI (99.9%): [3187766.006, 3399359.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1908.798 ±(99.9%) 61.970 MB/sec [Average]
[info]   (min, avg, max) = (1885.200, 1908.798, 1925.362), stdev = 16.093
[info]   CI (99.9%): [1846.828, 1970.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1939.780 ±(99.9%) 575.192 MB/sec [Average]
[info]   (min, avg, max) = (1675.318, 1939.780, 2029.813), stdev = 149.376
[info]   CI (99.9%): [1364.587, 2514.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   926.774 ±(99.9%) 271.619 B/op [Average]
[info]   (min, avg, max) = (801.703, 926.774, 971.609), stdev = 70.539
[info]   CI (99.9%): [655.154, 1198.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.044, 0.079), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 68.48% complete, ETA 00:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7578226.378 ops/s
[info] # Warmup Iteration   2: 9040529.618 ops/s
[info] # Warmup Iteration   3: 9229848.108 ops/s
[info] Iteration   1: 9181115.855 ops/s
[info]                  ·gc.alloc.rate:                   560.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9226812.893 ops/s
[info]                  ·gc.alloc.rate:                   562.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9324789.539 ops/s
[info]                  ·gc.alloc.rate:                   568.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 9482242.836 ops/s
[info]                  ·gc.alloc.rate:                   578.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9507337.846 ops/s
[info]                  ·gc.alloc.rate:                   579.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   9344459.794 ±(99.9%) 566000.063 ops/s [Average]
[info]   (min, avg, max) = (9181115.855, 9344459.794, 9507337.846), stdev = 146988.419
[info]   CI (99.9%): [8778459.731, 9910459.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   570.005 ±(99.9%) 34.535 MB/sec [Average]
[info]   (min, avg, max) = (560.037, 570.005, 579.926), stdev = 8.969
[info]   CI (99.9%): [535.470, 604.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.408 ±(99.9%) 571.844 MB/sec [Average]
[info]   (min, avg, max) = (331.753, 597.408, 664.152), stdev = 148.506
[info]   CI (99.9%): [25.564, 1169.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   100.614 ±(99.9%) 96.294 B/op [Average]
[info]   (min, avg, max) = (55.990, 100.614, 113.847), stdev = 25.007
[info]   CI (99.9%): [4.320, 196.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.398 ±(99.9%) 3.024 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.398, 1.803), stdev = 0.785
[info]   CI (99.9%): [≈ 0, 3.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.519 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.068, 0.309), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 68.79% complete, ETA 00:21:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132844.281 ops/s
[info] # Warmup Iteration   2: 417889.430 ops/s
[info] # Warmup Iteration   3: 424215.304 ops/s
[info] Iteration   1: 427502.790 ops/s
[info]                  ·gc.alloc.rate:                   1525.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4813.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 426620.928 ops/s
[info]                  ·gc.alloc.rate:                   1522.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6075.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.384 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 422871.319 ops/s
[info]                  ·gc.alloc.rate:                   1509.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6179.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 425766.281 ops/s
[info]                  ·gc.alloc.rate:                   1519.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4944.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 422113.588 ops/s
[info]                  ·gc.alloc.rate:                   1506.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6266.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   424974.981 ±(99.9%) 9099.683 ops/s [Average]
[info]   (min, avg, max) = (422113.588, 424974.981, 427502.790), stdev = 2363.159
[info]   CI (99.9%): [415875.298, 434074.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1516.511 ±(99.9%) 32.369 MB/sec [Average]
[info]   (min, avg, max) = (1506.301, 1516.511, 1525.461), stdev = 8.406
[info]   CI (99.9%): [1484.142, 1548.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5616.001, 5616.001, 5616.001), stdev = 0.001
[info]   CI (99.9%): [5616.001, 5616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1526.688 ±(99.9%) 720.035 MB/sec [Average]
[info]   (min, avg, max) = (1307.557, 1526.688, 1680.769), stdev = 186.991
[info]   CI (99.9%): [806.653, 2246.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5655.966 ±(99.9%) 2749.059 B/op [Average]
[info]   (min, avg, max) = (4813.784, 5655.966, 6266.479), stdev = 713.922
[info]   CI (99.9%): [2906.907, 8405.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.293 ±(99.9%) 0.574 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.293, 0.466), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 69.09% complete, ETA 00:21:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1132245.011 ops/s
[info] # Warmup Iteration   2: 2091117.302 ops/s
[info] # Warmup Iteration   3: 2135095.029 ops/s
[info] Iteration   1: 2104637.465 ops/s
[info]                  ·gc.alloc.rate:                   1337.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1220.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2129999.007 ops/s
[info]                  ·gc.alloc.rate:                   1353.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2132394.181 ops/s
[info]                  ·gc.alloc.rate:                   1355.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     977.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2134612.868 ops/s
[info]                  ·gc.alloc.rate:                   1356.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     982.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2116699.496 ops/s
[info]                  ·gc.alloc.rate:                   1344.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2123668.604 ±(99.9%) 48962.999 ops/s [Average]
[info]   (min, avg, max) = (2104637.465, 2123668.604, 2134612.868), stdev = 12715.535
[info]   CI (99.9%): [2074705.605, 2172631.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1349.534 ±(99.9%) 31.548 MB/sec [Average]
[info]   (min, avg, max) = (1337.352, 1349.534, 1356.569), stdev = 8.193
[info]   CI (99.9%): [1317.986, 1381.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1389.365 ±(99.9%) 525.277 MB/sec [Average]
[info]   (min, avg, max) = (1315.429, 1389.365, 1632.828), stdev = 136.413
[info]   CI (99.9%): [864.089, 1914.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1029.965 ±(99.9%) 412.597 B/op [Average]
[info]   (min, avg, max) = (971.653, 1029.965, 1220.941), stdev = 107.150
[info]   CI (99.9%): [617.368, 1442.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.071, 0.093), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 69.39% complete, ETA 00:21:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8395978.361 ops/s
[info] # Warmup Iteration   2: 4967912.769 ops/s
[info] # Warmup Iteration   3: 5175912.471 ops/s
[info] Iteration   1: 5225492.663 ops/s
[info]                  ·gc.alloc.rate:                   690.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5158595.226 ops/s
[info]                  ·gc.alloc.rate:                   681.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5237096.673 ops/s
[info]                  ·gc.alloc.rate:               692.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 199.981 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5215120.355 ops/s
[info]                  ·gc.alloc.rate:                   689.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5218391.322 ops/s
[info]                  ·gc.alloc.rate:                   689.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5210939.248 ±(99.9%) 117253.918 ops/s [Average]
[info]   (min, avg, max) = (5158595.226, 5210939.248, 5237096.673), stdev = 30450.470
[info]   CI (99.9%): [5093685.330, 5328193.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   688.754 ±(99.9%) 15.584 MB/sec [Average]
[info]   (min, avg, max) = (681.828, 688.754, 692.343), stdev = 4.047
[info]   CI (99.9%): [673.170, 704.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.344 ±(99.9%) 570.344 MB/sec [Average]
[info]   (min, avg, max) = (664.809, 732.344, 997.297), stdev = 148.117
[info]   CI (99.9%): [162.000, 1302.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   221.373 ±(99.9%) 178.386 B/op [Average]
[info]   (min, avg, max) = (199.981, 221.373, 304.238), stdev = 46.326
[info]   CI (99.9%): [42.987, 399.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.032), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 69.70% complete, ETA 00:21:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127378.285 ops/s
[info] # Warmup Iteration   2: 398345.725 ops/s
[info] # Warmup Iteration   3: 398186.412 ops/s
[info] Iteration   1: 404058.779 ops/s
[info]                  ·gc.alloc.rate:                   1834.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7671.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.486 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 403366.154 ops/s
[info]                  ·gc.alloc.rate:                   1831.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6470.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 402219.604 ops/s
[info]                  ·gc.alloc.rate:                   1825.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6535.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 400239.258 ops/s
[info]                  ·gc.alloc.rate:                   1817.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7934.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 403133.912 ops/s
[info]                  ·gc.alloc.rate:                   1830.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6592.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   402603.541 ±(99.9%) 5684.701 ops/s [Average]
[info]   (min, avg, max) = (400239.258, 402603.541, 404058.779), stdev = 1476.299
[info]   CI (99.9%): [396918.840, 408288.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1827.943 ±(99.9%) 25.656 MB/sec [Average]
[info]   (min, avg, max) = (1817.533, 1827.943, 1834.875), stdev = 6.663
[info]   CI (99.9%): [1802.287, 1853.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1801.373 ±(99.9%) 683.147 MB/sec [Average]
[info]   (min, avg, max) = (1658.634, 1801.373, 2018.574), stdev = 177.411
[info]   CI (99.9%): [1118.226, 2484.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7040.901 ±(99.9%) 2707.167 B/op [Average]
[info]   (min, avg, max) = (6470.189, 7040.901, 7934.213), stdev = 703.043
[info]   CI (99.9%): [4333.734, 9748.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.374 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (0.325, 0.374, 0.486), stdev = 0.072
[info]   CI (99.9%): [0.097, 0.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 70.00% complete, ETA 00:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1597771.940 ops/s
[info] # Warmup Iteration   2: 2618477.023 ops/s
[info] # Warmup Iteration   3: 2619718.601 ops/s
[info] Iteration   1: 2641010.819 ops/s
[info]                  ·gc.alloc.rate:                   1396.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2651585.176 ops/s
[info]                  ·gc.alloc.rate:                   1401.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     977.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2658433.053 ops/s
[info]                  ·gc.alloc.rate:                   1405.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2652771.746 ops/s
[info]                  ·gc.alloc.rate:                   1402.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     792.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2661145.025 ops/s
[info]                  ·gc.alloc.rate:                   1406.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     793.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2652989.164 ±(99.9%) 29929.513 ops/s [Average]
[info]   (min, avg, max) = (2641010.819, 2652989.164, 2661145.025), stdev = 7772.599
[info]   CI (99.9%): [2623059.651, 2682918.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1402.594 ±(99.9%) 16.087 MB/sec [Average]
[info]   (min, avg, max) = (1396.138, 1402.594, 1406.945), stdev = 4.178
[info]   CI (99.9%): [1386.507, 1418.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1391.632 ±(99.9%) 550.854 MB/sec [Average]
[info]   (min, avg, max) = (1306.904, 1391.632, 1646.460), stdev = 143.055
[info]   CI (99.9%): [840.777, 1942.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   825.507 ±(99.9%) 327.286 B/op [Average]
[info]   (min, avg, max) = (778.823, 825.507, 977.199), stdev = 84.995
[info]   CI (99.9%): [498.222, 1152.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.052, 0.086), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 70.30% complete, ETA 00:20:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5645026.959 ops/s
[info] # Warmup Iteration   2: 6235334.551 ops/s
[info] # Warmup Iteration   3: 6465526.113 ops/s
[info] Iteration   1: 6329130.156 ops/s
[info]                  ·gc.alloc.rate:                   965.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6270998.259 ops/s
[info]                  ·gc.alloc.rate:                   956.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6345696.575 ops/s
[info]                  ·gc.alloc.rate:                   967.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6275157.591 ops/s
[info]                  ·gc.alloc.rate:                   956.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6382053.086 ops/s
[info]                  ·gc.alloc.rate:                   973.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6320607.133 ±(99.9%) 182697.010 ops/s [Average]
[info]   (min, avg, max) = (6270998.259, 6320607.133, 6382053.086), stdev = 47445.833
[info]   CI (99.9%): [6137910.123, 6503304.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   963.915 ±(99.9%) 27.973 MB/sec [Average]
[info]   (min, avg, max) = (956.290, 963.915, 973.273), stdev = 7.265
[info]   CI (99.9%): [935.942, 991.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   998.332 ±(99.9%) 14.938 MB/sec [Average]
[info]   (min, avg, max) = (994.137, 998.332, 1003.574), stdev = 3.879
[info]   CI (99.9%): [983.394, 1013.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   248.578 ±(99.9%) 6.739 B/op [Average]
[info]   (min, avg, max) = (247.146, 248.578, 251.027), stdev = 1.750
[info]   CI (99.9%): [241.839, 255.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.043, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.020, 0.021), stdev = 0.002
[info]   CI (99.9%): [0.011, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 70.61% complete, ETA 00:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257463.322 ops/s
[info] # Warmup Iteration   2: 633110.081 ops/s
[info] # Warmup Iteration   3: 647794.351 ops/s
[info] Iteration   1: 642836.394 ops/s
[info]                  ·gc.alloc.rate:                   1901.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4835.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 655763.660 ops/s
[info]                  ·gc.alloc.rate:                   1940.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4788.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 656367.099 ops/s
[info]                  ·gc.alloc.rate:                   1941.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4016.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 643266.541 ops/s
[info]                  ·gc.alloc.rate:                   1903.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4946.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 644785.771 ops/s
[info]                  ·gc.alloc.rate:                   1907.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4952.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   648603.893 ±(99.9%) 26388.787 ops/s [Average]
[info]   (min, avg, max) = (642836.394, 648603.893, 656367.099), stdev = 6853.084
[info]   CI (99.9%): [622215.106, 674992.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1918.988 ±(99.9%) 78.290 MB/sec [Average]
[info]   (min, avg, max) = (1901.763, 1918.988, 1941.893), stdev = 20.332
[info]   CI (99.9%): [1840.698, 1997.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.324 ±(99.9%) 574.816 MB/sec [Average]
[info]   (min, avg, max) = (1675.091, 1939.324, 2029.274), stdev = 149.278
[info]   CI (99.9%): [1364.508, 2514.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4707.721 ±(99.9%) 1513.139 B/op [Average]
[info]   (min, avg, max) = (4016.299, 4707.721, 4952.463), stdev = 392.957
[info]   CI (99.9%): [3194.582, 6220.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.212 ±(99.9%) 0.400 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.212, 0.306), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.91% complete, ETA 00:20:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461615.986 ops/s
[info] # Warmup Iteration   2: 808548.724 ops/s
[info] # Warmup Iteration   3: 838378.687 ops/s
[info] Iteration   1: 840934.998 ops/s
[info]                  ·gc.alloc.rate:                   2791.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5026.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.273 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 821910.263 ops/s
[info]                  ·gc.alloc.rate:                   2728.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3041.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5823.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 829123.078 ops/s
[info]                  ·gc.alloc.rate:                   2752.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5152.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 829550.927 ops/s
[info]                  ·gc.alloc.rate:                   2753.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5157.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 836768.609 ops/s
[info]                  ·gc.alloc.rate:                   2777.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5122.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   831657.575 ±(99.9%) 28431.273 ops/s [Average]
[info]   (min, avg, max) = (821910.263, 831657.575, 840934.998), stdev = 7383.511
[info]   CI (99.9%): [803226.302, 860088.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2760.853 ±(99.9%) 94.167 MB/sec [Average]
[info]   (min, avg, max) = (2728.367, 2760.853, 2791.512), stdev = 24.455
[info]   CI (99.9%): [2666.686, 2855.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2776.949 ±(99.9%) 572.025 MB/sec [Average]
[info]   (min, avg, max) = (2685.996, 2776.949, 3041.394), stdev = 148.553
[info]   CI (99.9%): [2204.924, 3348.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5256.355 ±(99.9%) 1237.207 B/op [Average]
[info]   (min, avg, max) = (5026.541, 5256.355, 5823.353), stdev = 321.299
[info]   CI (99.9%): [4019.149, 6493.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.229), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.276 ±(99.9%) 0.379 B/op [Average]
[info]   (min, avg, max) = (0.197, 0.276, 0.438), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 71.21% complete, ETA 00:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311086.111 ops/s
[info] # Warmup Iteration   2: 968925.375 ops/s
[info] # Warmup Iteration   3: 984999.940 ops/s
[info] Iteration   1: 974477.569 ops/s
[info]                  ·gc.alloc.rate:                   1208.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1580.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 992071.713 ops/s
[info]                  ·gc.alloc.rate:                   1230.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2079.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 987317.041 ops/s
[info]                  ·gc.alloc.rate:                   1224.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2104.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 966539.478 ops/s
[info]                  ·gc.alloc.rate:                   1198.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1620.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 966938.815 ops/s
[info]                  ·gc.alloc.rate:                   1199.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2172.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   977468.923 ±(99.9%) 45132.728 ops/s [Average]
[info]   (min, avg, max) = (966539.478, 977468.923, 992071.713), stdev = 11720.826
[info]   CI (99.9%): [932336.195, 1022601.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1212.389 ±(99.9%) 56.053 MB/sec [Average]
[info]   (min, avg, max) = (1198.805, 1212.389, 1230.519), stdev = 14.557
[info]   CI (99.9%): [1156.336, 1268.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.031 ±(99.9%) 707.595 MB/sec [Average]
[info]   (min, avg, max) = (978.871, 1188.031, 1334.946), stdev = 183.760
[info]   CI (99.9%): [480.436, 1895.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1911.598 ±(99.9%) 1102.002 B/op [Average]
[info]   (min, avg, max) = (1580.897, 1911.598, 2172.720), stdev = 286.186
[info]   CI (99.9%): [809.596, 3013.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.121 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.121, 0.136), stdev = 0.020
[info]   CI (99.9%): [0.045, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 71.52% complete, ETA 00:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6599944.461 ops/s
[info] # Warmup Iteration   2: 7588763.517 ops/s
[info] # Warmup Iteration   3: 7589154.226 ops/s
[info] Iteration   1: 7561754.922 ops/s
[info]                  ·gc.alloc.rate:               345.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53.240 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 7576542.461 ops/s
[info]                  ·gc.alloc.rate:                   346.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7681101.303 ops/s
[info]                  ·gc.alloc.rate:                   351.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7712272.778 ops/s
[info]                  ·gc.alloc.rate:                   352.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 7714315.842 ops/s
[info]                  ·gc.alloc.rate:               352.951 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7649197.461 ±(99.9%) 286618.957 ops/s [Average]
[info]   (min, avg, max) = (7561754.922, 7649197.461, 7714315.842), stdev = 74434.033
[info]   CI (99.9%): [7362578.505, 7935816.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   349.929 ±(99.9%) 13.269 MB/sec [Average]
[info]   (min, avg, max) = (345.875, 349.929, 352.951), stdev = 3.446
[info]   CI (99.9%): [336.659, 363.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.226 ±(99.9%) 166.829 MB/sec [Average]
[info]   (min, avg, max) = (255.754, 303.226, 335.087), stdev = 43.325
[info]   CI (99.9%): [136.397, 470.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   62.326 ±(99.9%) 32.125 B/op [Average]
[info]   (min, avg, max) = (53.138, 62.326, 68.655), stdev = 8.343
[info]   CI (99.9%): [30.202, 94.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.312 ±(99.9%) 2.540 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.490), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 2.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.305), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.82% complete, ETA 00:19:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30622.410 ops/s
[info] # Warmup Iteration   2: 255188.836 ops/s
[info] # Warmup Iteration   3: 263120.731 ops/s
[info] Iteration   1: 267196.608 ops/s
[info]                  ·gc.alloc.rate:                   1382.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7674.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.613 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 265533.037 ops/s
[info]                  ·gc.alloc.rate:                   1374.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7770.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 263410.134 ops/s
[info]                  ·gc.alloc.rate:                   1363.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7888.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 265022.281 ops/s
[info]                  ·gc.alloc.rate:                   1371.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7896.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.371 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 263528.430 ops/s
[info]                  ·gc.alloc.rate:                   1363.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              8144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9991.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   264938.098 ±(99.9%) 6022.211 ops/s [Average]
[info]   (min, avg, max) = (263410.134, 264938.098, 267196.608), stdev = 1563.949
[info]   CI (99.9%): [258915.888, 270960.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1371.114 ±(99.9%) 30.924 MB/sec [Average]
[info]   (min, avg, max) = (1363.338, 1371.114, 1382.625), stdev = 8.031
[info]   CI (99.9%): [1340.191, 1402.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8144.002, 8144.002, 8144.002), stdev = 0.001
[info]   CI (99.9%): [8144.001, 8144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1387.527 ±(99.9%) 615.904 MB/sec [Average]
[info]   (min, avg, max) = (1302.958, 1387.527, 1673.088), stdev = 159.948
[info]   CI (99.9%): [771.623, 2003.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8244.161 ±(99.9%) 3777.361 B/op [Average]
[info]   (min, avg, max) = (7674.747, 8244.161, 9991.345), stdev = 980.969
[info]   CI (99.9%): [4466.800, 12021.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.420 ±(99.9%) 0.533 B/op [Average]
[info]   (min, avg, max) = (0.249, 0.420, 0.613), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 72.12% complete, ETA 00:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5369.517 ops/s
[info] # Warmup Iteration   2: 7752.154 ops/s
[info] # Warmup Iteration   3: 8084.981 ops/s
[info] Iteration   1: 8066.050 ops/s
[info]                  ·gc.alloc.rate:                   2075.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     389641.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.738 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8137.331 ops/s
[info]                  ·gc.alloc.rate:                   2094.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     389158.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.620 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8045.804 ops/s
[info]                  ·gc.alloc.rate:                   2070.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     395561.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.918 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8141.695 ops/s
[info]                  ·gc.alloc.rate:                   2095.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     392185.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.330 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8075.758 ops/s
[info]                  ·gc.alloc.rate:                   2078.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              405001.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462629.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.029 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8093.327 ±(99.9%) 167.702 ops/s [Average]
[info]   (min, avg, max) = (8045.804, 8093.327, 8141.695), stdev = 43.552
[info]   CI (99.9%): [7925.626, 8261.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2082.859 ±(99.9%) 43.066 MB/sec [Average]
[info]   (min, avg, max) = (2070.704, 2082.859, 2095.320), stdev = 11.184
[info]   CI (99.9%): [2039.793, 2125.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405000.306 ±(99.9%) 2.156 B/op [Average]
[info]   (min, avg, max) = (405000.053, 405000.306, 405001.307), stdev = 0.560
[info]   CI (99.9%): [404998.150, 405002.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2086.965 ±(99.9%) 619.503 MB/sec [Average]
[info]   (min, avg, max) = (1997.167, 2086.965, 2373.958), stdev = 160.883
[info]   CI (99.9%): [1467.462, 2706.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   405835.460 ±(99.9%) 122645.359 B/op [Average]
[info]   (min, avg, max) = (389158.243, 405835.460, 462629.966), stdev = 31850.610
[info]   CI (99.9%): [283190.101, 528480.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.228 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.158, 0.228, 0.291), stdev = 0.051
[info]   CI (99.9%): [0.032, 0.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   44.327 ±(99.9%) 37.689 B/op [Average]
[info]   (min, avg, max) = (30.918, 44.327, 56.330), stdev = 9.788
[info]   CI (99.9%): [6.639, 82.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 72.42% complete, ETA 00:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6653.324 ops/s
[info] # Warmup Iteration   2: 13156.868 ops/s
[info] # Warmup Iteration   3: 13690.605 ops/s
[info] Iteration   1: 13741.118 ops/s
[info]                  ·gc.alloc.rate:                   370.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58589.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13749.129 ops/s
[info]                  ·gc.alloc.rate:               370.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          42424.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29277.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 13819.326 ops/s
[info]                  ·gc.alloc.rate:                   372.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36793.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.382 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13806.392 ops/s
[info]                  ·gc.alloc.rate:                   372.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36825.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.373 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13716.776 ops/s
[info]                  ·gc.alloc.rate:                   369.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              42424.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74139.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13766.548 ±(99.9%) 170.045 ops/s [Average]
[info]   (min, avg, max) = (13716.776, 13766.548, 13819.326), stdev = 44.160
[info]   CI (99.9%): [13596.504, 13936.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   371.106 ±(99.9%) 4.637 MB/sec [Average]
[info]   (min, avg, max) = (369.768, 371.106, 372.543), stdev = 1.204
[info]   CI (99.9%): [366.469, 375.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42424.035 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (42424.031, 42424.035, 42424.043), stdev = 0.005
[info]   CI (99.9%): [42424.016, 42424.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   411.935 ±(99.9%) 623.776 MB/sec [Average]
[info]   (min, avg, max) = (255.780, 411.935, 646.199), stdev = 161.993
[info]   CI (99.9%): [≈ 0, 1035.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47124.971 ±(99.9%) 71847.241 B/op [Average]
[info]   (min, avg, max) = (29277.480, 47124.971, 74139.421), stdev = 18658.500
[info]   CI (99.9%): [≈ 0, 118972.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.544 ±(99.9%) 4.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.544, 2.638), stdev = 1.170
[info]   CI (99.9%): [≈ 0, 5.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.983 ±(99.9%) 513.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.983, 300.382), stdev = 133.280
[info]   CI (99.9%): [≈ 0, 575.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.483
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.73% complete, ETA 00:19:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20039.886 ops/s
[info] # Warmup Iteration   2: 23801.554 ops/s
[info] # Warmup Iteration   3: 23819.426 ops/s
[info] Iteration   1: 24304.848 ops/s
[info]                  ·gc.alloc.rate:                   454.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16562.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.369 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 24197.349 ops/s
[info]                  ·gc.alloc.rate:                   452.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43196.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24345.869 ops/s
[info]                  ·gc.alloc.rate:               455.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21444.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 24001.547 ops/s
[info]                  ·gc.alloc.rate:                   449.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21751.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 24134.709 ops/s
[info]                  ·gc.alloc.rate:                   451.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43263.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24196.865 ±(99.9%) 530.339 ops/s [Average]
[info]   (min, avg, max) = (24001.547, 24196.865, 24345.869), stdev = 137.727
[info]   CI (99.9%): [23666.526, 24727.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   452.771 ±(99.9%) 9.897 MB/sec [Average]
[info]   (min, avg, max) = (449.131, 452.771, 455.557), stdev = 2.570
[info]   CI (99.9%): [442.874, 462.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29448.019 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (29448.018, 29448.019, 29448.024), stdev = 0.003
[info]   CI (99.9%): [29448.008, 29448.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.381 ±(99.9%) 763.157 MB/sec [Average]
[info]   (min, avg, max) = (255.791, 449.381, 664.126), stdev = 198.189
[info]   CI (99.9%): [≈ 0, 1212.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29243.618 ±(99.9%) 49798.344 B/op [Average]
[info]   (min, avg, max) = (16562.592, 29243.618, 43263.533), stdev = 12932.472
[info]   CI (99.9%): [≈ 0, 79041.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.390 ±(99.9%) 2.936 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.753), stdev = 0.762
[info]   CI (99.9%): [≈ 0, 3.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.380 ±(99.9%) 190.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.380, 114.008), stdev = 49.585
[info]   CI (99.9%): [≈ 0, 216.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 73.03% complete, ETA 00:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 840.560 ops/s
[info] # Warmup Iteration   2: 2322.980 ops/s
[info] # Warmup Iteration   3: 2337.293 ops/s
[info] Iteration   1: 2334.599 ops/s
[info]                  ·gc.alloc.rate:                   1462.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              985535.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     882267.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2346.437 ops/s
[info]                  ·gc.alloc.rate:                   1469.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     885126.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.956 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2360.212 ops/s
[info]                  ·gc.alloc.rate:                   1478.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1109643.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.879 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2356.303 ops/s
[info]                  ·gc.alloc.rate:                   1475.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     895093.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.902 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2360.745 ops/s
[info]                  ·gc.alloc.rate:                   1478.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1121603.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.873 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2351.659 ±(99.9%) 42.861 ops/s [Average]
[info]   (min, avg, max) = (2334.599, 2351.659, 2360.745), stdev = 11.131
[info]   CI (99.9%): [2308.798, 2394.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1472.776 ±(99.9%) 26.546 MB/sec [Average]
[info]   (min, avg, max) = (1462.167, 1472.776, 1478.462), stdev = 6.894
[info]   CI (99.9%): [1446.229, 1499.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   985529.603 ±(99.9%) 12.164 B/op [Average]
[info]   (min, avg, max) = (985528.183, 985529.603, 985535.253), stdev = 3.159
[info]   CI (99.9%): [985517.439, 985541.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1463.164 ±(99.9%) 740.651 MB/sec [Average]
[info]   (min, avg, max) = (1308.955, 1463.164, 1682.599), stdev = 192.345
[info]   CI (99.9%): [722.513, 2203.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   978746.732 ±(99.9%) 481764.517 B/op [Average]
[info]   (min, avg, max) = (882267.178, 978746.732, 1121603.414), stdev = 125112.715
[info]   CI (99.9%): [496982.215, 1460511.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.001 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
[info]   CI (99.9%): [0.021, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.927 ±(99.9%) 0.249 B/op [Average]
[info]   (min, avg, max) = (13.873, 13.927, 14.027), stdev = 0.065
[info]   CI (99.9%): [13.678, 14.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 73.33% complete, ETA 00:18:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6195.340 ops/s
[info] # Warmup Iteration   2: 8536.017 ops/s
[info] # Warmup Iteration   3: 8615.565 ops/s
[info] Iteration   1: 8691.837 ops/s
[info]                  ·gc.alloc.rate:                   2000.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360862.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.895 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8668.972 ops/s
[info]                  ·gc.alloc.rate:                   1995.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364498.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.503 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8679.980 ops/s
[info]                  ·gc.alloc.rate:                   1998.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366210.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.932 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8577.435 ops/s
[info]                  ·gc.alloc.rate:                   1974.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372116.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.098 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8593.440 ops/s
[info]                  ·gc.alloc.rate:                   1978.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              362300.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372478.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.684 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8642.333 ±(99.9%) 203.573 ops/s [Average]
[info]   (min, avg, max) = (8577.435, 8642.333, 8691.837), stdev = 52.867
[info]   CI (99.9%): [8438.760, 8845.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1989.504 ±(99.9%) 46.916 MB/sec [Average]
[info]   (min, avg, max) = (1974.454, 1989.504, 2000.956), stdev = 12.184
[info]   CI (99.9%): [1942.588, 2036.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362277.782 ±(99.9%) 49.345 B/op [Average]
[info]   (min, avg, max) = (362272.050, 362277.782, 362300.705), stdev = 12.815
[info]   CI (99.9%): [362228.437, 362327.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2016.591 ±(99.9%) 62.935 MB/sec [Average]
[info]   (min, avg, max) = (1993.171, 2016.591, 2033.935), stdev = 16.344
[info]   CI (99.9%): [1953.656, 2079.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   367233.461 ±(99.9%) 19298.633 B/op [Average]
[info]   (min, avg, max) = (360862.594, 367233.461, 372478.690), stdev = 5011.794
[info]   CI (99.9%): [347934.828, 386532.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.136 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.136, 0.171), stdev = 0.028
[info]   CI (99.9%): [0.027, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.822 ±(99.9%) 19.731 B/op [Average]
[info]   (min, avg, max) = (19.098, 24.822, 30.932), stdev = 5.124
[info]   CI (99.9%): [5.091, 44.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.64% complete, ETA 00:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25299.032 ops/s
[info] # Warmup Iteration   2: 41969.384 ops/s
[info] # Warmup Iteration   3: 43124.556 ops/s
[info] Iteration   1: 43271.995 ops/s
[info]                  ·gc.alloc.rate:                   627.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23548.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43482.993 ops/s
[info]                  ·gc.alloc.rate:                   630.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23434.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.507 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43456.231 ops/s
[info]                  ·gc.alloc.rate:                   629.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23473.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43604.199 ops/s
[info]                  ·gc.alloc.rate:                   632.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23441.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 43600.285 ops/s
[info]                  ·gc.alloc.rate:                   631.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23540.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   43483.141 ±(99.9%) 522.627 ops/s [Average]
[info]   (min, avg, max) = (43271.995, 43483.141, 43604.199), stdev = 135.725
[info]   CI (99.9%): [42960.514, 44005.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   630.178 ±(99.9%) 7.649 MB/sec [Average]
[info]   (min, avg, max) = (627.120, 630.178, 632.000), stdev = 1.986
[info]   CI (99.9%): [622.529, 637.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.853 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (22807.761, 22807.853, 22807.910), stdev = 0.057
[info]   CI (99.9%): [22807.634, 22808.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   648.951 ±(99.9%) 7.670 MB/sec [Average]
[info]   (min, avg, max) = (647.450, 648.951, 652.172), stdev = 1.992
[info]   CI (99.9%): [641.280, 656.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23487.332 ±(99.9%) 207.911 B/op [Average]
[info]   (min, avg, max) = (23434.021, 23487.332, 23548.262), stdev = 53.994
[info]   CI (99.9%): [23279.420, 23695.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.572 ±(99.9%) 4.608 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.572, 2.712), stdev = 1.197
[info]   CI (99.9%): [≈ 0, 5.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20.780 ±(99.9%) 167.589 B/op [Average]
[info]   (min, avg, max) = (0.754, 20.780, 98.633), stdev = 43.522
[info]   CI (99.9%): [≈ 0, 188.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 73.94% complete, ETA 00:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57038.307 ops/s
[info] # Warmup Iteration   2: 65588.591 ops/s
[info] # Warmup Iteration   3: 65687.280 ops/s
[info] Iteration   1: 66145.976 ops/s
[info]                  ·gc.alloc.rate:                   498.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13971.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.926 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 66292.556 ops/s
[info]                  ·gc.alloc.rate:                   499.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7867.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 65728.286 ops/s
[info]                  ·gc.alloc.rate:                   495.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15854.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 66337.857 ops/s
[info]                  ·gc.alloc.rate:                   499.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7854.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 66516.131 ops/s
[info]                  ·gc.alloc.rate:                   501.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15666.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   66204.161 ±(99.9%) 1143.674 ops/s [Average]
[info]   (min, avg, max) = (65728.286, 66204.161, 66516.131), stdev = 297.008
[info]   CI (99.9%): [65060.488, 67347.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   498.808 ±(99.9%) 8.325 MB/sec [Average]
[info]   (min, avg, max) = (495.340, 498.808, 501.107), stdev = 2.162
[info]   CI (99.9%): [490.484, 507.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11856.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11856.006, 11856.007, 11856.007), stdev = 0.001
[info]   CI (99.9%): [11856.006, 11856.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.892 ±(99.9%) 656.175 MB/sec [Average]
[info]   (min, avg, max) = (331.093, 514.892, 662.411), stdev = 170.407
[info]   CI (99.9%): [≈ 0, 1171.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12243.101 ±(99.9%) 15659.506 B/op [Average]
[info]   (min, avg, max) = (7854.679, 12243.101, 15854.889), stdev = 4066.724
[info]   CI (99.9%): [≈ 0, 27902.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.419 ±(99.9%) 3.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.419, 1.889), stdev = 0.822
[info]   CI (99.9%): [≈ 0, 3.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.973 ±(99.9%) 75.268 B/op [Average]
[info]   (min, avg, max) = (0.498, 9.973, 44.926), stdev = 19.547
[info]   CI (99.9%): [≈ 0, 85.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 74.24% complete, ETA 00:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68793.758 ops/s
[info] # Warmup Iteration   2: 77773.193 ops/s
[info] # Warmup Iteration   3: 77623.725 ops/s
[info] Iteration   1: 77798.424 ops/s
[info]                  ·gc.alloc.rate:      1.187 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 77885.414 ops/s
[info]                  ·gc.alloc.rate:      1.188 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 77940.380 ops/s
[info]                  ·gc.alloc.rate:      1.189 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77727.643 ops/s
[info]                  ·gc.alloc.rate:      1.186 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 77583.278 ops/s
[info]                  ·gc.alloc.rate:      1.183 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   77787.028 ±(99.9%) 538.977 ops/s [Average]
[info]   (min, avg, max) = (77583.278, 77787.028, 77940.380), stdev = 139.971
[info]   CI (99.9%): [77248.051, 78326.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.187 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (1.183, 1.187, 1.189), stdev = 0.002
[info]   CI (99.9%): [1.178, 1.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.006, 24.006, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.006, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.55% complete, ETA 00:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2793.620 ops/s
[info] # Warmup Iteration   2: 5864.147 ops/s
[info] # Warmup Iteration   3: 6007.557 ops/s
[info] Iteration   1: 5917.171 ops/s
[info]                  ·gc.alloc.rate:                   1768.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437557.677 B/op
[info]                  ·gc.churn.PS_Old_Gen:             0.196 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:        52.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.825 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 6008.210 ops/s
[info]                  ·gc.alloc.rate:                   1795.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              470337.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434173.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.166 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5997.904 ops/s
[info]                  ·gc.alloc.rate:                   1792.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     526298.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.849 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5991.797 ops/s
[info]                  ·gc.alloc.rate:                   1790.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441791.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.806 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5916.185 ops/s
[info]                  ·gc.alloc.rate:                   1768.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              470336.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449161.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.148 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5966.253 ±(99.9%) 175.728 ops/s [Average]
[info]   (min, avg, max) = (5916.185, 5966.253, 6008.210), stdev = 45.636
[info]   CI (99.9%): [5790.526, 6141.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1783.206 ±(99.9%) 52.051 MB/sec [Average]
[info]   (min, avg, max) = (1768.076, 1783.206, 1795.688), stdev = 13.517
[info]   CI (99.9%): [1731.156, 1835.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   470336.029 ±(99.9%) 2.680 B/op [Average]
[info]   (min, avg, max) = (470335.331, 470336.029, 470337.006), stdev = 0.696
[info]   CI (99.9%): [470333.348, 470338.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1735.938 ±(99.9%) 584.860 MB/sec [Average]
[info]   (min, avg, max) = (1645.705, 1735.938, 2005.838), stdev = 151.886
[info]   CI (99.9%): [1151.078, 2320.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   457796.424 ±(99.9%) 149021.214 B/op [Average]
[info]   (min, avg, max) = (434173.274, 457796.424, 526298.106), stdev = 38700.336
[info]   CI (99.9%): [308775.210, 606817.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Old_Gen":
[info]   0.039 ±(99.9%) 0.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.196), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   10.422 ±(99.9%) 89.739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.422, 52.112), stdev = 23.305
[info]   CI (99.9%): [≈ 0, 100.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   32.959 ±(99.9%) 45.230 B/op [Average]
[info]   (min, avg, max) = (21.849, 32.959, 49.825), stdev = 11.746
[info]   CI (99.9%): [≈ 0, 78.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 14.000), stdev = 3.715
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 74.85% complete, ETA 00:17:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4579218.460 ops/s
[info] # Warmup Iteration   2: 5233317.275 ops/s
[info] # Warmup Iteration   3: 5184722.377 ops/s
[info] Iteration   1: 5306639.480 ops/s
[info]                  ·gc.alloc.rate:                   1591.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     395.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5126813.660 ops/s
[info]                  ·gc.alloc.rate:                   1537.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     513.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5231270.294 ops/s
[info]                  ·gc.alloc.rate:                   1569.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     506.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5164339.408 ops/s
[info]                  ·gc.alloc.rate:                   1549.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5175365.999 ops/s
[info]                  ·gc.alloc.rate:                   1552.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5200885.768 ±(99.9%) 269411.914 ops/s [Average]
[info]   (min, avg, max) = (5126813.660, 5200885.768, 5306639.480), stdev = 69965.418
[info]   CI (99.9%): [4931473.854, 5470297.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1560.071 ±(99.9%) 80.749 MB/sec [Average]
[info]   (min, avg, max) = (1537.976, 1560.071, 1591.892), stdev = 20.970
[info]   CI (99.9%): [1479.322, 1640.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1547.053 ±(99.9%) 719.372 MB/sec [Average]
[info]   (min, avg, max) = (1334.261, 1547.053, 1692.457), stdev = 186.819
[info]   CI (99.9%): [827.682, 2266.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   468.412 ±(99.9%) 229.218 B/op [Average]
[info]   (min, avg, max) = (395.612, 468.412, 514.652), stdev = 59.527
[info]   CI (99.9%): [239.195, 697.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.028, 0.038), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 75.15% complete, ETA 00:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114678.752 ops/s
[info] # Warmup Iteration   2: 334057.885 ops/s
[info] # Warmup Iteration   3: 339630.940 ops/s
[info] Iteration   1: 339236.780 ops/s
[info]                  ·gc.alloc.rate:                   1824.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9144.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 338971.039 ops/s
[info]                  ·gc.alloc.rate:                   1823.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7699.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.677 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 336317.555 ops/s
[info]                  ·gc.alloc.rate:                   1809.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9387.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 339707.744 ops/s
[info]                  ·gc.alloc.rate:                   1826.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7792.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 332341.506 ops/s
[info]                  ·gc.alloc.rate:                   1787.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7996.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.591 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   337314.925 ±(99.9%) 11851.520 ops/s [Average]
[info]   (min, avg, max) = (332341.506, 337314.925, 339707.744), stdev = 3077.802
[info]   CI (99.9%): [325463.405, 349166.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1814.227 ±(99.9%) 63.670 MB/sec [Average]
[info]   (min, avg, max) = (1787.390, 1814.227, 1826.995), stdev = 16.535
[info]   CI (99.9%): [1750.557, 1877.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8464.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8464.001, 8464.001, 8464.001), stdev = 0.001
[info]   CI (99.9%): [8464.001, 8464.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1801.424 ±(99.9%) 662.285 MB/sec [Average]
[info]   (min, avg, max) = (1658.513, 1801.424, 2006.626), stdev = 171.993
[info]   CI (99.9%): [1139.139, 2463.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8404.322 ±(99.9%) 3075.766 B/op [Average]
[info]   (min, avg, max) = (7699.974, 8404.322, 9387.920), stdev = 798.767
[info]   CI (99.9%): [5328.555, 11480.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.389 ±(99.9%) 0.882 B/op [Average]
[info]   (min, avg, max) = (0.193, 0.389, 0.677), stdev = 0.229
[info]   CI (99.9%): [≈ 0, 1.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 75.45% complete, ETA 00:17:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2924105.920 ops/s
[info] # Warmup Iteration   2: 3413772.720 ops/s
[info] # Warmup Iteration   3: 3450811.859 ops/s
[info] Iteration   1: 3419867.202 ops/s
[info]                  ·gc.alloc.rate:                   556.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3468577.134 ops/s
[info]                  ·gc.alloc.rate:               564.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3313079.795 ops/s
[info]                  ·gc.alloc.rate:                   539.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3453611.225 ops/s
[info]                  ·gc.alloc.rate:                   561.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3463835.638 ops/s
[info]                  ·gc.alloc.rate:               563.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3423794.199 ±(99.9%) 249334.649 ops/s [Average]
[info]   (min, avg, max) = (3313079.795, 3423794.199, 3468577.134), stdev = 64751.417
[info]   CI (99.9%): [3174459.550, 3673128.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   557.049 ±(99.9%) 40.355 MB/sec [Average]
[info]   (min, avg, max) = (539.077, 557.049, 564.234), stdev = 10.480
[info]   CI (99.9%): [516.694, 597.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.010 ±(99.9%) 698.612 MB/sec [Average]
[info]   (min, avg, max) = (331.082, 530.010, 662.654), stdev = 181.427
[info]   CI (99.9%): [≈ 0, 1228.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   244.399 ±(99.9%) 330.929 B/op [Average]
[info]   (min, avg, max) = (150.216, 244.399, 314.543), stdev = 85.941
[info]   CI (99.9%): [≈ 0, 575.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 3.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.833), stdev = 0.804
[info]   CI (99.9%): [≈ 0, 3.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.182 ±(99.9%) 1.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.843), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 1.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 75.76% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93658.604 ops/s
[info] # Warmup Iteration   2: 332307.721 ops/s
[info] # Warmup Iteration   3: 336909.269 ops/s
[info] Iteration   1: 335438.281 ops/s
[info]                  ·gc.alloc.rate:                   1314.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6113.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 339237.505 ops/s
[info]                  ·gc.alloc.rate:                   1329.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6084.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 335570.917 ops/s
[info]                  ·gc.alloc.rate:                   1315.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6192.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 334336.134 ops/s
[info]                  ·gc.alloc.rate:                   1310.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6258.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.490 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 338436.493 ops/s
[info]                  ·gc.alloc.rate:                   1326.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6220.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   336603.866 ±(99.9%) 8137.248 ops/s [Average]
[info]   (min, avg, max) = (334336.134, 336603.866, 339237.505), stdev = 2113.218
[info]   CI (99.9%): [328466.618, 344741.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1319.303 ±(99.9%) 31.824 MB/sec [Average]
[info]   (min, avg, max) = (1310.328, 1319.303, 1329.593), stdev = 8.265
[info]   CI (99.9%): [1287.479, 1351.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6168.001, 6168.001, 6168.001), stdev = 0.001
[info]   CI (99.9%): [6168.001, 6168.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.521 ±(99.9%) 53.093 MB/sec [Average]
[info]   (min, avg, max) = (1303.015, 1320.521, 1337.616), stdev = 13.788
[info]   CI (99.9%): [1267.428, 1373.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6173.866 ±(99.9%) 281.024 B/op [Average]
[info]   (min, avg, max) = (6084.891, 6173.866, 6258.995), stdev = 72.981
[info]   CI (99.9%): [5892.843, 6454.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.428 ±(99.9%) 0.680 B/op [Average]
[info]   (min, avg, max) = (0.195, 0.428, 0.586), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 1.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 76.06% complete, ETA 00:16:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4153879.951 ops/s
[info] # Warmup Iteration   2: 5983718.421 ops/s
[info] # Warmup Iteration   3: 6013365.639 ops/s
[info] Iteration   1: 5976667.139 ops/s
[info]                  ·gc.alloc.rate:                   3797.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3724.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     980.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 5976356.652 ops/s
[info]                  ·gc.alloc.rate:                   3797.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3737.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     984.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 5998064.648 ops/s
[info]                  ·gc.alloc.rate:                   3812.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     982.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6042634.131 ops/s
[info]                  ·gc.alloc.rate:                   3839.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1063.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 6016990.918 ops/s
[info]                  ·gc.alloc.rate:                   3823.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6002142.698 ±(99.9%) 108752.242 ops/s [Average]
[info]   (min, avg, max) = (5976356.652, 6002142.698, 6042634.131), stdev = 28242.612
[info]   CI (99.9%): [5893390.455, 6110894.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3814.123 ±(99.9%) 69.163 MB/sec [Average]
[info]   (min, avg, max) = (3797.539, 3814.123, 3839.756), stdev = 17.962
[info]   CI (99.9%): [3744.960, 3883.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3807.553 ±(99.9%) 598.548 MB/sec [Average]
[info]   (min, avg, max) = (3724.772, 3807.553, 4085.213), stdev = 155.441
[info]   CI (99.9%): [3209.006, 4406.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   998.170 ±(99.9%) 141.708 B/op [Average]
[info]   (min, avg, max) = (979.431, 998.170, 1063.925), stdev = 36.801
[info]   CI (99.9%): [856.461, 1139.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.029
[info]   CI (99.9%): [0.012, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.033, 0.044), stdev = 0.008
[info]   CI (99.9%): [0.003, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 10.000), stdev = 0.894
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 76.36% complete, ETA 00:16:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3786441.889 ops/s
[info] # Warmup Iteration   2: 8316891.665 ops/s
[info] # Warmup Iteration   3: 8374517.282 ops/s
[info] Iteration   1: 8481391.740 ops/s
[info]                  ·gc.alloc.rate:                   3190.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     560.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 8338494.754 ops/s
[info]                  ·gc.alloc.rate:                   3137.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3043.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8454932.441 ops/s
[info]                  ·gc.alloc.rate:                   3180.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     631.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8424986.219 ops/s
[info]                  ·gc.alloc.rate:                   3169.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     571.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 8373769.335 ops/s
[info]                  ·gc.alloc.rate:                   3149.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   8414714.898 ±(99.9%) 224981.113 ops/s [Average]
[info]   (min, avg, max) = (8338494.754, 8414714.898, 8481391.740), stdev = 58426.881
[info]   CI (99.9%): [8189733.785, 8639696.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3165.457 ±(99.9%) 83.967 MB/sec [Average]
[info]   (min, avg, max) = (3137.218, 3165.457, 3190.349), stdev = 21.806
[info]   CI (99.9%): [3081.490, 3249.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3116.684 ±(99.9%) 602.537 MB/sec [Average]
[info]   (min, avg, max) = (3019.618, 3116.684, 3394.799), stdev = 156.477
[info]   CI (99.9%): [2514.147, 3719.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   582.848 ±(99.9%) 108.130 B/op [Average]
[info]   (min, avg, max) = (560.319, 582.848, 631.884), stdev = 28.081
[info]   CI (99.9%): [474.718, 690.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.187), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.026, 0.035), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 76.67% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44144244.099 ops/s
[info] # Warmup Iteration   2: 45622830.639 ops/s
[info] # Warmup Iteration   3: 47585403.064 ops/s
[info] Iteration   1: 47609687.153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47607468.895 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 47613064.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47128453.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47470988.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   47485932.437 ±(99.9%) 803722.776 ops/s [Average]
[info]   (min, avg, max) = (47128453.567, 47485932.437, 47613064.063), stdev = 208724.253
[info]   CI (99.9%): [46682209.660, 48289655.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 76.97% complete, ETA 00:16:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13688407.329 ops/s
[info] # Warmup Iteration   2: 16814131.062 ops/s
[info] # Warmup Iteration   3: 17022000.527 ops/s
[info] Iteration   1: 17082539.269 ops/s
[info]                  ·gc.alloc.rate:                   1128.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17129171.646 ops/s
[info]                  ·gc.alloc.rate:                   1131.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16673745.524 ops/s
[info]                  ·gc.alloc.rate:                   1101.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16715830.688 ops/s
[info]                  ·gc.alloc.rate:                   1104.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17130402.789 ops/s
[info]                  ·gc.alloc.rate:                   1132.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   16946337.983 ±(99.9%) 889196.673 ops/s [Average]
[info]   (min, avg, max) = (16673745.524, 16946337.983, 17130402.789), stdev = 230921.552
[info]   CI (99.9%): [16057141.311, 17835534.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1119.891 ±(99.9%) 58.750 MB/sec [Average]
[info]   (min, avg, max) = (1101.876, 1119.891, 1132.040), stdev = 15.257
[info]   CI (99.9%): [1061.141, 1178.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1138.892 ±(99.9%) 698.367 MB/sec [Average]
[info]   (min, avg, max) = (1001.954, 1138.892, 1340.022), stdev = 181.364
[info]   CI (99.9%): [440.525, 1837.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   105.832 ±(99.9%) 66.732 B/op [Average]
[info]   (min, avg, max) = (92.054, 105.832, 126.477), stdev = 17.330
[info]   CI (99.9%): [39.099, 172.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.007, 0.010), stdev = 0.002
[info]   CI (99.9%): [≈ 10⁻⁴, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 77.27% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4100463.495 ops/s
[info] # Warmup Iteration   2: 7439672.148 ops/s
[info] # Warmup Iteration   3: 7507699.865 ops/s
[info] Iteration   1: 7531577.363 ops/s
[info]                  ·gc.alloc.rate:                   3637.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3711.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 7534967.665 ops/s
[info]                  ·gc.alloc.rate:                   3638.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7500349.866 ops/s
[info]                  ·gc.alloc.rate:                   3622.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3740.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     784.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7428951.834 ops/s
[info]                  ·gc.alloc.rate:                   3588.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     793.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 7596098.541 ops/s
[info]                  ·gc.alloc.rate:                   3668.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     705.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7518389.054 ±(99.9%) 234320.264 ops/s [Average]
[info]   (min, avg, max) = (7428951.834, 7518389.054, 7596098.541), stdev = 60852.228
[info]   CI (99.9%): [7284068.790, 7752709.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3631.107 ±(99.9%) 112.173 MB/sec [Average]
[info]   (min, avg, max) = (3588.816, 3631.107, 3668.951), stdev = 29.131
[info]   CI (99.9%): [3518.934, 3743.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3598.977 ±(99.9%) 706.202 MB/sec [Average]
[info]   (min, avg, max) = (3392.554, 3598.977, 3745.822), stdev = 183.398
[info]   CI (99.9%): [2892.775, 4305.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   753.495 ±(99.9%) 165.505 B/op [Average]
[info]   (min, avg, max) = (705.271, 753.495, 793.249), stdev = 42.981
[info]   CI (99.9%): [587.990, 919.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.121, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.033, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.025, 0.030), stdev = 0.005
[info]   CI (99.9%): [0.007, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 77.58% complete, ETA 00:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7610228.253 ops/s
[info] # Warmup Iteration   2: 11449078.137 ops/s
[info] # Warmup Iteration   3: 11268529.008 ops/s
[info] Iteration   1: 11390636.067 ops/s
[info]                  ·gc.alloc.rate:                   2258.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2340.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11561589.638 ops/s
[info]                  ·gc.alloc.rate:                   2291.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2356.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11571040.900 ops/s
[info]                  ·gc.alloc.rate:                   2293.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11457588.898 ops/s
[info]                  ·gc.alloc.rate:                   2271.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11522902.509 ops/s
[info]                  ·gc.alloc.rate:                   2284.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   11500751.602 ±(99.9%) 292756.363 ops/s [Average]
[info]   (min, avg, max) = (11390636.067, 11500751.602, 11571040.900), stdev = 76027.898
[info]   CI (99.9%): [11207995.240, 11793507.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2280.018 ±(99.9%) 58.075 MB/sec [Average]
[info]   (min, avg, max) = (2258.115, 2280.018, 2293.964), stdev = 15.082
[info]   CI (99.9%): [2221.943, 2338.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2295.861 ±(99.9%) 562.553 MB/sec [Average]
[info]   (min, avg, max) = (2035.775, 2295.861, 2378.602), stdev = 146.093
[info]   CI (99.9%): [1733.308, 2858.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   314.139 ±(99.9%) 74.528 B/op [Average]
[info]   (min, avg, max) = (279.620, 314.139, 324.851), stdev = 19.355
[info]   CI (99.9%): [239.611, 388.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.013, 0.017), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 77.88% complete, ETA 00:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4630748.141 ops/s
[info] # Warmup Iteration   2: 10946382.199 ops/s
[info] # Warmup Iteration   3: 11117224.455 ops/s
[info] Iteration   1: 11140866.027 ops/s
[info]                  ·gc.alloc.rate:                   2718.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11046906.503 ops/s
[info]                  ·gc.alloc.rate:                   2695.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     383.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11142339.227 ops/s
[info]                  ·gc.alloc.rate:                   2718.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     382.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11131419.148 ops/s
[info]                  ·gc.alloc.rate:                   2716.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11061880.471 ops/s
[info]                  ·gc.alloc.rate:                   2700.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     387.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11104682.275 ±(99.9%) 178673.660 ops/s [Average]
[info]   (min, avg, max) = (11046906.503, 11104682.275, 11142339.227), stdev = 46400.982
[info]   CI (99.9%): [10926008.615, 11283355.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2709.754 ±(99.9%) 42.986 MB/sec [Average]
[info]   (min, avg, max) = (2695.364, 2709.754, 2718.828), stdev = 11.163
[info]   CI (99.9%): [2666.768, 2752.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2701.209 ±(99.9%) 83.216 MB/sec [Average]
[info]   (min, avg, max) = (2667.863, 2701.209, 2721.696), stdev = 21.611
[info]   CI (99.9%): [2617.993, 2784.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   382.797 ±(99.9%) 14.368 B/op [Average]
[info]   (min, avg, max) = (376.878, 382.797, 387.079), stdev = 3.731
[info]   CI (99.9%): [368.429, 397.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.014, 0.018), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 78.18% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25797314.513 ops/s
[info] # Warmup Iteration   2: 32875425.314 ops/s
[info] # Warmup Iteration   3: 33448783.949 ops/s
[info] Iteration   1: 34079155.384 ops/s
[info]                  ·gc.alloc.rate:                   692.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34682950.939 ops/s
[info]                  ·gc.alloc.rate:                   705.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 33982286.679 ops/s
[info]                  ·gc.alloc.rate:                   691.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34110791.096 ops/s
[info]                  ·gc.alloc.rate:                   693.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 33959192.593 ops/s
[info]                  ·gc.alloc.rate:               690.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30.841 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   34162875.338 ±(99.9%) 1146010.365 ops/s [Average]
[info]   (min, avg, max) = (33959192.593, 34162875.338, 34682950.939), stdev = 297615.253
[info]   CI (99.9%): [33016864.973, 35308885.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   694.750 ±(99.9%) 22.972 MB/sec [Average]
[info]   (min, avg, max) = (690.682, 694.750, 705.179), stdev = 5.966
[info]   CI (99.9%): [671.778, 717.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   664.194 ±(99.9%) 3.393 MB/sec [Average]
[info]   (min, avg, max) = (663.479, 664.194, 665.656), stdev = 0.881
[info]   CI (99.9%): [660.800, 667.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.595 ±(99.9%) 1.091 B/op [Average]
[info]   (min, avg, max) = (30.108, 30.595, 30.841), stdev = 0.283
[info]   CI (99.9%): [29.504, 31.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 78.48% complete, ETA 00:15:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44958757.556 ops/s
[info] # Warmup Iteration   2: 44169778.549 ops/s
[info] # Warmup Iteration   3: 58745536.337 ops/s
[info] Iteration   1: 58786018.920 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 58851234.274 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 58778467.939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 58768567.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 58810928.134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   58799043.328 ±(99.9%) 127521.289 ops/s [Average]
[info]   (min, avg, max) = (58768567.371, 58799043.328, 58851234.274), stdev = 33116.874
[info]   CI (99.9%): [58671522.039, 58926564.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 78.79% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12970395.670 ops/s
[info] # Warmup Iteration   2: 12793749.556 ops/s
[info] # Warmup Iteration   3: 13189480.687 ops/s
[info] Iteration   1: 13209710.853 ops/s
[info]                  ·gc.alloc.rate:                   2215.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13331779.356 ops/s
[info]                  ·gc.alloc.rate:                   2236.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13184929.203 ops/s
[info]                  ·gc.alloc.rate:                   2212.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13298925.285 ops/s
[info]                  ·gc.alloc.rate:                   2230.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13205019.206 ops/s
[info]                  ·gc.alloc.rate:                   2215.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   13246072.781 ±(99.9%) 250181.696 ops/s [Average]
[info]   (min, avg, max) = (13184929.203, 13246072.781, 13331779.356), stdev = 64971.392
[info]   CI (99.9%): [12995891.085, 13496254.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2222.144 ±(99.9%) 41.743 MB/sec [Average]
[info]   (min, avg, max) = (2212.299, 2222.144, 2236.530), stdev = 10.840
[info]   CI (99.9%): [2180.401, 2263.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2236.582 ±(99.9%) 712.570 MB/sec [Average]
[info]   (min, avg, max) = (2029.599, 2236.582, 2380.794), stdev = 185.052
[info]   CI (99.9%): [1524.012, 2949.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   265.804 ±(99.9%) 89.397 B/op [Average]
[info]   (min, avg, max) = (239.574, 265.804, 283.741), stdev = 23.216
[info]   CI (99.9%): [176.408, 355.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.011, 0.012), stdev = 0.001
[info]   CI (99.9%): [0.006, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 79.09% complete, ETA 00:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1567856.961 ops/s
[info] # Warmup Iteration   2: 2232505.715 ops/s
[info] # Warmup Iteration   3: 2231967.002 ops/s
[info] Iteration   1: 2222285.927 ops/s
[info]                  ·gc.alloc.rate:                   1920.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1416.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2255223.621 ops/s
[info]                  ·gc.alloc.rate:                   1948.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1169.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2247594.235 ops/s
[info]                  ·gc.alloc.rate:                   1942.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1415.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2229662.019 ops/s
[info]                  ·gc.alloc.rate:                   1926.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1432.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2215756.995 ops/s
[info]                  ·gc.alloc.rate:                   1914.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1204.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2234104.559 ±(99.9%) 64549.573 ops/s [Average]
[info]   (min, avg, max) = (2215756.995, 2234104.559, 2255223.621), stdev = 16763.319
[info]   CI (99.9%): [2169554.986, 2298654.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1930.660 ±(99.9%) 55.660 MB/sec [Average]
[info]   (min, avg, max) = (1914.914, 1930.660, 1948.868), stdev = 14.455
[info]   CI (99.9%): [1875.001, 1986.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1360.000, 1360.000, 1360.000), stdev = 0.001
[info]   CI (99.9%): [1360.000, 1360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1884.491 ±(99.9%) 699.532 MB/sec [Average]
[info]   (min, avg, max) = (1676.083, 1884.491, 2029.210), stdev = 181.666
[info]   CI (99.9%): [1184.959, 2584.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1327.604 ±(99.9%) 497.004 B/op [Average]
[info]   (min, avg, max) = (1169.640, 1327.604, 1432.223), stdev = 129.070
[info]   CI (99.9%): [830.599, 1824.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.050, 0.089), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 79.39% complete, ETA 00:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452805.630 ops/s
[info] # Warmup Iteration   2: 647825.769 ops/s
[info] # Warmup Iteration   3: 648366.027 ops/s
[info] Iteration   1: 657755.724 ops/s
[info]                  ·gc.alloc.rate:                   2397.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2344.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5609.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 655120.132 ops/s
[info]                  ·gc.alloc.rate:                   2387.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6479.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 654977.346 ops/s
[info]                  ·gc.alloc.rate:                   2387.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5695.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 658117.800 ops/s
[info]                  ·gc.alloc.rate:                   2398.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5684.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 655122.436 ops/s
[info]                  ·gc.alloc.rate:                   2387.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5716.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   656218.688 ±(99.9%) 6063.581 ops/s [Average]
[info]   (min, avg, max) = (654977.346, 656218.688, 658117.800), stdev = 1574.693
[info]   CI (99.9%): [650155.106, 662282.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2391.798 ±(99.9%) 22.164 MB/sec [Average]
[info]   (min, avg, max) = (2387.272, 2391.798, 2398.707), stdev = 5.756
[info]   CI (99.9%): [2369.634, 2413.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2433.768 ±(99.9%) 569.549 MB/sec [Average]
[info]   (min, avg, max) = (2344.546, 2433.768, 2697.190), stdev = 147.910
[info]   CI (99.9%): [1864.219, 3003.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5836.969 ±(99.9%) 1391.278 B/op [Average]
[info]   (min, avg, max) = (5609.417, 5836.969, 6479.260), stdev = 361.310
[info]   CI (99.9%): [4445.692, 7228.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (0.150, 0.260, 0.400), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 79.70% complete, ETA 00:14:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255162.577 ops/s
[info] # Warmup Iteration   2: 634216.348 ops/s
[info] # Warmup Iteration   3: 633265.479 ops/s
[info] Iteration   1: 626653.697 ops/s
[info]                  ·gc.alloc.rate:                   729.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2440.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 630455.916 ops/s
[info]                  ·gc.alloc.rate:                   733.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1617.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 636502.624 ops/s
[info]                  ·gc.alloc.rate:                   740.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1604.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 625049.744 ops/s
[info]                  ·gc.alloc.rate:                   727.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2457.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 633434.330 ops/s
[info]                  ·gc.alloc.rate:                   737.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1626.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   630419.262 ±(99.9%) 18174.721 ops/s [Average]
[info]   (min, avg, max) = (625049.744, 630419.262, 636502.624), stdev = 4719.917
[info]   CI (99.9%): [612244.541, 648593.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   733.902 ±(99.9%) 20.940 MB/sec [Average]
[info]   (min, avg, max) = (727.876, 733.902, 740.951), stdev = 5.438
[info]   CI (99.9%): [712.961, 754.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   779.937 ±(99.9%) 682.544 MB/sec [Average]
[info]   (min, avg, max) = (647.825, 779.937, 976.282), stdev = 177.255
[info]   CI (99.9%): [97.393, 1462.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1949.317 ±(99.9%) 1757.157 B/op [Average]
[info]   (min, avg, max) = (1604.241, 1949.317, 2457.218), stdev = 456.328
[info]   CI (99.9%): [192.160, 3706.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 4.664 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.604, 2.770), stdev = 1.211
[info]   CI (99.9%): [≈ 0, 5.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.516 ±(99.9%) 11.717 B/op [Average]
[info]   (min, avg, max) = (0.052, 1.516, 6.958), stdev = 3.043
[info]   CI (99.9%): [≈ 0, 13.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.00% complete, ETA 00:14:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3035728.478 ops/s
[info] # Warmup Iteration   2: 3601198.916 ops/s
[info] # Warmup Iteration   3: 3623065.727 ops/s
[info] Iteration   1: 3662900.097 ops/s
[info]                  ·gc.alloc.rate:                   1452.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3647246.317 ops/s
[info]                  ·gc.alloc.rate:                   1446.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     577.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3710299.193 ops/s
[info]                  ·gc.alloc.rate:                   1471.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     569.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3670295.133 ops/s
[info]                  ·gc.alloc.rate:                   1455.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3690337.103 ops/s
[info]                  ·gc.alloc.rate:                   1463.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     576.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3676215.569 ±(99.9%) 94570.005 ops/s [Average]
[info]   (min, avg, max) = (3647246.317, 3676215.569, 3710299.193), stdev = 24559.530
[info]   CI (99.9%): [3581645.564, 3770785.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1457.590 ±(99.9%) 37.591 MB/sec [Average]
[info]   (min, avg, max) = (1446.090, 1457.590, 1471.152), stdev = 9.762
[info]   CI (99.9%): [1419.999, 1495.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1476.984 ±(99.9%) 699.258 MB/sec [Average]
[info]   (min, avg, max) = (1338.234, 1476.984, 1685.411), stdev = 181.595
[info]   CI (99.9%): [777.725, 2176.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   632.465 ±(99.9%) 305.450 B/op [Average]
[info]   (min, avg, max) = (569.662, 632.465, 722.692), stdev = 79.324
[info]   CI (99.9%): [327.015, 937.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.032, 0.054), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 80.30% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56009.109 ops/s
[info] # Warmup Iteration   2: 226098.397 ops/s
[info] # Warmup Iteration   3: 231764.266 ops/s
[info] Iteration   1: 235441.638 ops/s
[info]                  ·gc.alloc.rate:                   1638.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10931.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 237005.275 ops/s
[info]                  ·gc.alloc.rate:                   1649.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10948.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.691 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 235014.394 ops/s
[info]                  ·gc.alloc.rate:                   1635.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11141.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 236780.896 ops/s
[info]                  ·gc.alloc.rate:                   1647.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11128.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 237848.880 ops/s
[info]                  ·gc.alloc.rate:                   1655.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11140.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   236418.217 ±(99.9%) 4493.634 ops/s [Average]
[info]   (min, avg, max) = (235014.394, 236418.217, 237848.880), stdev = 1166.983
[info]   CI (99.9%): [231924.582, 240911.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1645.365 ±(99.9%) 31.836 MB/sec [Average]
[info]   (min, avg, max) = (1635.512, 1645.365, 1655.587), stdev = 8.268
[info]   CI (99.9%): [1613.529, 1677.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1661.326 ±(99.9%) 75.208 MB/sec [Average]
[info]   (min, avg, max) = (1635.351, 1661.326, 1684.157), stdev = 19.531
[info]   CI (99.9%): [1586.118, 1736.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11058.169 ±(99.9%) 416.628 B/op [Average]
[info]   (min, avg, max) = (10931.665, 11058.169, 11141.349), stdev = 108.197
[info]   CI (99.9%): [10641.541, 11474.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.499 ±(99.9%) 0.473 B/op [Average]
[info]   (min, avg, max) = (0.413, 0.499, 0.691), stdev = 0.123
[info]   CI (99.9%): [0.025, 0.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.61% complete, ETA 00:13:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 575452.754 ops/s
[info] # Warmup Iteration   2: 881469.767 ops/s
[info] # Warmup Iteration   3: 906586.826 ops/s
[info] Iteration   1: 895732.069 ops/s
[info]                  ·gc.alloc.rate:                   2158.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2336.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4105.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 892275.338 ops/s
[info]                  ·gc.alloc.rate:                   2149.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3556.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 889831.913 ops/s
[info]                  ·gc.alloc.rate:                   2144.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3582.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 902409.065 ops/s
[info]                  ·gc.alloc.rate:                   2174.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4135.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 901580.076 ops/s
[info]                  ·gc.alloc.rate:                   2172.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3557.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   896365.692 ±(99.9%) 21399.233 ops/s [Average]
[info]   (min, avg, max) = (889831.913, 896365.692, 902409.065), stdev = 5557.313
[info]   CI (99.9%): [874966.459, 917764.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2159.957 ±(99.9%) 51.341 MB/sec [Average]
[info]   (min, avg, max) = (2144.654, 2159.957, 2174.740), stdev = 13.333
[info]   CI (99.9%): [2108.616, 2211.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3792.000, 3792.000, 3792.001), stdev = 0.001
[info]   CI (99.9%): [3792.000, 3792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2157.853 ±(99.9%) 693.105 MB/sec [Average]
[info]   (min, avg, max) = (2016.394, 2157.853, 2371.924), stdev = 179.997
[info]   CI (99.9%): [1464.748, 2850.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3787.640 ±(99.9%) 1172.766 B/op [Average]
[info]   (min, avg, max) = (3556.582, 3787.640, 4135.822), stdev = 304.564
[info]   CI (99.9%): [2614.874, 4960.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.190 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (0.110, 0.190, 0.256), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 80.91% complete, ETA 00:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 702289.515 ops/s
[info] # Warmup Iteration   2: 1550447.487 ops/s
[info] # Warmup Iteration   3: 1564713.422 ops/s
[info] Iteration   1: 1550065.280 ops/s
[info]                  ·gc.alloc.rate:                   1016.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     988.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1569186.650 ops/s
[info]                  ·gc.alloc.rate:                   1029.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     980.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1565429.040 ops/s
[info]                  ·gc.alloc.rate:                   1026.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1559367.181 ops/s
[info]                  ·gc.alloc.rate:                   1022.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1563416.891 ops/s
[info]                  ·gc.alloc.rate:                   1025.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1561493.008 ±(99.9%) 28131.973 ops/s [Average]
[info]   (min, avg, max) = (1550065.280, 1561493.008, 1569186.650), stdev = 7305.784
[info]   CI (99.9%): [1533361.036, 1589624.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1024.013 ±(99.9%) 18.675 MB/sec [Average]
[info]   (min, avg, max) = (1016.408, 1024.013, 1029.003), stdev = 4.850
[info]   CI (99.9%): [1005.338, 1042.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   982.658 ±(99.9%) 29.652 MB/sec [Average]
[info]   (min, avg, max) = (973.903, 982.658, 992.935), stdev = 7.700
[info]   CI (99.9%): [953.007, 1012.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   990.333 ±(99.9%) 30.213 B/op [Average]
[info]   (min, avg, max) = (980.145, 990.333, 999.521), stdev = 7.846
[info]   CI (99.9%): [960.119, 1020.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.080, 0.106), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 81.21% complete, ETA 00:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5432616.552 ops/s
[info] # Warmup Iteration   2: 6788921.128 ops/s
[info] # Warmup Iteration   3: 7004059.268 ops/s
[info] Iteration   1: 7138496.071 ops/s
[info]                  ·gc.alloc.rate:                   798.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7146540.099 ops/s
[info]                  ·gc.alloc.rate:                   799.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6970211.805 ops/s
[info]                  ·gc.alloc.rate:                   779.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6850682.305 ops/s
[info]                  ·gc.alloc.rate:               766.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.728 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 6928578.643 ops/s
[info]                  ·gc.alloc.rate:                   775.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   7006901.785 ±(99.9%) 504644.149 ops/s [Average]
[info]   (min, avg, max) = (6850682.305, 7006901.785, 7146540.099), stdev = 131054.483
[info]   CI (99.9%): [6502257.635, 7511545.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   783.666 ±(99.9%) 56.213 MB/sec [Average]
[info]   (min, avg, max) = (766.134, 783.666, 799.209), stdev = 14.598
[info]   CI (99.9%): [727.453, 839.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.246 ±(99.9%) 571.835 MB/sec [Average]
[info]   (min, avg, max) = (662.103, 730.246, 995.878), stdev = 148.504
[info]   CI (99.9%): [158.411, 1302.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   164.125 ±(99.9%) 131.136 B/op [Average]
[info]   (min, avg, max) = (145.816, 164.125, 224.792), stdev = 34.055
[info]   CI (99.9%): [32.989, 295.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.033), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.52% complete, ETA 00:12:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154916.838 ops/s
[info] # Warmup Iteration   2: 462434.147 ops/s
[info] # Warmup Iteration   3: 481295.262 ops/s
[info] Iteration   1: 476827.370 ops/s
[info]                  ·gc.alloc.rate:                   1669.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5408.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.412 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 479959.327 ops/s
[info]                  ·gc.alloc.rate:                   1680.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5417.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 482055.747 ops/s
[info]                  ·gc.alloc.rate:                   1688.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5440.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 474875.237 ops/s
[info]                  ·gc.alloc.rate:                   1663.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5558.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 470038.250 ops/s
[info]                  ·gc.alloc.rate:                   1646.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5642.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   476751.186 ±(99.9%) 17960.173 ops/s [Average]
[info]   (min, avg, max) = (470038.250, 476751.186, 482055.747), stdev = 4664.200
[info]   CI (99.9%): [458791.013, 494711.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1669.861 ±(99.9%) 63.262 MB/sec [Average]
[info]   (min, avg, max) = (1646.324, 1669.861, 1688.781), stdev = 16.429
[info]   CI (99.9%): [1606.598, 1733.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5512.001, 5512.001, 5512.001), stdev = 0.001
[info]   CI (99.9%): [5512.001, 5512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.101 ±(99.9%) 72.654 MB/sec [Average]
[info]   (min, avg, max) = (1638.647, 1664.101, 1685.386), stdev = 18.868
[info]   CI (99.9%): [1591.448, 1736.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5493.686 ±(99.9%) 396.089 B/op [Average]
[info]   (min, avg, max) = (5408.567, 5493.686, 5642.781), stdev = 102.863
[info]   CI (99.9%): [5097.597, 5889.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.248 ±(99.9%) 0.616 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.248, 0.418), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.82% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411707.581 ops/s
[info] # Warmup Iteration   2: 632769.579 ops/s
[info] # Warmup Iteration   3: 639542.567 ops/s
[info] Iteration   1: 642532.854 ops/s
[info]                  ·gc.alloc.rate:                   2289.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2341.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5735.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 640780.448 ops/s
[info]                  ·gc.alloc.rate:                   2283.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5790.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 642588.830 ops/s
[info]                  ·gc.alloc.rate:                   2290.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5800.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 639212.343 ops/s
[info]                  ·gc.alloc.rate:                   2277.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5012.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 643803.691 ops/s
[info]                  ·gc.alloc.rate:                   2294.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5813.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   641783.633 ±(99.9%) 6917.299 ops/s [Average]
[info]   (min, avg, max) = (639212.343, 641783.633, 643803.691), stdev = 1796.401
[info]   CI (99.9%): [634866.334, 648700.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2286.978 ±(99.9%) 24.749 MB/sec [Average]
[info]   (min, avg, max) = (2277.698, 2286.978, 2294.057), stdev = 6.427
[info]   CI (99.9%): [2262.228, 2311.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.001, 5608.001, 5608.001), stdev = 0.001
[info]   CI (99.9%): [5608.001, 5608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296.360 ±(99.9%) 563.397 MB/sec [Average]
[info]   (min, avg, max) = (2035.756, 2296.360, 2378.153), stdev = 146.312
[info]   CI (99.9%): [1732.963, 2859.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5630.371 ±(99.9%) 1335.332 B/op [Average]
[info]   (min, avg, max) = (5012.307, 5630.371, 5813.580), stdev = 346.781
[info]   CI (99.9%): [4295.039, 6965.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.235 ±(99.9%) 0.357 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.235, 0.358), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 82.12% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70179.551 ops/s
[info] # Warmup Iteration   2: 614834.713 ops/s
[info] # Warmup Iteration   3: 640818.326 ops/s
[info] Iteration   1: 639964.436 ops/s
[info]                  ·gc.alloc.rate:                   969.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2393.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 643049.719 ops/s
[info]                  ·gc.alloc.rate:                   974.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2384.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 649933.808 ops/s
[info]                  ·gc.alloc.rate:                   984.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2367.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 645908.748 ops/s
[info]                  ·gc.alloc.rate:                   978.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2396.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 632139.144 ops/s
[info]                  ·gc.alloc.rate:                   957.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2461.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   642199.171 ±(99.9%) 25867.271 ops/s [Average]
[info]   (min, avg, max) = (632139.144, 642199.171, 649933.808), stdev = 6717.648
[info]   CI (99.9%): [616331.901, 668066.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   972.940 ±(99.9%) 39.115 MB/sec [Average]
[info]   (min, avg, max) = (957.630, 972.940, 984.570), stdev = 10.158
[info]   CI (99.9%): [933.825, 1012.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2384.001, 2384.001, 2384.001), stdev = 0.001
[info]   CI (99.9%): [2384.001, 2384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   979.622 ±(99.9%) 25.151 MB/sec [Average]
[info]   (min, avg, max) = (973.472, 979.622, 988.927), stdev = 6.532
[info]   CI (99.9%): [954.471, 1004.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2400.651 ±(99.9%) 139.029 B/op [Average]
[info]   (min, avg, max) = (2367.122, 2400.651, 2461.913), stdev = 36.105
[info]   CI (99.9%): [2261.622, 2539.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.194 ±(99.9%) 0.256 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.194, 0.255), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 82.42% complete, ETA 00:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3958847.432 ops/s
[info] # Warmup Iteration   2: 4411975.205 ops/s
[info] # Warmup Iteration   3: 4506340.438 ops/s
[info] Iteration   1: 4568269.109 ops/s
[info]                  ·gc.alloc.rate:                   1137.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4389675.116 ops/s
[info]                  ·gc.alloc.rate:                   1093.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4416231.527 ops/s
[info]                  ·gc.alloc.rate:                   1100.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     476.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4426710.166 ops/s
[info]                  ·gc.alloc.rate:                   1102.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4430618.908 ops/s
[info]                  ·gc.alloc.rate:                   1103.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   4446300.965 ±(99.9%) 269659.280 ops/s [Average]
[info]   (min, avg, max) = (4389675.116, 4446300.965, 4568269.109), stdev = 70029.659
[info]   CI (99.9%): [4176641.686, 4715960.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1107.554 ±(99.9%) 66.960 MB/sec [Average]
[info]   (min, avg, max) = (1093.320, 1107.554, 1137.814), stdev = 17.389
[info]   CI (99.9%): [1040.593, 1174.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1069.722 ±(99.9%) 575.738 MB/sec [Average]
[info]   (min, avg, max) = (997.202, 1069.722, 1337.061), stdev = 149.517
[info]   CI (99.9%): [493.984, 1645.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   378.844 ±(99.9%) 211.244 B/op [Average]
[info]   (min, avg, max) = (343.556, 378.844, 476.327), stdev = 54.859
[info]   CI (99.9%): [167.601, 590.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.022, 0.037), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.73% complete, ETA 00:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130600.009 ops/s
[info] # Warmup Iteration   2: 352009.567 ops/s
[info] # Warmup Iteration   3: 363686.599 ops/s
[info] Iteration   1: 363114.714 ops/s
[info]                  ·gc.alloc.rate:                   1888.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7121.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 367324.220 ops/s
[info]                  ·gc.alloc.rate:                   1910.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8530.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 365433.536 ops/s
[info]                  ·gc.alloc.rate:                   1900.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8652.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 363349.816 ops/s
[info]                  ·gc.alloc.rate:                   1889.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7295.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 364714.691 ops/s
[info]                  ·gc.alloc.rate:                   1896.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8751.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   364787.395 ±(99.9%) 6592.017 ops/s [Average]
[info]   (min, avg, max) = (363114.714, 364787.395, 367324.220), stdev = 1711.926
[info]   CI (99.9%): [358195.379, 371379.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1896.975 ±(99.9%) 34.419 MB/sec [Average]
[info]   (min, avg, max) = (1888.191, 1896.975, 1910.210), stdev = 8.938
[info]   CI (99.9%): [1862.556, 1931.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8184.001, 8184.001, 8184.001), stdev = 0.001
[info]   CI (99.9%): [8184.001, 8184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.165 ±(99.9%) 733.130 MB/sec [Average]
[info]   (min, avg, max) = (1643.057, 1871.165, 2028.061), stdev = 190.392
[info]   CI (99.9%): [1138.035, 2604.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8070.344 ±(99.9%) 3053.746 B/op [Average]
[info]   (min, avg, max) = (7121.513, 8070.344, 8751.356), stdev = 793.048
[info]   CI (99.9%): [5016.599, 11124.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.395 ±(99.9%) 0.517 B/op [Average]
[info]   (min, avg, max) = (0.269, 0.395, 0.624), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 83.03% complete, ETA 00:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231429.255 ops/s
[info] # Warmup Iteration   2: 471202.905 ops/s
[info] # Warmup Iteration   3: 460620.869 ops/s
[info] Iteration   1: 463970.303 ops/s
[info]                  ·gc.alloc.rate:                   1268.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4482.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 467874.874 ops/s
[info]                  ·gc.alloc.rate:                   1279.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3345.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 463569.014 ops/s
[info]                  ·gc.alloc.rate:                   1267.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4523.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 461823.975 ops/s
[info]                  ·gc.alloc.rate:                   1263.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4562.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 463567.479 ops/s
[info]                  ·gc.alloc.rate:                   1267.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4563.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   464161.129 ±(99.9%) 8608.930 ops/s [Average]
[info]   (min, avg, max) = (461823.975, 464161.129, 467874.874), stdev = 2235.712
[info]   CI (99.9%): [455552.199, 472770.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1269.479 ±(99.9%) 24.052 MB/sec [Average]
[info]   (min, avg, max) = (1263.023, 1269.479, 1279.888), stdev = 6.246
[info]   CI (99.9%): [1245.426, 1293.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4304.001, 4304.001, 4304.001), stdev = 0.001
[info]   CI (99.9%): [4304.001, 4304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1266.438 ±(99.9%) 585.498 MB/sec [Average]
[info]   (min, avg, max) = (994.860, 1266.438, 1344.307), stdev = 152.052
[info]   CI (99.9%): [680.939, 1851.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4295.670 ±(99.9%) 2049.330 B/op [Average]
[info]   (min, avg, max) = (3345.508, 4295.670, 4563.923), stdev = 532.204
[info]   CI (99.9%): [2246.340, 6345.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.254 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (0.212, 0.254, 0.283), stdev = 0.038
[info]   CI (99.9%): [0.108, 0.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 83.33% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2905198.827 ops/s
[info] # Warmup Iteration   2: 3384869.908 ops/s
[info] # Warmup Iteration   3: 3395082.916 ops/s
[info] Iteration   1: 3432558.676 ops/s
[info]                  ·gc.alloc.rate:                   663.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3325412.920 ops/s
[info]                  ·gc.alloc.rate:                   642.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3401804.082 ops/s
[info]                  ·gc.alloc.rate:                   657.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3423905.990 ops/s
[info]                  ·gc.alloc.rate:               661.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 305.120 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3358052.007 ops/s
[info]                  ·gc.alloc.rate:               648.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.572 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3388346.735 ±(99.9%) 175179.884 ops/s [Average]
[info]   (min, avg, max) = (3325412.920, 3388346.735, 3432558.676), stdev = 45493.659
[info]   CI (99.9%): [3213166.851, 3563526.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   654.592 ±(99.9%) 34.005 MB/sec [Average]
[info]   (min, avg, max) = (642.374, 654.592, 663.060), stdev = 8.831
[info]   CI (99.9%): [620.587, 688.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   663.365 ±(99.9%) 4.046 MB/sec [Average]
[info]   (min, avg, max) = (662.167, 663.365, 664.829), stdev = 1.051
[info]   CI (99.9%): [659.319, 667.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   308.119 ±(99.9%) 15.936 B/op [Average]
[info]   (min, avg, max) = (303.893, 308.119, 313.367), stdev = 4.138
[info]   CI (99.9%): [292.183, 324.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.067), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.64% complete, ETA 00:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100335.680 ops/s
[info] # Warmup Iteration   2: 313683.847 ops/s
[info] # Warmup Iteration   3: 328097.483 ops/s
[info] Iteration   1: 329427.404 ops/s
[info]                  ·gc.alloc.rate:                   1199.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6225.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 327121.353 ops/s
[info]                  ·gc.alloc.rate:                   1190.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6302.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 329190.321 ops/s
[info]                  ·gc.alloc.rate:                   1198.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4721.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 328981.011 ops/s
[info]                  ·gc.alloc.rate:                   1197.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6341.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 329379.826 ops/s
[info]                  ·gc.alloc.rate:                   1198.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6371.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.497 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   328819.983 ±(99.9%) 3718.818 ops/s [Average]
[info]   (min, avg, max) = (327121.353, 328819.983, 329427.404), stdev = 965.765
[info]   CI (99.9%): [325101.165, 332538.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1196.845 ±(99.9%) 13.534 MB/sec [Average]
[info]   (min, avg, max) = (1190.661, 1196.845, 1199.051), stdev = 3.515
[info]   CI (99.9%): [1183.311, 1210.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5728.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5728.001, 5728.001, 5728.001), stdev = 0.001
[info]   CI (99.9%): [5728.001, 5728.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1252.045 ±(99.9%) 570.937 MB/sec [Average]
[info]   (min, avg, max) = (987.701, 1252.045, 1333.631), stdev = 148.271
[info]   CI (99.9%): [681.108, 1822.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5992.555 ±(99.9%) 2744.078 B/op [Average]
[info]   (min, avg, max) = (4721.579, 5992.555, 6371.942), stdev = 712.628
[info]   CI (99.9%): [3248.477, 8736.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.339 ±(99.9%) 0.515 B/op [Average]
[info]   (min, avg, max) = (0.199, 0.339, 0.497), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.94% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1021248.024 ops/s
[info] # Warmup Iteration   2: 1883321.827 ops/s
[info] # Warmup Iteration   3: 1933537.466 ops/s
[info] Iteration   1: 1954951.632 ops/s
[info]                  ·gc.alloc.rate:                   3160.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3030.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2439.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1940432.615 ops/s
[info]                  ·gc.alloc.rate:                   3136.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3047.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2471.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1936164.350 ops/s
[info]                  ·gc.alloc.rate:                   3131.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2757.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1926475.672 ops/s
[info]                  ·gc.alloc.rate:                   3114.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2502.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1928162.342 ops/s
[info]                  ·gc.alloc.rate:                   3116.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2500.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1937237.322 ±(99.9%) 44044.295 ops/s [Average]
[info]   (min, avg, max) = (1926475.672, 1937237.322, 1954951.632), stdev = 11438.164
[info]   CI (99.9%): [1893193.027, 1981281.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3131.891 ±(99.9%) 70.985 MB/sec [Average]
[info]   (min, avg, max) = (3114.302, 3131.891, 3160.187), stdev = 18.435
[info]   CI (99.9%): [3060.906, 3202.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2544.000, 2544.000, 2544.000), stdev = 0.001
[info]   CI (99.9%): [2544.000, 2544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3119.650 ±(99.9%) 592.107 MB/sec [Average]
[info]   (min, avg, max) = (3030.127, 3119.650, 3393.623), stdev = 153.768
[info]   CI (99.9%): [2527.544, 3711.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2534.190 ±(99.9%) 490.085 B/op [Average]
[info]   (min, avg, max) = (2439.300, 2534.190, 2757.199), stdev = 127.274
[info]   CI (99.9%): [2044.104, 3024.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.088 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.088, 0.135), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 84.24% complete, ETA 00:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69390.612 ops/s
[info] # Warmup Iteration   2: 301890.606 ops/s
[info] # Warmup Iteration   3: 306074.416 ops/s
[info] Iteration   1: 309829.549 ops/s
[info]                  ·gc.alloc.rate:                   729.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3305.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 308771.158 ops/s
[info]                  ·gc.alloc.rate:                   726.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3320.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 308881.155 ops/s
[info]                  ·gc.alloc.rate:                   727.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4987.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 302640.825 ops/s
[info]                  ·gc.alloc.rate:                   712.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3401.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 305850.422 ops/s
[info]                  ·gc.alloc.rate:               719.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3376.212 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   307194.622 ±(99.9%) 11360.483 ops/s [Average]
[info]   (min, avg, max) = (302640.825, 307194.622, 309829.549), stdev = 2950.281
[info]   CI (99.9%): [295834.139, 318555.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   723.010 ±(99.9%) 26.717 MB/sec [Average]
[info]   (min, avg, max) = (712.290, 723.010, 729.155), stdev = 6.938
[info]   CI (99.9%): [696.294, 749.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3704.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3704.001, 3704.001, 3704.002), stdev = 0.001
[info]   CI (99.9%): [3704.001, 3704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   718.303 ±(99.9%) 561.181 MB/sec [Average]
[info]   (min, avg, max) = (650.770, 718.303, 978.976), stdev = 145.737
[info]   CI (99.9%): [157.122, 1279.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3678.339 ±(99.9%) 2822.120 B/op [Average]
[info]   (min, avg, max) = (3305.815, 3678.339, 4987.498), stdev = 732.896
[info]   CI (99.9%): [856.218, 6500.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.494 ±(99.9%) 3.939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.494, 2.323), stdev = 1.023
[info]   CI (99.9%): [≈ 0, 4.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.510 ±(99.9%) 20.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.510, 11.800), stdev = 5.195
[info]   CI (99.9%): [≈ 0, 22.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.55% complete, ETA 00:10:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 678765.207 ops/s
[info] # Warmup Iteration   2: 719461.144 ops/s
[info] # Warmup Iteration   3: 726701.714 ops/s
[info] Iteration   1: 727686.827 ops/s
[info]                  ·gc.alloc.rate:                   650.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1447.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 721487.156 ops/s
[info]                  ·gc.alloc.rate:                   645.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1458.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 727660.599 ops/s
[info]                  ·gc.alloc.rate:                   651.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1446.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 696275.704 ops/s
[info]                  ·gc.alloc.rate:               622.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 755.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 698118.487 ops/s
[info]                  ·gc.alloc.rate:               624.573 MB/sec
[info]                  ·gc.alloc.rate.norm:          1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1507.785 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   714245.755 ±(99.9%) 60764.267 ops/s [Average]
[info]   (min, avg, max) = (696275.704, 714245.755, 727686.827), stdev = 15780.287
[info]   CI (99.9%): [653481.488, 775010.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   639.049 ±(99.9%) 54.446 MB/sec [Average]
[info]   (min, avg, max) = (622.974, 639.049, 651.202), stdev = 14.139
[info]   CI (99.9%): [584.604, 693.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1408.001, 1408.001, 1408.001), stdev = 0.001
[info]   CI (99.9%): [1408.001, 1408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   602.112 ±(99.9%) 576.186 MB/sec [Average]
[info]   (min, avg, max) = (334.439, 602.112, 669.415), stdev = 149.634
[info]   CI (99.9%): [25.926, 1178.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1323.390 ±(99.9%) 1225.406 B/op [Average]
[info]   (min, avg, max) = (755.876, 1323.390, 1507.785), stdev = 318.234
[info]   CI (99.9%): [97.984, 2548.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.180), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.85% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3466808.825 ops/s
[info] # Warmup Iteration   2: 3848098.283 ops/s
[info] # Warmup Iteration   3: 3916447.539 ops/s
[info] Iteration   1: 3942665.310 ops/s
[info]                  ·gc.alloc.rate:                   2305.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3951314.447 ops/s
[info]                  ·gc.alloc.rate:                   2309.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     808.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3924817.539 ops/s
[info]                  ·gc.alloc.rate:                   2294.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3931588.436 ops/s
[info]                  ·gc.alloc.rate:                   2298.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3913009.894 ops/s
[info]                  ·gc.alloc.rate:                   2287.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2381.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     957.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3932679.125 ±(99.9%) 57659.194 ops/s [Average]
[info]   (min, avg, max) = (3913009.894, 3932679.125, 3951314.447), stdev = 14973.910
[info]   CI (99.9%): [3875019.931, 3990338.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2299.167 ±(99.9%) 33.937 MB/sec [Average]
[info]   (min, avg, max) = (2287.639, 2299.167, 2309.880), stdev = 8.813
[info]   CI (99.9%): [2265.229, 2333.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2304.150 ±(99.9%) 592.823 MB/sec [Average]
[info]   (min, avg, max) = (2029.215, 2304.150, 2381.641), stdev = 153.954
[info]   CI (99.9%): [1711.328, 2896.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   922.140 ±(99.9%) 246.338 B/op [Average]
[info]   (min, avg, max) = (808.214, 922.140, 957.804), stdev = 63.973
[info]   CI (99.9%): [675.803, 1168.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.167), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.042, 0.066), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 85.15% complete, ETA 00:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6961206.648 ops/s
[info] # Warmup Iteration   2: 7855105.224 ops/s
[info] # Warmup Iteration   3: 7871864.626 ops/s
[info] Iteration   1: 7820617.126 ops/s
[info]                  ·gc.alloc.rate:                   834.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7777503.628 ops/s
[info]                  ·gc.alloc.rate:                   830.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7843905.153 ops/s
[info]                  ·gc.alloc.rate:                   837.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8026569.392 ops/s
[info]                  ·gc.alloc.rate:                   856.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7768844.762 ops/s
[info]                  ·gc.alloc.rate:                   829.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7847488.012 ±(99.9%) 403342.760 ops/s [Average]
[info]   (min, avg, max) = (7768844.762, 7847488.012, 8026569.392), stdev = 104746.834
[info]   CI (99.9%): [7444145.252, 8250830.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   837.793 ±(99.9%) 42.871 MB/sec [Average]
[info]   (min, avg, max) = (829.538, 837.793, 856.852), stdev = 11.133
[info]   CI (99.9%): [794.922, 880.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   870.828 ±(99.9%) 707.620 MB/sec [Average]
[info]   (min, avg, max) = (668.907, 870.828, 1007.861), stdev = 183.767
[info]   CI (99.9%): [163.209, 1578.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   174.831 ±(99.9%) 145.900 B/op [Average]
[info]   (min, avg, max) = (131.395, 174.831, 204.114), stdev = 37.890
[info]   CI (99.9%): [28.931, 320.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.016, 0.025), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.45% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18747.767 ops/s
[info] # Warmup Iteration   2: 175578.583 ops/s
[info] # Warmup Iteration   3: 191089.102 ops/s
[info] Iteration   1: 194115.714 ops/s
[info]                  ·gc.alloc.rate:                   1617.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1631.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13228.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.675 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 194968.525 ops/s
[info]                  ·gc.alloc.rate:                   1624.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13284.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 190888.175 ops/s
[info]                  ·gc.alloc.rate:                   1590.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13683.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 190654.797 ops/s
[info]                  ·gc.alloc.rate:                   1588.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11035.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 190758.340 ops/s
[info]                  ·gc.alloc.rate:                   1589.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              13112.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13857.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   192277.110 ±(99.9%) 8052.332 ops/s [Average]
[info]   (min, avg, max) = (190654.797, 192277.110, 194968.525), stdev = 2091.165
[info]   CI (99.9%): [184224.779, 200329.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1602.061 ±(99.9%) 66.589 MB/sec [Average]
[info]   (min, avg, max) = (1588.748, 1602.061, 1624.333), stdev = 17.293
[info]   CI (99.9%): [1535.471, 1668.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13112.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13112.002, 13112.002, 13112.002), stdev = 0.001
[info]   CI (99.9%): [13112.002, 13112.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1590.832 ±(99.9%) 550.279 MB/sec [Average]
[info]   (min, avg, max) = (1337.199, 1590.832, 1679.929), stdev = 142.906
[info]   CI (99.9%): [1040.554, 2141.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13017.951 ±(99.9%) 4386.837 B/op [Average]
[info]   (min, avg, max) = (11035.964, 13017.951, 13857.651), stdev = 1139.248
[info]   CI (99.9%): [8631.114, 17404.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.680 ±(99.9%) 0.906 B/op [Average]
[info]   (min, avg, max) = (0.343, 0.680, 1.008), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.76% complete, ETA 00:10:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 483240.256 ops/s
[info] # Warmup Iteration   2: 730190.846 ops/s
[info] # Warmup Iteration   3: 742399.208 ops/s
[info] Iteration   1: 735901.049 ops/s
[info]                  ·gc.alloc.rate:                   2835.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5754.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 737048.109 ops/s
[info]                  ·gc.alloc.rate:                   2840.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3045.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6501.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 748694.261 ops/s
[info]                  ·gc.alloc.rate:                   2884.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5709.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 733524.717 ops/s
[info]                  ·gc.alloc.rate:                   2827.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5835.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 742350.460 ops/s
[info]                  ·gc.alloc.rate:                   2861.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6495.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   739503.719 ±(99.9%) 23369.294 ops/s [Average]
[info]   (min, avg, max) = (733524.717, 739503.719, 748694.261), stdev = 6068.931
[info]   CI (99.9%): [716134.426, 762873.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2849.825 ±(99.9%) 89.210 MB/sec [Average]
[info]   (min, avg, max) = (2827.382, 2849.825, 2884.790), stdev = 23.168
[info]   CI (99.9%): [2760.615, 2939.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.001, 6064.001, 6064.001), stdev = 0.001
[info]   CI (99.9%): [6064.001, 6064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2847.466 ±(99.9%) 731.066 MB/sec [Average]
[info]   (min, avg, max) = (2690.595, 2847.466, 3064.448), stdev = 189.856
[info]   CI (99.9%): [2116.400, 3578.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6059.132 ±(99.9%) 1554.084 B/op [Average]
[info]   (min, avg, max) = (5709.057, 6059.132, 6501.816), stdev = 403.591
[info]   CI (99.9%): [4505.048, 7613.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.187), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.257 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (0.175, 0.257, 0.400), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 86.06% complete, ETA 00:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3013158.181 ops/s
[info] # Warmup Iteration   2: 3550557.258 ops/s
[info] # Warmup Iteration   3: 3539012.582 ops/s
[info] Iteration   1: 3561861.488 ops/s
[info]                  ·gc.alloc.rate:                   2299.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     889.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3522820.193 ops/s
[info]                  ·gc.alloc.rate:                   2274.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1054.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3584529.352 ops/s
[info]                  ·gc.alloc.rate:                   2314.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3543745.456 ops/s
[info]                  ·gc.alloc.rate:                   2287.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1055.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3566214.825 ops/s
[info]                  ·gc.alloc.rate:                   2302.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1050.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3555834.263 ±(99.9%) 90378.635 ops/s [Average]
[info]   (min, avg, max) = (3522820.193, 3555834.263, 3584529.352), stdev = 23471.044
[info]   CI (99.9%): [3465455.628, 3646212.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2295.551 ±(99.9%) 58.636 MB/sec [Average]
[info]   (min, avg, max) = (2274.073, 2295.551, 2314.181), stdev = 15.228
[info]   CI (99.9%): [2236.915, 2354.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2300.515 ±(99.9%) 617.264 MB/sec [Average]
[info]   (min, avg, max) = (2014.033, 2300.515, 2379.493), stdev = 160.302
[info]   CI (99.9%): [1683.250, 2917.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1018.278 ±(99.9%) 277.240 B/op [Average]
[info]   (min, avg, max) = (889.913, 1018.278, 1055.555), stdev = 71.998
[info]   CI (99.9%): [741.038, 1295.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.037, 0.056), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.36% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66694.833 ops/s
[info] # Warmup Iteration   2: 250127.945 ops/s
[info] # Warmup Iteration   3: 263215.192 ops/s
[info] Iteration   1: 265031.346 ops/s
[info]                  ·gc.alloc.rate:                   1892.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11701.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 264836.783 ops/s
[info]                  ·gc.alloc.rate:                   1891.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9854.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.619 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 265135.429 ops/s
[info]                  ·gc.alloc.rate:                   1893.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11905.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 264728.321 ops/s
[info]                  ·gc.alloc.rate:                   1890.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12003.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.495 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 265762.033 ops/s
[info]                  ·gc.alloc.rate:                   1898.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10005.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   265098.782 ±(99.9%) 1554.245 ops/s [Average]
[info]   (min, avg, max) = (264728.321, 265098.782, 265762.033), stdev = 403.633
[info]   CI (99.9%): [263544.537, 266653.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1893.444 ±(99.9%) 10.783 MB/sec [Average]
[info]   (min, avg, max) = (1890.747, 1893.444, 1898.065), stdev = 2.800
[info]   CI (99.9%): [1882.661, 1904.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11240.002, 11240.002, 11240.002), stdev = 0.001
[info]   CI (99.9%): [11240.001, 11240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1868.774 ±(99.9%) 688.663 MB/sec [Average]
[info]   (min, avg, max) = (1658.759, 1868.774, 2019.154), stdev = 178.843
[info]   CI (99.9%): [1180.111, 2557.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11094.164 ±(99.9%) 4117.998 B/op [Average]
[info]   (min, avg, max) = (9854.733, 11094.164, 12003.346), stdev = 1069.431
[info]   CI (99.9%): [6976.166, 15212.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.593 ±(99.9%) 0.398 B/op [Average]
[info]   (min, avg, max) = (0.494, 0.593, 0.742), stdev = 0.103
[info]   CI (99.9%): [0.195, 0.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.67% complete, ETA 00:09:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569048.460 ops/s
[info] # Warmup Iteration   2: 822897.711 ops/s
[info] # Warmup Iteration   3: 832991.946 ops/s
[info] Iteration   1: 834512.403 ops/s
[info]                  ·gc.alloc.rate:                   1917.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3138.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 845134.669 ops/s
[info]                  ·gc.alloc.rate:                   1941.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3743.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 836175.193 ops/s
[info]                  ·gc.alloc.rate:                   1921.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3805.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 840900.100 ops/s
[info]                  ·gc.alloc.rate:                   1932.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3164.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 844218.094 ops/s
[info]                  ·gc.alloc.rate:                   1939.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3792.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   840188.092 ±(99.9%) 18217.787 ops/s [Average]
[info]   (min, avg, max) = (834512.403, 840188.092, 845134.669), stdev = 4731.102
[info]   CI (99.9%): [821970.305, 858405.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1930.468 ±(99.9%) 41.817 MB/sec [Average]
[info]   (min, avg, max) = (1917.346, 1930.468, 1941.703), stdev = 10.860
[info]   CI (99.9%): [1888.651, 1972.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.001, 3616.001, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1884.225 ±(99.9%) 728.733 MB/sec [Average]
[info]   (min, avg, max) = (1663.944, 1884.225, 2034.275), stdev = 189.250
[info]   CI (99.9%): [1155.492, 2612.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3528.673 ±(99.9%) 1330.334 B/op [Average]
[info]   (min, avg, max) = (3138.099, 3528.673, 3805.139), stdev = 345.484
[info]   CI (99.9%): [2198.339, 4859.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.187 ±(99.9%) 0.324 B/op [Average]
[info]   (min, avg, max) = (0.078, 0.187, 0.272), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.97% complete, ETA 00:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 762863.957 ops/s
[info] # Warmup Iteration   2: 1559853.543 ops/s
[info] # Warmup Iteration   3: 1575087.391 ops/s
[info] Iteration   1: 1623955.846 ops/s
[info]                  ·gc.alloc.rate:                   932.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1623280.964 ops/s
[info]                  ·gc.alloc.rate:                   932.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          975.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     945.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1604389.137 ops/s
[info]                  ·gc.alloc.rate:                   921.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     639.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1608278.209 ops/s
[info]                  ·gc.alloc.rate:                   923.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1619214.231 ops/s
[info]                  ·gc.alloc.rate:                   930.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     961.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1615823.677 ±(99.9%) 34490.785 ops/s [Average]
[info]   (min, avg, max) = (1604389.137, 1615823.677, 1623955.846), stdev = 8957.147
[info]   CI (99.9%): [1581332.892, 1650314.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   928.226 ±(99.9%) 19.706 MB/sec [Average]
[info]   (min, avg, max) = (921.754, 928.226, 932.772), stdev = 5.118
[info]   CI (99.9%): [908.520, 947.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   914.685 ±(99.9%) 565.355 MB/sec [Average]
[info]   (min, avg, max) = (652.287, 914.685, 988.937), stdev = 146.821
[info]   CI (99.9%): [349.330, 1480.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   890.398 ±(99.9%) 540.655 B/op [Average]
[info]   (min, avg, max) = (639.724, 890.398, 962.459), stdev = 140.406
[info]   CI (99.9%): [349.743, 1431.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.065, 0.102), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.27% complete, ETA 00:08:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3619879.549 ops/s
[info] # Warmup Iteration   2: 4218684.730 ops/s
[info] # Warmup Iteration   3: 4269961.551 ops/s
[info] Iteration   1: 4071530.148 ops/s
[info]                  ·gc.alloc.rate:                   310.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4221716.103 ops/s
[info]                  ·gc.alloc.rate:                   321.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4237954.174 ops/s
[info]                  ·gc.alloc.rate:                   323.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.685 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4244797.698 ops/s
[info]                  ·gc.alloc.rate:                   323.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4287250.125 ops/s
[info]                  ·gc.alloc.rate:               326.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121.531 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4212649.650 ±(99.9%) 317742.069 ops/s [Average]
[info]   (min, avg, max) = (4071530.148, 4212649.650, 4287250.125), stdev = 82516.606
[info]   CI (99.9%): [3894907.581, 4530391.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   321.287 ±(99.9%) 23.837 MB/sec [Average]
[info]   (min, avg, max) = (310.720, 321.287, 326.915), stdev = 6.190
[info]   CI (99.9%): [297.449, 345.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   352.164 ±(99.9%) 364.411 MB/sec [Average]
[info]   (min, avg, max) = (255.789, 352.164, 511.018), stdev = 94.636
[info]   CI (99.9%): [≈ 0, 716.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   132.037 ±(99.9%) 147.720 B/op [Average]
[info]   (min, avg, max) = (95.357, 132.037, 197.356), stdev = 38.362
[info]   CI (99.9%): [≈ 0, 279.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 3.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.844), stdev = 0.819
[info]   CI (99.9%): [≈ 0, 3.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.141 ±(99.9%) 1.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.685), stdev = 0.304
[info]   CI (99.9%): [≈ 0, 1.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.58% complete, ETA 00:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169237.658 ops/s
[info] # Warmup Iteration   2: 472039.490 ops/s
[info] # Warmup Iteration   3: 481061.859 ops/s
[info] Iteration   1: 477288.206 ops/s
[info]                  ·gc.alloc.rate:                   1652.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5401.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 479880.437 ops/s
[info]                  ·gc.alloc.rate:                   1661.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5419.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 479537.085 ops/s
[info]                  ·gc.alloc.rate:                   1660.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5466.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 478795.273 ops/s
[info]                  ·gc.alloc.rate:                   1657.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5513.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 470351.849 ops/s
[info]                  ·gc.alloc.rate:                   1628.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5636.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   477170.570 ±(99.9%) 15171.271 ops/s [Average]
[info]   (min, avg, max) = (470351.849, 477170.570, 479880.437), stdev = 3939.931
[info]   CI (99.9%): [461999.299, 492341.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1651.955 ±(99.9%) 52.542 MB/sec [Average]
[info]   (min, avg, max) = (1628.273, 1651.955, 1661.300), stdev = 13.645
[info]   CI (99.9%): [1599.413, 1704.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1663.776 ±(99.9%) 71.797 MB/sec [Average]
[info]   (min, avg, max) = (1638.508, 1663.776, 1684.678), stdev = 18.645
[info]   CI (99.9%): [1591.979, 1735.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5487.500 ±(99.9%) 362.478 B/op [Average]
[info]   (min, avg, max) = (5401.328, 5487.500, 5636.726), stdev = 94.134
[info]   CI (99.9%): [5125.022, 5849.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.104), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 0.460 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.275, 0.348), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 87.88% complete, ETA 00:08:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58185.286 ops/s
[info] # Warmup Iteration   2: 572202.316 ops/s
[info] # Warmup Iteration   3: 595870.626 ops/s
[info] Iteration   1: 596081.817 ops/s
[info]                  ·gc.alloc.rate:                   991.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2569.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 593733.759 ops/s
[info]                  ·gc.alloc.rate:                   987.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          974.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2582.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 572713.387 ops/s
[info]                  ·gc.alloc.rate:               951.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      977.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2686.422 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 597587.579 ops/s
[info]                  ·gc.alloc.rate:                   993.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2590.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 604494.108 ops/s
[info]                  ·gc.alloc.rate:                   1005.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2574.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   592922.130 ±(99.9%) 46156.065 ops/s [Average]
[info]   (min, avg, max) = (572713.387, 592922.130, 604494.108), stdev = 11986.583
[info]   CI (99.9%): [546766.065, 639078.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   985.727 ±(99.9%) 77.103 MB/sec [Average]
[info]   (min, avg, max) = (951.986, 985.727, 1005.142), stdev = 20.023
[info]   CI (99.9%): [908.624, 1062.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2616.001, 2616.001, 2616.001), stdev = 0.001
[info]   CI (99.9%): [2616.001, 2616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   979.652 ±(99.9%) 25.566 MB/sec [Average]
[info]   (min, avg, max) = (973.451, 979.652, 989.193), stdev = 6.639
[info]   CI (99.9%): [954.086, 1005.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2600.622 ±(99.9%) 187.152 B/op [Average]
[info]   (min, avg, max) = (2569.569, 2600.622, 2686.422), stdev = 48.603
[info]   CI (99.9%): [2413.470, 2787.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.154 ±(99.9%) 0.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.221), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 88.18% complete, ETA 00:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3060206.386 ops/s
[info] # Warmup Iteration   2: 3219394.668 ops/s
[info] # Warmup Iteration   3: 3251077.433 ops/s
[info] Iteration   1: 3185996.874 ops/s
[info]                  ·gc.alloc.rate:                   1506.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     659.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3222779.089 ops/s
[info]                  ·gc.alloc.rate:                   1523.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     818.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3267883.624 ops/s
[info]                  ·gc.alloc.rate:                   1544.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3259868.928 ops/s
[info]                  ·gc.alloc.rate:                   1541.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     814.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3275438.592 ops/s
[info]                  ·gc.alloc.rate:                   1548.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3242393.421 ±(99.9%) 144237.582 ops/s [Average]
[info]   (min, avg, max) = (3185996.874, 3242393.421, 3275438.592), stdev = 37458.042
[info]   CI (99.9%): [3098155.840, 3386631.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1532.860 ±(99.9%) 68.453 MB/sec [Average]
[info]   (min, avg, max) = (1506.071, 1532.860, 1548.418), stdev = 17.777
[info]   CI (99.9%): [1464.408, 1601.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.489 ±(99.9%) 711.253 MB/sec [Average]
[info]   (min, avg, max) = (1334.890, 1479.489, 1687.971), stdev = 184.710
[info]   CI (99.9%): [768.236, 2190.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   718.152 ±(99.9%) 345.916 B/op [Average]
[info]   (min, avg, max) = (648.026, 718.152, 818.112), stdev = 89.833
[info]   CI (99.9%): [372.237, 1064.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.028, 0.041), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.48% complete, ETA 00:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102339.660 ops/s
[info] # Warmup Iteration   2: 296305.315 ops/s
[info] # Warmup Iteration   3: 304610.660 ops/s
[info] Iteration   1: 301637.330 ops/s
[info]                  ·gc.alloc.rate:                   1589.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              8288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8537.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 301156.306 ops/s
[info]                  ·gc.alloc.rate:                   1586.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              8288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8617.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 304915.378 ops/s
[info]                  ·gc.alloc.rate:                   1606.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              8288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8587.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 300245.865 ops/s
[info]                  ·gc.alloc.rate:                   1581.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              8288.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8776.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 305541.067 ops/s
[info]                  ·gc.alloc.rate:                   1609.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              8288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6937.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.643 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   302699.189 ±(99.9%) 9135.565 ops/s [Average]
[info]   (min, avg, max) = (300245.865, 302699.189, 305541.067), stdev = 2372.477
[info]   CI (99.9%): [293563.624, 311834.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1594.488 ±(99.9%) 48.505 MB/sec [Average]
[info]   (min, avg, max) = (1581.195, 1594.488, 1609.498), stdev = 12.597
[info]   CI (99.9%): [1545.983, 1642.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8288.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8288.001, 8288.001, 8288.002), stdev = 0.001
[info]   CI (99.9%): [8288.001, 8288.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.463 ±(99.9%) 534.885 MB/sec [Average]
[info]   (min, avg, max) = (1347.281, 1594.463, 1674.350), stdev = 138.908
[info]   CI (99.9%): [1059.579, 2129.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8291.292 ±(99.9%) 2933.847 B/op [Average]
[info]   (min, avg, max) = (6937.736, 8291.292, 8776.280), stdev = 761.911
[info]   CI (99.9%): [5357.445, 11225.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.411 ±(99.9%) 0.740 B/op [Average]
[info]   (min, avg, max) = (0.215, 0.411, 0.643), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 1.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.79% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262530.407 ops/s
[info] # Warmup Iteration   2: 484344.105 ops/s
[info] # Warmup Iteration   3: 499094.913 ops/s
[info] Iteration   1: 497979.512 ops/s
[info]                  ·gc.alloc.rate:                   1331.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4177.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 490290.884 ops/s
[info]                  ·gc.alloc.rate:                   1310.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4262.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 487943.901 ops/s
[info]                  ·gc.alloc.rate:                   1304.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4302.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 499893.876 ops/s
[info]                  ·gc.alloc.rate:                   1337.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4219.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 497146.513 ops/s
[info]                  ·gc.alloc.rate:                   1329.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4259.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   494650.937 ±(99.9%) 20081.590 ops/s [Average]
[info]   (min, avg, max) = (487943.901, 494650.937, 499893.876), stdev = 5215.125
[info]   CI (99.9%): [474569.348, 514732.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1322.705 ±(99.9%) 54.038 MB/sec [Average]
[info]   (min, avg, max) = (1304.702, 1322.705, 1337.001), stdev = 14.034
[info]   CI (99.9%): [1268.667, 1376.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4208.001, 4208.001, 4208.001), stdev = 0.001
[info]   CI (99.9%): [4208.001, 4208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1334.056 ±(99.9%) 36.556 MB/sec [Average]
[info]   (min, avg, max) = (1322.005, 1334.056, 1345.641), stdev = 9.494
[info]   CI (99.9%): [1297.500, 1370.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4244.429 ±(99.9%) 182.367 B/op [Average]
[info]   (min, avg, max) = (4177.849, 4244.429, 4302.400), stdev = 47.360
[info]   CI (99.9%): [4062.062, 4426.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.212 ±(99.9%) 0.495 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.212, 0.401), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 89.09% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2555576.567 ops/s
[info] # Warmup Iteration   2: 2931466.522 ops/s
[info] # Warmup Iteration   3: 2969728.745 ops/s
[info] Iteration   1: 2977360.981 ops/s
[info]                  ·gc.alloc.rate:                   559.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2989219.628 ops/s
[info]                  ·gc.alloc.rate:                   562.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2982047.260 ops/s
[info]                  ·gc.alloc.rate:                   560.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2931760.565 ops/s
[info]                  ·gc.alloc.rate:                   551.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2925382.167 ops/s
[info]                  ·gc.alloc.rate:               550.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.476 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2961154.120 ±(99.9%) 116007.193 ops/s [Average]
[info]   (min, avg, max) = (2925382.167, 2961154.120, 2989219.628), stdev = 30126.700
[info]   CI (99.9%): [2845146.927, 3077161.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   556.954 ±(99.9%) 21.881 MB/sec [Average]
[info]   (min, avg, max) = (550.201, 556.954, 562.279), stdev = 5.683
[info]   CI (99.9%): [535.072, 578.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.143 ±(99.9%) 698.508 MB/sec [Average]
[info]   (min, avg, max) = (331.110, 530.143, 662.848), stdev = 181.400
[info]   CI (99.9%): [≈ 0, 1228.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   281.684 ±(99.9%) 370.280 B/op [Average]
[info]   (min, avg, max) = (174.306, 281.684, 355.814), stdev = 96.160
[info]   CI (99.9%): [≈ 0, 651.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 3.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.803), stdev = 0.795
[info]   CI (99.9%): [≈ 0, 3.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.202 ±(99.9%) 1.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 0.953), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 89.39% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100800.221 ops/s
[info] # Warmup Iteration   2: 335212.249 ops/s
[info] # Warmup Iteration   3: 345849.509 ops/s
[info] Iteration   1: 345155.062 ops/s
[info]                  ·gc.alloc.rate:                   1335.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5941.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 341809.188 ops/s
[info]                  ·gc.alloc.rate:                   1322.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1640.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7550.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.575 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 348014.486 ops/s
[info]                  ·gc.alloc.rate:                   1346.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5982.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 349680.717 ops/s
[info]                  ·gc.alloc.rate:                   1352.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5993.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 350597.536 ops/s
[info]                  ·gc.alloc.rate:                   1356.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6010.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   347051.398 ±(99.9%) 13815.819 ops/s [Average]
[info]   (min, avg, max) = (341809.188, 347051.398, 350597.536), stdev = 3587.924
[info]   CI (99.9%): [333235.579, 360867.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1342.680 ±(99.9%) 52.616 MB/sec [Average]
[info]   (min, avg, max) = (1322.888, 1342.680, 1356.262), stdev = 13.664
[info]   CI (99.9%): [1290.064, 1395.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1387.505 ±(99.9%) 547.655 MB/sec [Average]
[info]   (min, avg, max) = (1303.062, 1387.505, 1640.784), stdev = 142.224
[info]   CI (99.9%): [839.850, 1935.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6295.755 ±(99.9%) 2703.731 B/op [Average]
[info]   (min, avg, max) = (5941.474, 6295.755, 7550.978), stdev = 702.150
[info]   CI (99.9%): [3592.024, 8999.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.303 ±(99.9%) 0.664 B/op [Average]
[info]   (min, avg, max) = (0.094, 0.303, 0.575), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.70% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228597.930 ops/s
[info] # Warmup Iteration   2: 644152.890 ops/s
[info] # Warmup Iteration   3: 676718.830 ops/s
[info] Iteration   1: 674575.679 ops/s
[info]                  ·gc.alloc.rate:                   1995.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4661.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 665948.874 ops/s
[info]                  ·gc.alloc.rate:                   1970.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4750.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 682589.477 ops/s
[info]                  ·gc.alloc.rate:                   2020.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4660.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 670987.909 ops/s
[info]                  ·gc.alloc.rate:                   1985.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4759.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 667896.593 ops/s
[info]                  ·gc.alloc.rate:                   1976.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4794.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   672399.707 ±(99.9%) 25283.423 ops/s [Average]
[info]   (min, avg, max) = (665948.874, 672399.707, 682589.477), stdev = 6566.025
[info]   CI (99.9%): [647116.283, 697683.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1989.639 ±(99.9%) 74.767 MB/sec [Average]
[info]   (min, avg, max) = (1970.766, 1989.639, 2020.027), stdev = 19.417
[info]   CI (99.9%): [1914.872, 2064.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2019.207 ±(99.9%) 57.234 MB/sec [Average]
[info]   (min, avg, max) = (1998.188, 2019.207, 2035.325), stdev = 14.864
[info]   CI (99.9%): [1961.972, 2076.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4725.583 ±(99.9%) 234.727 B/op [Average]
[info]   (min, avg, max) = (4660.621, 4725.583, 4794.523), stdev = 60.958
[info]   CI (99.9%): [4490.856, 4960.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.215 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.215, 0.340), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 90.00% complete, ETA 00:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473299.861 ops/s
[info] # Warmup Iteration   2: 1465986.536 ops/s
[info] # Warmup Iteration   3: 1475207.603 ops/s
[info] Iteration   1: 1459566.706 ops/s
[info]                  ·gc.alloc.rate:                   1105.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1054.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1457596.120 ops/s
[info]                  ·gc.alloc.rate:                   1104.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1412.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1441455.160 ops/s
[info]                  ·gc.alloc.rate:                   1091.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1078.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1442883.250 ops/s
[info]                  ·gc.alloc.rate:                   1093.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1441735.333 ops/s
[info]                  ·gc.alloc.rate:                   1092.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1452.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1448647.314 ±(99.9%) 35083.214 ops/s [Average]
[info]   (min, avg, max) = (1441455.160, 1448647.314, 1459566.706), stdev = 9110.999
[info]   CI (99.9%): [1413564.099, 1483730.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1097.295 ±(99.9%) 26.351 MB/sec [Average]
[info]   (min, avg, max) = (1091.792, 1097.295, 1105.494), stdev = 6.843
[info]   CI (99.9%): [1070.944, 1123.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.467 ±(99.9%) 704.684 MB/sec [Average]
[info]   (min, avg, max) = (977.935, 1119.467, 1330.977), stdev = 183.004
[info]   CI (99.9%): [414.783, 1824.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1216.075 ±(99.9%) 764.619 B/op [Average]
[info]   (min, avg, max) = (1054.459, 1216.075, 1452.816), stdev = 198.569
[info]   CI (99.9%): [451.456, 1980.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.077, 0.091), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 90.30% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4925693.631 ops/s
[info] # Warmup Iteration   2: 5510333.049 ops/s
[info] # Warmup Iteration   3: 5494359.887 ops/s
[info] Iteration   1: 5511938.430 ops/s
[info]                  ·gc.alloc.rate:      168.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5487037.389 ops/s
[info]                  ·gc.alloc.rate:               167.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5462336.958 ops/s
[info]                  ·gc.alloc.rate:                   166.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5435899.406 ops/s
[info]                  ·gc.alloc.rate:      165.809 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5474132.686 ops/s
[info]                  ·gc.alloc.rate:               166.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.547 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   5474268.974 ±(99.9%) 108855.389 ops/s [Average]
[info]   (min, avg, max) = (5435899.406, 5474268.974, 5511938.430), stdev = 28269.399
[info]   CI (99.9%): [5365413.585, 5583124.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   166.969 ±(99.9%) 3.311 MB/sec [Average]
[info]   (min, avg, max) = (165.809, 166.969, 168.121), stdev = 0.860
[info]   CI (99.9%): [163.658, 170.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   153.487 ±(99.9%) 539.527 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.487, 255.837), stdev = 140.114
[info]   CI (99.9%): [≈ 0, 693.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.124 ±(99.9%) 155.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.124, 73.702), stdev = 40.279
[info]   CI (99.9%): [≈ 0, 199.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.61% complete, ETA 00:06:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39643.025 ops/s
[info] # Warmup Iteration   2: 217380.814 ops/s
[info] # Warmup Iteration   3: 225027.424 ops/s
[info] Iteration   1: 224665.985 ops/s
[info]                  ·gc.alloc.rate:                   1582.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11435.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.583 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 226501.256 ops/s
[info]                  ·gc.alloc.rate:                   1595.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11444.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 226562.009 ops/s
[info]                  ·gc.alloc.rate:                   1596.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11534.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 226553.710 ops/s
[info]                  ·gc.alloc.rate:                   1596.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11622.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 223136.157 ops/s
[info]                  ·gc.alloc.rate:                   1572.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9488.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   225483.823 ±(99.9%) 5941.328 ops/s [Average]
[info]   (min, avg, max) = (223136.157, 225483.823, 226562.009), stdev = 1542.944
[info]   CI (99.9%): [219542.495, 231425.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1588.758 ±(99.9%) 42.099 MB/sec [Average]
[info]   (min, avg, max) = (1572.161, 1588.758, 1596.732), stdev = 10.933
[info]   CI (99.9%): [1546.659, 1630.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11088.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11088.002, 11088.002, 11088.002), stdev = 0.001
[info]   CI (99.9%): [11088.002, 11088.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1591.804 ±(99.9%) 533.742 MB/sec [Average]
[info]   (min, avg, max) = (1345.347, 1591.804, 1673.182), stdev = 138.611
[info]   CI (99.9%): [1058.062, 2125.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11104.908 ±(99.9%) 3492.028 B/op [Average]
[info]   (min, avg, max) = (9488.344, 11104.908, 11622.307), stdev = 906.869
[info]   CI (99.9%): [7612.879, 14596.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.552 ±(99.9%) 1.069 B/op [Average]
[info]   (min, avg, max) = (0.289, 0.552, 1.013), stdev = 0.278
[info]   CI (99.9%): [≈ 0, 1.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.91% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427752.505 ops/s
[info] # Warmup Iteration   2: 911938.132 ops/s
[info] # Warmup Iteration   3: 931062.429 ops/s
[info] Iteration   1: 931024.174 ops/s
[info]                  ·gc.alloc.rate:                   1637.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2802.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 939042.944 ops/s
[info]                  ·gc.alloc.rate:                   1651.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2794.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 942729.438 ops/s
[info]                  ·gc.alloc.rate:                   1658.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2797.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 940619.971 ops/s
[info]                  ·gc.alloc.rate:                   1654.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2818.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 944749.383 ops/s
[info]                  ·gc.alloc.rate:                   1661.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2814.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   939633.182 ±(99.9%) 20302.743 ops/s [Average]
[info]   (min, avg, max) = (931024.174, 939633.182, 944749.383), stdev = 5272.558
[info]   CI (99.9%): [919330.438, 959935.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1652.673 ±(99.9%) 35.637 MB/sec [Average]
[info]   (min, avg, max) = (1637.548, 1652.673, 1661.615), stdev = 9.255
[info]   CI (99.9%): [1617.036, 1688.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2768.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2768.000, 2768.000, 2768.000), stdev = 0.001
[info]   CI (99.9%): [2768.000, 2768.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1675.048 ±(99.9%) 49.415 MB/sec [Average]
[info]   (min, avg, max) = (1657.758, 1675.048, 1689.664), stdev = 12.833
[info]   CI (99.9%): [1625.633, 1724.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2805.460 ±(99.9%) 40.318 B/op [Average]
[info]   (min, avg, max) = (2794.372, 2805.460, 2818.162), stdev = 10.470
[info]   CI (99.9%): [2765.142, 2845.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.139 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.139, 0.174), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 91.21% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 749977.331 ops/s
[info] # Warmup Iteration   2: 2444792.503 ops/s
[info] # Warmup Iteration   3: 2452783.125 ops/s
[info] Iteration   1: 2467668.710 ops/s
[info]                  ·gc.alloc.rate:                   1091.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2475059.738 ops/s
[info]                  ·gc.alloc.rate:                   1094.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2466660.041 ops/s
[info]                  ·gc.alloc.rate:                   1091.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     839.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2436754.287 ops/s
[info]                  ·gc.alloc.rate:                   1077.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     641.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2496173.029 ops/s
[info]                  ·gc.alloc.rate:                   1104.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     628.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2468463.161 ±(99.9%) 82152.536 ops/s [Average]
[info]   (min, avg, max) = (2436754.287, 2468463.161, 2496173.029), stdev = 21334.753
[info]   CI (99.9%): [2386310.625, 2550615.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1091.817 ±(99.9%) 36.290 MB/sec [Average]
[info]   (min, avg, max) = (1077.826, 1091.817, 1104.075), stdev = 9.424
[info]   CI (99.9%): [1055.528, 1128.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1053.261 ±(99.9%) 566.430 MB/sec [Average]
[info]   (min, avg, max) = (977.854, 1053.261, 1316.004), stdev = 147.100
[info]   CI (99.9%): [486.831, 1619.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   671.480 ±(99.9%) 362.511 B/op [Average]
[info]   (min, avg, max) = (623.663, 671.480, 839.410), stdev = 94.143
[info]   CI (99.9%): [308.969, 1033.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.042, 0.054), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.52% complete, ETA 00:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4440875.238 ops/s
[info] # Warmup Iteration   2: 6576660.516 ops/s
[info] # Warmup Iteration   3: 6517130.226 ops/s
[info] Iteration   1: 6539026.228 ops/s
[info]                  ·gc.alloc.rate:                   531.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6486341.359 ops/s
[info]                  ·gc.alloc.rate:                   527.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6584390.601 ops/s
[info]                  ·gc.alloc.rate:               535.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 6611390.585 ops/s
[info]                  ·gc.alloc.rate:                   537.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6625943.271 ops/s
[info]                  ·gc.alloc.rate:               538.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78.795 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6569418.409 ±(99.9%) 219574.264 ops/s [Average]
[info]   (min, avg, max) = (6486341.359, 6569418.409, 6625943.271), stdev = 57022.739
[info]   CI (99.9%): [6349844.144, 6788992.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   534.360 ±(99.9%) 17.647 MB/sec [Average]
[info]   (min, avg, max) = (527.659, 534.360, 538.916), stdev = 4.583
[info]   CI (99.9%): [516.712, 552.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.792 ±(99.9%) 657.795 MB/sec [Average]
[info]   (min, avg, max) = (331.739, 515.792, 663.924), stdev = 170.827
[info]   CI (99.9%): [≈ 0, 1173.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   123.715 ±(99.9%) 159.613 B/op [Average]
[info]   (min, avg, max) = (78.795, 123.715, 161.055), stdev = 41.451
[info]   CI (99.9%): [≈ 0, 283.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 2.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.751), stdev = 0.768
[info]   CI (99.9%): [≈ 0, 3.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.091 ±(99.9%) 0.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.421), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 0.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.82% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4321657.548 ops/s
[info] # Warmup Iteration   2: 6407750.915 ops/s
[info] # Warmup Iteration   3: 6449727.144 ops/s
[info] Iteration   1: 6274131.547 ops/s
[info]                  ·gc.alloc.rate:               382.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6203273.702 ops/s
[info]                  ·gc.alloc.rate:               378.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64.897 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6418036.126 ops/s
[info]                  ·gc.alloc.rate:                   391.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6461975.882 ops/s
[info]                  ·gc.alloc.rate:                   394.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6468265.856 ops/s
[info]                  ·gc.alloc.rate:               394.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6365136.623 ±(99.9%) 460845.699 ops/s [Average]
[info]   (min, avg, max) = (6203273.702, 6365136.623, 6468265.856), stdev = 119680.165
[info]   CI (99.9%): [5904290.924, 6825982.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   388.308 ±(99.9%) 28.208 MB/sec [Average]
[info]   (min, avg, max) = (378.409, 388.308, 394.577), stdev = 7.325
[info]   CI (99.9%): [360.101, 416.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   367.896 ±(99.9%) 654.690 MB/sec [Average]
[info]   (min, avg, max) = (255.796, 367.896, 664.353), stdev = 170.021
[info]   CI (99.9%): [≈ 0, 1022.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   90.685 ±(99.9%) 158.474 B/op [Average]
[info]   (min, avg, max) = (64.164, 90.685, 162.860), stdev = 41.155
[info]   CI (99.9%): [≈ 0, 249.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.376 ±(99.9%) 3.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.818), stdev = 0.807
[info]   CI (99.9%): [≈ 0, 3.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.446), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 0.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 92.12% complete, ETA 00:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46327.576 ops/s
[info] # Warmup Iteration   2: 304923.102 ops/s
[info] # Warmup Iteration   3: 311175.439 ops/s
[info] Iteration   1: 315336.684 ops/s
[info]                  ·gc.alloc.rate:                   1622.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6526.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 309205.559 ops/s
[info]                  ·gc.alloc.rate:                   1590.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8386.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 312344.157 ops/s
[info]                  ·gc.alloc.rate:                   1607.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8369.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 312308.085 ops/s
[info]                  ·gc.alloc.rate:                   1606.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8432.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 312738.087 ops/s
[info]                  ·gc.alloc.rate:                   1608.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8467.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   312386.514 ±(99.9%) 8382.013 ops/s [Average]
[info]   (min, avg, max) = (309205.559, 312386.514, 315336.684), stdev = 2176.782
[info]   CI (99.9%): [304004.501, 320768.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1607.154 ±(99.9%) 43.112 MB/sec [Average]
[info]   (min, avg, max) = (1590.715, 1607.154, 1622.252), stdev = 11.196
[info]   CI (99.9%): [1564.042, 1650.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.001), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.644 ±(99.9%) 619.738 MB/sec [Average]
[info]   (min, avg, max) = (1307.695, 1594.644, 1682.730), stdev = 160.944
[info]   CI (99.9%): [974.906, 2214.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8036.462 ±(99.9%) 3254.417 B/op [Average]
[info]   (min, avg, max) = (6526.172, 8036.462, 8467.693), stdev = 845.162
[info]   CI (99.9%): [4782.045, 11290.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.378 ±(99.9%) 0.801 B/op [Average]
[info]   (min, avg, max) = (0.210, 0.378, 0.742), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 1.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.42% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2277781.168 ops/s
[info] # Warmup Iteration   2: 3326526.293 ops/s
[info] # Warmup Iteration   3: 3336430.412 ops/s
[info] Iteration   1: 3341893.291 ops/s
[info]                  ·gc.alloc.rate:                   3041.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3033.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1428.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3269378.267 ops/s
[info]                  ·gc.alloc.rate:                   2975.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3050.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1467.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 3389131.551 ops/s
[info]                  ·gc.alloc.rate:                   3083.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1419.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3376914.084 ops/s
[info]                  ·gc.alloc.rate:                   3072.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1427.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3359615.809 ops/s
[info]                  ·gc.alloc.rate:                   3057.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1435.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3347386.600 ±(99.9%) 181425.647 ops/s [Average]
[info]   (min, avg, max) = (3269378.267, 3347386.600, 3389131.551), stdev = 47115.664
[info]   CI (99.9%): [3165960.953, 3528812.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3046.257 ±(99.9%) 164.134 MB/sec [Average]
[info]   (min, avg, max) = (2975.653, 3046.257, 3083.885), stdev = 42.625
[info]   CI (99.9%): [2882.124, 3210.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3053.719 ±(99.9%) 49.278 MB/sec [Average]
[info]   (min, avg, max) = (3033.195, 3053.719, 3064.656), stdev = 12.797
[info]   CI (99.9%): [3004.441, 3102.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1435.708 ±(99.9%) 72.371 B/op [Average]
[info]   (min, avg, max) = (1419.739, 1435.708, 1467.868), stdev = 18.795
[info]   CI (99.9%): [1363.337, 1508.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.167), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.055, 0.080), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 10.000), stdev = 1.304
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.73% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1729497.042 ops/s
[info] # Warmup Iteration   2: 3969286.550 ops/s
[info] # Warmup Iteration   3: 3993025.135 ops/s
[info] Iteration   1: 3972035.722 ops/s
[info]                  ·gc.alloc.rate:                   2382.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2328.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     922.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4021172.031 ops/s
[info]                  ·gc.alloc.rate:                   2411.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     919.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3944312.249 ops/s
[info]                  ·gc.alloc.rate:                   2365.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4017737.772 ops/s
[info]                  ·gc.alloc.rate:                   2409.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4022569.815 ops/s
[info]                  ·gc.alloc.rate:                   2412.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3995565.518 ±(99.9%) 136915.753 ops/s [Average]
[info]   (min, avg, max) = (3944312.249, 3995565.518, 4022569.815), stdev = 35556.586
[info]   CI (99.9%): [3858649.765, 4132481.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2396.647 ±(99.9%) 82.076 MB/sec [Average]
[info]   (min, avg, max) = (2365.953, 2396.647, 2412.932), stdev = 21.315
[info]   CI (99.9%): [2314.571, 2478.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2358.345 ±(99.9%) 76.714 MB/sec [Average]
[info]   (min, avg, max) = (2328.494, 2358.345, 2377.861), stdev = 19.922
[info]   CI (99.9%): [2281.631, 2435.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   928.953 ±(99.9%) 35.320 B/op [Average]
[info]   (min, avg, max) = (919.385, 928.953, 943.193), stdev = 9.173
[info]   CI (99.9%): [893.633, 964.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.036, 0.057), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.03% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6873855.414 ops/s
[info] # Warmup Iteration   2: 7458158.888 ops/s
[info] # Warmup Iteration   3: 7396102.448 ops/s
[info] Iteration   1: 7583720.681 ops/s
[info]                  ·gc.alloc.rate:                   1426.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7610422.228 ops/s
[info]                  ·gc.alloc.rate:                   1431.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     277.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7539031.646 ops/s
[info]                  ·gc.alloc.rate:                   1417.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7606243.432 ops/s
[info]                  ·gc.alloc.rate:                   1430.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7464090.269 ops/s
[info]                  ·gc.alloc.rate:                   1403.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7560701.651 ±(99.9%) 234853.087 ops/s [Average]
[info]   (min, avg, max) = (7464090.269, 7560701.651, 7610422.228), stdev = 60990.601
[info]   CI (99.9%): [7325848.564, 7795554.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1421.989 ±(99.9%) 44.164 MB/sec [Average]
[info]   (min, avg, max) = (1403.817, 1421.989, 1431.298), stdev = 11.469
[info]   CI (99.9%): [1377.825, 1466.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1413.819 ±(99.9%) 561.495 MB/sec [Average]
[info]   (min, avg, max) = (1343.589, 1413.819, 1674.581), stdev = 145.819
[info]   CI (99.9%): [852.323, 1975.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   294.277 ±(99.9%) 115.182 B/op [Average]
[info]   (min, avg, max) = (277.861, 294.277, 347.547), stdev = 29.912
[info]   CI (99.9%): [179.095, 409.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.012, 0.022), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 93.33% complete, ETA 00:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2916071.146 ops/s
[info] # Warmup Iteration   2: 4932407.945 ops/s
[info] # Warmup Iteration   3: 4944783.282 ops/s
[info] Iteration   1: 5044170.289 ops/s
[info]                  ·gc.alloc.rate:                   3128.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3022.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5008281.288 ops/s
[info]                  ·gc.alloc.rate:                   3105.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1063.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 5013617.172 ops/s
[info]                  ·gc.alloc.rate:                   3109.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 4906487.992 ops/s
[info]                  ·gc.alloc.rate:                   3042.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     982.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 5032533.832 ops/s
[info]                  ·gc.alloc.rate:                   3121.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5001018.114 ±(99.9%) 210932.924 ops/s [Average]
[info]   (min, avg, max) = (4906487.992, 5001018.114, 5044170.289), stdev = 54778.610
[info]   CI (99.9%): [4790085.191, 5211951.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3101.488 ±(99.9%) 130.774 MB/sec [Average]
[info]   (min, avg, max) = (3042.843, 3101.488, 3128.073), stdev = 33.962
[info]   CI (99.9%): [2970.714, 3232.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3117.760 ±(99.9%) 576.456 MB/sec [Average]
[info]   (min, avg, max) = (3022.834, 3117.760, 3383.910), stdev = 149.704
[info]   CI (99.9%): [2541.304, 3694.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   981.207 ±(99.9%) 184.801 B/op [Average]
[info]   (min, avg, max) = (943.164, 981.207, 1063.386), stdev = 47.992
[info]   CI (99.9%): [796.405, 1166.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.033, 0.046), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.64% complete, ETA 00:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1675873.870 ops/s
[info] # Warmup Iteration   2: 2638844.306 ops/s
[info] # Warmup Iteration   3: 2645317.742 ops/s
[info] Iteration   1: 2650659.400 ops/s
[info]                  ·gc.alloc.rate:                   1643.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2647524.200 ops/s
[info]                  ·gc.alloc.rate:                   1641.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     992.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2681777.629 ops/s
[info]                  ·gc.alloc.rate:                   1663.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2680098.240 ops/s
[info]                  ·gc.alloc.rate:                   1662.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     990.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2664620.001 ops/s
[info]                  ·gc.alloc.rate:                   1652.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2664935.894 ±(99.9%) 61508.717 ops/s [Average]
[info]   (min, avg, max) = (2647524.200, 2664935.894, 2681777.629), stdev = 15973.618
[info]   CI (99.9%): [2603427.177, 2726444.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1652.707 ±(99.9%) 38.272 MB/sec [Average]
[info]   (min, avg, max) = (1641.839, 1652.707, 1663.179), stdev = 9.939
[info]   CI (99.9%): [1614.436, 1690.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1677.320 ±(99.9%) 49.329 MB/sec [Average]
[info]   (min, avg, max) = (1659.986, 1677.320, 1691.811), stdev = 12.811
[info]   CI (99.9%): [1627.991, 1726.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   990.539 ±(99.9%) 21.713 B/op [Average]
[info]   (min, avg, max) = (985.522, 990.539, 999.158), stdev = 5.639
[info]   CI (99.9%): [968.825, 1012.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.052, 0.073), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.94% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2230157.588 ops/s
[info] # Warmup Iteration   2: 4612350.144 ops/s
[info] # Warmup Iteration   3: 4735426.163 ops/s
[info] Iteration   1: 4833751.675 ops/s
[info]                  ·gc.alloc.rate:                   1277.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     426.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4781645.251 ops/s
[info]                  ·gc.alloc.rate:                   1263.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4846682.419 ops/s
[info]                  ·gc.alloc.rate:                   1281.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     430.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4827551.337 ops/s
[info]                  ·gc.alloc.rate:                   1276.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4859877.243 ops/s
[info]                  ·gc.alloc.rate:                   1284.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4829901.585 ±(99.9%) 114377.041 ops/s [Average]
[info]   (min, avg, max) = (4781645.251, 4829901.585, 4859877.243), stdev = 29703.354
[info]   CI (99.9%): [4715524.543, 4944278.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1276.759 ±(99.9%) 30.456 MB/sec [Average]
[info]   (min, avg, max) = (1263.916, 1276.759, 1284.620), stdev = 7.909
[info]   CI (99.9%): [1246.303, 1307.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1325.586 ±(99.9%) 45.157 MB/sec [Average]
[info]   (min, avg, max) = (1310.927, 1325.586, 1340.270), stdev = 11.727
[info]   CI (99.9%): [1280.430, 1370.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   431.912 ±(99.9%) 12.561 B/op [Average]
[info]   (min, avg, max) = (426.825, 431.912, 434.568), stdev = 3.262
[info]   CI (99.9%): [419.351, 444.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.026, 0.048), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.24% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6317298.394 ops/s
[info] # Warmup Iteration   2: 8964512.362 ops/s
[info] # Warmup Iteration   3: 9002328.138 ops/s
[info] Iteration   1: 8971988.995 ops/s
[info]                  ·gc.alloc.rate:                   866.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8983028.477 ops/s
[info]                  ·gc.alloc.rate:                   867.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8998896.061 ops/s
[info]                  ·gc.alloc.rate:                   869.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9103823.643 ops/s
[info]                  ·gc.alloc.rate:                   879.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9164937.707 ops/s
[info]                  ·gc.alloc.rate:                   885.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9044534.976 ±(99.9%) 328665.729 ops/s [Average]
[info]   (min, avg, max) = (8971988.995, 9044534.976, 9164937.707), stdev = 85353.446
[info]   CI (99.9%): [8715869.248, 9373200.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   873.632 ±(99.9%) 31.833 MB/sec [Average]
[info]   (min, avg, max) = (866.568, 873.632, 885.357), stdev = 8.267
[info]   CI (99.9%): [841.799, 905.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   864.754 ±(99.9%) 698.774 MB/sec [Average]
[info]   (min, avg, max) = (663.656, 864.754, 999.937), stdev = 181.469
[info]   CI (99.9%): [165.979, 1563.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   150.540 ±(99.9%) 123.252 B/op [Average]
[info]   (min, avg, max) = (114.736, 150.540, 174.574), stdev = 32.008
[info]   CI (99.9%): [27.288, 273.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.014, 0.018), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.55% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5450400.361 ops/s
[info] # Warmup Iteration   2: 7513291.292 ops/s
[info] # Warmup Iteration   3: 7432945.731 ops/s
[info] Iteration   1: 7439471.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7401336.244 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7442344.101 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7439795.049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7446228.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7433835.027 ±(99.9%) 70726.725 ops/s [Average]
[info]   (min, avg, max) = (7401336.244, 7433835.027, 7446228.423), stdev = 18367.506
[info]   CI (99.9%): [7363108.302, 7504561.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.85% complete, ETA 00:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3812305.626 ops/s
[info] # Warmup Iteration   2: 5032590.520 ops/s
[info] # Warmup Iteration   3: 4963170.063 ops/s
[info] Iteration   1: 5063562.519 ops/s
[info]                  ·gc.alloc.rate:                   1621.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     515.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5069121.681 ops/s
[info]                  ·gc.alloc.rate:                   1623.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     518.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5075957.729 ops/s
[info]                  ·gc.alloc.rate:                   1625.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5077938.740 ops/s
[info]                  ·gc.alloc.rate:                   1626.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     522.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5025220.256 ops/s
[info]                  ·gc.alloc.rate:                   1609.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     529.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   5062360.185 ±(99.9%) 82903.441 ops/s [Average]
[info]   (min, avg, max) = (5025220.256, 5062360.185, 5077938.740), stdev = 21529.760
[info]   CI (99.9%): [4979456.744, 5145263.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1621.218 ±(99.9%) 26.576 MB/sec [Average]
[info]   (min, avg, max) = (1609.327, 1621.218, 1626.221), stdev = 6.902
[info]   CI (99.9%): [1594.641, 1647.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1676.910 ±(99.9%) 48.289 MB/sec [Average]
[info]   (min, avg, max) = (1659.925, 1676.910, 1691.087), stdev = 12.540
[info]   CI (99.9%): [1628.622, 1725.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   521.327 ±(99.9%) 20.134 B/op [Average]
[info]   (min, avg, max) = (515.939, 521.327, 529.605), stdev = 5.229
[info]   CI (99.9%): [501.192, 541.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.027, 0.039), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 95.15% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 966264.465 ops/s
[info] # Warmup Iteration   2: 1380936.137 ops/s
[info] # Warmup Iteration   3: 1401814.915 ops/s
[info] Iteration   1: 1395049.241 ops/s
[info]                  ·gc.alloc.rate:                   1900.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2258.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1369778.339 ops/s
[info]                  ·gc.alloc.rate:                   1866.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2314.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1388214.908 ops/s
[info]                  ·gc.alloc.rate:                   1891.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1912.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1384117.822 ops/s
[info]                  ·gc.alloc.rate:                   1885.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2308.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1388111.910 ops/s
[info]                  ·gc.alloc.rate:                   1891.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1922.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1385054.444 ±(99.9%) 36197.550 ops/s [Average]
[info]   (min, avg, max) = (1369778.339, 1385054.444, 1395049.241), stdev = 9400.389
[info]   CI (99.9%): [1348856.894, 1421251.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1886.892 ±(99.9%) 49.147 MB/sec [Average]
[info]   (min, avg, max) = (1866.144, 1886.892, 1900.468), stdev = 12.763
[info]   CI (99.9%): [1837.746, 1936.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.000, 2144.000, 2144.000), stdev = 0.001
[info]   CI (99.9%): [2144.000, 2144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886.008 ±(99.9%) 685.422 MB/sec [Average]
[info]   (min, avg, max) = (1686.692, 1886.008, 2030.507), stdev = 178.002
[info]   CI (99.9%): [1200.586, 2571.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2143.428 ±(99.9%) 798.438 B/op [Average]
[info]   (min, avg, max) = (1912.191, 2143.428, 2314.352), stdev = 207.352
[info]   CI (99.9%): [1344.990, 2941.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.099 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.099, 0.167), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.45% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499350.677 ops/s
[info] # Warmup Iteration   2: 1056601.801 ops/s
[info] # Warmup Iteration   3: 1082792.816 ops/s
[info] Iteration   1: 1091649.198 ops/s
[info]                  ·gc.alloc.rate:                   654.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1097505.555 ops/s
[info]                  ·gc.alloc.rate:               658.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 938.084 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1082196.200 ops/s
[info]                  ·gc.alloc.rate:                   649.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1098309.308 ops/s
[info]                  ·gc.alloc.rate:                   658.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1081206.122 ops/s
[info]                  ·gc.alloc.rate:                   648.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1090173.277 ±(99.9%) 31411.631 ops/s [Average]
[info]   (min, avg, max) = (1081206.122, 1090173.277, 1098309.308), stdev = 8157.501
[info]   CI (99.9%): [1058761.646, 1121584.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   653.971 ±(99.9%) 18.716 MB/sec [Average]
[info]   (min, avg, max) = (648.540, 653.971, 658.811), stdev = 4.861
[info]   CI (99.9%): [635.255, 672.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.411 ±(99.9%) 5.343 MB/sec [Average]
[info]   (min, avg, max) = (654.166, 655.411, 657.458), stdev = 1.388
[info]   CI (99.9%): [650.068, 660.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   946.126 ±(99.9%) 31.319 B/op [Average]
[info]   (min, avg, max) = (938.084, 946.126, 956.982), stdev = 8.133
[info]   CI (99.9%): [914.806, 977.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.475 ±(99.9%) 3.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 2.147), stdev = 0.935
[info]   CI (99.9%): [≈ 0, 4.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.685 ±(99.9%) 5.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.685, 3.094), stdev = 1.348
[info]   CI (99.9%): [≈ 0, 5.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.76% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1717752.552 ops/s
[info] # Warmup Iteration   2: 1781369.715 ops/s
[info] # Warmup Iteration   3: 1782643.832 ops/s
[info] Iteration   1: 1834541.632 ops/s
[info]                  ·gc.alloc.rate:                   345.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1835353.291 ops/s
[info]                  ·gc.alloc.rate:                   345.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1836006.239 ops/s
[info]                  ·gc.alloc.rate:                   345.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1838899.405 ops/s
[info]                  ·gc.alloc.rate:                   345.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1837287.415 ops/s
[info]                  ·gc.alloc.rate:               345.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 286.439 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1836417.596 ±(99.9%) 6596.064 ops/s [Average]
[info]   (min, avg, max) = (1834541.632, 1836417.596, 1838899.405), stdev = 1712.977
[info]   CI (99.9%): [1829821.532, 1843013.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   345.423 ±(99.9%) 1.382 MB/sec [Average]
[info]   (min, avg, max) = (345.029, 345.423, 345.951), stdev = 0.359
[info]   CI (99.9%): [344.041, 346.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.253 ±(99.9%) 166.858 MB/sec [Average]
[info]   (min, avg, max) = (255.785, 303.253, 335.157), stdev = 43.332
[info]   CI (99.9%): [136.395, 470.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   259.840 ±(99.9%) 142.199 B/op [Average]
[info]   (min, avg, max) = (219.339, 259.840, 287.220), stdev = 36.929
[info]   CI (99.9%): [117.641, 402.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.309 ±(99.9%) 2.479 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.309, 1.459), stdev = 0.644
[info]   CI (99.9%): [≈ 0, 2.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.264 ±(99.9%) 2.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.264, 1.251), stdev = 0.552
[info]   CI (99.9%): [≈ 0, 2.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 96.06% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 692603.446 ops/s
[info] # Warmup Iteration   2: 1147537.423 ops/s
[info] # Warmup Iteration   3: 1142019.148 ops/s
[info] Iteration   1: 1146725.345 ops/s
[info]                  ·gc.alloc.rate:                   711.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     901.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1148322.300 ops/s
[info]                  ·gc.alloc.rate:                   712.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     900.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1128009.196 ops/s
[info]                  ·gc.alloc.rate:                   699.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1130397.424 ops/s
[info]                  ·gc.alloc.rate:               701.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 917.210 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1156022.645 ops/s
[info]                  ·gc.alloc.rate:               716.927 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 899.208 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1141895.382 ±(99.9%) 46735.880 ops/s [Average]
[info]   (min, avg, max) = (1128009.196, 1141895.382, 1156022.645), stdev = 12137.160
[info]   CI (99.9%): [1095159.502, 1188631.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   708.169 ±(99.9%) 28.909 MB/sec [Average]
[info]   (min, avg, max) = (699.593, 708.169, 716.927), stdev = 7.508
[info]   CI (99.9%): [679.259, 737.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   658.094 ±(99.9%) 6.117 MB/sec [Average]
[info]   (min, avg, max) = (656.793, 658.094, 660.518), stdev = 1.588
[info]   CI (99.9%): [651.977, 664.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   907.064 ±(99.9%) 36.005 B/op [Average]
[info]   (min, avg, max) = (899.208, 907.064, 917.332), stdev = 9.350
[info]   CI (99.9%): [871.060, 943.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.143), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.36% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 783277.138 ops/s
[info] # Warmup Iteration   2: 1221178.913 ops/s
[info] # Warmup Iteration   3: 1269234.125 ops/s
[info] Iteration   1: 1268389.528 ops/s
[info]                  ·gc.alloc.rate:                   960.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     819.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1265962.774 ops/s
[info]                  ·gc.alloc.rate:                   958.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1233.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1266391.852 ops/s
[info]                  ·gc.alloc.rate:                   959.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1236.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1268544.801 ops/s
[info]                  ·gc.alloc.rate:                   960.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1238.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1264083.675 ops/s
[info]                  ·gc.alloc.rate:                   957.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1247.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1266674.526 ±(99.9%) 7136.212 ops/s [Average]
[info]   (min, avg, max) = (1264083.675, 1266674.526, 1268544.801), stdev = 1853.252
[info]   CI (99.9%): [1259538.314, 1273810.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   959.387 ±(99.9%) 5.438 MB/sec [Average]
[info]   (min, avg, max) = (957.405, 959.387, 960.831), stdev = 1.412
[info]   CI (99.9%): [953.949, 964.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   929.539 ±(99.9%) 578.698 MB/sec [Average]
[info]   (min, avg, max) = (660.782, 929.539, 1001.894), stdev = 150.286
[info]   CI (99.9%): [350.841, 1508.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1155.028 ±(99.9%) 721.661 B/op [Average]
[info]   (min, avg, max) = (819.908, 1155.028, 1247.390), stdev = 187.413
[info]   CI (99.9%): [433.368, 1876.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.67% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1129762.095 ops/s
[info] # Warmup Iteration   2: 2206612.595 ops/s
[info] # Warmup Iteration   3: 2257739.106 ops/s
[info] Iteration   1: 2265326.857 ops/s
[info]                  ·gc.alloc.rate:                   909.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     681.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2322973.527 ops/s
[info]                  ·gc.alloc.rate:                   933.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     666.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2327960.526 ops/s
[info]                  ·gc.alloc.rate:                   934.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     444.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2330892.315 ops/s
[info]                  ·gc.alloc.rate:                   936.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     669.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2331750.463 ops/s
[info]                  ·gc.alloc.rate:                   936.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     671.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2315780.738 ±(99.9%) 109406.231 ops/s [Average]
[info]   (min, avg, max) = (2265326.857, 2315780.738, 2331750.463), stdev = 28412.451
[info]   CI (99.9%): [2206374.506, 2425186.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   930.173 ±(99.9%) 43.843 MB/sec [Average]
[info]   (min, avg, max) = (909.955, 930.173, 936.596), stdev = 11.386
[info]   CI (99.9%): [886.330, 974.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   921.898 ±(99.9%) 569.432 MB/sec [Average]
[info]   (min, avg, max) = (657.538, 921.898, 995.095), stdev = 147.880
[info]   CI (99.9%): [352.466, 1491.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   626.661 ±(99.9%) 392.770 B/op [Average]
[info]   (min, avg, max) = (444.502, 626.661, 681.934), stdev = 102.001
[info]   CI (99.9%): [233.891, 1019.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.040, 0.056), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.97% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1834528.573 ops/s
[info] # Warmup Iteration   2: 2479368.926 ops/s
[info] # Warmup Iteration   3: 2484780.938 ops/s
[info] Iteration   1: 2499767.525 ops/s
[info]                  ·gc.alloc.rate:                   584.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2494528.768 ops/s
[info]                  ·gc.alloc.rate:               583.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2449071.522 ops/s
[info]                  ·gc.alloc.rate:                   572.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     426.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2484441.152 ops/s
[info]                  ·gc.alloc.rate:                   581.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     420.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2498495.790 ops/s
[info]                  ·gc.alloc.rate:                   584.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2485260.951 ±(99.9%) 81271.416 ops/s [Average]
[info]   (min, avg, max) = (2449071.522, 2485260.951, 2499767.525), stdev = 21105.929
[info]   CI (99.9%): [2403989.536, 2566532.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   581.176 ±(99.9%) 18.979 MB/sec [Average]
[info]   (min, avg, max) = (572.710, 581.176, 584.538), stdev = 4.929
[info]   CI (99.9%): [562.197, 600.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.467 ±(99.9%) 571.885 MB/sec [Average]
[info]   (min, avg, max) = (331.793, 597.467, 664.195), stdev = 148.517
[info]   CI (99.9%): [25.582, 1169.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   378.497 ±(99.9%) 364.424 B/op [Average]
[info]   (min, avg, max) = (209.305, 378.497, 426.387), stdev = 94.640
[info]   CI (99.9%): [14.072, 742.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.408 ±(99.9%) 3.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 1.813), stdev = 0.786
[info]   CI (99.9%): [≈ 0, 3.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.257 ±(99.9%) 1.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.257, 1.141), stdev = 0.495
[info]   CI (99.9%): [≈ 0, 2.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.27% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1941503.949 ops/s
[info] # Warmup Iteration   2: 2635877.109 ops/s
[info] # Warmup Iteration   3: 2644953.378 ops/s
[info] Iteration   1: 2656696.769 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2652987.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2658234.730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2643134.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2651856.661 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2652581.964 ±(99.9%) 22685.786 ops/s [Average]
[info]   (min, avg, max) = (2643134.225, 2652581.964, 2658234.730), stdev = 5891.427
[info]   CI (99.9%): [2629896.178, 2675267.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.58% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1826182.091 ops/s
[info] # Warmup Iteration   2: 2372085.877 ops/s
[info] # Warmup Iteration   3: 2384382.680 ops/s
[info] Iteration   1: 2411665.528 ops/s
[info]                  ·gc.alloc.rate:                   1103.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2443052.680 ops/s
[info]                  ·gc.alloc.rate:                   1117.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     854.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2444335.006 ops/s
[info]                  ·gc.alloc.rate:                   1118.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2405970.294 ops/s
[info]                  ·gc.alloc.rate:                   1101.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2434857.035 ops/s
[info]                  ·gc.alloc.rate:                   1114.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     866.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2427976.109 ±(99.9%) 69219.397 ops/s [Average]
[info]   (min, avg, max) = (2405970.294, 2427976.109, 2444335.006), stdev = 17976.058
[info]   CI (99.9%): [2358756.711, 2497195.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1110.876 ±(99.9%) 31.524 MB/sec [Average]
[info]   (min, avg, max) = (1101.035, 1110.876, 1118.262), stdev = 8.187
[info]   CI (99.9%): [1079.352, 1142.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1132.289 ±(99.9%) 709.708 MB/sec [Average]
[info]   (min, avg, max) = (992.502, 1132.289, 1341.063), stdev = 184.309
[info]   CI (99.9%): [422.581, 1841.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   733.516 ±(99.9%) 447.926 B/op [Average]
[info]   (min, avg, max) = (642.940, 733.516, 866.744), stdev = 116.325
[info]   CI (99.9%): [285.590, 1181.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.040, 0.054), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.88% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5980.259 ops/s
[info] # Warmup Iteration   2: 10266.283 ops/s
[info] # Warmup Iteration   3: 11437.414 ops/s
[info] Iteration   1: 11906.022 ops/s
[info]                  ·gc.alloc.rate:                   1679.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218537.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.509 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12004.248 ops/s
[info]                  ·gc.alloc.rate:                   1693.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218151.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.645 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11968.244 ops/s
[info]                  ·gc.alloc.rate:                   1688.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              221975.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220084.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11966.420 ops/s
[info]                  ·gc.alloc.rate:                   1688.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221296.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.902 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11888.976 ops/s
[info]                  ·gc.alloc.rate:                   1677.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223523.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.288 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11946.782 ±(99.9%) 184.184 ops/s [Average]
[info]   (min, avg, max) = (11888.976, 11946.782, 12004.248), stdev = 47.832
[info]   CI (99.9%): [11762.598, 12130.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1685.404 ±(99.9%) 24.978 MB/sec [Average]
[info]   (min, avg, max) = (1677.627, 1685.404, 1693.162), stdev = 6.487
[info]   CI (99.9%): [1660.426, 1710.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221985.462 ±(99.9%) 80.137 B/op [Average]
[info]   (min, avg, max) = (221968.036, 221985.462, 222008.036), stdev = 20.811
[info]   CI (99.9%): [221905.325, 222065.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1672.722 ±(99.9%) 54.496 MB/sec [Average]
[info]   (min, avg, max) = (1653.817, 1672.722, 1689.078), stdev = 14.153
[info]   CI (99.9%): [1618.226, 1727.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   220318.766 ±(99.9%) 8425.633 B/op [Average]
[info]   (min, avg, max) = (218151.316, 220318.766, 223523.391), stdev = 2188.110
[info]   CI (99.9%): [211893.133, 228744.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.133, 0.167), stdev = 0.024
[info]   CI (99.9%): [0.042, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17.553 ±(99.9%) 12.110 B/op [Average]
[info]   (min, avg, max) = (13.645, 17.553, 21.902), stdev = 3.145
[info]   CI (99.9%): [5.443, 29.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.18% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5429.999 ops/s
[info] # Warmup Iteration   2: 14708.182 ops/s
[info] # Warmup Iteration   3: 15174.446 ops/s
[info] Iteration   1: 14935.679 ops/s
[info]                  ·gc.alloc.rate:                   236.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26953.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15055.605 ops/s
[info]                  ·gc.alloc.rate:                   238.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              24884.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26738.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.852 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15061.862 ops/s
[info]                  ·gc.alloc.rate:               238.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          24896.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26727.725 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14982.928 ops/s
[info]                  ·gc.alloc.rate:                   237.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              24896.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26866.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15051.872 ops/s
[info]                  ·gc.alloc.rate:      238.107 MB/sec
[info]                  ·gc.alloc.rate.norm: 24895.131 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15017.589 ±(99.9%) 215.182 ops/s [Average]
[info]   (min, avg, max) = (14935.679, 15017.589, 15061.862), stdev = 55.882
[info]   CI (99.9%): [14802.407, 15232.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   237.542 ±(99.9%) 3.440 MB/sec [Average]
[info]   (min, avg, max) = (236.172, 237.542, 238.279), stdev = 0.893
[info]   CI (99.9%): [234.102, 240.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24890.273 ±(99.9%) 29.349 B/op [Average]
[info]   (min, avg, max) = (24880.029, 24890.273, 24896.031), stdev = 7.622
[info]   CI (99.9%): [24860.924, 24919.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204.664 ±(99.9%) 440.556 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.664, 255.871), stdev = 114.411
[info]   CI (99.9%): [≈ 0, 645.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21457.217 ±(99.9%) 46189.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21457.217, 26953.155), stdev = 11995.315
[info]   CI (99.9%): [≈ 0, 67646.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.054), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.531 ±(99.9%) 9.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.531, 5.704), stdev = 2.385
[info]   CI (99.9%): [≈ 0, 10.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.48% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17992.572 ops/s
[info] # Warmup Iteration   2: 22238.078 ops/s
[info] # Warmup Iteration   3: 34251.649 ops/s
[info] Iteration   1: 37136.839 ops/s
[info]                  ·gc.alloc.rate:               396.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          16816.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10840.037 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 37744.513 ops/s
[info]                  ·gc.alloc.rate:                   403.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21330.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37862.886 ops/s
[info]                  ·gc.alloc.rate:                   404.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13803.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37795.067 ops/s
[info]                  ·gc.alloc.rate:                   403.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13828.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37761.082 ops/s
[info]                  ·gc.alloc.rate:               403.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          16816.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27653.287 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37660.078 ±(99.9%) 1139.790 ops/s [Average]
[info]   (min, avg, max) = (37136.839, 37660.078, 37862.886), stdev = 296.000
[info]   CI (99.9%): [36520.288, 38799.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   402.430 ±(99.9%) 12.235 MB/sec [Average]
[info]   (min, avg, max) = (396.810, 402.430, 404.587), stdev = 3.177
[info]   CI (99.9%): [390.194, 414.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16816.018 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (16816.011, 16816.018, 16816.045), stdev = 0.015
[info]   CI (99.9%): [16815.960, 16816.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   419.048 ±(99.9%) 639.000 MB/sec [Average]
[info]   (min, avg, max) = (255.793, 419.048, 663.620), stdev = 165.946
[info]   CI (99.9%): [≈ 0, 1058.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17491.114 ±(99.9%) 26487.626 B/op [Average]
[info]   (min, avg, max) = (10840.037, 17491.114, 27653.287), stdev = 6878.752
[info]   CI (99.9%): [≈ 0, 43978.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.356 ±(99.9%) 2.855 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.681), stdev = 0.741
[info]   CI (99.9%): [≈ 0, 3.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.803 ±(99.9%) 118.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.803, 69.869), stdev = 30.812
[info]   CI (99.9%): [≈ 0, 133.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.79% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 963.579 ops/s
[info] # Warmup Iteration   2: 2964.758 ops/s
[info] # Warmup Iteration   3: 2805.480 ops/s
[info] Iteration   1: 3316.083 ops/s
[info]                  ·gc.alloc.rate:                   1069.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              507719.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     620863.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.758 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3420.782 ops/s
[info]                  ·gc.alloc.rate:                   1103.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              507688.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     455189.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3423.814 ops/s
[info]                  ·gc.alloc.rate:                   1104.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              507688.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457240.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.971 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3385.847 ops/s
[info]                  ·gc.alloc.rate:               1092.363 MB/sec
[info]                  ·gc.alloc.rate.norm:          507688.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619796.030 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 3413.227 ops/s
[info]                  ·gc.alloc.rate:               1101.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          507688.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1004.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463320.708 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3391.951 ±(99.9%) 173.196 ops/s [Average]
[info]   (min, avg, max) = (3316.083, 3391.951, 3423.814), stdev = 44.979
[info]   CI (99.9%): [3218.754, 3565.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1094.335 ±(99.9%) 55.594 MB/sec [Average]
[info]   (min, avg, max) = (1069.989, 1094.335, 1104.570), stdev = 14.438
[info]   CI (99.9%): [1038.741, 1149.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   507694.470 ±(99.9%) 54.577 B/op [Average]
[info]   (min, avg, max) = (507688.126, 507694.470, 507719.824), stdev = 14.173
[info]   CI (99.9%): [507639.893, 507749.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1126.245 ±(99.9%) 685.796 MB/sec [Average]
[info]   (min, avg, max) = (989.485, 1126.245, 1333.578), stdev = 178.099
[info]   CI (99.9%): [440.450, 1812.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   523282.031 ±(99.9%) 341333.281 B/op [Average]
[info]   (min, avg, max) = (455189.845, 523282.031, 620863.209), stdev = 88643.169
[info]   CI (99.9%): [181948.750, 864615.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.176 ±(99.9%) 105.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.176, 66.971), stdev = 27.387
[info]   CI (99.9%): [≈ 0, 126.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.09% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24903.117 ops/s
[info] # Warmup Iteration   2: 54467.837 ops/s
[info] # Warmup Iteration   3: 55800.900 ops/s
[info] Iteration   1: 56938.098 ops/s
[info]                  ·gc.alloc.rate:                   727.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          968.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26771.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 56483.755 ops/s
[info]                  ·gc.alloc.rate:                   721.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18003.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 56362.676 ops/s
[info]                  ·gc.alloc.rate:                   719.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18070.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 56786.767 ops/s
[info]                  ·gc.alloc.rate:               725.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17980.863 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 55382.651 ops/s
[info]                  ·gc.alloc.rate:                   707.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27759.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   56390.789 ±(99.9%) 2343.933 ops/s [Average]
[info]   (min, avg, max) = (55382.651, 56390.789, 56938.098), stdev = 608.712
[info]   CI (99.9%): [54046.857, 58734.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   720.290 ±(99.9%) 29.627 MB/sec [Average]
[info]   (min, avg, max) = (707.548, 720.290, 727.185), stdev = 7.694
[info]   CI (99.9%): [690.663, 749.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.016 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (20099.959, 20100.016, 20100.054), stdev = 0.036
[info]   CI (99.9%): [20099.876, 20100.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   777.602 ±(99.9%) 686.490 MB/sec [Average]
[info]   (min, avg, max) = (646.270, 777.602, 977.190), stdev = 178.279
[info]   CI (99.9%): [91.112, 1464.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21717.103 ±(99.9%) 19550.818 B/op [Average]
[info]   (min, avg, max) = (17980.863, 21717.103, 27759.987), stdev = 5077.285
[info]   CI (99.9%): [2166.285, 41267.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.644 ±(99.9%) 5.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.011), stdev = 1.324
[info]   CI (99.9%): [≈ 0, 5.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.814 ±(99.9%) 140.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.814, 83.221), stdev = 36.577
[info]   CI (99.9%): [≈ 0, 158.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.414
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.39% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59232.152 ops/s
[info] # Warmup Iteration   2: 79248.230 ops/s
[info] # Warmup Iteration   3: 79073.551 ops/s
[info] Iteration   1: 78985.093 ops/s
[info]                  ·gc.alloc.rate:                   516.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11700.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 77793.719 ops/s
[info]                  ·gc.alloc.rate:               508.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6704.278 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 80245.321 ops/s
[info]                  ·gc.alloc.rate:                   524.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12986.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 79473.453 ops/s
[info]                  ·gc.alloc.rate:                   519.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13112.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80430.497 ops/s
[info]                  ·gc.alloc.rate:               525.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6477.921 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   79385.617 ±(99.9%) 4099.235 ops/s [Average]
[info]   (min, avg, max) = (77793.719, 79385.617, 80430.497), stdev = 1064.558
[info]   CI (99.9%): [75286.381, 83484.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   518.995 ±(99.9%) 26.863 MB/sec [Average]
[info]   (min, avg, max) = (508.577, 518.995, 525.788), stdev = 6.976
[info]   CI (99.9%): [492.132, 545.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.005, 10288.006, 10288.006), stdev = 0.001
[info]   CI (99.9%): [10288.005, 10288.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.849 ±(99.9%) 656.089 MB/sec [Average]
[info]   (min, avg, max) = (331.067, 514.849, 662.332), stdev = 170.384
[info]   CI (99.9%): [≈ 0, 1170.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10196.315 ±(99.9%) 12853.855 B/op [Average]
[info]   (min, avg, max) = (6477.921, 10196.315, 13112.477), stdev = 3338.105
[info]   CI (99.9%): [≈ 0, 23050.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.404 ±(99.9%) 3.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 1.897), stdev = 0.835
[info]   CI (99.9%): [≈ 0, 3.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.053 ±(99.9%) 64.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.053, 37.803), stdev = 16.642
[info]   CI (99.9%): [≈ 0, 72.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.70% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64888.179 ops/s
[info] # Warmup Iteration   2: 86771.492 ops/s
[info] # Warmup Iteration   3: 86861.543 ops/s
[info] Iteration   1: 86681.980 ops/s
[info]                  ·gc.alloc.rate:      3.966 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 86850.742 ops/s
[info]                  ·gc.alloc.rate:      3.975 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 86812.396 ops/s
[info]                  ·gc.alloc.rate:      3.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 86636.447 ops/s
[info]                  ·gc.alloc.rate:      3.964 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 86688.523 ops/s
[info]                  ·gc.alloc.rate:      3.967 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   86734.017 ±(99.9%) 355.354 ops/s [Average]
[info]   (min, avg, max) = (86636.447, 86734.017, 86850.742), stdev = 92.284
[info]   CI (99.9%): [86378.664, 87089.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.969 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (3.964, 3.969, 3.975), stdev = 0.005
[info]   CI (99.9%): [3.951, 3.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   72.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.005, 72.005, 72.005), stdev = 0.001
[info]   CI (99.9%): [72.005, 72.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:10:11
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    769588.474 ±   20617.641   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      2026.761 ±      55.385  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      2020.294 ±      57.726  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5      4130.967 ±     173.142    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.079 ±       0.119  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.162 ±       0.245    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        30.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        23.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1603824.953 ±   83025.983   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1141.471 ±      59.295  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      1118.698 ±     673.583  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1096.238 ±     610.650    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.083 ±       0.127  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.082 ±       0.125    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        17.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        17.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   3565518.949 ±  176677.178   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       235.621 ±      11.672  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5       204.650 ±     440.525  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5        90.589 ±     195.063    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.008 ±       0.072  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.004 ±       0.031    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         8.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    171521.723 ±    2131.542   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1453.587 ±      17.765  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     13336.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      1456.829 ±     716.214  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5     13369.847 ±    6728.988    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.100 ±       0.119  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.917 ±       1.102    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        22.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        22.000                    ms
[info] AdtBenchmark.writeCirce                                                                  thrpt    5    582900.120 ±   18488.921   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1943.932 ±      61.097  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      5248.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      1950.761 ±     596.814  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5268.358 ±    1706.489    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.108 ±       0.164  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.292 ±       0.436    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                        thrpt    5        29.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                         thrpt    5        24.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2111734.714 ±   50359.308   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       687.053 ±      16.093  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       512.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5       652.452 ±       6.463  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       486.228 ±      11.202    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.508 ±       3.974  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.378 ±       2.954    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        10.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        11.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5   9283808.085 ±  272709.755   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       471.906 ±      13.835  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       449.254 ±     762.478  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        76.173 ±     129.330    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.379 ±       3.133  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.065 ±       0.534    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         7.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5         8.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    303018.306 ±   21566.458   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       991.974 ±      70.596  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      5152.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5       983.434 ±      28.197  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      5108.767 ±     316.219    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.050 ±       0.185  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.257 ±       0.946    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1704488.735 ±   41092.985   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2660.064 ±      64.326  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2707.578 ±      59.718  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      2499.975 ±      95.941    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.104 ±       0.160  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.096 ±       0.146    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        40.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2583846.180 ±   64133.239   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1812.543 ±      44.941  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1802.459 ±     663.320  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1097.813 ±     400.246    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.096 ±       0.108  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.058 ±       0.064    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5   9448432.364 ±  660851.777   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1200.792 ±      83.400  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5      1208.048 ±     698.569  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       201.119 ±     112.687    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.062 ±       0.098  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.010 ±       0.016    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        18.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        13.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    643700.770 ±   11186.440   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1665.667 ±      28.998  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4072.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1664.333 ±      71.801  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4068.836 ±     200.381    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.075 ±       0.108  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.183 ±       0.263    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   2051587.099 ±   51797.391   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      2044.147 ±      51.715  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1568.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      2020.651 ±      56.266  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      1550.028 ±      56.967    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.075 ±       0.122  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.058 ±       0.093    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        30.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   5921735.573 ±  105630.381   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1625.592 ±      29.319  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1595.098 ±     573.502  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       423.893 ±     152.230    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.088  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.023 ±       0.024    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        24.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  22316026.697 ±  534516.216   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       680.732 ±      16.336  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       664.211 ±       2.915  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5        46.837 ±       1.161    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.143  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.005 ±       0.010    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  23679740.324 ±  403866.154   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1410840.274 ±   38312.014   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      2115.771 ±      57.531  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2360.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      2077.624 ±     556.093  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2317.190 ±     595.889    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.100 ±       0.200  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.111 ±       0.220    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        31.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     19018.192 ±     312.059   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1346.818 ±      22.077  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    111446.322 ±      12.932    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1337.808 ±      30.673  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    110703.176 ±    3617.289    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.087 ±       0.164  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         7.233 ±      13.548    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     31863.371 ±    1183.738   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       855.521 ±      31.809  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     42253.070 ±      43.536    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       854.727 ±     695.931  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     42222.774 ±   34525.977    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.303  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         3.507 ±      15.040    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     28516.922 ±    1544.461   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       383.146 ±      20.758  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     21144.017 ±       0.010    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       368.395 ±     490.907  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     20354.342 ±   27649.374    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.346 ±       2.846  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5        19.272 ±     158.735    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     25541.735 ±    1499.710   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1322.099 ±      77.048  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     81456.018 ±       0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1327.926 ±      43.978  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     81824.233 ±    3525.774    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.092 ±       0.108  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         5.658 ±       6.879    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     27555.641 ±     780.414   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1887.020 ±      53.047  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    107762.659 ±      66.926    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1882.837 ±     698.620  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5    107514.752 ±   39342.573    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.132  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         4.993 ±       7.520    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     26271.005 ±    1517.295   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1541.034 ±      89.387  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     92312.018 ±       0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1528.397 ±     720.527  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     91587.638 ±   44080.183    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         4.246 ±      11.091    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        23.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     30636.982 ±    1332.770   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1700.422 ±      73.877  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5     87328.016 ±       0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5      1747.796 ±     581.286  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5     89794.279 ±   31576.214    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.108 ±       0.104  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         5.553 ±       5.225    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        26.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        28.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     30290.759 ±    1233.155   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1621.697 ±      65.580  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5     84248.015 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5      1612.588 ±     591.728  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5     83745.802 ±   29270.019    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5         0.079 ±       0.215  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5         4.087 ±      10.936    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      8396.447 ±      97.308   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1187.398 ±      13.809  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    222544.457 ±       3.485    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1194.464 ±     682.555  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5    223907.297 ±  129065.384    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5        11.701 ±      23.703    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5     17900.459 ±     237.865   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1578.861 ±      21.041  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    138808.026 ±       0.015    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1611.010 ±     566.311  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    141616.820 ±   48937.478    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         6.587 ±      11.799    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        21.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     41718.156 ±    1428.269   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1151.724 ±      39.506  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     43448.012 ±       0.009    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1190.139 ±     699.142  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     44851.246 ±   24922.502    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.824 ±       3.408    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        15.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     61792.600 ±    2376.825   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       798.542 ±      30.409  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       799.202 ±     701.125  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     20353.654 ±   17851.780    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.058 ±       0.183  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.481 ±       4.662    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                     thrpt    5     31292.825 ±     683.550   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2122.734 ±      45.823  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    106744.015 ±       0.008    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2146.171 ±     731.117  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    107951.680 ±   38256.969    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.143  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.972 ±       7.138    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                           thrpt    5        32.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                            thrpt    5        33.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     28231.619 ±    1005.353   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1645.797 ±      58.765  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     91736.017 ±       0.009    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1667.712 ±      67.288  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     92967.501 ±    6126.977    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         3.947 ±       6.776    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        25.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        25.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     37349.447 ±     548.405   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1599.811 ±      23.038  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     67408.012 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5      1612.465 ±     591.785  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     67941.713 ±   24947.694    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.087 ±       0.132  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         3.683 ±       5.553    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        20.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     37882.293 ±     373.421   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1556.616 ±      15.377  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     64664.011 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5      1611.071 ±     575.942  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     66932.718 ±   24221.233    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.087 ±       0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5         3.635 ±       7.256    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    327711.761 ±    4513.748   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1800.960 ±      24.466  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      8648.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1817.810 ±     683.070  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8729.163 ±    3290.785    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.400 ±       0.268    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        27.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    679538.557 ±   40735.599   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       563.077 ±      33.712  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       523.094 ±     689.096  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1215.133 ±    1639.640    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.469 ±       3.679  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.089 ±       8.545    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1717098.838 ±   45718.640   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       331.689 ±       8.821  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       352.935 ±     364.684  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       323.848 ±     341.901    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.352 ±       2.745  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.322 ±       2.509    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    104609.032 ±    2540.699   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3800.907 ±      92.164  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      3804.380 ±     536.638  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     57234.616 ±    8784.133    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.142 ±       0.183  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.127 ±       2.706    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        56.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        45.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    324365.112 ±    2762.544   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1104.750 ±       9.749  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      5360.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1130.886 ±     694.497  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      5487.072 ±    3378.064    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.343 ±       0.212    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5    937425.624 ±    8884.567   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       662.418 ±       6.268  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       655.608 ±       7.569  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1100.577 ±      20.464    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.105 ±       0.269    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2130331.086 ±   87129.971   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       985.538 ±      40.594  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       999.632 ±      18.303  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       738.454 ±      20.325    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.040 ±       0.090    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        15.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2200497.998 ±   31323.764   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    491181.190 ±   13290.376   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       574.285 ±      15.465  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5       591.831 ±     567.046  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1898.831 ±    1849.627    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.456 ±       3.619  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.466 ±      11.628    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    170643.826 ±    7449.609   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2094.014 ±      91.335  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     19312.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2093.158 ±     588.962  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     19303.619 ±    5311.924    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.083 ±       0.160  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.769 ±       1.485    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    422454.474 ±   18257.670   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       350.040 ±      15.064  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       349.472 ±     368.406  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1302.202 ±    1372.186    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.457 ±       3.660  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.735 ±      13.911    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5    978846.063 ±   72862.565   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       189.097 ±      13.981  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       204.675 ±     440.579  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       330.089 ±     711.164    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.013 ±       0.059  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.021 ±       0.094    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     82470.303 ±    1558.024   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3403.856 ±      63.496  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      3392.274 ±      57.769  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     64731.534 ±    1030.705    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.150 ±       0.243  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         2.859 ±       4.622    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        50.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        43.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    249602.600 ±    8029.474   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1376.655 ±      43.899  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      8680.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1336.906 ±      36.052  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      8429.910 ±     382.610    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.393 ±       0.708    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        20.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        16.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                  thrpt    5   1646714.077 ±   82909.363   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       845.422 ±      42.605  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       855.125 ±     701.907  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       816.658 ±     656.915    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.064 ±       0.101    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1780033.655 ±  116981.165   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       479.603 ±      31.564  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       449.270 ±     628.078  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       399.002 ±     583.613    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.371 ±       3.016  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.328 ±       2.664    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1945387.971 ±   18704.997   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     38337.899 ±     769.706   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1672.593 ±      33.341  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     68656.582 ±       4.915    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1674.232 ±      54.774  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     68722.990 ±     956.826    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.075 ±       0.238  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.076 ±       9.760    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     25079.434 ±     883.397   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1579.620 ±      55.688  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     99119.891 ±       1.089    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1611.316 ±     565.308  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    101089.494 ±   34407.267    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         4.712 ±       7.773    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     57734.950 ±    1992.788   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1012.048 ±      34.866  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     27584.008 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1055.580 ±     593.142  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     28751.397 ±   15354.070    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.153 ±       1.753    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        15.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     66063.006 ±     233.262   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       444.321 ±       1.587  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10584.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.228 ±     765.375  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     10723.029 ±   18210.202    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.341 ±       2.744  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         8.108 ±      65.313    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     33638.004 ±     566.811   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1721.502 ±      28.466  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80536.014 ±       0.010    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1738.772 ±     524.728  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     81340.278 ±   24255.669    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.895 ±       5.916    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     39354.566 ±     486.916   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       620.824 ±       7.574  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24824.373 ±       3.119    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5       660.743 ±       5.213  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     26420.828 ±     409.490    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.391 ±       2.916  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        15.686 ±     117.170    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     41191.602 ±     963.248   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       414.217 ±       9.552  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     15824.011 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       429.404 ±     574.609  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16418.063 ±   22140.035    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.450 ±       3.517  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        17.235 ±     134.741    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     43588.302 ±    1375.755   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       427.655 ±      13.469  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     15440.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       434.025 ±     578.098  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     15659.171 ±   20724.628    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.373 ±       2.946  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        13.618 ±     107.646    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     43954.322 ±    1312.764   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       380.989 ±      11.210  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     13640.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5       367.743 ±     489.832  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     13168.756 ±   17595.465    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.382 ±       3.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5        13.700 ±     108.891    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     14858.236 ±     558.500   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1060.681 ±      39.649  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    112340.818 ±      50.519    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1066.287 ±     582.185  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    113003.337 ±   64165.929    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.298 ±       4.777    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     15823.945 ±     881.309   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       960.142 ±      53.307  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     95484.167 ±      52.798    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       922.626 ±     569.009  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     91645.780 ±   53876.827    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         5.357 ±      11.856    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        14.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     74621.783 ±     885.574   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       194.214 ±       2.289  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       204.643 ±     440.509  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4319.054 ±    9297.249    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.033 ±       0.148  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.703 ±       3.129    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     13434.149 ±     284.469   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1287.758 ±      27.380  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    150848.059 ±       0.222    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1261.082 ±     560.595  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    147766.199 ±   67072.093    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         8.290 ±      10.662    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        19.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     57078.516 ±    1319.761   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1415.206 ±      32.018  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     39016.008 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1404.762 ±     579.142  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     38738.601 ±   16473.543    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.071 ±       0.134  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         1.950 ±       3.666    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        21.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                              thrpt    5     78616.244 ±    3157.718   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1190.577 ±      48.023  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     23832.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1192.702 ±     719.753  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     23897.659 ±   15029.016    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.075 ±       0.193  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.508 ±       3.941    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    285056.327 ±   19156.130   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       452.155 ±      30.462  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       448.933 ±     762.873  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2468.888 ±    4099.471    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.390 ±       3.135  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.132 ±      17.147    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    334941.337 ±    4441.447   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     70717.538 ±    2543.272   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1335.195 ±      48.280  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     29712.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1332.040 ±      39.684  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5     29645.140 ±    1820.154    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.100 ±       0.174  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         2.222 ±       3.870    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        20.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        16.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     27123.022 ±     786.883   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       602.543 ±      17.510  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     34960.021 ±       0.045    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5       593.376 ±     568.230  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     34448.684 ±   33229.482    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.392 ±       2.970  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        22.617 ±     171.320    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                   thrpt    5     28348.305 ±     833.276   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       390.675 ±      11.597  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     21688.029 ±      53.366    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       363.588 ±     485.800  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     20227.419 ±   27813.523    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.457 ±       3.713  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        25.713 ±     209.037    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    121519.215 ±   10071.561   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       474.437 ±      39.230  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.004 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       449.413 ±     628.372  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5854.605 ±    8637.921    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.346 ±       2.756  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         4.562 ±      36.380    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     21820.495 ±     436.695   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1219.409 ±      24.474  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     87944.033 ±       0.100    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1253.290 ±     569.789  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     90353.555 ±   39853.407    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.054 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.904 ±       3.178    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        19.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    166229.683 ±    4537.552   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1087.514 ±      29.751  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1130.848 ±     702.811  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10714.246 ±    6895.021    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.046 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.433 ±       0.332    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        17.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                  thrpt    5    547097.063 ±   12052.500   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       553.420 ±      12.188  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       574.632 ±     546.249  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1653.751 ±    1582.161    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.467 ±       3.617  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.340 ±      10.380    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    567321.828 ±    5101.284   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       435.517 ±       3.807  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       382.559 ±     616.613  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1061.440 ±    1715.910    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.373 ±       2.946  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.032 ±       8.149    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    600579.272 ±    1787.071   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    325638.566 ±    4614.430   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       900.502 ±      12.664  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5       918.100 ±     567.115  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      4435.888 ±    2713.523    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.050 ±       0.108  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.241 ±       0.518    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     36053.724 ±     733.468   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1699.217 ±      34.088  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     74160.012 ±       0.002    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1748.197 ±     541.176  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     76292.157 ±   23189.821    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         4.001 ±       4.036    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        26.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5     93764.910 ±    2243.812   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1094.386 ±      26.113  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     18368.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1123.782 ±     707.811  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     18850.666 ±   11533.189    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.116 ±       1.726    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        17.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    158849.996 ±    4126.108   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       103.366 ±       2.687  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       102.325 ±     539.531  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1018.327 ±    5369.543    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.500 ±       4.291  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         5.006 ±      42.983    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         4.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     38409.850 ±    2023.816   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2013.682 ±     106.034  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     82504.012 ±       0.007    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      2015.633 ±      67.765  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     82596.993 ±    5375.535    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.760 ±       6.858    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     88215.367 ±    3329.082   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       705.003 ±      26.374  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12576.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5       727.845 ±     576.854  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12984.284 ±   10294.586    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.193  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         1.263 ±       3.437    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        11.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5     97342.034 ±    5560.443   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       384.012 ±      21.845  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      6208.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       363.877 ±     485.458  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5872.860 ±    7681.939    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.435 ±       3.617  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         6.984 ±      58.013    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    110491.953 ±    3240.150   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       408.946 ±      12.118  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5824.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       433.785 ±     576.215  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      6176.316 ±    8167.128    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.367 ±       2.913  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.185 ±      41.135    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    112228.430 ±    3594.226   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       326.914 ±      10.304  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      4584.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5       352.543 ±     364.968  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5      4939.529 ±    5054.543    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5         0.377 ±       3.070  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.262 ±      42.829    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9144.387 ±     186.969   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1516.185 ±      30.918  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    260931.112 ±      26.377    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1541.487 ±     706.892  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    265399.628 ±  125911.687    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.096 ±       0.134  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        16.467 ±      22.872    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5      9459.643 ±     390.170   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1455.403 ±      60.330  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    242110.682 ±      56.135    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1463.336 ±     687.617  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    243403.505 ±  112701.314    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        13.815 ±      20.706    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    103448.430 ±    1343.249   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       269.256 ±       3.470  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       220.045 ±     490.703  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3350.494 ±    7476.259    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.323 ±       2.756  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         4.920 ±      42.025    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5451.542 ±      72.887   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1450.317 ±      19.446  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    418664.080 ±       0.010    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1464.509 ±     716.704  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    422839.623 ±  209997.488    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        22.827 ±      19.196    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     24341.513 ±     763.487   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1792.151 ±      54.939  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    115855.291 ±     123.733    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1747.530 ±     585.128  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    112949.690 ±   36299.448    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.104 ±       0.150  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         6.719 ±       9.551    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        22.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                               thrpt    5     28676.957 ±     493.302   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5      1773.398 ±      30.433  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     97320.017 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1807.335 ±     726.234  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     99194.904 ±   40413.027    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.117 ±       0.251  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         6.400 ±      13.803    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        27.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    332521.767 ±   19777.943   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       733.718 ±      44.017  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       730.960 ±     577.341  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3453.778 ±    2561.700    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.335 ±       0.199    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        14.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    386014.131 ±    1385.466   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28829.490 ±     566.271   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1890.567 ±      36.940  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    103200.016 ±       0.009    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1881.448 ±     727.777  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    102730.395 ±   40964.876    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         4.544 ±       5.347    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        24.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    128828.782 ±    1419.349   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2218.911 ±      24.138  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     27104.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2230.377 ±     708.658  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     27242.504 ±    8561.282    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.125 ±       0.127  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         1.525 ±       1.534    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        33.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    303051.153 ±   10359.546   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       428.265 ±      14.559  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       429.278 ±     573.207  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2232.226 ±    3036.279    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.450 ±       3.606  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.340 ±      18.751    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    671764.102 ±    7949.243   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       437.104 ±       5.137  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       383.579 ±     618.756  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       898.907 ±    1456.425    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.340 ±       2.646  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.793 ±       6.176    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     70861.788 ±    2728.996   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      3010.326 ±     115.778  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66856.006 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      2980.499 ±     565.151  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     66207.859 ±   13617.377    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.154 ±       0.146  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         3.421 ±       3.214    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        38.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    208861.323 ±    6337.888   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1697.697 ±      51.526  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     12792.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1745.963 ±     584.509  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     13155.889 ±    4395.203    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.660 ±       0.682    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        26.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    840571.717 ±   32603.539   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       662.328 ±      25.908  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       721.022 ±     572.878  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1349.110 ±    1047.157    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.463 ±       3.624  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.868 ±       6.802    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1009981.302 ±    2977.047   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       549.377 ±       1.834  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.721 ±     699.469  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       826.785 ±    1088.061    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.388 ±       2.989  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.604 ±       4.651    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5   1057665.749 ±    5118.019   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     29783.631 ±    1173.120   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1638.855 ±      64.932  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     86587.331 ±      27.330    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1672.904 ±      54.995  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     88397.041 ±    5634.765    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.108  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.733 ±       5.592    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                      thrpt    5    131081.362 ±    2942.546   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1803.087 ±      40.480  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     21648.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1814.741 ±     713.726  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5     21788.364 ±    8574.461    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.096 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.150 ±       0.535    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                            thrpt    5        27.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                             thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    194686.766 ±    9173.370   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1161.933 ±      54.824  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      9392.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1189.448 ±     698.675  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      9614.274 ±    5629.212    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.062 ±       0.179  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.504 ±       1.445    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        18.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    261876.672 ±    9256.669   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       852.005 ±      29.762  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       799.754 ±     701.789  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4807.095 ±    4238.372    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.301 ±       0.878    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     66333.370 ±    2821.626   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2757.137 ±     116.359  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     65408.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      2768.877 ±     629.084  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     65711.775 ±   16739.431    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.976 ±       2.343    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        41.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        44.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                     thrpt    5    164555.647 ±    4548.534   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1076.606 ±      29.409  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1063.737 ±     553.776  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     10173.936 ±    5325.404    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.677 ±       0.420    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                           thrpt    5        16.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                            thrpt    5        13.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    561729.127 ±   35742.328   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       568.281 ±      36.321  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       522.720 ±     688.916  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1460.345 ±    1877.571    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.467 ±       3.616  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.343 ±      10.448    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    557709.684 ±   22303.243   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       428.100 ±      17.135  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       382.550 ±     616.855  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      1078.933 ±    1738.810    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.378 ±       2.967  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.060 ±       8.314    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         7.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    586998.196 ±    4180.800   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    325837.156 ±   10177.423   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       897.729 ±      27.946  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5       918.086 ±     567.111  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4432.168 ±    2687.577    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.361 ±       0.696    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5      9057.407 ±     582.406   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1186.527 ±      76.279  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    206147.216 ±      27.270    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1201.574 ±     704.280  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5    208953.109 ±  127598.390    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         8.690 ±       7.817    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5      9595.090 ±     131.865   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1149.936 ±      15.686  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    188599.720 ±      53.434    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1190.675 ±     699.417  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5    195309.936 ±  115505.778    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         8.193 ±       7.185    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    144558.242 ±    5041.065   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       940.737 ±      32.627  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5      1001.536 ±      15.077  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     10902.318 ±     300.935    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.634 ±       0.727    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        11.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      7589.795 ±     188.930   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1413.534 ±      35.328  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    293080.059 ±       0.008    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1397.218 ±     556.246  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5    289682.459 ±  114151.180    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5        14.682 ±      38.317    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        19.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     19619.057 ±     546.259   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1042.372 ±      27.604  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     83607.583 ±     115.488    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5       997.033 ±      20.648  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5     79972.668 ±    1821.532    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.679 ±       9.754    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                         thrpt    5     22528.927 ±     558.115   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       954.797 ±      23.632  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5     66696.021 ±       0.015    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       922.152 ±     568.699  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     64368.712 ±   38575.103    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         4.062 ±       9.194    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                               thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    700364.367 ±    7089.407   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1263.979 ±      12.834  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1271.329 ±     584.674  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      2857.071 ±    1332.167    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.168 ±       0.272    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        19.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    549163.705 ±    2514.785   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     21477.461 ±     669.289   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       990.398 ±      30.494  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     72567.929 ±      30.816    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       992.330 ±      21.721  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5     72710.722 ±     910.483    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.050 ±       0.166  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         3.675 ±      12.332    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     24936.642 ±    1288.893   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1396.836 ±      72.694  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     88143.890 ±       1.098    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1339.159 ±      31.395  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     84514.802 ±    4193.058    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.692 ±       9.907    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     26055.626 ±     874.232   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1206.936 ±      41.078  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     72890.213 ±      56.610    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1192.624 ±     709.595  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     72063.261 ±   43882.761    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.033 ±       0.134  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         2.012 ±       8.054    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    248080.072 ±   12015.450   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       645.830 ±      31.240  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       665.718 ±       3.169  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      4222.672 ±     206.672    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.054 ±       0.185  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.341 ±       1.157    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     16009.726 ±     323.100   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1637.670 ±      33.108  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    160984.262 ±       1.998    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1603.245 ±     546.540  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    157554.005 ±   51372.774    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.079 ±       0.222  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         7.775 ±      21.845    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        20.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     42545.349 ±    1307.625   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1352.915 ±      40.786  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     50040.010 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1403.448 ±     560.395  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     51886.984 ±   19445.315    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.619 ±       3.412    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                             thrpt    5    124481.359 ±    4878.875   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5       973.988 ±      38.047  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     12312.004 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       988.999 ±      25.192  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     12502.702 ±     547.172    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.036  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.843 ±       0.465    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        14.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1076754.671 ±   23291.090   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1154.898 ±      24.901  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1135.370 ±     704.177  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1659.665 ±    1034.859    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±       0.204  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.092 ±       0.301    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        17.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        14.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    691195.234 ±    4496.034   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     47872.733 ±    2166.906   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1269.520 ±      57.399  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     41728.009 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1264.794 ±     594.053  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     41558.507 ±   18994.449    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.321 ±       2.898    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        19.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     14567.498 ±     521.180   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1323.126 ±      46.875  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    142918.388 ±      53.059    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1337.978 ±      32.247  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    144533.670 ±    6704.571    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.044  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         8.104 ±       4.968    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     15839.661 ±     222.864   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1290.465 ±      17.829  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    128196.056 ±      52.370    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1326.826 ±      46.603  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    131809.285 ±    4809.939    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         6.204 ±      12.602    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        21.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    264653.261 ±   12010.996   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       688.845 ±      31.352  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       665.678 ±       2.942  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      3958.701 ±     186.108    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.054 ±       0.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.321 ±       0.791    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     11229.590 ±     290.350   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1543.352 ±      39.486  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    216280.522 ±       4.156    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1533.882 ±     675.363  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    214844.533 ±   89986.760    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         9.330 ±      18.409    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        23.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     42252.490 ±    1634.473   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1604.733 ±      62.137  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     59768.010 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1609.042 ±     563.264  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     59941.778 ±   21479.507    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.079 ±       0.143  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.951 ±       5.379    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        24.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                             thrpt    5     40394.523 ±     536.125   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5      1203.105 ±      15.877  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     46872.011 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1192.659 ±     708.810  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     46478.032 ±   27994.785    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.217  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.757 ±       8.413    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1089773.213 ±   43235.950   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       991.652 ±      39.456  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1000.083 ±      17.086  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1444.266 ±      46.113    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.083 ±       0.160  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.120 ±       0.229    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        13.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1250172.382 ±   11337.850   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5      3523.404 ±     121.169   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       475.783 ±      16.203  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5    212496.126 ±       0.015    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       445.494 ±     753.169  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    198837.691 ±  334036.009    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.432 ±       3.443  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       193.600 ±    1543.260    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    116443.836 ±    3909.951   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2163.477 ±      72.657  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     29240.004 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2229.022 ±     708.643  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     30140.040 ±   10300.829    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.137 ±       0.166  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.855 ±       2.215    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        33.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    243432.503 ±   10348.902   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       534.576 ±      22.717  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       523.184 ±     691.091  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3389.305 ±    4550.242    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.470 ±       3.596  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.985 ±      22.789    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    480169.129 ±   32072.646   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       605.321 ±      40.373  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       598.589 ±     571.515  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1963.956 ±    1899.101    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.358 ±       2.780  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.164 ±       9.028    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     68960.465 ±    1927.452   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2988.122 ±      85.771  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68168.474 ±       4.023    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2978.174 ±     634.254  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     67944.443 ±   14606.330    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.175 ±       0.185  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.988 ±       4.247    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        44.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        42.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    172003.134 ±    6247.521   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1754.906 ±      63.988  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     16056.003 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1747.549 ±     585.581  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     15986.223 ±    5154.803    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.801 ±       1.326    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        26.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    480638.324 ±   28630.073   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       493.535 ±      29.455  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       509.088 ±     650.295  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1669.056 ±    2147.214    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.467 ±       3.620  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.567 ±      12.199    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    555894.139 ±   19097.387   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       435.209 ±      14.828  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       448.905 ±     762.527  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1269.129 ±    2139.885    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.381 ±       3.085  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.070 ±       8.644    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    638232.689 ±   28997.694   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     27244.958 ±     419.082   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1497.968 ±      22.598  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     86516.407 ±      26.890    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1535.671 ±     704.416  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     88688.613 ±   40443.323    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.046 ±       0.067  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         2.644 ±       3.861    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        20.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      7151.086 ±     203.711   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1130.888 ±      32.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    248848.061 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1133.250 ±     696.683  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    249500.861 ±  157326.946    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5        16.478 ±      15.470    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                         thrpt    5      7134.554 ±     251.055   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                          thrpt    5      1042.149 ±      36.273  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                     thrpt    5    229848.061 ±       0.007    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5      1055.537 ±     566.423  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5    232777.547 ±  123487.084    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        18.323 ±      32.549    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                thrpt    5        14.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5     98436.043 ±    4382.791   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       953.841 ±      42.889  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.005 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1001.485 ±      14.799  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     16011.007 ±     599.327    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         1.064 ±       1.064    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      6871.669 ±     252.227   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1254.180 ±      46.171  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    287232.064 ±       0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1259.410 ±     549.122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    288631.370 ±  132426.841    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5        19.067 ±      34.459    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        19.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        17.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     16413.239 ±    1350.634   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       968.332 ±      80.262  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     92845.274 ±     128.802    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5       995.609 ±      19.442  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5     95503.649 ±    9663.542    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5         6.802 ±       8.913    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                        thrpt    5     18591.904 ±     861.046   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                         thrpt    5       871.946 ±      40.458  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                    thrpt    5     73808.026 ±       0.016    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                thrpt    5       854.669 ±     689.210  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     72214.475 ±   55393.635    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.987 ±       3.578    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                              thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    419048.668 ±    7612.426   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5       950.073 ±      17.449  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5       999.092 ±      15.483  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5      3752.154 ±      84.193    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.219 ±       0.394    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    481361.724 ±    5111.766   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     18422.849 ±    1209.948   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       932.914 ±      61.470  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     79682.525 ±      29.647    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5       925.156 ±     575.154  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5     79133.203 ±   51620.999    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5         3.572 ±      10.865    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        13.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     11802.550 ±     492.339   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1217.088 ±      51.103  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    162256.086 ±      30.809    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1201.330 ±     698.319  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    160080.162 ±   90503.432    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        11.100 ±      12.952    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     12884.090 ±     223.717   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1153.920 ±      20.274  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    140946.096 ±      64.116    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1190.505 ±     698.792  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5    145342.035 ±   83108.513    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.134  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         8.658 ±      16.533    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    166226.892 ±    9783.307   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       961.629 ±      56.327  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.003 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       934.251 ±     578.723  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      8843.227 ±    5432.602    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.710 ±       1.154    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                 thrpt    5     11084.834 ±     193.851   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1387.296 ±      23.990  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5    196944.077 ±       0.321    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1389.652 ±     525.142  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    197313.944 ±   76373.709    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.209  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5        10.034 ±      29.508    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                        thrpt    5        22.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     26925.723 ±     801.134   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1181.864 ±      35.118  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     69073.124 ±     107.137    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1198.708 ±     710.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     70081.817 ±   42162.649    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         5.117 ±       5.313    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                            thrpt    5     94940.589 ±    1897.489   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1755.324 ±      35.129  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     29096.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1739.166 ±     557.440  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     28825.665 ±    9063.345    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.381 ±       2.484    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        26.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    691959.236 ±   18731.923   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       949.677 ±      25.593  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       998.942 ±      15.062  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      2272.163 ±      81.823    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.170 ±       0.161    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        14.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    755368.510 ±    5207.311   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                thrpt    5     72951.217 ±    2301.584   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1903.438 ±      60.255  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5     41056.006 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1874.306 ±     692.402  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5     40426.731 ±   14851.245    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.112 ±       0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.425 ±       1.973    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                      thrpt    5        28.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                       thrpt    5        29.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     21426.929 ±    1222.610   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1064.410 ±      60.789  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     78175.197 ±      29.106    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1064.272 ±     563.565  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     78071.154 ±   37012.608    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         5.184 ±       6.435    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        16.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        13.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     18960.674 ±    1143.818   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       756.848 ±      45.784  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     62816.946 ±      60.572    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       720.852 ±     560.593  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     59773.249 ±   44560.374    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.468 ±       3.715  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        38.311 ±     304.123    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    174274.884 ±    7730.480   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       453.626 ±      20.258  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.406 ±     766.141  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4066.001 ±    6907.330    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.339 ±       2.657  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         3.018 ±      23.565    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     15688.038 ±     937.988   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1177.800 ±      70.444  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    118142.208 ±      30.927    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1124.123 ±     696.701  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    112742.982 ±   69068.666    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.067 ±       0.104  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         6.703 ±      10.717    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        17.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     81232.846 ±    1545.523   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1605.072 ±      30.423  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     31096.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1608.884 ±     553.552  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     31171.394 ±   10793.728    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.100 ±       0.143  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.936 ±       2.777    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        24.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    127706.085 ±    4351.622   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1349.136 ±      45.215  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     16624.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1329.019 ±      45.769  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16377.617 ±     961.813    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.079 ±       0.200  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.977 ±       2.488    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        20.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    439683.338 ±   10139.066   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       487.283 ±      11.270  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       515.654 ±     657.246  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1847.025 ±    2373.898    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.385 ±       3.009  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.375 ±      10.721    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    527183.401 ±    3653.323   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    109467.807 ±    2767.631   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1565.448 ±      40.180  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     22504.005 ±       0.011    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1605.406 ±     575.293  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     23087.657 ±    8664.081    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.077 ±       1.741    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        24.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        21.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    149747.050 ±    4768.761   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2582.088 ±      82.147  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     27136.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2574.071 ±     734.356  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     27056.698 ±    7982.210    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.104 ±       0.150  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.093 ±       1.557    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        38.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    356323.286 ±   25662.689   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       364.104 ±      26.254  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       363.647 ±     637.736  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1605.124 ±    2783.494    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.452 ±       3.759  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         2.064 ±      17.182    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    892180.224 ±   40102.358   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       308.397 ±      13.898  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       286.589 ±     715.172  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       507.819 ±    1283.110    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.340 ±       2.670  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.597 ±       4.689    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     77098.054 ±    2676.289   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3307.436 ±     114.799  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67512.312 ±       2.636    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      3323.094 ±     575.833  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     67848.058 ±   13110.417    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.146 ±       0.098  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         2.973 ±       1.956    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        49.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        45.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    238662.707 ±    2173.774   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1828.436 ±      17.109  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12056.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1883.350 ±     708.316  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12418.373 ±    4681.160    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.104 ±       0.113  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.686 ±       0.743    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        28.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1239344.285 ±   16669.903   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       812.684 ±      10.887  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       788.432 ±     691.248  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1001.179 ±     877.009    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.085 ±       0.151    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1245915.346 ±   64673.511   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       513.028 ±      26.633  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       464.073 ±     698.786  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       586.580 ±     887.994    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.381 ±       2.971  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.476 ±       3.698    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1372553.270 ±   13024.135   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     33985.383 ±     279.349   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1719.675 ±      13.956  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     79633.830 ±      15.649    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1741.965 ±     584.991  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     80669.444 ±   27288.691    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.661 ±       7.117    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     18549.126 ±     589.017   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1946.830 ±      62.104  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    165168.298 ±      29.549    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1888.411 ±     719.794  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    160241.269 ±   62285.471    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.104 ±       0.170  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         8.840 ±      14.501    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        28.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     94646.108 ±    6254.707   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1242.243 ±      82.182  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     20656.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5      1259.160 ±     571.864  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     20963.322 ±   10315.765    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.108 ±       1.117    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        19.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    234228.841 ±    1304.238   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       762.050 ±       4.390  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       732.527 ±     571.304  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4922.499 ±    3863.977    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.335 ±       0.977    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     17087.735 ±     223.115   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2200.980 ±      28.863  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    202704.272 ±       2.103    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2221.098 ±     674.624  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    204600.097 ±   64574.177    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.100 ±       0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         9.208 ±       9.710    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        33.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        30.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     20678.854 ±     593.342   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1673.796 ±      47.306  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5    127370.898 ±      69.769    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1677.930 ±      47.131  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    127691.056 ±    5120.312    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.100 ±       0.143  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         7.593 ±      10.824    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     97200.115 ±    4417.172   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1331.670 ±      60.186  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1327.464 ±      47.725  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     21493.063 ±     745.219    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.011 ±       1.820    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        19.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    226132.743 ±    4672.135   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       720.754 ±      14.944  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       730.537 ±     570.018  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5083.187 ±    3937.549    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.200  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.549 ±       1.384    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    252253.676 ±    1121.125   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     25844.887 ±     372.967   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1762.305 ±      25.559  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5    107312.040 ±       0.133    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1810.129 ±     702.292  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    110222.460 ±   42656.584    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.160  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.076 ±       9.841    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        27.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     69094.201 ±    2647.637   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1553.554 ±      59.276  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     35384.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1538.433 ±     721.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     35064.268 ±   17274.155    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.071 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         1.615 ±       1.670    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        23.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        20.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     94414.893 ±    1841.623   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1176.372 ±      23.006  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     19608.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1186.708 ±     675.083  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     19785.947 ±   11417.593    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.832 ±       1.515    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    101437.996 ±    4269.072   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1219.056 ±      51.245  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     18912.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1201.164 ±     710.757  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     18623.425 ±   10669.499    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.772 ±       1.863    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     47630.325 ±    1487.734   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2268.656 ±      70.398  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     74944.009 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2219.608 ±     695.660  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     73337.480 ±   23673.854    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.146 ±       0.113  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.815 ±       3.752    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        33.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    116364.410 ±    7464.939   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1092.021 ±      70.062  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     14768.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1126.107 ±     691.123  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     15259.303 ±   10223.925    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.733 ±       0.970    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    339852.341 ±    9471.545   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       504.497 ±      14.024  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       507.533 ±     647.740  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      2353.537 ±    3045.158    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.546 ±       4.345  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.530 ±      20.127    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    630082.566 ±   38993.249   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       781.539 ±      48.131  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       795.153 ±     697.862  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1986.761 ±    1757.376    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.187 ±       0.303    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    706980.708 ±   77393.203   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    233640.675 ±   17868.651   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       763.744 ±      57.806  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5       787.792 ±     695.378  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      5324.507 ±    5073.604    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.452 ±       1.059    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5        11.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                    thrpt    5    132229.887 ±    2508.882   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1810.627 ±      33.857  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5     21544.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1815.383 ±     692.544  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     21595.816 ±    7985.340    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.104 ±       0.179  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.241 ±       2.155    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                          thrpt    5        27.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                           thrpt    5        23.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    189301.074 ±    5239.618   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1128.778 ±      31.176  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      9384.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1123.795 ±     697.065  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      9342.251 ±    5781.066    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.096 ±       0.122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.795 ±       0.994    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    320377.907 ±   16273.802   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       622.139 ±      31.640  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       598.633 ±     573.122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      2942.860 ±    2844.812    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.285 ±       0.850    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         8.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                 thrpt    5     68009.693 ±    1494.910   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      2826.304 ±      62.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     65400.006 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      2836.692 ±     738.559  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     65658.075 ±   18287.399    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.108 ±       0.132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.505 ±       3.052    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                       thrpt    5        42.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                        thrpt    5        40.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                   thrpt    5    165888.783 ±    4744.537   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1060.823 ±      30.081  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     10064.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1063.690 ±     561.967  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10090.133 ±    5274.637    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.631 ±       0.986    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                         thrpt    5        16.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                          thrpt    5        13.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    527156.314 ±   34152.662   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       519.885 ±      33.626  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5       509.092 ±     648.432  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1524.886 ±    2001.535    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.461 ±       3.616  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.383 ±      10.835    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5    991955.020 ±   42082.482   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       736.270 ±      30.876  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       796.610 ±     702.780  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      1263.487 ±    1107.769    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.092 ±       0.217  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.145 ±       0.342    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1134072.028 ±    8433.554   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                thrpt    5    349962.259 ±    4865.028   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5       955.327 ±      13.204  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5      4296.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5       919.129 ±     576.504  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4134.613 ±    2623.840    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.206 ±       0.593    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                      thrpt    5        14.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                       thrpt    5        17.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5       685.536 ±      11.923   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1431.395 ±      24.786  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5   3284912.727 ±       0.486    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1399.820 ±     574.738  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5   3213050.234 ± 1347842.758    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5       133.582 ±     300.768    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        19.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                          thrpt    5       666.764 ±      16.950   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1382.781 ±      34.476  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5   3263022.408 ±      48.936    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1390.294 ±     596.819  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5   3280033.100 ± 1370387.204    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.079 ±       0.143  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5       186.528 ±     338.465    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        21.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     29387.424 ±    2146.372   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       530.949 ±      38.713  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     28432.016 ±       0.010    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       514.029 ±     654.565  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     27618.088 ±   36151.168    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.465 ±       3.736  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        25.301 ±     203.746    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        10.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5       668.640 ±      15.771   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1431.538 ±      34.483  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5   3368476.132 ±      66.339    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1458.183 ±     715.864  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5   3429743.767 ± 1624006.982    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5       127.455 ±     286.272    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     13310.069 ±     689.329   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1072.084 ±      54.430  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5    126752.359 ±     125.536    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1058.435 ±     557.545  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    125089.257 ±   63321.922    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.146  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         8.348 ±      17.055    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                         thrpt    5     15284.621 ±     529.111   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       955.726 ±      33.013  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5     98400.031 ±       0.340    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       918.307 ±     551.339  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     94551.444 ±   56838.156    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.067 ±       0.104  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         6.863 ±      10.845    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                               thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                thrpt    5        13.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    277728.046 ±   20375.831   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       979.909 ±      72.068  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       929.650 ±     562.815  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      5275.249 ±    3362.454    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.519 ±       0.704    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    298308.354 ±    2717.712   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     14725.931 ±     364.856   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       975.745 ±      24.148  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5    104279.576 ±       3.926    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       987.455 ±      23.308  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    105533.040 ±    2647.930    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.050 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         5.343 ±       7.697    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    880986.554 ±   10598.137   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2871.136 ±      32.979  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5128.001 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2846.918 ±     692.308  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5084.829 ±    1241.167    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.125 ±       0.113  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.223 ±       0.201    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        42.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        34.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1652852.489 ±   37286.196   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1554.357 ±      35.036  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5      1529.954 ±     721.161  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1456.418 ±     672.397    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.083 ±       0.179  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.079 ±       0.170    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        23.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        22.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   7674556.797 ±  255672.299   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2301.973 ±      77.033  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5      2302.319 ±     592.702  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       472.136 ±     125.034    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.083 ±       0.170  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.017 ±       0.035    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        34.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        25.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    318673.636 ±    9652.936   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1945.606 ±      58.412  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9608.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5      1936.190 ±     533.536  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      9562.501 ±    2677.572    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.079 ±       0.183  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.392 ±       0.916    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        29.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        29.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1018138.573 ±   16178.766   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2344.644 ±      35.960  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3624.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2363.148 ±      61.303  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      3652.684 ±     130.069    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.087 ±       0.105  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.135 ±       0.163    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        35.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        29.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3293562.838 ±  105796.831   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      1908.798 ±      61.970  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1939.780 ±     575.192  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       926.774 ±     271.619    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.185  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.044 ±       0.087    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        29.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        26.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5   9344459.794 ±  566000.063   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       570.005 ±      34.535  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       597.408 ±     571.844  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       100.614 ±      96.294    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.398 ±       3.024  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.068 ±       0.519    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         9.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        10.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    424974.981 ±    9099.683   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1516.511 ±      32.369  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5616.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1526.688 ±     720.035  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      5655.966 ±    2749.059    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.079 ±       0.154  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.293 ±       0.574    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        23.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        22.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2123668.604 ±   48962.999   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1349.534 ±      31.548  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1000.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1389.365 ±     525.277  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1029.965 ±     412.597    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.096 ±       0.122  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.071 ±       0.091    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        21.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        19.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5210939.248 ±  117253.918   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       688.754 ±      15.584  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       732.344 ±     570.344  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       221.373 ±     178.386    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.062 ±       0.188  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.019 ±       0.057    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        11.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5         9.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    402603.541 ±    5684.701   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1827.943 ±      25.656  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7144.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1801.373 ±     683.147  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      7040.901 ±    2707.167    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.096 ±       0.072  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.374 ±       0.277    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        27.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        28.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2652989.164 ±   29929.513   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1402.594 ±      16.087  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1391.632 ±     550.854  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       825.507 ±     327.286    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.154  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.052 ±       0.091    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        20.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6320607.133 ±  182697.010   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       963.915 ±      27.973  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       998.332 ±      14.938  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       248.578 ±       6.739    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.036  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.020 ±       0.009    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        15.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        13.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    648603.893 ±   26388.787   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1918.988 ±      78.290  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4656.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1939.324 ±     574.816  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      4707.721 ±    1513.139    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.087 ±       0.164  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.212 ±       0.400    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        29.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        28.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    831657.575 ±   28431.273   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2760.853 ±      94.167  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5224.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2776.949 ±     572.025  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5256.355 ±    1237.207    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.146 ±       0.196  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.276 ±       0.379    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        41.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        35.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    977468.923 ±   45132.728   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1212.389 ±      56.053  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1188.031 ±     707.595  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1911.598 ±    1102.002    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.044  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.121 ±       0.076    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        17.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   7649197.461 ±  286618.957   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       349.929 ±      13.269  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       303.226 ±     166.829  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        62.326 ±      32.125    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.312 ±       2.540  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.064 ±       0.520    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         5.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    264938.098 ±    6022.211   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1371.114 ±      30.924  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8144.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1387.527 ±     615.904  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      8244.161 ±    3777.361    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.071 ±       0.091  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.420 ±       0.533    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        22.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      8093.327 ±     167.702   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2082.859 ±      43.066  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    405000.306 ±       2.156    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2086.965 ±     619.503  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    405835.460 ±  122645.359    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.228 ±       0.196  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        44.327 ±      37.689    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        31.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     13766.548 ±     170.045   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       371.106 ±       4.637  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     42424.035 ±       0.019    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       411.935 ±     623.776  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     47124.971 ±   71847.241    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.544 ±       4.507  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        61.983 ±     513.213    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     24196.865 ±     530.339   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       452.771 ±       9.897  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     29448.019 ±       0.011    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       449.381 ±     763.157  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     29243.618 ±   49798.344    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.390 ±       2.936  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        25.380 ±     190.934    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2351.659 ±      42.861   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1472.776 ±      26.546  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    985529.603 ±      12.164    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1463.164 ±     740.651  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    978746.732 ±  481764.517    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.021 ±       0.001  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        13.927 ±       0.249    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      8642.333 ±     203.573   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1989.504 ±      46.916  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    362277.782 ±      49.345    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      2016.591 ±      62.935  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    367233.461 ±   19298.633    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.136 ±       0.109  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        24.822 ±      19.731    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        30.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        26.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     43483.141 ±     522.627   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       630.178 ±       7.649  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.853 ±       0.220    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       648.951 ±       7.670  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     23487.332 ±     207.911    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.572 ±       4.608  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        20.780 ±     167.589    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     66204.161 ±    1143.674   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       498.808 ±       8.325  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11856.007 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       514.892 ±     656.175  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     12243.101 ±   15659.506    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.419 ±       3.164  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         9.973 ±      75.268    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     77787.028 ±     538.977   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.187 ±       0.008  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5966.253 ±     175.728   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1783.206 ±      52.051  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    470336.029 ±       2.680    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1735.938 ±     584.860  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    457796.424 ±  149021.214    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Old_Gen                                thrpt    5         0.039 ±       0.338  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm                           thrpt    5        10.422 ±      89.739    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.125 ±       0.170  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        32.959 ±      45.230    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        28.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        37.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5200885.768 ±  269411.914   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1560.071 ±      80.749  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1547.053 ±     719.372  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       468.412 ±     229.218    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.092 ±       0.108  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.028 ±       0.033    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        23.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        19.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    337314.925 ±   11851.520   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1814.227 ±      63.670  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8464.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1801.424 ±     662.285  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      8404.322 ±    3075.766    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.083 ±       0.188  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.389 ±       0.882    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        27.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        28.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3423794.199 ±  249334.649   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       557.049 ±      40.355  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       256.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       530.010 ±     698.612  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       244.399 ±     330.929    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.396 ±       3.098  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.182 ±       1.424    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    336603.866 ±    8137.248   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1319.303 ±      31.824  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6168.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1320.521 ±      53.093  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6173.866 ±     281.024    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.092 ±       0.146  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.428 ±       0.680    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        20.000                    ms
[info] IntBenchmark.readCirce                                                                   thrpt    5   6002142.698 ±  108752.242   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      3814.123 ±      69.163  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      1000.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      3807.553 ±     598.548  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5       998.170 ±     141.708    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.125 ±       0.113  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.033 ±       0.030    B/op
[info] IntBenchmark.readCirce:·gc.count                                                         thrpt    5        56.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                          thrpt    5        47.000                    ms
[info] IntBenchmark.readJacksonScala                                                            thrpt    5   8414714.898 ±  224981.113   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      3165.457 ±      83.967  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      3116.684 ±     602.537  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5       582.848 ±     108.130    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.137 ±       0.166  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.026 ±       0.032    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        46.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        37.000                    ms
[info] IntBenchmark.readJsoniterScala                                                           thrpt    5  47485932.437 ±  803722.776   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                              thrpt    5  16946337.983 ±  889196.673   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                               thrpt    5      1119.891 ±      58.750  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                      thrpt    5      1138.892 ±     698.367  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       105.832 ±      66.732    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.075 ±       0.072  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.007 ±       0.007    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                    thrpt    5        17.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                     thrpt    5        14.000                    ms
[info] IntBenchmark.readPlayJson                                                                thrpt    5   7518389.054 ±  234320.264   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      3631.107 ±     112.173  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      3598.977 ±     706.202  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5       753.495 ±     165.505    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.121 ±       0.088  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.025 ±       0.018    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                      thrpt    5        53.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                       thrpt    5        43.000                    ms
[info] IntBenchmark.writeCirce                                                                  thrpt    5  11500751.602 ±  292756.363   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      2280.018 ±      58.075  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       312.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2295.861 ±     562.553  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5       314.139 ±      74.528    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.092 ±       0.134  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.013 ±       0.018    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                         thrpt    5        26.000                    ms
[info] IntBenchmark.writeJacksonScala                                                           thrpt    5  11104682.275 ±  178673.660   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      2709.754 ±      42.986  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       384.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5      2701.209 ±      83.216  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       382.797 ±      14.368    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.096 ±       0.108  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.014 ±       0.015    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        40.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        33.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                          thrpt    5  34162875.338 ± 1146010.365   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       694.750 ±      22.972  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       664.194 ±       3.393  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        30.595 ±       1.091    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.054 ±       0.185  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.002 ±       0.008    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        10.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5         9.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5  58799043.328 ±  127521.289   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                             thrpt    5  13246072.781 ±  250181.696   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                              thrpt    5      2222.144 ±      41.743  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                         thrpt    5       264.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                     thrpt    5      2236.582 ±     712.570  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                thrpt    5       265.804 ±      89.397    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.092 ±       0.044  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.011 ±       0.005    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                   thrpt    5        33.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                    thrpt    5        24.000                    ms
[info] IntBenchmark.writePlayJson                                                               thrpt    5   2234104.559 ±   64549.573   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1930.660 ±      55.660  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      1360.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1884.491 ±     699.532  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      1327.604 ±     497.004    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.071 ±       0.122  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.050 ±       0.087    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                     thrpt    5        28.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                      thrpt    5        23.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    656218.688 ±    6063.581   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2391.798 ±      22.164  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5736.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2433.768 ±     569.549  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      5836.969 ±    1391.278    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.108 ±       0.174  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.260 ±       0.417    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        36.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        29.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    630419.262 ±   18174.721   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       733.902 ±      20.940  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5       779.937 ±     682.544  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1949.317 ±    1757.157    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.604 ±       4.664  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.516 ±      11.717    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        12.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        14.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3676215.569 ±   94570.005   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1457.590 ±      37.591  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5      1476.984 ±     699.258  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       632.465 ±     305.450    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.176  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.032 ±       0.076    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        22.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        19.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    236418.217 ±    4493.634   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1645.365 ±      31.836  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1661.326 ±      75.208  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5     11058.169 ±     416.628    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.075 ±       0.072  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.499 ±       0.473    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        26.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    896365.692 ±   21399.233   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2159.957 ±      51.341  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3792.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2157.853 ±     693.105  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      3787.640 ±    1172.766    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.108 ±       0.132  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.190 ±       0.229    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        32.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        25.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1561493.008 ±   28131.973   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1024.013 ±      18.675  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1032.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       982.658 ±      29.652  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       990.333 ±      30.213    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.088  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.080 ±       0.089    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        15.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        15.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   7006901.785 ±  504644.149   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       783.666 ±      56.213  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       730.246 ±     571.835  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       164.125 ±     131.136    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.209  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.016 ±       0.047    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        11.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5         8.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    476751.186 ±   17960.173   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1669.861 ±      63.262  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5512.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1664.101 ±      72.654  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5493.686 ±     396.089    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.075 ±       0.185  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.248 ±       0.616    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        25.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        25.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    641783.633 ±    6917.299   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2286.978 ±      24.749  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5608.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2296.360 ±     563.397  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5630.371 ±    1335.332    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.096 ±       0.146  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.235 ±       0.357    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        28.000                    ms
[info] MapsBenchmark.readJacksonScala                                                           thrpt    5    642199.171 ±   25867.271   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                            thrpt    5       972.940 ±      39.115  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      2384.001 ±       0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5       979.622 ±      25.151  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2400.651 ±     139.029    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.079 ±       0.105  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.194 ±       0.256    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                 thrpt    5        15.000                counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                  thrpt    5        15.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   4446300.965 ±  269659.280   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1107.554 ±      66.960  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5      1069.722 ±     575.738  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5       378.844 ±     211.244    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.062 ±       0.098  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.022 ±       0.035    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        16.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        13.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    364787.395 ±    6592.017   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1896.975 ±      34.419  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8184.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1871.165 ±     733.130  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      8070.344 ±    3053.746    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.092 ±       0.122  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.395 ±       0.517    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        28.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        28.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    464161.129 ±    8608.930   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1269.479 ±      24.052  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4304.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      1266.438 ±     585.498  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4295.670 ±    2049.330    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.075 ±       0.044  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.254 ±       0.146    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        19.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        16.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3388346.735 ±  175179.884   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       654.592 ±      34.005  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       304.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5       663.365 ±       4.046  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       308.119 ±      15.936    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.050 ±       0.231  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.023 ±       0.106    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5        10.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5         8.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    328819.983 ±    3718.818   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1196.845 ±      13.534  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5728.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5      1252.045 ±     570.937  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5992.555 ±    2744.078    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.071 ±       0.108  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.339 ±       0.515    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        19.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        20.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   1937237.322 ±   44044.295   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3131.891 ±      70.985  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2544.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      3119.650 ±     592.107  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      2534.190 ±     490.085    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.108 ±       0.132  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.088 ±       0.106    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        46.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        38.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    307194.622 ±   11360.483   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       723.010 ±      26.717  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      3704.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       718.303 ±     561.181  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      3678.339 ±    2822.120    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.494 ±       3.939  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.510 ±      20.004    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    714245.755 ±   60764.267   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       639.049 ±      54.446  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1408.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       602.112 ±     576.186  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1323.390 ±    1225.406    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.037 ±       0.143  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.081 ±       0.311    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   3932679.125 ±   57659.194   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      2299.167 ±      33.937  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       920.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5      2304.150 ±     592.823  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5       922.140 ±     246.338    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5         0.104 ±       0.139  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.042 ±       0.055    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        34.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        25.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   7847488.012 ±  403342.760   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       837.793 ±      42.871  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       168.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5       870.828 ±     707.620  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5       174.831 ±     145.900    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5         0.079 ±       0.143  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5         0.016 ±       0.029    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5        13.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    192277.110 ±    8052.332   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1602.061 ±      66.589  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     13112.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1590.832 ±     550.279  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     13017.951 ±    4386.837    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.083 ±       0.113  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.680 ±       0.906    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        24.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        26.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    739503.719 ±   23369.294   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2849.825 ±      89.210  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6064.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2847.466 ±     731.066  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      6059.132 ±    1554.084    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.121 ±       0.154  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.257 ±       0.331    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        42.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        33.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   3555834.263 ±   90378.635   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      2295.551 ±      58.636  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      2300.515 ±     617.264  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1018.278 ±     277.240    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.083 ±       0.170  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.037 ±       0.076    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        34.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        28.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    265098.782 ±    1554.245   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1893.444 ±      10.783  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11240.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1868.774 ±     688.663  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     11094.164 ±    4117.998    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.100 ±       0.067  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.593 ±       0.398    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        28.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    840188.092 ±   18217.787   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1930.468 ±      41.817  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3616.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1884.225 ±     728.733  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      3528.673 ±    1330.334    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.100 ±       0.174  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.187 ±       0.324    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1615823.677 ±   34490.785   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       928.226 ±      19.706  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       914.685 ±     565.355  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       890.398 ±     540.655    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.067 ±       0.132  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.065 ±       0.128    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        14.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        14.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   4212649.650 ±  317742.069   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       321.287 ±      23.837  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       352.164 ±     364.411  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       132.037 ±     147.720    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.379 ±       3.154  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.141 ±       1.171    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    477170.570 ±   15171.271   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1651.955 ±      52.542  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5448.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1663.776 ±      71.797  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5487.500 ±     362.478    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.083 ±       0.139  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.275 ±       0.460    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        26.000                    ms
[info] MutableMapsBenchmark.readJacksonScala                                                    thrpt    5    592922.130 ±   46156.065   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       985.727 ±      77.103  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2616.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       979.652 ±      25.566  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2600.622 ±     187.152    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.058 ±       0.132  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.154 ±       0.348    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                          thrpt    5        15.000                counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        15.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3242393.421 ±  144237.582   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1532.860 ±      68.453  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5      1479.489 ±     711.253  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       718.152 ±     345.916    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.058 ±       0.067  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.028 ±       0.033    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        22.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        17.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    302699.189 ±    9135.565   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1594.488 ±      48.505  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8288.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1594.463 ±     534.885  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8291.292 ±    2933.847    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.143  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.411 ±       0.740    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        27.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    494650.937 ±   20081.590   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1322.705 ±      54.038  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4208.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1334.056 ±      36.556  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4244.429 ±     182.367    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.067 ±       0.154  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.212 ±       0.495    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        17.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   2961154.120 ±  116007.193   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       556.954 ±      21.881  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.143 ±     698.508  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       281.684 ±     370.280    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.381 ±       3.061  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.202 ±       1.618    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    347051.398 ±   13815.819   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1342.680 ±      52.616  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6088.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1387.505 ±     547.655  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      6295.755 ±    2703.731    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.067 ±       0.143  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.303 ±       0.664    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        21.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        23.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    672399.707 ±   25283.423   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1989.639 ±      74.767  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4656.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2019.207 ±      57.234  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4725.583 ±     234.727    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.092 ±       0.146  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.215 ±       0.342    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        30.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        25.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1448647.314 ±   35083.214   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1097.295 ±      26.351  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1119.467 ±     704.684  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1216.075 ±     764.619    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.071 ±       0.072  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.077 ±       0.077    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   5474268.974 ±  108855.389   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       166.969 ±       3.311  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       153.487 ±     539.527  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        44.124 ±     155.101    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.012 ±       0.108  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.004 ±       0.031    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         5.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    225483.823 ±    5941.328   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1588.758 ±      42.099  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     11088.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1591.804 ±     533.742  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     11104.908 ±    3492.028    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.079 ±       0.154  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.552 ±       1.069    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        24.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    939633.182 ±   20302.743   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1652.673 ±      35.637  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2768.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1675.048 ±      49.415  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2805.460 ±      40.318    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.083 ±       0.098  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.139 ±       0.164    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        25.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2468463.161 ±   82152.536   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1091.817 ±      36.290  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5      1053.261 ±     566.430  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       671.480 ±     362.511    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.067  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.042 ±       0.043    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        15.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   6569418.409 ±  219574.264   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       534.360 ±      17.647  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       515.792 ±     657.795  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       123.715 ±     159.613    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.379 ±       2.956  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.091 ±       0.711    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6365136.623 ±  460845.699   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       388.308 ±      28.208  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5       367.896 ±     654.690  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5        90.685 ±     158.474    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5         0.376 ±       3.106  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.092 ±       0.761    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    312386.514 ±    8382.013   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1607.154 ±      43.112  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8096.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1594.644 ±     619.738  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8036.462 ±    3254.417    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.156  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.378 ±       0.801    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        24.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   3347386.600 ±  181425.647   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3046.257 ±     164.134  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1432.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      3053.719 ±      49.278  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1435.708 ±      72.371    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.117 ±       0.122  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.055 ±       0.061    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        45.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        39.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   3995565.518 ±  136915.753   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2396.647 ±      82.076  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       944.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      2358.345 ±      76.714  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       928.953 ±      35.320    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.092 ±       0.176  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.036 ±       0.069    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        35.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   7560701.651 ±  234853.087   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1421.989 ±      44.164  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       296.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1413.819 ±     561.495  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       294.277 ±     115.182    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.058 ±       0.143  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.012 ±       0.030    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                 thrpt    5   5001018.114 ±  210932.924   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      3101.488 ±     130.774  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      3117.760 ±     576.456  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5       981.207 ±     184.801    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.104 ±       0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.033 ±       0.035    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                       thrpt    5        46.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                        thrpt    5        37.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2664935.894 ±   61508.717   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1652.707 ±      38.272  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1677.320 ±      49.329  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5       990.539 ±      21.713    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.119  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.052 ±       0.070    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   4829901.585 ±  114377.041   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1276.759 ±      30.456  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       416.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1325.586 ±      45.157  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       431.912 ±      12.561    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.079 ±       0.183  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.026 ±       0.060    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        20.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   9044534.976 ±  328665.729   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       873.632 ±      31.833  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       864.754 ±     698.774  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5       150.540 ±     123.252    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.083 ±       0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.014 ±       0.020    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        11.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   7433835.027 ±   70726.725   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   5062360.185 ±   82903.441   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1621.218 ±      26.576  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1676.910 ±      48.289  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5       521.327 ±      20.134    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.087 ±       0.143  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.027 ±       0.045    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5   1385054.444 ±   36197.550   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1886.892 ±      49.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2144.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1886.008 ±     685.422  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5      2143.428 ±     798.438    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.087 ±       0.191  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.099 ±       0.219    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        28.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1090173.277 ±   31411.631   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       653.971 ±      18.716  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5       944.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5       655.411 ±       5.343  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5       946.126 ±      31.319    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.475 ±       3.601  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.685 ±       5.190    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        10.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1836417.596 ±    6596.064   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       345.423 ±       1.382  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       296.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       303.253 ±     166.858  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       259.840 ±     142.199    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.309 ±       2.479  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.264 ±       2.125    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                              thrpt    5   1141895.382 ±   46735.880   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5       708.169 ±      28.909  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5       976.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5       658.094 ±       6.117  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5       907.064 ±      36.005    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.037 ±       0.164  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.052 ±       0.225    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                    thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                     thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1266674.526 ±    7136.212   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       959.387 ±       5.438  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1192.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5       929.539 ±     578.698  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1155.028 ±     721.661    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.050 ±       0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.062 ±       0.151    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2315780.738 ±  109406.231   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       930.173 ±      43.843  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       632.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       921.898 ±     569.432  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       626.661 ±     392.770    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.058 ±       0.105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.040 ±       0.071    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2485260.951 ±   81271.416   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       581.176 ±      18.979  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       597.467 ±     571.885  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5       378.497 ±     364.424    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.408 ±       3.027  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.257 ±       1.905    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2652581.964 ±   22685.786   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2427976.109 ±   69219.397   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1110.876 ±      31.524  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1132.289 ±     709.708  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5       733.516 ±     447.926    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.062 ±       0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.040 ±       0.051    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        15.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     11946.782 ±     184.184   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1685.404 ±      24.978  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    221985.462 ±      80.137    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      1672.722 ±      54.496  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    220318.766 ±    8425.633    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.133 ±       0.091  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        17.553 ±      12.110    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        22.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15017.589 ±     215.182   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       237.542 ±       3.440  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     24890.273 ±      29.349    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       204.664 ±     440.556  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5     21457.217 ±   46189.686    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.015 ±       0.087  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         1.531 ±       9.183    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     37660.078 ±    1139.790   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       402.430 ±      12.235  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     16816.018 ±       0.058    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       419.048 ±     639.000  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     17491.114 ±   26487.626    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.356 ±       2.855  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        14.803 ±     118.646    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3391.951 ±     173.196   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1094.335 ±      55.594  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    507694.470 ±      54.577    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1126.245 ±     685.796  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5    523282.031 ±  341333.281    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.046 ±       0.230  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        21.176 ±     105.457    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        26.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     56390.789 ±    2343.933   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       720.290 ±      29.627  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20100.016 ±       0.140    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       777.602 ±     686.490  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     21717.103 ±   19550.818    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.644 ±       5.097  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        17.814 ±     140.843    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        12.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        15.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     79385.617 ±    4099.235   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       518.995 ±      26.863  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10288.006 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       514.849 ±     656.089  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10196.315 ±   12853.855    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.404 ±       3.216  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         8.053 ±      64.083    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     86734.017 ±     355.354   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5         3.969 ±       0.018  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        72.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk8.json
[success] Total time: 4264 s, completed Mar 13, 2018 10:12:42 PM
